// Corpses
class KCDeadMarine : DeadMarine replaces DeadMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY N 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY N 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY N 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY N 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY N 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY N 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY N 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY N 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY N 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY N 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY N 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY N 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY N 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY N 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY N 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropIncinerator:
			PLAY N 0 A_SpawnItemEx("Incinerator");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY N 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropCalamityBlade:
			PLAY N 0 A_SpawnItemEx("CalamityBlade");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY N 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY N 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY N 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop2:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop3:
			PLAY N 0 A_SpawnItemEx("BlueArmor");
			goto Idle;
		ItemDrop4:
			PLAY N 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Idle;
		ItemDrop5:
			PLAY N 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Idle;
		ItemDrop6:
			PLAY N 0 A_Jump(64, "DropCalamityBlade", "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY N 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropIncinerator", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY N 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY N 0;
			goto Idle;
		Spawn:
			PLAY N 0;
			PLAY N 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,65536) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY N 0 A_Jump(32, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY N -1;
			Stop;
	}
}
class KCGibbedMarine : GibbedMarine replaces GibbedMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY W 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY W 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY W 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY W 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY W 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY W 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY W 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY W 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY W 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY W 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY W 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY W 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY W 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY W 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY W 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropIncinerator:
			PLAY W 0 A_SpawnItemEx("Incinerator");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY W 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropCalamityBlade:
			PLAY W 0 A_SpawnItemEx("CalamityBlade");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY W 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY W 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY W 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop2:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop3:
			PLAY W 0 A_SpawnItemEx("BlueArmor");
			goto Spawn+3;
		ItemDrop4:
			PLAY W 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Spawn+3;
		ItemDrop5:
			PLAY W 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Spawn+3;
		ItemDrop6:
			PLAY W 0 A_Jump(64, "DropBHGen", "DropCalamityBlade", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY W 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropIncinerator", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY W 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY W 0;
			goto Spawn+3;
		Spawn:
			PLAY W 0;
			PLAY W 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,262144) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY W 0 A_Jump(8, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY W -1;
			Stop;
	}
}
class KCHelperDog : KCCreature // replaces MBFHelperDog
{
	default
	{
		Tag "Attack Dog";
		Health 375; // 500
		Speed 15; // 10
		Radius 12;
		Height 28;
		Mass 100; // 100
		PainChance 120; // 180
		Painchance "Fist", 180; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+JUMPDOWN;
		ActiveSound "dog/active";
		AttackSound "dog/attack";
		DeathSound "dog/death";
		PainSound "dog/pain";
		SeeSound "dog/sight";
		Obituary "$OB_DOG"; // "%o was mauled by a dog."
	}

	States
	{
		Spawn:
			DOGS A 0 NoDelay;
			DOGS AABB 5 A_Look();
			goto Spawn+1;
		See:
			DOGS A 0;
			DOGS AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			DOGS A 0;
			DOGS EF 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DOGS G 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack((random(1,10)*randompick(4,4,4,4,6,6,8)),"none","none","Melee",true); // A_SargAttack
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DOGS H 2;
			DOGS H 2 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HH 2;
			Goto See;
		Pain.Kick: 
			#### # 0 A_TimeFreezeCheckPain();
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HHHH 2; 
			Goto See; 

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DOGS I 8;
			DOGS J 8 A_Scream();
			DOGS K 4;
			DOGS L 4 A_Fall();
			DOGS M 4;
			DOGS N -1;
			stop;
		Ice:
			DOGS H 5 A_GenericFreezeDeath();
			DOGS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DOGS N 5;
			DOGS MLKJI 5;
			Goto See;
	}
}

// Doom
class ZombiemanNew : KCCreature
{
	default
	{
		Tag "Zombieman";
		Health 20;
		Radius 20;
		Height 56;
		Speed 8;
		Painchance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "$OB_ZOMBIE";
		DropItem "Clip";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Clip",1,256);
	}
	
	void A_PosAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			ang += Random2[PosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			A_StartSound(AttackSound, CHAN_WEAPON);
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			POSS AB 10 A_Look();
			Loop;
		See:
			POSS A 0
			{
				user_shotsfired = 0;
			}
			POSS AABBCCDD 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			POSS E 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self)); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(20,true,self)); }
				}

				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		Missile1:
			POSS F 8 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				
				A_PosAttack();
			}
			goto Missile1Post;
		Missile1Post:
			POSS E 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				user_shotsfired += 1;
				A_FaceTarget();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self)); }
				}
				else 
				{
					user_shotsfiredmax = 1;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(20,true,self)); }
				}
	
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			POSS G 3;
			POSS G 3 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			POSS H 5;
			POSS I 5 A_Scream();
			POSS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS K 5;
			POSS L -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			POSS M 5;
			POSS N 5 A_XScream();
			POSS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS PQRST 5;
			POSS U -1;
			Stop;
		Raise:
			POSS K 5;
			POSS JIH 5;
			Goto See;
	}
}
// Plasma Specialist
class PlasmaGuy : KCCreature
{
	int PlasmaBurstLevel;
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Zombieman Type";
		Tag "Plasma Dude";

		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		MONSTER;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got burned by a plasma-rifle zombie.";
		MissileType "PlasmaBallMonster";

		DamageFactor "Crush", 1.0;
		Painchance 100;
		DamageFactor "Fire", 1.333;
		Painchance "Fire", 133;
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 111;

		+AVOIDMELEE;
		+DOHARMSPECIES;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("PlasmaRifle",1,256);
		A_DropItem("Cell",1,64);
		A_DropItem("Cell",1,16);
	}
	
	States
	{
		Spawn:
			ZMAY A 0 NoDelay;
			ZMAY AB 10 A_Look();
			goto Spawn+1;
		See:
			ZMAY A 0
			{
				user_shotsfired = 0;
			}
			ZMAY AABBCCDD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			ZMAY E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				user_shotsfiredmax = random(random(2,3),5);
				if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(40,true,self)),(CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self))); }
				
				user_shotsfired = 0;
				user_attacktype = 0;
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(90,2,true,self)) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (A_CheckMonsterLevel(random(67,68),2,true,self)) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (A_CheckMonsterLevel(45,2,true,self)) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (A_CheckMonsterLevel(random(22,23),2,true,self)) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				A_FaceTarget();
			}
		Missile1:
			#### # 0 A_TimeFreezeCheckMissile();
			ZMAY F 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_DynamicMusic();
				
				if (user_attacktype == 0) 
				{ 
					A_SpawnProjectile("PlasmaBallMonster",32.0,0.0,0.0); 
					user_shotsfired += 1;
				}
				if (user_attacktype == 1) 
				{ 
					for (PlasmaBurstLevel = 0; PlasmaBurstLevel < random(random(1,2),random(2,3)); PlasmaBurstLevel++)
					{
						A_SpawnProjectile("PlasmaBallMonster",32.0,0.0,(0.5*random(-30,30)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-30,30))); 
					}
					user_shotsfired += 1;
				}
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				user_shotsfiredmax = random(random(2,3),5);
				if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(40,true,self)),(CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self))); }

				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ZMAY G 3;
			ZMAY G 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			ZMAY H 5;
			ZMAY I 5 A_Scream();
			ZMAY J 5 
			{
				A_Fall();
				A_Drop();
			}
			ZMAY K 5;
			ZMAY L -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			ZMAY O 5;
			ZMAY P 5 A_XScream();
			ZMAY Q 5 
			{
				A_Fall();
				A_Drop();
			}
			ZMAY RSTU 5;
			ZMAY V -1;
			Stop;
		Ice:
			ZMAY G 5 A_GenericFreezeDeath();
			ZMAY G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ZMAY K 5;
			ZMAY JIH 5;
			Goto See;
	}
}
// Rocket Commando
class RocketLauncherGuy : KCCreature
{ 
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Zombieman Type";
		Tag "Rocketeer Zombie";

		health 80;
		radius 20;
		height 56;
		Mass 100;
		speed 8;

		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance [maxed out in this case]
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 189;

		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		+DOHARMSPECIES;
		seesound "shotguy/sight";
		attacksound "shotguy/attack";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		activesound "shotguy/active";
		obituary "%o was 'sploded by a rocket-launcher guy.";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("RocketLauncher",1,256);
		A_DropItem("RocketAmmo",1,256);
		A_DropItem("RocketAmmo",1,64);
		A_DropItem("RocketAmmo",1,16);
	}

	States 
	{
		Spawn:
			MPO2 A 0 NoDelay;
			MPO2 AB 10 A_Look();
			goto Spawn+1;
		See:
			MPO2 A 0
			{
				user_shotsfired = 0;
			}
			MPO2 AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			MPO2 E 10 
			{
				user_ammotype = random(1,2);

				user_shotsfired = 0;
				user_attacktype = 0;
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(90,2,true,self)) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (A_CheckMonsterLevel(random(67,68),2,true,self)) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (A_CheckMonsterLevel(45,2,true,self)) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (A_CheckMonsterLevel(random(22,23),2,true,self)) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(12.5,true,self)); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(1,3); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(25,true,self)); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(1,3); }
				}

				if (user_attacktype == 1)
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				}
				A_FaceTarget();
			}
		Missile1:
			#### # 0 A_TimeFreezeCheckMissile();
			MPO2 F 10 bright
			{
				if (user_attacktype == 1)
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				}
				A_FaceTarget();
				A_DynamicMusic();
				
				if (user_ammotype == 2) 
				{
					if (user_attacktype == 1) 
					{ 
						A_SpawnProjectile("STGrenadeMonster",32.0,0.0,(0.5*random(-30,30)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-30,30))); 
					}
					else
					{
						A_SpawnProjectile("STGrenadeMonster",32.0,0.0,0.0,CMF_OFFSETPITCH|CMF_BADPITCH,-9.4921875); 
					}
				}
				else
				{
					if (user_attacktype == 1) 
					{ 
						A_SpawnProjectile("RocketMonster",32.0,0.0,(0.5*random(-15,15)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-15,15))); 
					}
					else
					{
						A_SpawnProjectile("RocketMonster"); 
					}
				}
	
				user_shotsfired += 1;
			}
			MPO2 E 10 
			{
				if (user_attacktype == 1)
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				}
	
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(12.5,true,self)); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(25,true,self)); }
				}
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MPO2 G 3;
			MPO2 G 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MPO2 H 5;
			MPO2 I 5 A_Scream();
			MPO2 J 5;
			MPO2 K 5
			{
				A_Fall();
				A_Drop();
			}
			MPO2 L -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			MPO2 M 5;
			MPO2 N 5 A_XScream();
			MPO2 O 5;
			MPO2 P 5
			{
				A_Fall();
				A_Drop();
			}
			MPO2 QRST 5;
			MPO2 U -1;
			Stop;
		Raise: 
			MPO2 K 5;
			MPO2 JIH 5;
			Goto See;
	}
}
class PlasmaBallMonster : KCProjectile
{
	default
	{
		Tag "Plasma Ball";
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "%o was melted by %k's plasma gun.";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			PLSS AB 6 Bright;
			Loop;
		Death:
			PLSE AAAABBBBCCCCDDDDEEEE 1 Bright
			{
				user_projtimer++;
				if (user_projtimer > 1)
				{
					bDONTTHRUST = false;
					bPAINLESS = true;
				}

				if ((user_projtimer % 4) == 0) 
				{ 
					if (random(1,16) <= 2) { bFORCERADIUSDMG = true; }
					A_Explode(5,16,0,0,8);
				}
			}
			Stop;
	}
}
// Repeater Steam
class RepeaterPuff : KCProjectile
{
	default
	{
		Tag "Plasma Repeater";
		Radius 3;
		Height 3;
		RenderStyle "Add";
		Alpha 0.75;
		+ALWAYSPUFF;
		+PUFFONACTORS;
		+NOGRAVITY;
		+NOBLOCKMAP
		+PUFFGETSOWNER;
		+FORCERADIUSDMG;
		+BLOODLESSIMPACT;
		-BLOODSPLATTER;
		DamageType "Plasma";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			RPUF A 1 Bright;
			RPUF A 0 Bright A_StartSound("Weapons/RepeaterHit");
			RPUF A 2 Bright A_Explode(14, 44, 0, 0, 22);
			RPUF BCDEFG 3 Bright;
			Stop;
	}
}

class ZombieRepeaterTracer : KCBulletTracer
{
	default
	{
		Tag "Plasma Repeater";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 2;
		Height 2;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		-BLOODSPLATTER;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 1.0;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		KCFastProjectile.PostBeginPlay();
		A_ScaleVelocity(kc_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (6 * random(2,6));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("ZombieRepeaterTracerTrail",6,-2.5);
			loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("RepeaterPuff");
			stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("RepeaterPuff");
			stop;
	}
}

class ZombieRepeaterTracerTrail : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 1;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			stop;
	}
}
class RepeaterZombieFiring : Inventory { default { Inventory.MaxAmount 1; } }
class RepeaterZombieHeat : Inventory { default { Inventory.MaxAmount 100; } }
class RepeaterZombieSteam : KCBaseZSC
{
	default
	{
		Height 1;
		Radius 1;
		Speed 4;
		+Missile;
		+NoGravity;
		+NoBlockMap;
		+BloodlessImpact;
		-BloodSplatter;
		RenderStyle "Add";
		scale 0.3;
		Alpha 0.65;
	}
	
	States
	{
		Spawn:
			STEM A 1 A_SetTranslucent(0.6, 1);
			STEM B 2 A_SetTranslucent(0.55, 1);
			STEM C 1 A_SetTranslucent(0.5, 1);
			STEM D 2 A_SetTranslucent(0.45, 1);
			STEM E 1 A_SetTranslucent(0.4, 1);
			STEM F 2 A_SetTranslucent(0.35, 1);
			STEM G 1 A_SetTranslucent(0.3, 1);
			STEM H 2 A_SetTranslucent(0.25, 1);
			STEM I 1 A_SetTranslucent(0.2, 1);
			STEM J 2 A_SetTranslucent(0.15, 1);
			STEM K 1 A_SetTranslucent(0.1, 1);
			STEM L 2 A_SetTranslucent(0.05, 1);
			Stop;
	}
}
// Repeater Ranger
class RepeaterZombie : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Zombieman Type"
		Tag "Repeater Guy";
		Health 100;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		Monster;
		+AVOIDMELEE;
		+DOHARMSPECIES;
		+FLOORCLIP;
		SeeSound "Grunt/Sight";
		PainSound "Grunt/Pain";
		DeathSound "Grunt/Death";
		ActiveSound "Grunt/Active";
		Obituary "%o was vapourized by a Repeater Zombie";
		Decal "MummyScorch";
		DamageFactor "Crush", 1.0; // 8.0
		PainChance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 128; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 111;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Cell",1,256);
		A_DropItem("Cell",1,64);
		A_DropItem("Cell",1,16);
	}
	
	States 
	{
		Spawn:
			RPZM A 0 A_JumpIfInventory("RepeaterZombieFiring", 1, "SpinDown");
			RPZM AAAAAAAAAABBBBBBBBBB 1 A_Look();
			loop;
		See:
			RPZM A 0;
			RPZM A 0 A_JumpIfInventory("RepeaterZombieFiring", 1, "SpinDown");
			RPZM AABBCCDD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				A_GiveInventory("RepeaterZombieFiring", 1);
				A_StartSound("Weapons/RepeaterSpinUp",CHAN_7);
			}
			RPZM EEFFEFEF 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
		MissileLoop:
			RPZM G 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
	
				A_GiveInventory("RepeaterZombieHeat", 1);
				A_FaceTarget();
				A_DynamicMusic();
				A_StartSound("Weapons/RepeaterFire");
				
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(20, 16, 2, random(1,3)*6, "RepeaterPuff", 0, 1);
				}
				else
				{
					A_SpawnProjectile("ZombieRepeaterTracer", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
					A_SpawnProjectile("ZombieRepeaterTracer", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
				}
			}
			RPZM G 0 A_JumpIfInventory("RepeaterZombieHeat", 100, "Overload");
			RPZM H 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
				A_DynamicMusic();
	
				A_StartSound("Weapons/RepeaterFire");
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(20, 16, 2, random(1,3)*6, "RepeaterPuff", 0, 1);
				}
				else
				{
					A_SpawnProjectile("ZombieRepeaterTracer", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
					A_SpawnProjectile("ZombieRepeaterTracer", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
				}
				A_GiveInventory("RepeaterZombieHeat", 1);
			}
			RPZM E 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
			}
			RPZM E 0 A_Jump(220, 2);
			RPZM E 0 A_SpidRefire();
			RPZM E 0 A_JumpIfInventory("RepeaterZombieHeat", 100, "Overload");
			loop;

		SpinDown:
			RPZM E 0 A_StartSound("Weapons/RepeaterSpinDown",CHAN_7);
			RPZM E 0 A_TakeInventory("RepeaterZombieFiring", 1);
			RPZM E 0 A_TakeInventory("RepeaterZombieHeat", 100);
			RPZM EFEFEEFF 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		Overload:
			RPZM E 0 A_StartSound("Weapons/RepeaterSpinDown",CHAN_7);
			RPZM E 0 A_StartSound("RepeaterZombie/Steam",CHAN_WEAPON);
			RPZM E 0 A_TakeInventory("RepeaterZombieFiring", 1);
			RPZM E 0 A_TakeInventory("RepeaterZombieHeat", 100);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			RPZM I 0
			{
				A_StopSound(CHAN_7);;
				if (CountInv("RepeaterZombieFiring") > 0) { A_StartSound("Weapons/RepeaterSpinDown",CHAN_7); }
				A_TakeInventory("RepeaterZombieFiring", 1);
				A_TakeInventory("RepeaterZombieHeat", 100);
			}
			RPZM I 3;
			RPZM I 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			RPZM I 4 A_StopSound(CHAN_7);
			RPZM J 5;
			RPZM K 5 A_Scream();
			RPZM L 5 
			{
				A_Fall();
				A_Drop();
			}
			RPZM M 5;
			RPZM N -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			RPZM O 5 A_StopSound(CHAN_7);
			RPZM P 5 A_XScream();
			RPZM Q 5;
			RPZM R 5 
			{
				A_Fall();
				A_Drop();
			}
			RPZM STUV 5;
			RPZM W -1;
			Stop;
		Raise: 
			RPZM N 5;
			RPZM MLKJI 5;
			Goto See;
	}
}
class KsawBolt : KCProjectile
{
	default
	{
		Tag "'sawa Bolt";
		Projectile;
		+RIPPER;
		+BLOODSPLATTER;
		+STRIFEDAMAGE;
		BounceType "Hexen";
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+BOUNCEONACTORS;
		+CANBOUNCEWATER;
		+SKYEXPLODE;
		BounceType "Hexen";
		BounceFactor 0.975;
		WallBounceFactor 0.975;
		Radius 6;
		Height 4;
		Speed 16; // 80
		Damage 15;
		Alpha 1.0;
		XScale 1.5;
		YScale 0.4;
		RenderStyle "Add";
		Reactiontime 280;
		BounceSound "Weapons/KarasawaBounce";
		SeeSound "";
		DeathSound "Weapons/KarasawaHit";
		DamageType "Plasma";
	}
	
	States
	{
		Spawn:
			KWBB A 0 Bright A_StartSound("KsawBoltFly");
			KWBB ABCD 1 Bright 
			{
				A_SpawnItemEx("BoltBlur", 0, 0, 0, 1, 0, 0, 180, 128);
				A_CountDown();
			}
			KWBB A 0 Bright;
			goto Spawn+1;
		Death:
			KWBD ABCDEF 2 Bright;
			Stop;
	}
}
class BoltBlur : KCProjectile
{
	default
	{
		Height 2;
		Radius 6;
		Damage 0;
		Speed 0.2;
		RenderStyle "Add";
		Alpha 0.9;
		XScale 1.3;
		YScale 0.3;
		+NoGravity;
		+DropOff;
		+NoTeleport;
	}
	
	states
	{
		Spawn:
			KWBR AB 2 Bright A_FadeOut(0.3);
			Loop;
	}
}
// Karasawa Specialist
class KarasawaGuy : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Zombieman Type";
		Tag "'Sawa Man";

		Health 150;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		SeeSound "grunt/sight";
		AttackSound "Weapons/KarasawaFire";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got ripped apart by a Karasawa zombie.";

		PainChance 70;
		Painchance "Fist", 105; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 175; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 93; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 78;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Cell",1,256);
		A_DropItem("Cell",1,64);
		A_DropItem("Cell",1,16);
	}
	
	States
	{
		Spawn:
			KSWZ AB 10 A_Look();
			loop;
		See:
			KSWZ A 0;
			KSWZ AABBCCDD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
				
				user_pulseinterval += 1;
				if (user_pulseinterval >= 4)
				{
					A_StartSound("Weapons/KarasawaIdle",0,1.0);
					user_pulseinterval = 0;
				}
			}
			Loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			KSWZ E 0
			{
				A_FaceTarget();
				user_shotangle = 0;
				if (random(1,2) == 1)
				{
					user_shotangle = 0;
				}
				else
				{
					if (Distance3D(target) <= 512)
					{
						if (random(1,4) == 1)
						{
							user_shotangle = 0;
						}
						else
						{
							if (random(1,2) == 1) { user_shotangle = -8; } else { user_shotangle = 8; }
						}
					}
				}
			}
			KSWZ E 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			KSWZ F 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_SpawnProjectile("KsawBolt", 32, 1, user_shotangle, 0);
			}
			KSWZ E 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			KSWZ E 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_StartSound("Weapons/KarasawaCharge");
			}
			KSWZ AABBCCDD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCWander(0,1,3,1,1);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			KSWZ G 3;
			KSWZ G 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			KSWZ H 5;
			KSWZ I 5 A_Scream();
			KSWZ J 5 
			{
				A_Fall();
				A_Drop();
			}
			KSWZ K 5;
			KSWZ L 5;
			KSWZ M 5;
			KSWZ N -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			KSWZ O 5;
			KSWZ P 5 A_XScream();
			KSWZ Q 5 
			{
				A_Fall();
				A_Drop();
			}
			KSWZ RSTUV 5;
			KSWZ W -1;
			Stop;
		Raise:
			KSWZ N 5;
			KSWZ MLKJIH 5;
			Goto See;
	}
}
class ShotgunGuyNew : KCCreature
{
	default
	{
		Tag "Shotgun Guy";
		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "shotguy/sight";
		AttackSound "shotguy/attack";
		PainSound "shotguy/pain";
		DeathSound "shotguy/death";
		ActiveSound "shotguy/active";
		Obituary "$OB_SHOTGUY";
	}

	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Shotgun",1,256);
		A_DropItem("Shell",1,64);
		A_DropItem("Shell",1,16);
	}
	
	States
	{
		Spawn:
			SPOS AB 10 A_Look();
			Loop;
		See:
			SPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			SPOS E 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			SPOS F 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_SposAttackUseAtkSound();
			}
			SPOS E 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SPOS G 3;
			SPOS G 3 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SPOS H 5;
			SPOS I 5 A_Scream();
			SPOS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS K 5;
			SPOS L -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			SPOS M 5;
			SPOS N 5 A_XScream();
			SPOS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS PQRST 5;
			SPOS U -1;
			Stop;
		Raise:
			SPOS L 5;
			SPOS KJIH 5;
			Goto See;
	}
}
// Railgunner Captain
class FemaleRailZombie : KCCreature 
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ShotgunGuy Type";
		Tag "Railgunner Captain";

		Health 160; // 40
		Radius 14; // 20
		Height 52; // 56
		Speed 11; // 10
		Mass 100;
		Damage 10;
		Scale 0.975; // 0.9
		MONSTER;
		+FLOORCLIP;
		Obituary "%o was spiked by a Railgunner Captain!";
		seesound "fem/sight";
		painsound "fem/pain";
		deathsound "fem/death";
		activesound "fem/active";
		Decal "RedRailScorch";
		MaxTargetRange 8192;
	 
		PainChance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 207; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 167;
		DamageFactor "CherryBomb", 1.1667;
		Painchance "CherryBomb", 175;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 188;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Cell",1,256);
		A_DropItem("Cell",1,64);
		A_DropItem("Cell",1,16);
	}
	
	States 
	{
		Spawn: 
			RZOW A 0 NoDelay 
			{
				A_SetInventory("RailgunCharge",5);
			}
			RZOW AB 10 A_Look();
			goto Spawn+1;
		See: 
			RZOW AABBCCDD 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);

				// Randomly Charges Railgun while roaming...
				user_chargeinterval += 1;
				if (user_chargeinterval >= 4)
				{
					if (random(1,100) <= (1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(5,true,self))) - (CountInv("RailgunCharge") / 5))
					{
						if (CountInv("RailgunCharge") < (kc_railcaptainmaxcharge*5))
						{
							A_StartSound("baby/chargerailgun");
							A_GiveInventory("RailgunCharge",5);
							A_DynamicMusic(matktype:11);
						}
					}
					user_chargeinterval = 0;
				}
				if (CountInv("RailgunCharge") >= (kc_railcaptainmaxcharge*5)) { A_SetInventory("RailgunCharge",(kc_railcaptainmaxcharge*5)); }
				
				// Charge Pulse
				user_pulseinterval += 1;
				if (user_pulseinterval >= 4)
				{
					A_StartSound("Railgun/IdlePulse",CHAN_WEAPON,CHANF_DEFAULT,(0.01*CountInv("RailgunCharge")));
					user_pulseinterval = 0;
				}
			}
			loop;

		Missile: 
			#### # 0 A_TimeFreezeCheckMissile();
			RZOW E 0
			{
				if (CountInv("RailgunCharge") < 5) { return resolvestate("See"); }
				return resolvestate(null);
			}
			RZOW E 7
			{
				A_DynamicMusic();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(6); }

				A_FaceTarget();
			}
			RZOW F 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				user_randominaccuracy = 15.0 - (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self));
				user_randominaccuracy2 = user_randominaccuracy * 0.2;
				if (user_randominaccuracy <= 3.0) { user_randominaccuracy = 3.0; }
				if (user_randominaccuracy2 <= 0.6) { user_randominaccuracy2 = 0.6; }
				A_FaceTarget();
			
				if (CountInv("RailgunCharge") >= 25) { A_StartSound("weapons/railgf",3); }
				if (CountInv("RailgunCharge") >= 50) { A_StartSound("weapons/railgf",4); }
				if (CountInv("RailgunCharge") >= 75) { A_StartSound("weapons/railgf",5); }
				if (CountInv("RailgunCharge") >= 100) { A_StartSound("weapons/railgf",8); }

				double driftspeed = 1.0 + (0.005 * CountInv("RailgunCharge"));
				double sparsity = 1.0 + (0.01 * CountInv("RailgunCharge"));
				double pduration = 29.0 + (CountInv("RailgunCharge") * 1.25);
				
				A_CustomRailgun(A_EnemyRailgunDamage(random(1,3)*10), 0, "ac1819", "FF6C00", 0, 1, 0, "DBTRailPuff", user_randominaccuracy, 0, 8192, pduration, sparsity, driftspeed, "None", 0, 270, 0, 0.0);
				A_SetInventory("RailgunCharge",0);
			}
			RZOW EEE 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(5); }
	
				A_FaceTarget();
			}
			RZOW E 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(2); }
	
				if (CountInv("RailgunCharge") < 100)
				{
					A_StartSound("baby/chargerailgun");
					A_GiveInventory("RailgunCharge",5);
					if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
				}
				A_FaceTarget();
			}
			RZOW E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
	
				A_FaceTarget();
			}
			RZOW E 0
			{
				if (random(1,256) <= 64) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			goto See;
		Pain: 
			#### # 0 A_TimeFreezeCheckPain();
			RZOW G 5;
			RZOW G 3 A_KCPain();
			Goto PainEnd;
		PainEnd:
			RZOW G 0
			{
				if (CountInv("RailgunCharge") < 4)
				{
					A_StartSound("baby/chargerailgun");
					A_GiveInventory("RailgunCharge",5);
					if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
				}
				else
				{
					if (random(1,100) <= (10 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(2,true,self))) )
					{
						if (CountInv("RailgunCharge") < 100)
						{
							A_StartSound("baby/chargerailgun");
							A_GiveInventory("RailgunCharge",5);
							if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
							A_DynamicMusic(matktype:11);
						}
					}
				}
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			RZOW H 5;
			RZOW I 5 A_Scream();
			RZOW J 5 
			{
				A_Fall();
				A_Drop();
			}
			RZOW K 5;
			RZOW L 5;
			RZOW M 5;
			RZOW N -1;
			Stop;
		XDeath: 
			#### # 0 A_TimeFreezeCheckDeath();
			RZOW O 5;
			RZOW P 5 A_XScream();
			RZOW Q 5
			{
				A_Fall();
				A_Drop();
			}
			RZOW RSTUV 5;
			RZOW W -1;
			Stop;
		Raise:
			RZOW M 5;
			RZOW LKJIH 5;
			Goto See;
	}
}
// Super Shotgun Sargeant
class SuperShotgunGuy : KCCreature 
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ShotgunGuy Type";
		Tag "SuperShotgun Guy";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		Translation "112:127=16:47";
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "weapons/sshotf"; // "ssgguy/attack";
		MONSTER;
		+FLOORCLIP;
		Obituary "%o was jacked by a super shotgun guy.";
		+AVOIDMELEE;
		+DOHARMSPECIES;

		Painchance 155;
		Painchance "Fist", 233; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 207; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 172;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("SuperShotgun",1,256);
		A_DropItem("Shell",1,64);
		A_DropItem("Shell",1,16);
	}
	
	States
	{
		Spawn:
			GPOS A 0 NoDelay;
			GPOS AB 10 A_Look();
			goto Spawn+1;
		See:
			GPOS A 0;
			GPOS AABBCCDD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			GPOS E 0 A_DynamicMusic();
			GPOS E 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			GPOS F 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("weapons/sshotf");
				//if (GetCVar("kc_shotgunnerspread") == 0) { user_pelletsfired = 7; } else { user_pelletsfired = 20; }
				user_pelletsfired = 7;
				A_DynamicMusic();
				
				if (kc_bulletstracers == 0) // Hitscan
				{
					A_CustomBulletAttack(44.8, 28.4, user_pelletsfired, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_currenttracer = 0; user_currenttracer < user_pelletsfired; user_currenttracer++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 32, 12, frandom(-22.4,22.4), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-14.2,14.2));
					}
				}
			}
			GPOS E 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			GPOS G 3;
			GPOS G 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			GPOS H 5;
			GPOS I 5 A_Scream();
			GPOS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			GPOS KLM 5;
			GPOS N -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			GPOS O 5;
			GPOS P 5 A_XScream();
			GPOS Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			GPOS RS 5;
			GPOS T -1;
			Stop;
		Raise:
			GPOS L 5;
			GPOS KJIH 5;
			Goto See;
	}
}
class ChaingunGuyNew : KCCreature
{
	default
	{
		Tag "Chaingun Guy";
		Health 70;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "chainguy/attack";
		Obituary "$OB_CHAINGUY";
		//Dropitem "Chaingun";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Chaingun",1,256);
		A_DropItem("Clip",1,64);
		A_DropItem("Clip",1,16);
	}

	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_FaceTarget();
			A_StartSound(AttackSound, CHAN_WEAPON);
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	void A_CPosRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	States
	{
		Spawn:
			CPOS AB 10 A_Look();
			Loop;
		See:
			CPOS A 0
			{
				user_shotsfired = 0;
			}
			CPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((25 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(8,true,self))),(50 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(4,true,self)))); }
					else { user_shotsfiredmax = random(25,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			#### # 0 A_DynamicMusic();
			CPOS E 10 
			{
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			CPOS FE 4 BRIGHT 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_CPosAttack();
				A_DynamicMusic();
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 1 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
			}
			CPOS F 0 A_MonsterRefire(40,"See"); // A_CPosRefire();
			loop;
			
		MissileEnd:
			TNT1 A 0 
			{
				user_shotsfired = 0;
			}
			CPOS F 0 A_FaceTarget();
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CPOS G 3;
			CPOS G 3 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CPOS H 5;
			CPOS I 5 A_Scream();
			CPOS J 5
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS KLM 5;
			CPOS N -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			CPOS O 5;
			CPOS P 5 A_XScream();
			CPOS Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS RS 5;
			CPOS T -1;
			Stop;
		Raise:
			CPOS N 5;
			CPOS MLKJIH 5;
			Goto See;
	}
}
// Mingunner Corporal
class Minigunner : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ChaingunGuy Type";
		Tag "Minigun Zombie";
		
		Health 105; // 70
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 189;
		DamageFactor "CherryBomb", 1.1667;
		Painchance "CherryBomb", 198;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;

		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		AttackSound "weapons/minigunfire";
		Obituary "%o was shredded by a minigun zombie.";
		
		DropItem "Clip";
		DropItem "Clip", 64;
		DropItem "Clip", 16;
		DropItem "Clip", 4;
		DropItem "Clip", 1;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		bool check1 = true;
		
		A_DropItem("Chaingun",1,256);
		A_DropItem("Chaingun",1,32);
	}
	
	States
	{
		Spawn:
			MINZ A 0 NoDelay;
			MINZ AB 10 A_Look();
			goto Spawn+1;
		See:
			MINZ A 0
			{
				user_shotsfired = 0;
			}
			MINZ AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					bAVOIDMELEE = true; 
				}
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("MinigunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((20 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self))),(50 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(4,true,self)))); }
					else { user_shotsfiredmax = random(20,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			MINZ E 10
			{
				user_shotaccuracy = 35.5; // 30.0;
				user_shotzaccuracy = 14.2; // 2.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			MINZ FE 2
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
				A_DynamicMusic();
				
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(2,4)*random(6,7), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_SpawnProjectile("ZombieBulletTracer", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0 A_MonsterRefire(40,"See"); // A_CPosRefire
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			MINZ F 0 A_FaceTarget();
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MINZ G 3;
			MINZ G 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MINZ H 6;
			MINZ I 6 A_Scream();
			MINZ J 6 
			{
				A_Fall();
				A_Drop();
			}
			MINZ KLM 6;
			MINZ N -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			MINZ O 4;
			MINZ P 4 A_XScream();
			MINZ Q 4
			{
				A_Fall();
				A_Drop();
			}
			MINZ RSTUV 4;
			MINZ W -1;
			Stop;
		Raise:
			MINZ N 5;
			MINZ MLKJIH 5;
			Goto See;
	}
}
class PlasmaBallBase : KCProjectile
{
	default
	{
		Tag "Plasma Ball";
		Radius 13;
		Height 8;
		Speed 25;
		Damage 5;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE"; // "%o was melted by %k's plasma gun."
		DamageType "Plasma";
	}
	
	States
	{
		Spawn:
			PLSS AB 6 Bright;
			Loop;
		Death:
			PLSE ABCDE 4 Bright;
			Stop;
	}
}
class PlasmaBall1Base : PlasmaBallBase
{
	default
	{
		Tag "Plasma Ball [BFG]";
		DamageType "Plasma";
	}
	
	States
	{
		Spawn:
			PLS2 AB 6 Bright;
			Loop;
		Death:
			PLS2 CDE 4 Bright;
			Stop;
	}
}
class PlasmaBall2Base : PlasmaBall1Base
{
	default
	{
		Tag "Plasma Ball [BFG]";
		Damage 4;
		BounceType "Classic";
		BounceFactor 1.0;
		Obituary "$OB_MPBFG_MBF"; // "%o was burned by %k's BFG."
		DamageType "Plasma";
	}
	States
	{
		Spawn:
			PLS1 AB 6 Bright;
			Loop;
		Death:
			PLS1 CDEFG 4 Bright;
			Stop;
	}
}
class PlasmaBall1Monster : PlasmaBall1Base
{
	default
	{
		Tag "Plasma Ball [BFG]";
		DamageType "BFG";
		DamageFunction (4 * random(1,8));
	}
	
	States
	{
		Death:
			PLS1 C 4 Bright
			{
				A_Explode(4,16,0,0,8);
			}
			PLS1 DEFG 4 Bright;
			Stop;
	}
}
class PlasmaBall2Monster : PlasmaBall2Base
{
	default
	{
		Tag "Plasma Ball [BFG]";
		DamageType "BFG" ;
		DamageFunction (4 * random(1,8));
	}
	
	States
	{
		Death:
			PLS2 C 4 Bright
			{
				A_Explode(4,16,0,0,8);
			}
			PLS2 DE 4 Bright;
			Stop;
	}
}
// BFG General
class BFGGuy : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ChaingunGuy Type";
		Tag "BFG Commando";
		
		health 200;
		radius 20;
		height 56;
		Mass 100;
		speed 8;
		Painchance 125;
		Painchance "Fist", 188; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 167; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 139;

		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		missiletype "BFGBallMonster";
		seesound "chainguy/sight";
		painsound "chainguy/pain";
		deathsound "chainguy/death";
		activesound "chainguy/active";
		obituary "%o was vapourized by a zombie's BFG9000.";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("BFG9000",1,256);
		A_DropItem("Cell",1,64);
		A_DropItem("Cell",1,16);
	}
	
	states
	{
		Spawn:
			BFGZ A 0 NoDelay;
			BFGZ AB 10 A_Look();
			goto Spawn+1;
		See:
			BFGZ A 0;
			BFGZ AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					bAVOIDMELEE = true; 
				}
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_Jump(256,"MissileBFG9000","MissileBFG2704");
			goto See;
		MissileBFG9000:
			BFGZ E 20
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_StartSound("weapons/bfgf");
			}
			BFGZ F 10 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			BFGZ F 10 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_SpawnProjectile("BFGBallMonster");
			}
			BFGZ E 20
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
			}
			goto See;

		MissileBFG2704:
			BFGZ E 0 A_FaceTarget();
			BFGZ E 18
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(17); }
				A_FaceTarget();
				A_StartSound("weapons/bfgf");
			}
			BFGZ F 9 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_FaceTarget();
			}
			BFGZ F 0  
			{
				user_shotsfired = 0;
			}
		MissileBFG2704Shoot:
			BFGZ F 1 Bright
			{
				A_FaceTarget();
				A_DynamicMusic();
				A_SpawnProjectile("PlasmaBall1Monster",32,0,random(-10,10),CMF_OFFSETPITCH|CMF_BADPITCH,random(-10,10));
				A_SpawnProjectile("PlasmaBall2Monster",32,0,random(-10,10),CMF_OFFSETPITCH|CMF_BADPITCH,random(-10,10));
			}
			BFGZ F 0 
			{
				user_shotsfired += 1;
			}
			BFGZ F 0 A_JumpIf(user_shotsfired==40,"MissileBFG2704End");
			Loop;
		MissileBFG2704End:
			BFGZ E 18
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(17); }
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BFGZ G 3;
			BFGZ G 3 A_KCPain();
			goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BFGZ H 5;
			BFGZ I 5 A_Scream();
			BFGZ J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			BFGZ KLM 5;
			TNT1 A 0;
			BFGZ N -1;
			stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			BFGZ O 5;
			BFGZ P 5 A_XScream();
			BFGZ Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			BFGZ RS 5;
			TNT1 A 0;
			BFGZ T -1;
			stop;
		Raise:
			BFGZ N 5;
			BFGZ MLKJIH 5;
			goto See;
	}
}
// Suicide Bomber Explosions
class SuicideBomb : KCProjectile
{
	default
	{
		Tag "Suicide Bomb";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		Scale 0.75;
		PROJECTILE;
		RenderStyle "Add";
		DontHurtShooter;
		Obituary "%o was exploded by a crazy suicide bomber.";
		SeeSound "weapons/rocklx";
		DamageType "Explosion";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright 
			{
				int dmg = A_CalcDamageFormulaEx((64+random(-16,16)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (96+random(-24,24)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}
class SuicideBombStrong : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Strong]";
		Alpha 0.925;
		Scale 1.10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright 
			{
				int dmg = A_CalcDamageFormulaEx((128+random(-64,64)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (128+random(-64,64)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}
class SuicideBombUltra : SuicideBomb
{
	default
	{
		Tag "Suicide Bomb [Ultra]";
		Alpha 0.95;
		Scale 1.75;
	}
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				int dmg = A_CalcDamageFormulaEx((256+random(-128,128)),1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg, (224+random(-112,112)), 1, false, 0, 0, 10, "BulletPuff", "Explosive");
			}
			Stop;
	}
}
class SuicideBomber : KCCreature 
{
	default
	{
		Tag "Suicide Bomber";
		
		Health 80;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 16;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		Damagefactor "Fire", 0.25;
		Damagefactor "Ice", 1.5;
		
		MONSTER;
		+FLOORCLIP;
		+JUMPDOWN;
		+NOFEAR;
		-NOTARGET;
		-NOTARGETSWITCH;
		-NEVERTARGET;
		-NOINFIGHTING;
		seesound "suicide/sit";
		attacksound "shotguy/death";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		obituary "%o was exploded by a crazy suicide bomber.";
		DamageType "Explosive";
		MeleeRange 64.0;
	}
	
	states
	{
		Spawn:
			BMBE AB 10 A_Look();
			Loop;
		See:
			BMBE AAABBBCCCDDD 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			BMBE A 0 
			{
				actor player = players[0].mo;
				if (target == player) A_DynamicMusic(matktype:11);
				A_StartSound("suicide/scream",CHAN_VOICE);
				if (kc_monsterlevelenabledflags) MeleeRange = (64.0 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.25,true,self)));
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			#### # 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					actor player = players[0].mo;
					if (target == player) A_DynamicMusic();
					A_Die();
				}
				else
				{
					A_Die("Illus");
				}
			}
			Goto Death;
		Illus:
			#### # 1 A_CCIllusionDisperse();
			stop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BMBE A 3;
			BMBE A 3 A_KCPain();
			goto See;
		
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BMBE M 0 bright 
			{
				actor player = players[0].mo;
				if (target == player) A_DynamicMusic();
			}
			BMBE M 5 bright 
			{
				if (A_CheckMonsterLevel(270,2,true,self))
				{
					if (random(1,2) <= 1) 
					{
						if (random(1,4) <= 1) { A_SpawnProjectile("SuicideBombUltra",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
					else 
					{ 
						if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
					}
				}
				else
				if (A_CheckMonsterLevel(random(67,68),2,true,self))
				{
					if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
				else
				{
					if (random(1,16) <= 1) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBomb",0,0,0,0); }
				}
			}
			BMBE N 5 bright A_XScream();
			BMBE O 5 A_NoBlocking();
			BMBE PQRST 5;
			TNT1 A 0 CCCardDeathCheck();
			BMBE U -1;
			stop;
		Ice:
			BMBE D 5 A_GenericFreezeDeath();
			BMBE D 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BMBE T 5;
			BMBE SRQPONM 5;
			Goto See;
	}
}
class WolfensteinSSNew : KCCreature replaces WolfensteinSS
{
	default
	{
		Tag "Schutzstaffel";
		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "wolfss/sight";
		PainSound "nazi/pain";
		DeathSound "wolfss/death";
		ActiveSound "wolfss/active";
		AttackSound "wolfss/attack";
		Obituary "$OB_WOLFSS";
		//Dropitem "Clip";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		A_DropItem("Clip",1,256);
		A_DropItem("Clip",1,64);
		A_DropItem("Clip",1,16);
	}
	
	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (22.5/256);

			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			SSWV AB 10 A_Look;
			Loop;
		See:
			SSWV AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			SSWV E 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			SSWV F 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
		MissileLoop:
			SSWV G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				
				A_FaceTarget();
			}
			SSWV G 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 1 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_CPosRefire();
			}
			Goto Missile+3;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SSWV H 3;
			SSWV H 3 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SSWV I 5;
			SSWV J 5 A_Scream();
			SSWV K 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV L 5;
			SSWV M -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV QRSTU 5;
			SSWV V -1;
			Stop;
		Raise:
			SSWV M 5;
			SSWV LKJI 5;
			Goto See;
	}
}
class DoomImpBallNew : KCProjectile
{
	Default
	{
		Tag "Imp Fireball";
		Radius 6;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 1;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL1 AB 4 BRIGHT;
			Loop;
		Death:
			BAL1 CDE 6 BRIGHT;
			Stop;
	}
}
class DoomImpNew : KCCreature
{
	default
	{
		Tag "Imp";
		Health 60;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 200;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 80;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.6;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		MeleeSound "imp/melee";
		HitObituary "$OB_IMPHIT";
		Obituary "$OB_IMP";
		Species "Imp";
		+DONTHARMSPECIES;
	}
	
	void A_TroopAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
				{
					damage = A_CalcDamageFormula(random(9,12),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					damage = A_CalcDamageFormula(random(6,9),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					damage = A_CalcDamageFormula(random(3,6),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else
				{
					damage = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005); 
				}

				A_StartSound(MeleeSound, CHAN_WEAPON);
				int newdam = targ.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
				{
					A_SpawnProjectile("BelphegorBall",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					A_SpawnProjectile("BaronBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("KnightBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else
				{
					A_SpawnProjectile("DoomImpBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
			}
		}
	}
	
	States
	{
		Spawn:
			TROO AB 10 A_Look();
			Loop;
		See:
			TROO AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { return resolvestate("Missile2"); }
				return resolvestate("Missile1");
			}
		Missile1:
			TROO EF 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		Missile2:
			IMP3 AB 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		MissileEnd:
			TROO G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_TroopAttack();
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TROO H 2;
			TROO H 2 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			TROO I 8;
			TROO J 8 A_Scream();
			TROO K 6;
			TROO L 6 A_NoBlocking();
			TROO M -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			TROO N 5;
			TROO O 5 A_XScream();
			TROO P 5;
			TROO Q 5 A_NoBlocking();
			TROO RST 5;
			TROO U -1;
			Stop;
		Raise:
			TROO ML 8;
			TROO KJI 6;
			Goto See;
	}
}
// Dark Imp Fireballs [also Hell Cleric seekers]
class DarkSeeker : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Seeker";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (5 * random(1,8));
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		decal "DoomImpScorch";
	}

	States
	{
		Spawn:
			DKB1 A 0;
			"####" A 2 Bright A_SeekerMissile (5,10);
			"####" ABB 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
			}
		Death2:
			DKB1 A 0;
			"####" CDE 4 Bright;
			Stop;
	}
}
class DarkFast : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Fastshot";
		Radius 8;
		Height 6;
		Speed 36;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		MISSILEHEIGHT 0;
		Decal "DoomImpScorch";
		DamageType "Dark";
	}
	
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
class DarkNormal : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
// Strong Dark Imp Ball Trail
class DarkStrong_Tail : KCBaseZSC
{
	default
	{
		PROJECTILE;
		RenderStyle "Add";
		+NOCLIP;
		ALPHA 0.5;
	}
	
	States
	{
		Spawn:
			DKBT ABCDEF 2 Bright;
			Stop;
	}
}
class DarkStrong : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (6 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			DKB2 A 0 Bright;
			#### AB 4 Bright A_SpawnItemEx("DarkStrong_Tail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(2);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB2 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
class DarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		MissileType "DarkSeeker";
		MeleeDamage 3;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.8; // 6.4

		Species "Imp";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "darkimp/sight";
		PainSound "darkimp/pain";
		DeathSound "darkimp/death";
		ActiveSound "darkimp/active";
		MeleeSound "darkimp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}
	
	States
	{
		Spawn:
			DRKI AB 10 A_Look();
			loop;
		See:
			DRKI AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			DRKI E 0 A_DynamicMusic();
			DRKI EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			DRKI G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("DarkSeeker", 32, (3*random(1,8)), "imp/melee");
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DRKI H 2;
			DRKI H 2 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKI I 8;
			DRKI J 8 A_Scream();
			DRKI K 6;
			DRKI L 6 A_NoBlocking();
			DRKI M -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_NoBlocking();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKI M 8;
			DRKI L 8;
			DRKI KJI 6;
			Goto See;
	}
}
class STDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Weak]";
		
		Health 110;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		MissileType "DarkFast";
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Explosive", 1;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		
		MeleeDamage 3;
		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp2/sight";
		PainSound "darkimp2/pain";
		DeathSound "darkimp2/death";
		ActiveSound "darkimp2/active";
		MeleeSound "darkimp2/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKS AB 10 A_Look();
			loop;
		See:
			DRKS AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			DRKS E 0 A_DynamicMusic();
			DRKS EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			DRKS G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomComboAttack("DarkFast", 32, (3*random(1,8)), "imp/melee");
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DRKS H 2;
			DRKS H 2 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKS I 8;
			DRKS J 8 A_Scream();
			DRKS K 6;
			DRKS L 6 A_Fall();
			DRKS M -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKS M 8;
			DRKS L 8;
			DRKS KJI 6;
			Goto See;
	}
}
class VoidDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Strong]";

		Health 130;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 7;
		MissileType "DarkNormal";
		MeleeDamage 3;

		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.825;
		RadiusDamageFactor 0.825;
		DamageFactor "Explosive", 0.825;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp3/sight";
		PainSound "darkimp3/pain";
		DeathSound "darkimp3/death";
		ActiveSound "darkimp3/active";
		MeleeSound "darkimp3/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKV AB 10 A_Look();
			loop;
		See:
			DRKV AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0  
			{
				user_shotsfired = 0;
				A_DynamicMusic();
			}
		MissileStart:
			TNT1 A 0 A_Jump(256,"MissileNormal","MissileStrong");
		MissileNormal:
			DRKV EF 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			DRKV G 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkNormal", 32, (3*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;
		MissileStrong:
			DRKV IJ 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			DRKV K 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkStrong", 32, (random(4,5)*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DRKV H 2;
			DRKV H 2 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKV L 8;
			DRKV M 8 A_Scream();
			DRKV N 5;
			DRKV O 5 A_Fall();
			DRKV P -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKV P 8;
			DRKV O 8;
			DRKV NML 6;
			Goto See;
	}
}
class NetherDarkImp : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/DoomImp Type";
		Tag "Nether Dark Imp";

		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		Mass 250;
		Scale 1.2;
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
		PainChance 100;
		DamageFactor "Crush", 0.8;
		DamageFactor "Fire", 0.2;
		Painchance "Fire", 20;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 250;
		DamageFactor "CherryBomb", 0.4;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 75;
		DamageFactor "Spinner", 0.6;
		Painchance "Spinner", 60;
		DamageFactor "Popper", 1.75;
		Painchance "Popper", 175;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 250;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;

		MONSTER;
		Species "Imp";
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp4/sight";
		PainSound "darkimp4/pain";
		DeathSound "darkimp4/death";
		ActiveSound "darkimp4/active";
		MeleeSound "darkimp4/melee";
		Obituary "%o was cursed by a nether dark imp.";
		HitObituary "%o was touched by a nether dark imp.";
	}
	States
	{
		Spawn:
			DRKF A 0 NoDelay;
			DRKF AB 10 A_Look();
			goto Spawn+1;
		See:
			DRKF AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			DRKF E 0 A_Jump (256, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8
			{
				A_FaceTarget();
			}
			DRKF G 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("NetherLightning", 32, (mldmg), "imp/melee");
			}
			Goto See;
		Missile2:
			DRKF IJ 8
			{
				A_FaceTarget();
			}
			DRKF K 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("InfernoBall", 32, (mldmg), "imp/melee");
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DRKF H 2;
			DRKF H 2 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Ice:
			DRKF H 5 A_GenericFreezeDeath();
			DRKF H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKF P 8;
			DRKF O 8;
			DRKF NML 6;
			Goto See;
	}
}
// Dark Imp InfernoBall Trail
class InfernoBallTrail : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			ITRL ABCDEFGHIJKLMN 1 Bright A_FadeOut(0.08);
			stop;
	}
}
// Dark Imp Nether Lightning
class NetherLightningTrail : KCProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 1;
		Damage 0;
		PROJECTILE;
		+RIPPER;
		RENDERSTYLE "ADD";
		ALPHA 0.75;
		Scale 0.75;
	}

	States
	{
		Spawn:
			NLIT A 1 A_FadeOut (0.025);
			NLIT A 0 A_Jump (32, "Spark");
			loop;
		Spark:
			NLIT A 0 A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			goto Spawn;
	}
}
class NetherLightningSpark : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			NLIT BCDEFG 1 Bright;
			stop;
	}
}
class InfernoBall : KCProjectile
{
	default
	{
		Tag "Inferno Ball";
		Radius 8;
		Height 6;
		Speed 40;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}

	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			IBAL AAAABBBB 1 Bright A_SpawnItemEx ("InfernoBallTrail", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			Loop;
		Death:
			IBAL CDE 4 Bright;
			Stop;
	}
}
class NetherLightning : KCProjectile
{
	default
	{
		Tag "Nether Lightning";
		Radius 8;
		Height 6;
		Speed 48;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+RIPPER;
		Scale 0.75;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Thunder";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			NLIT A 0 Bright;
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			loop;
		Death:
			NLIT ABCDEFG 1 Bright;
			Stop;
	}
}
// Pinky FireBreath
class DemonFire : SingleDamageRipper
{
	default
	{
		Tag "Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class BloodDemonFire : SingleDamageRipper
{
	default
	{
		Tag "Blood Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class NightmareSpectreFire : DemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (kcdebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}
class NightmareBloodSpectreFire : BloodDemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (kcdebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}
class DemonNew : KCCreature
{
	default
	{
		Tag "Pinky Demon";
		Health 150;
		Speed 10;
		Radius 30;
		Height 56;
		Mass 400;
		PainChance 180;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 135;
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "demon/sight";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "$OB_DEMONHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(4,random(1,10),0.005,0.3334,0.1667,0.005);

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	States
	{
		Spawn:
			SARG AB 10 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast
			{
				if (target && Distance3D(target) <= 264)
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
				else
				{
					A_KCChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;
		
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SARG AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
						else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
						
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
						else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
						
						A_FaceTarget();
						A_SpawnProjectile("DemonFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			#### # 0 A_DynamicMusic();
			SARG EEFF 4 Fast 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.125,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 4 Fast 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.125,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 4 Fast 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.125,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SARG H 2 Fast;
			SARG H 2 Fast A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 5;
			SARG MLKJI 5;
			Goto See;
	}
}
class SpectreNew : DemonNew
{
	default
	{
		Tag "Pinky Spectre";
		RenderStyle "OptFuzzy";
		+SHADOW
		Alpha 0.5;
		SeeSound "spectre/sight";
		AttackSound "spectre/melee";
		PainSound "spectre/pain";
		DeathSound "spectre/death";
		ActiveSound "spectre/active";
		Obituary "$OB_SPECTREHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
}
class NightmareSpectre : DemonNew
{
	default
	{
		Tag "Pinky Spectre (Nightmare)";
		Health 300;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was devoured by a nightmare spectre.";
		Meleedamage 5;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (kcdebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(random(4,5),random(1,10),0.005,0.3334,0.1667,frandom(0.005,0.0625));

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}

	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SARG AABB 5 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast 
			{
				int tics = randompick(1,2,2,2,2,3);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target && Distance3D(target) <= 264)
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
				else
				{
					A_KCChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SARG AEF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);

				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);

				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						A_FaceTarget();
						A_SpawnProjectile("NightmareSpectreFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			#### # 0 A_DynamicMusic();
			SARG EEFF 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.1667,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.1667,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.1667,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SARG H 2 Fast;
			SARG H 2 Fast A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 4;
			SARG MLKJI 4;
			Goto See;
		}
}
class BloodDemon : DemonNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky";
		Health 300; 
		Speed 15;
		Height 56;
		Radius 30;
		Mass 600;
		Meleedamage 10;
		ReactionTime 8;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Painchance 135;
		DamageFactor "Fire", 0.666; // Pinkies = -33% Fire Damage
		Painchance "Fire", 90; // Pinkies = -33% Pain Chance
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 135;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 157;
		DamageFactor "Chop", 0.625;
		Painchance "Chop", 113;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 202;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 240;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 240;
		MONSTER;
		+FLOORCLIP;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		//MeleeSound "blooddemon/melee";
		Obituary "%o Was chewed up and spat out by a Blood demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				user_fastchasetimermax = 16;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 10; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { user_fastchasetimermax = 12; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 14; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (target && Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(300,2,true,self)) 
						{ 
							if (random(1,1) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(225,2,true,self)) 
						{ 
							if (random(1,2) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) 
						{ 
							if (random(1,3) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) 
						{ 
							if (random(1,4) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (target && Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(300,2,true,self)) 
						{ 
							if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(225,2,true,self)) 
						{ 
							if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) 
						{ 
							if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) 
						{
							if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						}
						else { A_KCChase("Melee",null,0,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
				}
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SRG2 AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
						else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
						
						A_FaceTarget(); 
						A_DynamicMusic();
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
						else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("BloodDemonFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			SRG2 E 0 
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.2,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.2,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack(random(1,10)*10,"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.2,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_KCPain();
			Goto See;
		
		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			SRG2 HH 2;
			SRG2 H 2
			{
				A_KCPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HHH 1;
			Goto See;
		Pain.Electric: 
		Pain.Electricity: 
		Pain.Lightning: 
		Pain.Thunder: 
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			SRG2 HH 2;
			SRG2 H 2
			{
				A_KCPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HH 2;
			SRG2 H 2
			{
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HHH 2;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class BloodSpectre : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre";
		
		+SHADOW
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o Was chewed up and spat out by a Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	States
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, 128);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
	}
}
class NightmareBloodSpectre : BloodDemon
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre (Nightmare)";
		Health 600;
		Speed 20;
		Meleedamage 14;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		HitObituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (kcdebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				int tics = randompick(1,2,2,2,2,3);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SRG2 AEF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						A_FaceTarget(); 
						A_DynamicMusic();
						return resolvestate(null);
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						A_FaceTarget();
						A_SpawnProjectile("NightmareBloodSpectreFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			SRG2 E 0
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.25,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.25,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack((random(3,10)*random(13,14)),"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.25,true,self)))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain: 
			#### # 0 A_TimeFreezeCheckPain();
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 
			{
				A_SpawnItemEx("NBloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			}
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class ChaingunDemon : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky [Chaingun]";

		Speed 14;
		Mass 650;
		AttackSound "";
		Obituary "%o was mowed down by a chaingun-wielding Blood Demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		Dropitem "Chaingun";
		DropItem "StimPack", 64;
		DropItem "StimPack", 4;
	}
	
	States 
	{
		Spawn: 
			CRG2 AB 10 A_Look();
			goto Spawn;
		See: 
			CRG2 AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				user_fastchasetimermax = 16;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 10; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { user_fastchasetimermax = 12; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 14; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.80,0.825,0.85));
					user_walksound = 0; 
				}
				if (user_fastchasetimer >= user_fastchasetimermax) { A_KCChase(null,"Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); user_fastchasetimer = 0; } else { A_KCChase(null,"Missile",0,1,3,1,1); }
			}
			loop;

		Melee: 
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((30 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self))),(90 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(3.34,true,self)))); }
					else { user_shotsfiredmax = random(30,90); }
					A_DynamicMusic();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			CRG2 H 9
			{
				A_FaceTarget();
				user_shotaccuracy = 15.75; // 11.25; // 22.5;
				user_shotzaccuracy = 4.5; // 0.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { user_shotaccuracy = user_shotaccuracy * 5 / 8; user_shotzaccuracy = user_shotzaccuracy * 3 / 8; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 4 / 8; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 5 / 8; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 6 / 8; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { user_shotaccuracy = user_shotaccuracy * 7 / 8; user_shotzaccuracy = user_shotzaccuracy * 7 / 8; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		StartMissile:
			TNT1 E 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 E 3 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();

				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 F 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 F 3 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"MissileEnd");
			goto StartMissile;
		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CRG2 H 9
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(8); }
				A_FaceTarget();
			}
			Goto See;

		Pain: 
			#### # 0 A_TimeFreezeCheckPain();
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_KCPain();
			Goto See;
		
		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			CRG2 HH 2;
			CRG2 H 2
			{
				A_KCPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			CRG2 HHH 1;
			Goto See;
		Pain.Electric: 
		Pain.Electricity: 
		Pain.Lightning: 
		Pain.Thunder: 
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_StartSound("blooddemon/death", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.80,0.825,0.85));
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class ChaingunSpectre : ChaingunDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre [Chaingun]";

		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o was mowed down by a chaingun-wielding Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
	}

	States 
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			TNT1 A 0;
			SRG2 N -1;
			Stop;
	}
}
class BloodDemonArm : KCCustomGib
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		BounceType "Doom";
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}
class BloodSpectreArm : KCCustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Radius 8;
		Height 8;
		Speed 8;
		BounceType "Doom";
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}
class NBloodSpectreArm : KCCustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "Subtract";
		Alpha 0.7;
		Radius 8;
		Height 8;
		Speed 8;
		BounceType "Doom";
		+DROPOFF;
		+Missile;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			NightmareBloodSpectre ownerz;
			if (target) ownerz = NightmareBloodSpectre(target);
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			alphavarbase = frandom(0.00375,0.00425);

			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (ownerz) nightmarephasetimer = ownerz.nightmarephasetimer;
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (kcdebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}
class CacodemonNew : KCCreature
{
	default
	{
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		Tag "Cacodemon";
		MeleeRange 80;
		PainChance 128;
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 32;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "CherryBomb", 0.5;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Spinner", 3.75;
		Painchance "Spinner", 256;
		DamageFactor "Dust", 5;
		Painchance "Dust", 256;
		DamageFactor "Popper", 0.25;
		Painchance "Popper", 32;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		BloodColor "00 00 CD";
		Monster;
		+FLOAT;
		+NOGRAVITY;
		SeeSound "caco/sight";
		PainSound "cacodemon/pain";
		DeathSound "caco/death";
		ActiveSound "caco/active";
		Obituary "$OB_CACO";
		HitObituary "$OB_CACOHIT";
		Species "Cacodemon";
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			HEAD A 10 A_FloatLook(16);
			Loop;
		See:
			HEAD A 3 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				user_painfastchase = 0; 
			}
			HEAD BC 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			HEAD D 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				
				int mldmg = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("CacodemonBallNew", user_tempvar1, (mldmg), "caco/melee");
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(random(37,38),1,true,self))
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*1));
					}
					if (A_CheckMonsterLevel(75,1,true,self))
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*2));
					}
					if (A_CheckMonsterLevel(random(112,113),1,true,self))
					{
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("CacodemonBallNew",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HEAD E 0 A_ActorShadowSplit(60,256);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(60,64);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(60,192);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Pain.BlackHole:
			#### # 0 A_TimeFreezeCheckPain();
			Goto Pain+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(120,random(96,160));
			HEAD E 2;
			HEAD E 2
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 4;
			Goto See;
		
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright 
			{
				A_SpawnItemEx("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HEAD G 8;
			HEAD H 8 A_Scream();
			HEAD I 8;
			HEAD J 8;
			HEAD K 8 A_NoBlocking();
			HEAD L -1 A_SetFloorClip();
			Stop;
		Ice:
			HEAD F 5 A_GenericFreezeDeath();
			HEAD F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HEAD L 8 A_UnSetFloorClip();
			HEAD KJIHG 8;
			Goto See;
	}
}
class CacodemonBallNew : KCProjectile // replaces CacodemonBall
{
	Default
	{
		Tag "Lightning Ball";
		Radius 6;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
		DamageType "Lightning";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL2 AB 4 BRIGHT;
			Loop;
		Death:
			BAL2 CDE 6 BRIGHT;
			Stop;
	}
}
class CacodemonShadowSplitAfterImage : KCBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class CacodemonShadowSplit1 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit2 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit3 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacodemonShadowSplit4 : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacodemonShadowSplitAfterImage");
			}
			Stop;
	}
}

class Cacolantern : CacodemonNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Cacodemon Type";
		Tag "Cacolantern";

		Health 800;
		Painchance 112;

		DamageFactor "Fire", 0.125;
		Painchance "Fire", 14;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "Breakfast", 3.5;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 28;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 28;
		DamageFactor "BRocket", 1.75;
		Painchance "BRocket", 196;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 256;
		DamageFactor "Dust", 3.5;
		Painchance "Dust", 256;
		DamageFactor "Popper", 0.125;
		Painchance "Popper", 14;

		bloodcolor "blue";
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		Obituary "%o was smitten by a cacolantern.";
		HitObituary "%o got too close to a cacolantern.";
		PainSound "cacodemon/pain";
	}

	States
	{
		Spawn:
			HED2 A 0 NoDelay;
			HED2 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED2 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			HED2 BC 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			HED2 D 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(8,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("CacolanternBall", user_tempvar1, (mldmg), "caco/melee");
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(randompick(33,33,34),1,true,self))
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (A_CheckMonsterLevel(randompick(66,67,67),1,true,self))
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (A_CheckMonsterLevel(100,1,true,self))
					{
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("CacolanternBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(45,256);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(45,64);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(45,192);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Pain.BlackHole:
			#### # 0 A_TimeFreezeCheckPain();
			Goto Pain+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(90,random(96,160));
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 4;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HED2 G 8 A_NoBlocking();
			HED2 H 8 A_Scream();
			HED2 IJK 8;
			HED2 L -1 A_SetFloorClip();
			Stop;
		Ice:
			HED2 F 5 A_GenericFreezeDeath();
			HED2 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED2 L 8 A_UnsetFloorClip();
			HED2 KJIHG 8;
			Goto See;
	}
}

class CacolanternShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class CacolanternShadowSplit1 : CacolanternShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacolanternShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacolanternShadowSplit2 : CacolanternShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacolanternShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacolanternShadowSplit3 : CacolanternShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacolanternShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacolanternShadowSplit4 : CacolanternShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("CacolanternShadowSplitAfterImage");
			}
			Stop;
	}
}

class CacolanternBall : KCEffectProjectile
{
	default
	{
		Tag "Lightning Shot";
		decal "CacoScorch";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
		DamageType "Lightning";
	}
	
	override void PostBeginPlay()
	{
		KCEffectProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCEffectProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL8 AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
			}
		Death2:
			BAL8 CDE 6 Bright;
			Stop;
	}
}

class Abaddon : Cacolantern
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Cacodemon Type";
		Tag "Abaddon";
		Health 1200;
		Speed 12;
		Painchance 80;
		DamageFactor "Fire", 0.167;
		Painchance "Fire", 13; 
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 200;
		DamageFactor "Breakfast", 4;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 0.125;
		Painchance "Suck", 10;
		DamageFactor "CherryBomb", 0.334;
		Painchance "CherryBomb", 27;
		DamageFactor "BRocket", 1.75;
		Painchance "BRocket", 140;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 200;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 200;
		DamageFactor "Popper", 1.00;
		Painchance "Popper", 80;
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		PainSound "cacodemon/pain";
		Obituary "%o was smitten by an Abaddon.";
		HitObituary "%o became food for an Abaddon.";
		bloodcolor "red";
	}

	States
	{
		Spawn:
			HED3 A 0 NoDelay;
			HED3 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED3 A 0;
			HED3 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(8,8);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			HED3 BC 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			HED3 D 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(10,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("AbaddonBall", user_tempvar1, (mldmg), "caco/melee"); // See CacodemonBall
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(30,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (A_CheckMonsterLevel(60,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (A_CheckMonsterLevel(90,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			HED3 CBC 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			HED3 D 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int mldmg = A_CalcDamageFormula(10,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("AbaddonBall", user_tempvar1, (mldmg), "caco/melee"); // See CacodemonBall
				if (kc_monsterlevelenabledflags)
				{
					if (A_CheckMonsterLevel(30,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1));
					}
					if (A_CheckMonsterLevel(60,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*2));
					}
					if (A_CheckMonsterLevel(90,1,true,self))
					{
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*-1.5));
						A_SpawnProjectile("AbaddonBall",user_tempvar1,0,(user_tempvar2*1.5));
					}
				}
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(30,256);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(30,64);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(30,192);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Pain.BlackHole:
			#### # 0 A_TimeFreezeCheckPain();
			Goto Pain+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(60,random(96,160));
			HED3 E 3;
			HED3 E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HED3 G 8 A_NoBlocking();
			HED3 H 8 A_Scream();
			HED3 IJK 8;
			HED3 L -1 A_SetFloorClip();
			Stop;
		Ice:
			HED3 F 5 A_GenericFreezeDeath();
			HED3 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED3 L 8 A_UnsetFloorClip();
			HED3 KJIHG 8;
			Goto See;
	}
}

class AbaddonShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class AbaddonShadowSplit1 : AbaddonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("AbaddonShadowSplitAfterImage");
			}
			Stop;
	}
}

class AbaddonShadowSplit2 : AbaddonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("AbaddonShadowSplitAfterImage");
			}
			Stop;
	}
}

class AbaddonShadowSplit3 : AbaddonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("AbaddonShadowSplitAfterImage");
			}
			Stop;
	}
}

class AbaddonShadowSplit4 : AbaddonShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("AbaddonShadowSplitAfterImage");
			}
			Stop;
	}
}

class AbaddonBall : KCProjectile
{
	default
	{
		Tag "Scorching Shot";
		decal "CacoScorch";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		SeeSound "caco/attack";
		DeathSound "caco/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL3 AB 4 Bright;
			Loop;
		Death:
			BAL3 CDE 6 Bright;
			Stop;
	}
}
class PainElementalNew : KCCreature
{
	default
	{
		Tag "Pain Elemental";
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		MeleeRange 80;
		PainChance 16;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 28;
		DamageFactor "Breakfast", 5;
		Painchance "Breakfast", 80;
		DamageFactor "Suck", 7.5;
		Painchance "Suck", 120;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 40;
		DamageFactor "Dust", 5;
		Painchance "Dust", 80;
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT 
		+NOGRAVITY
		SeeSound "pain/sight";
		PainSound "pain/pain";
		DeathSound "pain/death";
		ActiveSound "pain/active";
		HitObituary "%o got too close to a Pain Elemental.";
		//-RETARGEAFTERNSLAM
	}
	
	States
	{
		Spawn:
			PAIN A 10 A_FloatLook(16);
			Loop;
		See:
			PAIN AABBC 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				
				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			PAIN C 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { if (random(1,1000) <= 350) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { if (random(1,1000) <= 275) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { if (random(1,1000) <= 100) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				else { return resolvestate(null); }
				return resolvestate(null);
			}
			Loop;
			
		IdleMissile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			PAIN DE 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			PAIN F 5 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				int MapsFinished;
				if (globalvars) MapsFinished = globalvars.MapsFinished;
				
				string classname = "LostSoulNew";
				int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (kc_monsterevolutions)
				{
					if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished))
					{
						if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished))
						{
							if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) classname = "BetaLostSoul";
																									 else classname = "ForgottenOne";
						}
						else
						{
							if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) classname = "BetaLostSoul";
																									 else classname = "LostSoulAnnoying";
						}
					}
					else
					{
						if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) classname = "BetaLostSoul";
																								 else classname = "LostSoulNew";
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainAttack(classname,0,flags,10);
			}
			goto See;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				user_painfastchase = 0;
			}
			PAIN D 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			PAIN E 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			PAIN F 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			PAIN F 0 BRIGHT 
			{
				if (CheckMeleeRange()) 
				{ 
					int mldmg = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
					A_CustomMeleeAttack(mldmg,"caco/melee","none","Melee",true);
				}
				else
				{
					actor player = players[0].mo;
					let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
					let globalvars = KCGlobalVariables.Get();
					int MapsFinished;
					if (globalvars) MapsFinished = globalvars.MapsFinished;
					
					string classname = "LostSoulNew";
					int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
					if (kc_monsterevolutions)
					{
						if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished))
						{
							if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished))
							{
								classname = "ForgottenOne";
							}
							else
							{
								if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) classname = "BetaLostSoul";
																										else classname = "LostSoulAnnoying";
							}
						}
						else
						{
							classname = "LostSoulNew";
						}
					}
					if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
					A_PainAttack(classname,0,flags,10);
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			PAIN G 0 A_ActorShadowSplit(30,64);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(30,4);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			PAIN G 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_ActorShadowSplit(30,12);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			PAIN G 6;
			Goto See;
		Pain.Suck:
			#### # 0 A_TimeFreezeCheckPain();
			PAIN G 0 A_ActorShadowSplit(30,8);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			PAIN G 6;
			PAIN GG 3
			{
				A_SetTics(randompick(0,3,6));
			}
			Goto See;
		Pain.BlackHole:
			#### # 0 A_TimeFreezeCheckPain();
			Goto Pain+2;

		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			PNSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_SETMASTER);
			TNT1 A 0 A_ActorEndShadowSplit();
			TNT1 A 0
			{
				if (random(1,4) <= 3) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			PAIN H 8 BRIGHT;
			PAIN I 8 BRIGHT A_Scream();
			PAIN JK 8 BRIGHT;
			PAIN L 8 BRIGHT 
			{
				if (target && IsFriend(target))
				{ // And I thought you were my friend!
					bFriendly = false;
				}
				A_NoBlocking();

				string classname = "LostSoulNew";
				int flags = PAF_NOSKULLATTACK|PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (kc_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,9) <= 1)
						{
							classname = "ForgottenOne";
						}
						else
						{
							if (random(1,16) <= 1) classname = "BetaLostSoul"; 
																else classname = "LostSoulAnnoying";
						}
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 90, flags, 10);
				classname = "LostSoulNew";
				flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (kc_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,9) <= 1)
						{
							classname = "ForgottenOne";
						}
						else
						{
							if (random(1,16) <= 1) classname = "BetaLostSoul"; 
																else classname = "LostSoulAnnoying";
						}
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 180, flags, 10);
				classname = "LostSoulNew";
				flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (kc_monsterevolutions)
				{
					if (random(1,6) <= 1)
					{
						if (random(1,9) <= 1)
						{
							classname = "ForgottenOne";
						}
						else
						{
							if (random(1,16) <= 1) classname = "BetaLostSoul"; 
																else classname = "LostSoulAnnoying";
						}
					}
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainShootSkull(classname, angle + 270, flags, 10);
			}
			PAIN M 8 BRIGHT;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Raise:
			PAIN MLKJIH 8;
			Goto See;
	}
}
class PElementalShadowSplitAfterImage : KCBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			PNSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class PElementalShadowSplit1 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit2 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit3 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}

class PElementalShadowSplit4 : PElementalShadowSplitAfterImage
{
	override void PostBeginPlay()
	{
		if (master)
		{
			scale.x = master.scale.x;
			scale.y = master.scale.y;
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 
			{
				A_ShadowSplitImage1("PElementalShadowSplitAfterImage");
			}
			Stop;
	}
}
class LostSoulNew : KCCreature
{
	default
	{
		Tag "Lost Soul";
		Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PainChance 256;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 85;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 256;
		DamageFactor "Cricket", 2.5;
		Painchance "Cricket", 256;
		DamageFactor "Chop", 5;
		Painchance "Chop", 256;
		DamageFactor "Lead", 0.5;
		Painchance "Lead", 128;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 64;
		DamageFactor "CherryBomb", 0.25;
		Painchance "CherryBomb", 64;
		DamageFactor "BRocket", 0.5;
		Painchance "BRocket", 128;
		DamageFactor "Spinner", 1.25;
		Painchance "Spinner", 256;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Breakfast", 1.75;
		Painchance "Breakfast", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT;
		+NOGRAVITY;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTFALL;
		+NOICEDEATH;
		+ZDOOMTRANS;
		+RETARGETAFTERSLAM;
		+ONLYSLAMSOLID;
		AttackSound "skull/melee";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		Obituary "$OB_SKULL";
	}
	
	override void Tick()
	{
		if (!bDORMANT)
		{
			int damage = A_CalcDamageFormula(3,random(1,8),0.05,0.3334,0.1667,0.005);
			finaldamagedealt = damage;
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			SKUL AB 10 BRIGHT A_Look();
			Loop;
		See:
			SKUL A 0 BRIGHT
			{
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			SKUL AB 6 BRIGHT
			{
				A_UnSetDmgWeaknesses();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
			
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 
			{
				A_DynamicMusic();
				user_painfastchase = 0; 
			}
			SKUL C 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			SKUL D 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_LostSoulChargeWeakness();
				A_SkullAttack();
				A_DynamicMusic();
			}
			SKUL CCDD 2 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_FaceTarget(); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
			}
			Goto Missile+4;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SKUL E 3 BRIGHT;
			SKUL E 3 BRIGHT
			{
				A_UnSetDmgWeaknesses();
				A_KCPain();
				user_painfastchase = 2 * random(1,8);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SKUL F 0 Bright A_UnSetDmgWeaknesses();
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
	}
}
class LostSoulAnnoying : LostSoulNew
{
	default
	{
		Tag "Annoying Lost Soul";
		Health 125;
		DamageFunction (finaldamagedealt);
		Speed 10;
		Meleerange 80;
		Mass 75;
		ReactionTime 4;
		Painchance 160;
		DamageFactor 0.75;
		DamageFactor "Fire", 0.334;
		Painchance "Fire", 56;
		DamageFactor "Ice", 3.001;
		Painchance "Ice", 256;
		AttackSound "skull/melee2";
		Obituary "%o was spooked by an annoying lost soul.";
		MissileChanceMult 0.5;
		//+MISSILEEVENMORE;
		//-MISSILEMORE;
	}
	
	override void Tick()
	{
		if (!bDORMANT)
		{
			int damage = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
			finaldamagedealt = damage;
		}
		super.Tick();
	}
	
	states
	{
		Spawn:
			SKUL AB 10 BRIGHT A_Look();
			Loop;
		See:
			SKUL A 0
			{
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			SKUL ABAB 3 BRIGHT 
			{
				A_UnSetDmgWeaknesses();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			SKUL C 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			SKUL D 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_LostSoulChargeWeakness();
				A_SkullAttack(30);
				A_DynamicMusic();
			}
			SKUL CDCD 2 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_FaceTarget(); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
			}
			Goto Missile+4;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 BRIGHT;
			SKUL E 3 BRIGHT
			{
				A_KCPain();
				A_UnSetDmgWeaknesses();
				user_painfastchase = 2 * random(1,8);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SKUL F 0 BRIGHT
			{
				int randvar = random(1,4);
				A_Explode((randvar*16),(randvar*16),0,0,(randvar*8));
			}
			SKUL F 0 Bright A_UnSetDmgWeaknesses();
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		}
}
class ForgottenOne : LostSoulNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Others"
		Tag "Forgotten One";

		Obituary "A Forgotten One rammed %o off into the distance :V";
		Health 40;
		Radius 14;
		Height 30;
		meleerange 80;
		Mass 25;
		Speed 8;
		PainChance 115;
		PainChance "Melee", 230;
		PainChance "Fist", 230;
		PainChance "Kick", 230;

		DamageFactor 0.25;
		DamageFactor "Crush", 0.9;
		DamageFactor "Ice", 1.5; // Lost Souls = +50% Ice Damage
		Painchance "Ice", 172;
		DamageFactor "Fire", 0.2; // Lost Souls = -80% Fire Damage
		Painchance "Fire", 22; // Lost Souls = -80% Pain Chance

		Damagefactor "Stomp", 0.667;
		Damagefactor "Trample", 0.667;
		DamageFactor "Melee", 0.667;
		DamageFactor "Fist", 0.667;
		DamageFactor "Kick", 0.667;
		Scale 0.7;
		PainSound "Forgotten/Pain";
		DeathSound "Forgotten/Death";
		ActiveSound "Forgotten/Active";
		Damage 3;
		Monster;
		+FLOORCLIP;
		+FLOAT;
		+NOGRAVITY;
		+NOICEDEATH;
		+DONTFALL;
		+FLOATBOB;
		+NOBLOOD;
		+NOTARGET;
		+NOTARGETSWITCH;
		+NOINFIGHTING;
	}
	
	States
	{
		Spawn:
			FRGO A 0 Bright NoDelay 
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO AAAAAABBBBBB 1 Bright A_Look();
			Loop;
		See:
			FRGO A 0 Bright
			{
				bFLOATBOB = true;
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			FRGO AABB 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			FRGO C 0
			{
				bFLOATBOB = false;
				user_painfastchase = 0;
			}
			FRGO CCDDC 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
			}
			FRGO D 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				A_StartSound("Forgotten/Attack");
				A_LostSoulChargeWeakness();

				A_SkullAttack(20);
				A_SkullAttack();
			}
			FRGO C 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
			}
			FRGO C 0 Bright A_JumpIfTargetInLOS(4, (random(37,38) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(2.5,true,self))));
			FRGO C 0 A_Jump(24, "StopCharge");
			FRGO DC 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
			}
			Goto Missile+10;
			FRGO C 0 Bright;
			Goto Missile+7;
		StopCharge:
			FRGO C 0 A_Stop();
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FRGO E 0 Bright
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO E 3 Bright;
			FRGO E 3 Bright
			{
				A_KCPain();
				user_painfastchase = 6 * random(1,8);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				A_Explode(32,32,0,0,(random(1,4)*4));
			}
			FRGO E 0 Bright;
			FRGO E 0 
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = false;
			}
			FRGO E 0 A_Stop();
			FRGO E 4 Bright;
			FRGO F 4 Bright;
			FRGO G 6 Bright A_Scream();
			FRGO H 6 Bright;
			FRGO I 6 Bright A_NoBlocking();
			FRGO J 6 Bright;
			Stop;
		Ice:
			FRGO E 5 A_GenericFreezeDeath();
			FRGO E 1 A_FreezeDeathChunks();
			wait;
	}
}
class BetaLostSoul : LostSoulNew
{
	int atkframe;
	default
	{
		Tag "Ghoulish Lost Soul";
		Speed 12;
		Radius 16;
		Height 40;
		PainChance 128;
		SeeSound "ghoul/sight";
		PainSound "ghoul/pain";
		DeathSound "ghoul/death";
		ActiveSound "ghoul/active";
		DamageFactor "PSI", 1.5;
		DamageFactor "Magic", 1.5;
		DamageFactor "Zap", 1.5;
	}
	
	void A_BetaSoulFastChaseCalc(int type1)
	{
		A_FastChaseCalc(randompick(4,4,4,4,5,5,5,6),randompick(24,24,24,24,22,22,22,20)); // 3,24
		if (random(1,256) <= user_fastchasechance) 
		{
			if (type1 >= 1) A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
								 else A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
		}
		else
		{
			if (type1 >= 1) A_KCChase(null,null,0,1,3,1,1);
								 else A_KCChase("Melee","Missile",0,1,3,1,1);
		}
		user_painfastchase = 0;
	}
	
	States
	{
		Spawn:
			GHUL AABB 5 
			{
				A_UnSetDmgWeaknesses();
				A_RemoveLight("BetaSoulLgt");
				A_Look();
			}
			Loop;
		See:
			GHUL AABBCCBB 3 // BSKL BCDA 5
			{
				A_UnSetDmgWeaknesses();
				A_RemoveLight("BetaSoulLgt");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }

				A_BetaSoulFastChaseCalc(0);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 bright
			{
				A_LostSoulChargeWeakness();
				A_DynamicMusic();
				int basesndchannel = 901;
				A_StartSound("ghoul/psistart",basesndchannel,CHANF_DEFAULT,1.0,ATTN_NORM,1.5);
				A_StartSound("ghoul/psistart",basesndchannel+1,CHANF_DEFAULT,1.0,ATTN_NORM,2.0);
				A_StartSound("ghoul/psistart",basesndchannel+2,CHANF_DEFAULT,1.0,ATTN_NORM,2.5);
				atkframe = 0;
			}
			GHUL BCDEFG 3 bright // BSKL E 4 
			{
				atkframe++;
				if (atkframe == 1) A_AttachLightDef("BetaSoulLgt","GhoulAttack1");
				if (atkframe == 2) A_AttachLightDef("BetaSoulLgt","GhoulAttack1");
				if (atkframe == 3) A_AttachLightDef("BetaSoulLgt","GhoulAttack2");
				if (atkframe == 4) A_AttachLightDef("BetaSoulLgt","GhoulAttack3");
				if (atkframe == 5) A_AttachLightDef("BetaSoulLgt","GhoulAttack4");
				if (atkframe == 6) A_AttachLightDef("BetaSoulLgt","GhoulAttack4");

				A_LostSoulChargeWeakness();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				if (atkframe == 5)
				{
					int randroll = random(1,8);
					int randmin, randmax;
					if (randroll <= 4) 
					{
						randmin = 1;
						randmax = 2;
					}
					if (randroll >= 5 && 
							randroll <= 7) 
					{
						randmin = 2;
						randmax = 4;
					}
					if (randroll == 8) 
					{
						randmin = 4;
						randmax = 8;
					}
					double basedmgorig = frandompick(1.0,1.2,1.4,1.6,1.8,2.0,2.25,2.5,2.75,3.0);
					double basedmg = basedmgorig;
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) 
					{
						A_SetTics(2); 
						basedmg += (basedmgorig * 0.5);
					}
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) 
					{
						A_SetTics(1); 
						basedmg += (basedmgorig * 0.334);
					}
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) 
					{
						A_SetTics(randompick(0,1,1,1)); 
						basedmg += (basedmgorig * 0.25);
					}
					A_BetaSkullAttack(basedmg,randmin,randmax);
				}
				
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					if (atkframe == 5) A_SpawnProjectile("BetaSoulFireball",22);
					A_BetaSoulFastChaseCalc(1);
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			GHUL I 3 bright // BSKL G 4;
			{
				A_UnSetDmgWeaknesses();
				A_RemoveLight("BetaSoulLgt");
				A_AttachLightDef("BetaSoulLgt","GhoulPain2");
			}
			GHUL K 3 bright // BSKL H 2
			{
				A_UnSetDmgWeaknesses();
				A_KCPain();
				A_AttachLightDef("BetaSoulLgt","GhoulPain3");
				user_painfastchase = 6 * random(1,8);
			}
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			GHUL I 4 bright // BSKL G 4;
			{
				A_UnSetDmgWeaknesses();
				A_RemoveLight("BetaSoulLgt");
				A_AttachLightDef("BetaSoulLgt","GhoulPain2");
			}
			GHUL K 4 bright // BSKL H 2
			{
				A_UnSetDmgWeaknesses();
				A_KCPain();
				A_AttachLightDef("BetaSoulLgt","GhoulPain3");
				user_painfastchase = 8 * random(1,8);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			GHUL L 0 bright
			{
				A_UnSetDmgWeaknesses();
				A_RemoveLight("BetaSoulLgt");
			}
			GHUL L 5 bright; // BSKL JKLM 5;
			GHUL M 5 bright A_Scream(); // BSKL N 5 A_Scream();
			GHUL NO 5 bright; // BSKL O 5;
			GHUL P 5 bright A_Fall(); // BSKL P 5 A_Fall();
			GHUL Q 5 bright // BSKL Q 5 A_Stop();
			{
				A_NoBlocking();
				A_Stop(); 
			}
			TNT1 A 0 CCCardDeathCheck();
			stop;
		Ice:
			GHUL A 5 
			{
				A_RemoveLight("BetaSoulLgt");
				A_GenericFreezeDeath();
			}
			GHUL A 1 
			{
				A_RemoveLight("BetaSoulLgt");
				A_FreezeDeathChunks();
			}
			wait;
	}
}


class BetaSoulFireball : KCProjectile
{
	double firealpha;
	double fireint;
	Default
	{
		Tag "Ghoulish Soul's MiniBlast";
		Radius 6;
		Height 6;
		Scale 0.95;
		Speed 22.5;
		FastSpeed 45;
		DamageFunction (randompick(1,1,1,1,1,2,2,2,2,3) * (random(1,4) * 2));
		Projectile;
		+RANDOMIZE
		RenderStyle "Add";
		Alpha 0.95;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "PSI";
	}
	
	States
	{
		Spawn:
			GBAL AB 2 BRIGHT
			{
				fireint = GetAge() % 24;
				if (fireint == 0) firealpha = 0.95;
				if (fireint == 1 || fireint == 23) firealpha = 0.875;
				if (fireint == 2 || fireint == 22) firealpha = 0.80;
				if (fireint == 3 || fireint == 21) firealpha = 0.725;
				if (fireint == 4 || fireint == 20) firealpha = 0.65;
				if (fireint == 5 || fireint == 19) firealpha = 0.575;
				if (fireint == 6 || fireint == 18) firealpha = 0.50;
				if (fireint == 7 || fireint == 17) firealpha = 0.425;
				if (fireint == 8 || fireint == 16) firealpha = 0.35;
				if (fireint == 9 || fireint == 15) firealpha = 0.275;
				if (fireint == 10 || fireint == 14) firealpha = 0.20;
				if (fireint == 11 || fireint == 13) firealpha = 0.125;
				if (fireint == 12) firealpha = 0.05;
				A_SetRenderStyle(firealpha,STYLE_Add);
			}
			Loop;
		Death:
			GBAL C 3 BRIGHT A_SetRenderStyle(0.95,STYLE_Add);
			GBAL C 3 BRIGHT;
			APBX BCDE 3 BRIGHT;
			Stop;
	}
}

class RevenantTracerNew : KCProjectile replaces RevenantTracer
{
	Default
	{
		Tag "Tracer Missile";
		Radius 11;
		Height 8;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+SEEKERMISSILE 
		+RANDOMIZE
		+ZDOOMTRANS
		SeeSound "skeleton/attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
		A_SeekerCheckTracer();
	}
	
	States
	{
		Spawn:
			FATB AB 2 BRIGHT 
			{
				double s1 = 16.875;
				double s2 = 16.875;
				if (target && kc_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.0025,true,target));
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.0025,true,target));
					if (A_CheckMonsterLevel(30,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.00125,true,target));
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.00125,true,target));
					}
					if (A_CheckMonsterLevel(60,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.000625,true,target));
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.000625,true,target));
					}
				}
				A_Tracer(s1,2);
			}
			Loop;
		Death:
			FBXP A 8 BRIGHT;
			FBXP B 6 BRIGHT;
			FBXP C 4 BRIGHT;
			Stop;
		}
}
class RevenantNew : KCCreature
{
	default
	{
		Tag "Revenant";
		Health 300;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 10;
		PainChance 100;
		DamageFactor "Fire", 1.25;
		Painchance "Fire", 125;
		DamageFactor "Ice", 1.75;
		Painchance "Ice", 175;
		DamageFactor "CherryBomb", 1.125;
		Painchance "CherryBomb", 112;
		DamageFactor "Popper", 0.75;
		Painchance "Popper", 75;
		DamageFactor "Beats", 0.75;
		Painchance "Beats", 75;
		DamageFactor "Breakfast", 0.5;
		Painchance "Breakfast", 50;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 150;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MeleeThreshold 196;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+FLOORCLIP
		SeeSound "skeleton/sight";
		PainSound "revenant/pain";
		DeathSound "skeleton/death";
		ActiveSound "skeleton/active";
		MeleeSound "skeleton/melee";
		HitObituary "%o tried to play a game of punch-out with a Revenant.";
		Obituary "$OB_UNDEAD";
	}
	
	void A_SkelMissile(class<actor> type = "RevenantTracerNew")
	{
		if (target == null) return;
		A_FaceTarget();
		if (A_CheckCCInvertGrav()) AddZ(-16); else AddZ(16);
		Actor missile = SpawnMissile(target, type);
		if (A_CheckCCInvertGrav()) AddZ(16); else AddZ(-16);
		if (missile != null)
		{
			missile.SetOrigin(missile.Vec3Offset(missile.Vel.X, missile.Vel.Y, 0.), false);
			missile.tracer = target;
		}
	}
	
	void A_SkelFist()
	{
		let targ = target;
		if (targ == null) return;
		A_FaceTarget();
		
		if (CheckMeleeRange ())
		{
			int damage = A_CalcDamageFormula(6,random(1,10),0.005,0.3334,0.1667,0.005);
			
			A_StartSound("skeleton/melee", CHAN_WEAPON);
			int newdam = targ.DamageMobj (self, self, damage, 'Melee');
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	States
	{
		Spawn:
			SKEL AB 10 A_Look();
			Loop;
		See:
			SKEL AABBCCDDEEFF 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			SKEL G 0 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			SKEL G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SkelWhoosh();
				A_FaceTarget();
			}
			SKEL H 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SKEL I 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SkelFist();
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SKEL J 0 BRIGHT 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			SKEL J 10 bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_FaceTarget();
			}
		MissileStart:
			SKEL K 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					double BAngle = angle;
					A_SetAngle(angle+10);
					A_SkelMissile("RevenantTracerNew");
					A_SetAngle(BAngle);
					A_SetAngle(angle-10);
					A_SkelMissile("RevenantTracerNew");
					A_SetAngle(BAngle);
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					if (random(1,4) == 1)
					{
						double BAngle = angle;
						A_SetAngle(angle+10);
						A_SkelMissile("RevenantTracerNew");
						A_SetAngle(BAngle);
						A_SetAngle(angle-10);
						A_SkelMissile("RevenantTracerNew");
						A_SetAngle(BAngle);
					}
					else
					{
						A_SkelMissile("RevenantTracerNew");
					}
				}
				else
				{
					A_SkelMissile("RevenantTracerNew");
				}
			}
			SKEL K 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			SKEL K 0
			{
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= (16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(7.5,true,self)))) { return resolvestate("MissileStart"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SKEL L 5;
			SKEL L 5 A_KCPain();
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			SKEL L 5;
			SKEL L 5 A_KCPain();
			SKEL L 5;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SKEL LM 7;
			SKEL N 7 A_Scream();
			SKEL O 7 A_NoBlocking();
			SKEL P 7;
			SKEL Q -1;
			Stop;
		Raise:
			SKEL Q 5;
			SKEL PONML 5;
			Goto See;
	}
}
class DIPuff : KCProjectile
{
	default
	{
		Tag "Dark Glare";
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		+PUFFONACTORS;
		RENDERSTYLE "Add";
		DamageType "IncarnateGlare";
	}
	
	States
	{
		Spawn:
			INPF ABCDE 3 Bright;
			Stop;
	}
}
class IncarnateGlareTracer : KCBulletTracer
{
	default
	{
		Tag "Dark Glare";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		KCFastProjectile.PostBeginPlay();
		A_ScaleVelocity(kc_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (5 * random(1,3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("IncarnateGlareTracerTrail",6,-2.5);
			loop;
		XDeath:
			INPF ABCDE 3 Bright;
			stop;
		Death:
		Crash:
			INPF ABCDE 3 Bright;
			stop;
	}
}
class IncarnateGlareTracerTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			RTAC A 2 bright;
			stop;
	}
}
class DeathIncarnate : KCCreature 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Revenant Type"
		Tag "Death Incarnate";

		Health 600;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 12;
		MeleeDamage 7;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 1.5;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Painchance "Explosive", 43;
		Damagefactor "IncarnateGlare", 0;
		Painchance "IncarnateGlare", 0;
		DamageFactor "Fire", 0.1; // Incarnates = -80% Fire Damage
		DamageFactor "CherryBomb", 0.2;
		DamageFactor "Spinner", 0.15;
		DamageFactor "BRocket", 2.0;
		DamageFactor "Popper", 2.0;
		DamageFactor "Ice", 1.75;
		DamageFactor "Suck", 0.25;
		DamageFactor "Zap", 2.5;
		Painchance "Fire", 13; // Incarnates = -80% Pain Chance
		Painchance "CherryBomb", 26;
		Painchance "Spinner", 19;
		Painchance "BRocket", 128;
		Painchance "Popper", 255;
		Painchance "Ice", 112;
		Painchance "Suck", 16;
		Painchance "Zap", 160;
		MONSTER;
		+FLOORCLIP;
		MaxTargetRange 896;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		SeeSound "monster/incsit";
		PainSound "dincarnate/pain";
		DeathSound "monster/incdth";
		ActiveSound "monster/incact";
		AttackSound "monster/incatk";
		MeleeSound "monster/inchit";
		Obituary "%o was killed by a Death Incarnate's glare.";
		HitObituary "%o was beaten to death by a Death Incarnate.";
	}

	States 
	{
		Spawn:
			INCA AB 10 A_Look();
			Loop;
		See:
			INCA AABBCCDDEEFF 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; MaxTargetRange = 2048; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0
			{
				A_DynamicMusic();
			}
		Melee2:
			INCA G 0 A_Jump(128,5); // to -1
			INCA G 0 A_FaceTarget();
			INCA G 6  
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SkelWhoosh();
			}
			INCA H 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			INCA I 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(7,random(1,10),0.005,0.3334,0.1667,0.005);

				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true);
			}
			Goto See;
			INCA R 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SkelWhoosh();
			}
			INCA S 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			INCA T 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(6,random(1,11),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			INCA G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_SkelWhoosh();
			}
			INCA H 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			INCA I 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_FaceTarget();
				int mldmg = A_CalcDamageFormula(6,random(1,11),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			Goto See;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			INCA J 0
			{
				A_DynamicMusic();
			}
			INCA J 5
			{
				user_shotsfiredmax = 10;
				user_shotaccuracy = 30.0;
				user_shotzaccuracy = 0.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); user_shotsfiredmax += 12; user_shotaccuracy = user_shotaccuracy * 1 / 4; user_shotzaccuracy = user_shotzaccuracy * 1 / 4; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); user_shotsfiredmax += 8; user_shotaccuracy = user_shotaccuracy * 2 / 4; user_shotzaccuracy = user_shotzaccuracy * 2 / 4; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); user_shotsfiredmax += 4; user_shotaccuracy = user_shotaccuracy * 3 / 4; user_shotzaccuracy = user_shotzaccuracy * 3 / 4; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
			INCA J 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
			}
		MissileStart:
			INCA U 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_FaceTarget();
				
				A_StartSound("monster/incatk",CHAN_WEAPON,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.925,1.075));
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, user_shotsfiredmax, (dmg), "DIPuff", 1024);
				}
				else
				{
					for (user_shotsfired = 0; user_shotsfired < user_shotsfiredmax; user_shotsfired++)
					{
						actor TraceShot;
						TraceShot = A_SpawnProjectile("IncarnateGlareTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
						if (TraceShot) 
						{
							KCBulletTracer TraceShotKC;
							TraceShotKC = KCBulletTracer(TraceShot);
							if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
						}
					}
				}
			}
			INCA K 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			INCA K 0
			{
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= (16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(7.5,true,self)))) { return resolvestate("MissileStart"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			INCA L 5;
			INCA L 5 A_KCPain();
			Goto See;
		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			INCA L 5;
			INCA L 5 A_KCPain();
			INCA LL 5;
			Goto See;
		Pain.Thunder:
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			INCA L 5;
			INCA L 5 A_KCPain();
			INCA LLL 5;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (192 - (user_deathcounter * 24));
				if (Wads.CheckNumForName("KC-STAEONS", Wads.ns_global, -1, true) != -1) chance = (96 - (user_deathcounter * 24));
				
				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.Zap:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (96 - (user_deathcounter * 24));
				if (Wads.CheckNumForName("KC-STAEONS", Wads.ns_global, -1, true) != -1) chance = (48 - (user_deathcounter * 24));

				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.SpectralLow:
		Death.Sigil:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				if (random(1,256) <= 8) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;

		Death2:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCA L 7;
			INCA M 7;
			INCA N 7 A_Scream();
			INCA O 7 A_NoBlocking();
			INCA P 7;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCX Q 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCA Q -1;
			Stop;
		FakeDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				user_deathcounter += 1;
			}
			INCA L 6;
			INCA M 6;
			INCA N 6 A_Scream();
			INCA O 6 A_NoBlocking();
			INCA P 6;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
		RegenCycle:
			INCA Q 0 CanRaise Thing_Raise(0);
			INCA Q 5;
			loop;

		Death.Massacre:
		Death.SilentMassacre:
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				user_truekill = 1;
			}
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			INCX D 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCX EFGHIJ 5 Bright;
			INCX K -1;
		Ice:
			INCA L 5 A_GenericFreezeDeath();
			INCA L 1 A_FreezeDeathChunks();
			wait;
		Raise:
			INCA Q 0 
			{
				A_KillChildren();
				if (user_truekill)
				{
					user_truekill = 0;
					user_deathcounter = 0;
				}
			}
			INCA Q 5;
			INCA PONML 5;
			Goto See;
	}
}
class HellWarrior : KCCreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 175;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 38;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		DropItem "PikeAmmo", 8;
		DropItem "PikeAmmoBig", 1;
	}

	States 
	{ 
		Spawn: 
			HWAR AB 10 A_Look();
			Loop;
		See: 
			HWAR AABBCCDD 3
			{
				A_HellWarShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,1,true,self))
				{
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(180,1,true,self))
					{
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();

				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,1,true,self))
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(180,1,true,self))
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,1,true,self))
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(180,1,true,self))
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 16
			{
				A_HellWarShieldOn();
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,1,true,self))
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(180,1,true,self))
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR H 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HWAR J 6 A_KCPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }	
			Goto PainShield;
		PainShield:
			#### # 0 A_TimeFreezeCheckPain();
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death: 
			#### # 0 A_TimeFreezeCheckDeath();
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60); // HellWarriorShield
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Ice:
			HWAR J 0 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60); // HellWarriorShield
			HWAR J 5 A_GenericFreezeDeath();
			HWAR J 1 A_FreezeDeathChunks();
			wait;

		Raise: 
			HWAR QPONMLK 5;
			Goto See;
	} 
}
class HellWarriorBall : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 14;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.7;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HWFB AB 5 Bright;
			Loop;
		Death:
			HWFB CDE 5 Bright;
			Stop;
	}
}
class HellWarriorBall2 : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		ALPHA 0.8;
		SCALE 0.4;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Zap";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override bool CanCollideWith(Actor other, bool passive) // HellWarriorBall2
	{
		if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright;
			Loop;
		Death:
			GRBA AIJKLMN 3 Bright;
			Stop;
	}
}
class HellWarriorShield : KCBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Speed 6;
		BounceType "Doom";
		+DROPOFF;
		+Missile;
	}
	
	States
	{
		Spawn:
			HWSH ABCDEFGH 3;
			Loop;
		Death:
			HWSH I -1;
			Loop;
	}
}
class FlyingBalrog : KCCreature
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 30;
		Mass 400;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		Monster;
		SeeSound "keen/pain";
		PainSound "keen/death";
		DeathSound "brain/spit";
		ActiveSound "keen/death";
		Obituary "%o fell to the might of a Balrog.";
	}
	
	States
	{
		Spawn:
			KEEN A 10 Bright A_Look();
			goto Spawn;
		See:
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			KEEN H 8 Bright;
			KEEN A 3 Bright A_Pain();
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			KEEN EF 6 Bright A_FaceTarget();
			KEEN G 1 Bright A_FatAttack1();
			KEEN G 1 Bright A_FatAttack2();
			KEEN G 1 Bright A_FatAttack3();
			KEEN G 1 Bright A_FaceTarget();
			KEEN GG 1 Bright A_SkelMissile();
			KEEN G 8 Bright A_SkelMissile();
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			KEEN I 5 Bright;
			KEEN J 5 Bright A_Scream();
			KEEN K 5 Bright;
			KEEN L 5 Bright A_Fall();
			KEEN MNOPQ 5 Bright;
			KEEN R 5 Bright A_BossDeath();
			KEEN R 1 Bright;
			stop;
	}
}
class FlyingBalrogShot1 : KCProjectile // FatShotNew
{
	default
	{
		Tag "Flamer Shot";
		scale 1.25;
		Radius 6;
		Height 8;
		Speed 30; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MANF AABB 2 Bright;
			Loop;
		Death:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}
class FlyingBalrogShot2 : KCProjectile // RevenantTracerNew
{
	double user_tracetightness;
	int LevelOfShooter;
	default
	{
		Tag "Tracer Missile";
		scale 1.25;
		Radius 11;
		Height 8;
		Speed 15; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE;
		+RANDOMIZE;
		SeeSound "Imp/Attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
		A_SeekerCheckTracer();
	}
	
	States
	{
		Spawn:
			FATB AB 2 Bright 
			{
				double s1 = 12.65625;
				double s2 = 12.65625;
				if (target && kc_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.001875,true,target));
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.001875,true,target));
					if (A_CheckMonsterLevel(30,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.0009375,true,target));
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.0009375,true,target));
					}
					if (A_CheckMonsterLevel(60,2,true,target))
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.00046875,true,target));
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.00046875,true,target));
					}
				}
				A_Tracer(s1,2);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("skeleton/tracex",CHAN_7);
				A_Quake(1, 8, 0, 192, "nosound/silent");
				A_Quake(3, 8, 0, 96, "nosound/silent");
			}
			FBXP A 8 Bright;
			FBXP B 6 Bright;
			FBXP C 4 Bright;
			Stop;
	}
}
class FlyingBalrogDVDS : KCCreature
{
	default
	{
		Tag "Flying Balrog";;
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMCLASS;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_Look();
			Loop;
		See:
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE == true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
					A_FloatSetFChaseT(randompick(0,3,6));
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;
			
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			FRIT EF 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(2,3,3,3,4,4,4,4,4,4,4,5,5,5,6); // Angle
				user_tempvar3 = (user_tempvar2 * 1.25); // Offset
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*1.5), (user_tempvar3*1.5)); // Partially Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, 0, 0); // Center
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-1.5), (user_tempvar3*-1.5)); // Partially Right
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(3,4.5,4.5,4.5,6,6,6,6,6,6,6,7.5,7.5,7.5,9); // Angle
				user_tempvar3 = (user_tempvar2 * 1.5); // Offset
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, 0, 0);
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
			}
			FRIT G 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,20);
				user_painfastchase = 5 * random(1,8);
			}
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,15);
				user_painfastchase = 7 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FRIT I 0 Bright 
			{
				bDONTTHRUST = true;
				A_Stop();
				A_NoGravity();
			}
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",CHAN_VOICE);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_BossDeath();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Ice:
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}
class KnightBallNew : KCProjectile
{
	Default
	{
		Tag "Knight Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}
class HellKnightNew : KCCreature
{
	default
	{
		Tag "Hell Knight";
		Health 500;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 100;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 50;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 200;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		+BOSSDEATH;
		+E1M8BOSS;
		BloodColor "00 64 00";
		SeeSound "knight/sight";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "knight/death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";
		Species "HellNoble";
		+DONTHARMSPECIES
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(random(5,10),random(1,8),0.005,0.3334,0.1667,0.005);

				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("KnightBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (target, "KnightBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOS2 AB 10 A_Look();
			Loop;
		See:
			BOS2 AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			BOS2 EF 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS2 G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_BruisAttack();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BOS2 H 2;
			BOS2 H 2 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BOS2 I 8;
			BOS2 J 8 A_Scream();
			BOS2 K 8;
			BOS2 L 8 A_NoBlocking();
			BOS2 MN 8;
			BOS2 O -1;
			Stop;
		Ice:
			BOS2 H 5 A_GenericFreezeDeath();
			BOS2 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS2 O 8;
			BOS2 NMLKJI 8;
			Goto See;
	}
}
class BaronBallNew : KCProjectile // replaces BaronBall
{
	Default
	{
		Tag "Baron Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}
class BaronOfHellNew : KCCreature
{
	default
	{
		Tag "Baron of Hell";
		Health 1000;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 187;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 37;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		BloodColor "00 64 00";
		Monster;
		Species "HellNoble";
		+DONTHARMSPECIES
		+FLOORCLIP
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "baron/sight";
		PainSound "baron/pain";
		DeathSound "baron/death";
		ActiveSound "baron/active";
		Obituary "$OB_BARON";
		HitObituary "$OB_BARONHIT";
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(10,random(1,8),0.01,0.5,0.25,frandom(0.005,0.0075));
				
				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("BaronBallNew",32,ptr:AAPTR_TARGET); //SpawnMissile (target, "BaronBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOSS AB 10 A_Look();
			Loop;
		See:
			BOSS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
			
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self)) { return resolvestate("Missile2"); }
				return resolvestate(null);
			}
			BOSS EF 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				
				A_BruisAttack();
			}
			Goto See;
			
		Melee2:
		Missile2:
			TNT1 A 0;
			BOSS PQ 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS R 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_BruisAttack();
				A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*-1));
				A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*1));
				if (A_CheckMonsterLevel(225,1,true,self))
				{
					A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*-2));
					A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*2));
				}
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BOSS H 2;
			BOSS H 2 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BOSS I 8;
			BOSS J 8 A_Scream();
			BOSS K 8;
			BOSS L 8 A_NoBlocking();
			BOSS MN 8;
			BOSS O -1 A_BossDeath();
			Stop;
		Ice:
			BOSS H 5 A_GenericFreezeDeath();
			BOSS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOSS O 8;
			BOSS NMLKJI 8;
			Goto See;
	}
}
class BelphegorBall : BaronBallNew
{
	default
	{
		Tag "Belphegor Plasma";
		decal "BaronScorch";
		Speed 20;
		DamageFunction (finaldamagedealt);
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 Bright;
			Loop;
		Death:
			BAL7 CDE 6 Bright;
			Stop;
	}
}
class Belphegor : HellKnightNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hell Nobles"
		Tag "Belphegor";

		Health 1500;
		Painchance 25;
		DamageFactor "Crush", 0.55;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 12;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 50;
		BloodColor "00 64 00";
		Species "HellNoble";
		+DONTHARMSPECIES;
		SeeSound "belphegor/sight";
		PainSound "belphegor/pain";
		DeathSound "belphegor/death";
		ActiveSound "baron/active";
		Obituary "%o was slain by a Belphegor.";
		HitObituary "%o was slain by a Belphegor.";
	}
	
	States
	{
		Spawn:
			BOS3 A 0 NoDelay;
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_Jump(32,2); // 12.5% chance of skipping the shotsfired check and possibly shooting an extra shot/nova
			TNT1 A 0 A_JumpIf(user_shotsfired > 2, "See");
			BOS3 EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BOS3 G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(random(12,13),random(1,8),0.005,0.3334,0.1667,frandom(0.005,0.00625));
				A_CustomComboAttack("BelphegorBall", user_tempvar1, (dmg), "imp/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			goto Missile;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BOS3 I 8;
			BOS3 J 8 A_Scream();
			BOS3 K 8;
			BOS3 L 8 A_NoBlocking();
			BOS3 MN 8;
			BOS3 O -1 A_BossDeath();
			Stop;
		Ice:
			BOS3 H 5 A_GenericFreezeDeath;
			BOS3 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS3 O 8;
			BOS3 NMLKJI 8;
			Goto See;
	}
}
class ArachnotronPlasmaNew : KCProjectile // replaces ArachnotronPlasma
{
	Default
	{
		Tag "Plasma Ball";
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "baby/attack";
		DeathSound "baby/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(5,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			APLS AB 5 BRIGHT;
			Loop;
		Death:
			APBX ABCDE 5 BRIGHT;
			Stop;
	}
}
class ArachnotronNew : KCCreature
{
	default
	{
		Tag "Arachnotron";
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 128;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 112;
		DamageFactor "Bonk", 0.625;
		Painchance "Bonk", 80;
		DamageFactor "Cricket", 0.5;
		Painchance "Cricket", 64;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 192;
		DamageFactor "Suck", 0.25;
		Painchance "Suck", 32;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 192;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+MAP07BOSS2;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
		Species "Arachnotron";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_BspiAttack()
	{
		if (target)
		{
			A_FaceTarget();
			A_SpawnProjectile("ArachnotronPlasmaNew",32,ptr:AAPTR_TARGET); // SpawnMissile(target, "ArachnotronPlasma");
		}
	}

	States
	{
		Spawn:
			BSPI AB 10 A_Look();
			Loop;
		See:
			BSPI A 0 { user_walksound = 0; }
			BSPI A 20 { user_walksound = 0; }
			BSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("baby/walk",CHAN_BODY); 
				}
				if (user_walksound >= 6) { user_walksound = 0; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			goto See+2;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			BSPI AA 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			BSPI G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_BspiAttack();
				A_DynamicMusic();
			}
			BSPI H 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
			}
			BSPI H 1 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(0); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(randompick(0,0,1,1,1)); }
				A_SpidRefire();
			}
			Goto Missile+4;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BSPI I 3;
			BSPI I 3 A_KCPain();
			Goto See+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			BSPI II 3;
			BSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 2;
			BSPI I 1;
			BSPI I 2;
			Goto See+2;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
			#### # 0 A_TimeFreezeCheckPain();
			BSPI I 3;
			BSPI I 3;
			BSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 3;
			BSPI I 3;
			BSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 3;
			BSPI I 3;
			BSPI I 3;
			Goto See+2;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BSPI J 20 A_Scream();
			BSPI K 7 A_NoBlocking();
			BSPI LMNO 7;
			BSPI P -1 A_BossDeath();
			Stop;
		Raise:
			BSPI P 5;
			BSPI ONMLKJ 5;
			Goto See+2;
	}
}
class RailArachnotron : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Arachnotron";
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		Damage 30;
		Painchance 128;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+MAP07BOSS2;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "%o was railed by an arachnotron.";
		Decal "RedRailScorch";
		Species "Arachnotron";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			RSPI AB 10 A_Look();
			Loop;
		See:
			RSPI A 20;
			RSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("baby/walk",CHAN_BODY); 
				}
				if (user_walksound >= 6) { user_walksound = 0; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			goto See+1;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			RSPI A 0 
			{
				A_DynamicMusic();
			}
			RSPI A 0 A_StartSound("baby/chargerailgun");
			RSPI AG 16
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(15); }
				A_FaceTarget();
			}
			RSPI H 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				
				A_FaceTarget();
				int dmg = A_CalcDamageFormula(9,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomRailgun(dmg, 6, "AA0000", "FF0000", 0, 1, 0, "DBTRailPuff", 0, 0, 8192, 35, 1.0, 1.0, "None", -14, 270, 0, 3);
			}
			RSPI G 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
			}
			Goto See+1;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			RSPI I 3;
			RSPI I 3 A_KCPain();
			Goto See+1;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			RSPI II 3;
			RSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 2;
			RSPI I 1;
			RSPI I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			RSPI I 3;
			RSPI I 3;
			RSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 3;
			RSPI I 3;
			RSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 3;
			RSPI I 3;
			RSPI I 3;
			Goto See+1;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			RSPI J 20 A_Scream();
			RSPI K 7 A_NoBlocking();
			RSPI LMNO 7;
			RSPI P -1 A_BossDeath();
			Stop;
		Ice:
			RSPI I 5 A_GenericFreezeDeath();
			RSPI I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			RSPI P 5;
			RSPI ONMLKJ 5;
			Goto See+1;
	}
}
// Fusion Arachnotron Trail
class FusionTrail : KCBaseZSC
{
	default
	{
		Radius 4;
		Height 8;
		Speed 0;
		Damage 0;
		RenderStyle "Add";
		PROJECTILE;
	}
	
	states
	{
		Spawn:
			TNT0 A 2;
			FS03 FG 6 BRIGHT A_FadeOut();
			Stop;
	}
}
class FusionShot : KCProjectile
{
	default
	{
		Tag "Fusion Shot";
		Radius 13;
		Height 8;
		Speed 16;
		DamageFunction (random(12,15) * random(1,8));
		RenderStyle "Add";
		SEESOUND "fusionspid/see" ;
		DEATHSOUND "fusionspid/die";
		PROJECTILE;
		Decal "PlasmaScorchLower";
	}
	states
	{
		Spawn:
			FS03 A 0;
			#### A 1 BRIGHT;
			#### A 1 BRIGHT;
			#### A 1 BRIGHT;
			#### A 1 BRIGHT;
			#### A 1 BRIGHT A_SpawnItemEx("FusionTrail", 0, 0, 0, 0, 0, 0, Random(-10, 10), 128);
			#### B 1 BRIGHT;
			#### B 1 BRIGHT;
			#### B 1 BRIGHT;
			#### B 1 BRIGHT;
			#### B 1 BRIGHT A_SpawnItemEx("FusionTrail", 0, 0, 0, 0, 0, 0, Random(-10, 10), 128);
			Loop;
		Death:
			#### HIJG 3 BRIGHT;
			Stop;
	}
}

class FusionArachnotron : ArachnotronNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Arachnotron Type";
		Tag "Fusion Arachnotron";
		OBITUARY "%o was vaporized by a fusion cannon Arachnotron";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 900;
		Speed 12;
		Painchance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		SEESOUND "baby/sight";
		PainSound "farachnotron/pain";
		DEATHSOUND "baby/death";
		ACTIVESOUND "baby/active";
		MONSTER;
		+FLOORCLIP;
		MissileChanceMult 0.0625;
		//+MISSILEMORE;
		//+MISSILEEVENMORE;
		Species "Arachnotron";
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		+BOSSDEATH;
		+MAP07BOSS2;
	}

	states
	{
		Spawn:
			FSPI AB 10 A_Look();
			loop;
		See:
			FSPI A 20;
			FSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) { A_BabyMetal(); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			goto See+1;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			FSPI A 20 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(random(randompick(0,0,0,1),5)*2); } // 0/2-10
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(random(1,6)*2); } // 2-12
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(random(2,7)*2); } // 4-14
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(random(3,8)*2); } // 6-16
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(random(4,9)*2); } // 8-18
				else { A_SetTics(random(5,10)*2); } // 10-20
				
				A_FaceTarget();
			}
			FSPI A 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { user_spread1 = -2; user_spread2 = 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { user_spread1 = -3; user_spread2 = 3; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { user_spread1 = -4; user_spread2 = 4; }
				else { user_spread1 = -5; user_spread2 = 5; }

				user_shotsfiredmax = 8;
				A_FaceTarget();
			}
		MissileHold:
			FSPI GH 3 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_FaceTarget();

				A_SpawnProjectile("FusionShot",24,0,5*random(user_spread1,user_spread2));
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SpawnProjectile("FusionShot",24,0,5*random(user_spread1,user_spread2)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SpawnProjectile("FusionShot",24,0,5*random(user_spread1,user_spread2)); }

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("MissileEnd"); }
				return resolvestate(null);
			}
			loop;
		MissileEnd:
			FSPI H 1 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(0); }

				if (random(1,32) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See+2;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FSPI I 3;
			FSPI I 3 A_KCPain();
			Goto See+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			FSPI II 3;
			FSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 2;
			FSPI I 1;
			FSPI I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			FSPI I 3;
			FSPI I 3;
			FSPI I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 3;
			FSPI I 3;
			FSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 3;
			FSPI I 3;
			FSPI I 3;
			Goto See+1;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FSPI J 20 A_Scream();
			FSPI K 7 A_NoBlocking();
			FSPI LMNO 7;
			FSPI P -1 A_BossDeath();
			Stop;
		Ice:
			FSPI I 5 A_GenericFreezeDeath();
			FSPI I 1 A_FreezeDeathChunks;
			wait;
		Raise:
			FSPI P 5;
			FSPI ONMLKJ 5;
			Goto See+1;
	}
}
class ArachnotronMK2 : ArachnotronNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Arachnotron Type"
		Tag "Augmented Arachnotron";

		Obituary "%o was toasted by an augmented arachnotron.";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 900;
		Speed 14;
		Scale 1;
		BloodColor "bf af 20";
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;
		Damagefactor "Crush", 0.65;

		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 171;
		Species "Arachnotron";
		+DONTHARMSPECIES;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		+BOSSDEATH;
		+MAP07BOSS2;
	}

	States
	{
		Spawn:
			BSP2 AB 10 A_Look();
			loop;
		See:
			BSP2 A 20;
			BSP2 AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) { A_BabyMetal(); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			Goto See+1;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			BSP2 AA 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_FaceTarget();
			}
		Missile2:
			TNT1 A 0 A_DynamicMusic();
			BSP2 G 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("ArachnotronPlasma",19,-12);
			}
			BSP2 R 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BSP2 H 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("ArachnotronPlasma",19,12);
			}
			BSP2 Q 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SpidRefire();
			}
			Goto Missile2;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BSP2 I 3;
			BSP2 I 3 A_KCPain();
			Goto See+2;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			BSP2 II 3;
			BSP2 I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 2;
			BSP2 I 1;
			BSP2 I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3;
			Goto See+1;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BSP2 J 20 A_Scream();
			BSP2 K 7 A_NoBlocking();
			BSP2 LMNO 7;
			BSP2 P -1 A_BossDeath();
			Stop;
		Ice:
			BSP2 I 5 A_GenericFreezeDeath();
			BSP2 I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BSP2 P 5;
			BSP2 ONMLKJ 5;
			Goto See+1;
	}
}
class FatShotNew : KCProjectile replaces FatShot
{
	Default
	{
		Tag "Flamer Shot";
		Radius 6;
		Height 8;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 1;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MANF AB 4 BRIGHT;
			Loop;
		Death:
			MISL B 8 BRIGHT;
			MISL C 6 BRIGHT;
			MISL D 4 BRIGHT;
			Stop;
	}
}
class MancubusNew : KCCreature
{
	int spreadtype;
	default
	{
		Tag "Mancubus";
		Health 600;
		Radius 48;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 80;
		DamageFactor "Fire", 0.667;
		Painchance "Fire", 53;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 200;
		Painchance "Fist", 120; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 200; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		Species "Mancubi";
		+DONTHARMSPECIES
		+FLOORCLIP
		+BOSSDEATH
		+MAP07BOSS1;
		SeeSound "fatso/sight";
		PainSound "fatso/pain";
		DeathSound "fatso/death";
		ActiveSound "fatso/active";
		Obituary "$OB_FATSO";
	}
	
	States
	{
		Spawn:
			FATT AB 15 A_Look();
			Loop;
		See:
			FATT AABBCCDDEEFF 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); } 
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(3); }
				
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			FATT G 0
			{
				A_DynamicMusic();
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
			}
			FATT G 20 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }

				A_FatRaise();
			}
			FATT H 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("FatShotNew",32,0,0.0);
				A_SpawnProjectile("FatShotNew",32,0,11.25*user_attacktype);
			}
			FATT IG 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
			}
			FATT H 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("FatShot",32,0,0.0);
				A_SpawnProjectile("FatShot",32,0,-11.25*user_attacktype);
			}
			FATT IG 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
			}
			FATT H 10 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("FatShot",32,0,5.625*user_attacktype);
				A_SpawnProjectile("FatShot",32,0,-5.625*user_attacktype);
			}
			FATT IG 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
			}
			FATT G 0
			{
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= (8 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(15,true,self)))) { return resolvestate("MissileStart"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FATT J 3;
			FATT J 3 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FATT K 6;
			FATT L 6 A_Scream();
			FATT M 6 A_NoBlocking();
			FATT NOPQRS 6;
			FATT T -1 A_BossDeath();
			Stop;
		Ice:
			FATT J 5 A_GenericFreezeDeath();
			FATT J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			FATT R 5;
			FATT QPONMLK 5;
			Goto See;
	}
}
class Hectebus : MancubusNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Mancubus Type"
		Tag "Hectebus";
		Health 1200;
		Radius 48;
		Height 64;
		Speed 9;
		Mass 1500;
		Painchance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.95;
		RadiusDamageFactor 0.95;
		DamageFactor "Explosive", 0.95;

		DamageFactor "Crush", 0.45;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 60; // Demons = +300% Pain Chance
		Species "Mancubi";
		+DONTHARMSPECIES
		+AVOIDMELEE;
		+BOSSDEATH;
		+MAP07BOSS2;
		SEESOUND "hect/see";
		PAINSOUND "hect/pain";
		ACTIVESOUND "hect/active";
		DEATHSOUND "hect/die";
		Obituary "%o was cremated by a hectebus.";
	}

	States
	{
		Spawn:
			HECT AB 12 A_Look();
			loop;
		See:
			HECT AABBCCDDEEFF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0
			{
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
				A_StartSound("hect/raiseguns");
			}
			HECT G 20 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }

				A_FaceTarget();
			}
		MissileStart:
			HECT H 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("HectShot",28,0,0*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,5.625*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,11.25*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,16.875*user_attacktype);
			}
			HECT IG 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT H 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("HectShot",28,0,-0*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,-5.625*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,-11.25*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,-16.875*user_attacktype);
			}
			HECT IG 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT H 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_SpawnProjectile("HectShot",28,0,-11.25*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,-5.625*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,0*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,5.625*user_attacktype);
				A_SpawnProjectile("HectShot",28,0,11.25*user_attacktype);
			}
			HECT IG 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT G 0
			{
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= (12 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(12,true,self)))) { return resolvestate("MissileStart"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HECT J 3;
			HECT J 3 A_KCPain();
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HECT K 6;
			HECT L 6 A_Scream();
			HECT M 6 A_NoBlocking();
			HECT NOPQRS 6;
			HECT T -1 A_BossDeath();
			Stop;
		Ice:
			HECT J 5 A_GenericFreezeDeath();
			HECT J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HECT R 5;
			HECT QPONMLK 5;
			Goto See;
	}
}
class HectShot : FatShotNew
{
	default
	{
		Tag "Green Flamer Shot";
		DamageType "Fire";
		decal "Scorch";
		Speed 22;
		DamageFunction (12 * random(1,8));
	}
	
	States
	{
		Spawn:
			HECF AB 4 Bright;
			Loop;
		Death:
			HECF C 8 Bright;
			HECF D 6 Bright;
			HECF E 4 Bright;
			Stop;
	}
}
class DaedTrail : KCBaseZSC
{
	default
	{
		Scale 0.65;
		RenderStyle "Add";
		Alpha 0.5;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			DAET ABCDE 2 Bright;
			Stop;
	}
}
class DaedFire : FatShotNew
{
	default
	{
		Tag "Hell Flamer Shot";
		Speed 26;
		DamageType "Fire";
		DamageFunction (16 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.96;
		Decal "Scorch";
	}
	
	States
	{
		Spawn:
			DAEF AAAABBBB 1 BRIGHT A_SpawnItemEx("DaedTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			DAEF C 8;
			DAEF D 6;
			DAEF E 4;
			Stop;
	}
}
class Daedabus : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Mancubus Type"
		Tag "Daedabus";

		Health 2100;
		Radius 48;
		Height 64;
		Mass 2000;
		Speed 10;
		Painchance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.90;
		RadiusDamageFactor 0.90;
		DamageFactor "Explosive", 0.90;

		DamageFactor "Fire", 0.667;
		Painchance "Fire", 27;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 100;

		BloodColor "73 00 00";
		Species "Mancubi";
		+DONTHARMSPECIES
		MONSTER;
		+AVOIDMELEE;
		+FLOORCLIP;
		+BOSSDEATH;
		+MAP07BOSS1;
		SeeSound "Daedabus/Sight";
		PainSound "Daedabus/Pain";
		DeathSound "Daedabus/Death";
		ActiveSound "Daedabus/Active";
		Obituary "%o was Torched by a Daedabus.";
	}

	States
	{
		ResetLevel:
			DAED A 1 A_Look();
			DAED A 1;
			DAED A 1 
			{
				user_ressurrectstr += random(10,20);
			}
			DAED A 1;
			goto Spawn+1;
		Spawn:
			DAED A 0 NoDelay ;
			DAED AB 15 A_Look();
			goto Spawn+1;
		See:
			DAED A 0;
			DAED AABBCCDDEEFF 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); } 
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
				A_StartSound("Daedabus/Attack");
			}
			DAED G 18 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(17); }
				A_FaceTarget();
			}
		MissileStart:
			DAED H 9 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_DynamicMusic();

				A_SpawnProjectile("DaedFire",28,0,11.25*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,5.625*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,0*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-5.625*user_attacktype);
			}
			DAED I 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED H 9 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_DynamicMusic();
				
				A_SpawnProjectile("DaedFire",28,0,5.625*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,0*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-5.625*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-11.25*user_attacktype);
			}
			DAED I 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED H 9 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_DynamicMusic();

				A_SpawnProjectile("DaedFire",28,0,16.875*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,11.25*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,5.625*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,0*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-5.625*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-11.25*user_attacktype);
				A_SpawnProjectile("DaedFire",28,0,-16.875*user_attacktype);
			}
			DAED I 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED G 0
			{
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= (32 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(9,true,self)))) { return resolvestate("MissileStart"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DAED J 3;
			DAED J 3 A_KCPain();
			Goto See;
		
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DAED K 6;
			DAED L 6 A_Scream();
			DAED M 6 A_NoBlocking();
			DAED NOPQRS 6;
			DAED T -1 A_BossDeath();
			Stop;
		Ice:
			DAED J 5 A_GenericFreezeDeath();
			DAED J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DAED R 5 ;
			DAED QPONMLK 5;
			Goto See;
		XDeath:
			goto Death;
	}
}
class ArchvileFlame : SingleDamageRipper
{
	default
	{
		Tag "Flame Jet";
		Radius 2;
		Height 2;
		Speed 20;
		DamageFunction (randompick(7,8));
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.75;
		PROJECTILE;
		+FLOORHUGGER;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		Damagetype "Fire";
	}
	
	States
	{
		Spawn:
		Idle:
			FIRE A 1 bright
			{
			}
			FIRE A 1 bright
			{
				A_SpawnProjectile("ArchvileFlameTrail",0,0,0);
				A_Explode(randompick(26,26,26,27),randompick(52,53),0,0,random(7,8));
			}
			Loop; 
		Death:
			FIRE BCBCDEFGH 1 bright
			{
				A_Explode(randompick(13,13,13,13,13,13,14,14),randompick(78,79),0,0,random(21,24));
			}
			Stop;
	}
}
class ArchvileFlameTrail : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		RenderStyle "Add";
		Alpha 0.7;
		Scale 0.925;
		+NOCLIP;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FIRE BCBCDEFGH 2 bright
			{
				A_FadeOut(frandom(0.06,0.10));
				A_SetScale(scale.x-frandom(0.06,0.10),scale.y-frandom(0.06,0.10));
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class ArchvileNew : KCCreature
{
	default
	{
		Tag "Archvile";
		Health 700;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 15;
		PainChance 10;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 5.0;
		Painchance "Ice", 100;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Knife", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		PainChance "Magic", 4;
		Painchance "Fist", 50; // Archviles are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are always flinched by the kick attack [50x pain chance]
		Painchance "Gauntlets", 50; // Archviles are super suspectible to Punch attacks [10x pain chance]
		Painchance "Chainsaw", 50; // Archviles are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 50; // Archviles are super suspectible to Melee attacks [10x pain chance]
		DamageFactor "Magic", 0.64;
		Damagefactor "Knife", 2.5;
		Damagefactor "Stomp", 2.5;
		Damagefactor "Trample", 2.5;
		DamageFactor "Fist", 2.5;
		DamageFactor "Kick", 2.5;
		DamageFactor "PoisonNeedle", 2.5;
		DamageFactor "Sceptre", 2.5;
		DamageFactor "Chainsaw", 2.5;
		DamageFactor "Melee", 2.5;

		Monster;
		MaxTargetRange 896;
		+QUICKTORETALIATE 
		+FLOORCLIP 
		+NOTARGET
		SeeSound "vile/sight";
		PainSound "vile/pain";
		DeathSound "vile/death";
		ActiveSound "vile/active";
		MeleeSound "vile/stop";
		Obituary "$OB_VILE";
	}
	
	void A_SetVileRange()
	{
		if (kc_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(17.92,true,self)));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}
	
	States
	{
		Spawn:
			VILE AB 10 
			{
				A_SetVileRange();
				A_Look();
			}
			Loop;
		See:
			VILE AABBCCDDEEFF 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 8)
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				A_KCChase("Melee","Missile",flag2,1,3,1,1);
				A_SetVileRange();
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags)
				{
					temp1 = (24 * temp2) + ((CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.586666666,true,self)) * temp2);
					if (temp1 > 104) { temp1 = 104; }
					//A_LogInt(temp1);
					if (random(1,256) <= temp1) { return resolvestate("Missile2"); }
					temp2 = 1;
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			VILE G 0 BRIGHT
			{
				A_SetVileRange();
				A_VileStart();
				A_DynamicMusic();
			}
			VILE G 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_FaceTarget();
			}
			VILE H 8 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_VileTarget();
			}
			VILE IJKLMN 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				
				A_FaceTarget();
			}
			VILE O 8 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(20,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(70,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			VILE P 20 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
			}
			Goto See;
		Missile2:
			VILE J 0 BRIGHT
			{
				A_StartSound("vile/firestrt");
			}
			VILE JKLMNO 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			VILE A 0
			{
				A_StartSound("archvile/firewall");
				A_SpawnProjectile("ArchvileFlame",0,0,0);
			}
			VILF A 24 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(82,83),2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(52,53),2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(19); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(20); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(21); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(22); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(7,8),2,true,self)) { A_SetTics(23); }
			}
			Goto See;
			
		Heal:
			#### # 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetVileRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			VILE [ 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			VILE \ 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_VileHealProj();
			}
			VILE ] 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(1,2); }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Melee:
			#### # 0 A_TimeFreezeCheckPain();
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(2,3); }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			VILE Q 5
			{
				if (random(1,3) <= 1) { temp2 = 2; }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Kick:
			VILE Q 5
			{
				if (random(1,5) <= 2) { temp2 = 3; }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			VILE Q 5;
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			VILE Q 10;
			VILE Q 0 A_Jump(128, 4);
			VILE Q 5;
			VILE Q 0 A_Jump(128, 2);
			VILE Q 5;
			VILE Q 0;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			VILE Q 7;
			VILE R 7 A_Scream();
			VILE S 7 A_NoBlocking();
			VILE TUVWXY 7;
			VILE Z -1;
			Stop;
		
		Raise:
			VILE Y 7;
			VILE XWVVUTSRQ 7;
			Goto See;
	}
}
// Diabloist Flare
class MFlareFX : KCBaseZSC
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			FDFX ABCDEF 4 Bright;
			Stop;
	}
}
class DFlare : KCProjectile
{
	default
	{
		Tag "Diabloist Flare";
		Radius 5;
		Height 5;
		Speed 25;
		DamageFunction (finaldamagedealt);
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.85;
		PROJECTILE;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/firmfi";
		DeathSound "weapons/firex4";
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			VBAL A 0;
			"####" A 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" AA 1 Bright;
			"####" B 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" BB 1 Bright;
			loop;
		Death:
			CBAL CDEFG 3 Bright;
			stop;
	}
}
class DMissile : CFlameMissileNew
{
	default
	{
		Tag "Diabloist Fireblast";
		DamageType "Fire";
		DamageFunction (finaldamagedealt);
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			CFFX A 0;
			"####" AAAA 1 Bright;
			"####" A 1 A_CFlamePuff();
			Goto Death+1;
		Death:
			"####" A 1 Bright A_CFlameMissile("DMissileCircle");
			"####" ABC 3 Bright;
			"####" D 4 Bright;
			"####" E 3 Bright;
			"####" F 4 Bright;
			"####" G 3 Bright;
			"####" H 4 Bright;
			"####" I 3 Bright;
			"####" J 4 Bright;
			"####" K 3 Bright;
			"####" L 4 Bright;
			"####" M 3 Bright;
			Stop;
	}
}
class DTracer : KCProjectile
{
	default
	{
		Tag "Diabloist Tracer";
		Radius 5;
		Height 5;
		Speed 15;
		ReactionTime 175;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/diasht";
		DeathSound "weapons/firex3";   
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			TNT1 A 1 Bright A_SeekerMissile(10,15);
			TNT1 A 0 Bright A_Countdown();
			TNT1 A 0 Bright A_SpawnProjectile("DTracerPuff",0,0,0,0);
			loop;
		Death:
			FTRA K 4 Bright;
			FTRA L 4 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(64,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,64,0);
			}
			FTRA MNO 3 Bright;
			stop;
	}
}
class DTracerPuff : KCProjectile
{
	int etimer;
	default
	{
		Tag "Diabloist Tracer";
		Radius 1;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.67;
		PROJECTILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	void A_TracerExp(int basedmg = 4, int basemult = 1, int baserad = 16, int basefullrad = 8)
	{
		int dmg = A_CalcDamageFormula(basedmg,basemult,0.005,0.3334,0.1667,0.005);
		A_Explode(dmg,baserad,0,0,basefullrad);
	}

	States
	{
		Spawn:
			FTRA A 0;
			"####" AAABBBCCCDDDEEEFFFGGGHHHIIIJJJ 1 Bright 
			{
				int base = 3;
				if (target)
				{
					if (A_CheckMonsterLevel(30,2,true,target)) base = 2;
					if (A_CheckMonsterLevel(60,2,true,target)) base = 1;
				}
				if (etimer <= 0) 
				{
					A_TracerExp(4,1,16,8);
					etimer += base;
				}
				etimer--;
			}
			stop;
	}
}
class DMissileCircle : CircleFlameNew 
{ 
	default
	{
		Tag "Diabloist Fireblast";
		+THRUSPECIES;
		Species "Diabloist";
	}
}
class DFire : KCProjectile
{
	default
	{
		Tag "Diabloic FireHex";
		Obituary "%o got was set ablaze by a Diabloist.";
		Radius 0;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 1.00;
		+NOGRAVITY;
		+SEEKERMISSILE;
		+NOTARGET;
		+NODAMAGETHRUST;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	States
	{
		Spawn:
			HLFR A 2 Bright
			{
				A_StartFire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR BABCB 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR CBCDCDCDEDED 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(5,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR E 2 Bright
			{
				A_FireCrackle();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR FEF 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(3,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR EFG 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(2,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR HGHGH 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(1,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			stop;
	}
}
class DiabloistGravityHPTargeter : KCProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT AB 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistHPGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer = 0; 
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}
class DiabloistGravityHPTargeter2 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}
class DiabloistGravityHPTargeter3 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}
class DiabloistGravityManaTargeter : KCProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT F 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT FG 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistManaGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}
class DiabloistGravityManaTargeter2 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}
class DiabloistGravityManaTargeter3 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}
class ReviveProj : KCProjectile
{
	default
	{
		//+FLOAT;
		//+NOBLOCKMONST;
		//+NOGRAVITY;
		+FRIENDLY;
		+NOCLIP;
		Radius 50;
		Height 5;
		PROJECTILE;
		RenderStyle "None";
		Speed 7;
	}
	
	States
	{
		Spawn:
			TNT1 AAAAA 6 
			{
				A_Chase(null,null,CHF_RESURRECT);
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
		Heal:
			TNT1 A 1;
			Stop;
	}
}
// Revive Projectiles [used by monsters]
class ReviveProj2 : ReviveProj
{
	default
	{
		-FRIENDLY
	}
}
// Diabloist Gravity Glitter
class DiabloistHPGlitter : TeleGlitterGenerator1
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}
class DiabloistManaGlitter : TeleGlitterGenerator2
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}
// Diabloist Missile Trail
class DMissileTrail : CFlameFloor { }
class Diabloist : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Diabloist";
		Health 1400;
		Radius 20;
		Height 56;
		Mass 750;
		Speed 22.5;
		BloodColor "08 08 08";
		Painchance 10;
		Painchance "Knife", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Fist", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are hyper suspectible to Kick attack [50x pain chance]
		Painchance "Chainsaw", 100; // Archvile are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 100; // Archvile are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 0;
		PainChance "Ice", 35;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Damagefactor "Knife", 5;
		Damagefactor "Stomp", 5;
		Damagefactor "Trample", 5;
		DamageFactor "Fist", 5;
		DamageFactor "Kick", 5;
		DamageFactor "PoisonNeedle", 5;
		DamageFactor "Sceptre", 5;
		DamageFactor "Chainsaw", 5;
		DamageFactor "Melee", 5;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.02;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.48;
		PainChance "Magic", 4;
		Species "Diabloist";
		MONSTER;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+NODROPOFF;
		+NORADIUSDMG;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		MaxTargetRange 896;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
		Obituary "%o got was set ablaze by a Diabloist.";
	}
	
	void A_SetDiabloistRange()
	{
		if (kc_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(17.92,true,self)));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}

	States 
	{
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_DynamicMusic();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(random(85,86), "GravityAttackCheck");
		// Archvile-Type Fire Spell
		Missile1:
			DIAB G 0 BRIGHT 
			{
				if (random(1,2) <= 1)
				{
					if (random(1,3) <= 1) { return resolvestate("Missile2"); }
					else if (random(1,2) <= 1) { return resolvestate("Missile3"); }
					else { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DIAB G 0 BRIGHT A_FaceTarget();
			DIAB GH 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
			}
			DIAB I 3 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_VileTarget("DFire");
				A_DynamicMusic();
			}
			DIAB HGHIHGHIHGHIGH 3 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAB I 3 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(40,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(140,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile1");
			DIAB G 0 BRIGHT A_Jump(64,"Missile3");
			Goto See;

		// Rapid Fire Shots
		Missile2:
			DIAB NOPNOPNOPNOPNOP 5 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
				A_SpawnProjectile("DFlare",40,0,random(-4,4));
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile2");
			DIAB P 0 BRIGHT A_Jump(32,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Firestorm-Equse Attack
		Missile3:
			DIAB GHIJKLMN 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
			}
			DIAB O 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_StartSound("weapons/firbfi");
				A_FaceTarget();
				A_SpawnProjectile("DMissile",32,0,0);
				A_DynamicMusic();
			}
			DIAB P 5 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Twin Flame Snakes
		Missile4:
			DIAB [\ 8 BRIGHT // "[\"
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_FaceTarget();
			}
			DIAB ] 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_FaceTarget();
				A_SpawnProjectile("DTracer",0,-40,0);
				A_SpawnProjectile("DTracer",0,40,0);
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile4");
			DIAB G 0 BRIGHT A_Jump(4,"Missile1");
			Goto See;

		GravityAttackCheck:
			DIAB G 0 BRIGHT A_DiabloistGravityCheck();
		Missile5:
			DIAG A 0 BRIGHT A_FaceTarget();
			DIAG A 3 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_DiabloistSpawnGravityNodes();
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_DiabloistGravityPulse(3.0);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_DiabloistGravityPulse(5.25);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(3); }

				A_DiabloistGravityPulse(9.75);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(3); }

				A_DiabloistGravityPulse(12.00);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG DEF 4 Bright // 9/6/3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(3); }

				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG G 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(3); }

				A_DiabloistGravity(user_gravitytype);
				A_DynamicMusic();
			}
			DIAG FE 3 Bright // 9/6/3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_FaceTarget();
			}
			DIAG A 0 BRIGHT A_Jump(1,"Missile");
			Goto See;

		Spawn:
			DIAB AB 10 
			{
				A_Look();
				A_SetDiabloistRange();
			}
			Loop;
		See:
			DIAB A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.375)) 
				{
					if (health <= ((SpawnHealth() + Stamina) * 0.125)) 
					{
						A_SetInventory("Speed18PercentBonus",1);
						A_SetInventory("Speed12PercentBonus",0);
					}
					else
					{
						A_SetInventory("Speed12PercentBonus",1);
						A_SetInventory("Speed18PercentBonus",0);
					}
				}
				else
				{
					A_SetInventory("Speed18PercentBonus",0);
					A_SetInventory("Speed12PercentBonus",0);
				}
			}
			DIAB AABBCCDDEEFF 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 40) // 160 
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				
				A_KCChase(null,"Missile",flag2,1,3,1,1);
				A_SetDiabloistRange();
			}
			loop;

		Heal:
			DIAB [ 0 BRIGHT
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetDiabloistRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			DIAB [ 10 BRIGHT // "["
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_DiabHealProj(-24.0,-40.0);
			}
			DIAB \ 10 BRIGHT // "\"
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_DiabHealProj(0.0,0.0);
			}
			DIAB ] 10 BRIGHT // "]"
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }

				A_DiabHealProj(24.0,40.0);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DIAB Q 5;
			DIAB Q 5 
			{
				A_KCPain();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			DIAB Q 5;
			DIAB Q 5 
			{
				A_KCPain();
				A_SetDiabloistRange();
			}
			DIAB Q 10;
			DIAB Q 0 A_Jump(128, 4);
			DIAB Q 5;
			DIAB Q 0 A_Jump(128, 2);
			DIAB Q 5;
			DIAB Q 0;
			Goto See;
		Pain.Zap:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(224, "GravityAttackCheck");
			DIAB G 0 A_Jump(240, "Missile1");
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DIAB Q 7;
			DIAB R 7 A_Scream();
			DIAB S 7 A_NoBlocking();
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Ice:
			DIAB Q 5 A_GenericFreezeDeath();
			DIAB Q 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			DIAB Y 5;
			DIAB X 5;
			DIAB WVUTSRQ 7;
			goto See;
	}
}
// CyBruiser Rocket Trail
class CyBruiserTrail : KCProjectile
{
	default
	{
		Radius 3;
		Height 3;
		RenderStyle "Translucent";
		Alpha 0.67;
		Projectile;
	}
	
	States
	{
		Spawn:
			TNT1 A 3 Bright;
			PUFF ABCD 4 BRIGHT;
			Stop;
	}
}
// CyBruiser
class CyBruiserMissile : KCProjectile
{
	default
	{
		Tag "CyBruiser Missile";
		DamageType "Explosive";
		Radius 8;
		Height 12;
		Speed 20;
		DamageFunction (finaldamagedealt);
		Scale 1.0;
		Projectile;
		RenderStyle "Normal";
		SeeSound "monster/cbrufir";
		DeathSound "weapons/hellex";
		DONTHURTSHOOTER;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			BAL3 C 0 Bright A_SetTranslucent(0.67,1);
			BAL3 C 6 Bright;
			BAL3 D 6 Bright A_Explode(64,64,0,false,0,0,10,"BulletPuff","Explosive");
			BAL3 E 6 Bright;
			Stop;
	}
}
class CyBruiserMissileSeek : CyBruiserMissile
{
	default
	{
		Tag "CyBruiser Seeker Missile";
		DamageType "Explosive";
		Radius 6;
		Height 9;
		Speed 16;
		DamageFunction (finaldamagedealt);
		Scale 0.75;
		Projectile;
		RenderStyle "Normal";
		SeeSound "monster/cbrufir";
		DeathSound "weapons/hellex";
		DontHurtShooter;
		+SEEKERMISSILE;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			FBRS A 1 Bright;
			FBRS A 1 Bright
			{
				A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(random(12,13),random(17,18));
			}
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			FBRS A 1 Bright;
			FBRS A 1 Bright
			{
				A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,random(12,13));
			}
			FBRS A 1 Bright;
			FBRS A 1 Bright A_SpawnItemEx("CyBruiserTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			BAL3 C 0 Bright A_SetTranslucent(0.67,1);
			BAL3 C 6 Bright;
			BAL3 D 6 Bright A_Explode(48,64,0,false,0,0,10,"BulletPuff","Explosive");
			BAL3 E 6 Bright;
			Stop;
	}
}
// CyBruiser [Brusier/Archon tier Hell Noble]
class Cybruiser : KCCreature
{
	int painanger;
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hell Nobles";
		Tag "CyBruiser";
		
		Health 2000;
		Radius 24;
		Height 64;
		Mass 2000;
		Speed 8;
		Monster;
		MeleeDamage 15;
		PainChance 20;
		Painchance "Fire", 16;
		Damagefactor "Crush", 0.5;
		DamageFactor "Holy", 2;
		Painchance "Holy", 40;

		Species "HellNoble";
		+FLOORCLIP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "monster/cbrusit";
		PainSound "monster/cbrupn";
		DeathSound "monster/cbrudth";
		MeleeSound "baron/melee";
		Obituary "%o was blown away by a Cybruiser.";
		HitObituary "%o was smashed by a Cybruiser.";
	}
	
	void A_CybruiserAtk()
	{
		if (random(1,256) <= 16)
		{
			A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,0,0);
			if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
			{
				A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,(user_tempvar2*1));
				A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,(user_tempvar2*-1));
				if (A_CheckMonsterLevel(225,1,true,self))
				{
					A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,(user_tempvar2*2));
					A_SpawnProjectile("CyBruiserMissileSeek",user_tempvar1,15,(user_tempvar2*-2));
				}
			}
		}
		else
		{
			A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,0,0);
			if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
			{
				A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,(user_tempvar2*1));
				A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,(user_tempvar2*-1));
				if (A_CheckMonsterLevel(225,1,true,self))
				{
					A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,(user_tempvar2*2));
					A_SpawnProjectile("CyBruiserMissile",user_tempvar1,15,(user_tempvar2*-2));
				}
			}
		}
	}

	States 
	{
		Spawn: 
			CBRS A 0 NoDelay;
			CBRS AB 10 A_Look(); 
			goto Spawn+1;
		See:
			CBRS A 0
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CBRS AABBCCDD 3
			{
				user_shotsfired = 0;
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("monster/cbruwlk"); 
				}
				if (user_walksound >= 4) { user_walksound = 0; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			CBRS E 0
			{
				if (painanger > 8) painanger = 8;
				if (kc_monsterlevelenabledflags)
				{
					if (random(1,256) <= ((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(1.875,true,self))) * painanger)) 
					{
						user_shotsfiredmax *= frandompick(1.5,2.0,2.5);
						return resolvestate("RageAttackStart"); 
					}
				}
				else
				{
					if (random(1,256) <= (16 * painanger)) 
					{
						user_shotsfiredmax *= frandompick(1.5,2.0,2.5);
						return resolvestate("RageAttackStart"); 
					}
				}
				return resolvestate(null);
			}
		MissileStart:
			CBRS E 0 A_JumpIfTargetInsideMeleeRange("Melee");
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(12); 
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }
				}
				else
				{
					A_SetTics(6); 
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				}
				A_FaceTarget();
			}
			goto Missile1;
		Missile1:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_FaceTarget();
				
				A_CybruiserAtk();
			}
			goto Missile1End;
		Missile1End:
			CBRS F 12
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }
				A_FaceTarget();
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 
			{
				if (user_shotsfired >= user_shotsfiredmax) return resolvestate("See");
				return resolvestate(null);
			}
			goto MissileStart;

		RageAttackStart:
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(6); 
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				}
				else
				{
					A_SetTics(3); 
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				}
				A_FaceTarget();
			}
			goto RageAttack;
		RageAttack:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_FaceTarget();
				
				A_CybruiserAtk();
			}
			goto RageAttackEnd;
		RageAttackEnd:
			CBRS F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 
			{
				if (user_shotsfired >= (user_shotsfiredmax * 2))
				{
					painanger = 0;
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			goto RageAttackStart;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			CBRS GH 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			CBRS I 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				int mldmg = A_CalcDamageFormula(15,random(1,10),0.005,0.3334,0.1667,0.005);
				A_CustomMeleeAttack(mldmg,"baron/melee","none","Melee",1);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CBRS J 2;
			CBRS J 2
			{
				A_KCPain(); 
				if (random(1,256) <= 240) 
				{
					painanger++;
					if (random(1,256) <= 60)
					{
						painanger++;
						if (random(1,256) <= 15) painanger++;
					}
				}
			}
			Goto See;
		Pain.Fist: 
			#### # 0 A_TimeFreezeCheckPain();
			CBRS J 2;
			CBRS J 2
			{
				A_KCPain(); 
				if (random(1,256) <= 80) 
				{
					painanger++;
					if (random(1,256) <= 20)
					{
						painanger++;
						if (random(1,256) <= 5) painanger++;
					}
				}
			}
			CBRS JJ 2;
			Goto See;
		Pain.Kick: 
			#### # 0 A_TimeFreezeCheckPain();
			CBRS J 2;
			CBRS J 2
			{
				A_KCPain(); 
				if (random(1,256) <= 120) 
				{
					painanger++;
					if (random(1,256) <= 30)
					{
						painanger++;
						if (random(1,256) <= random(7,8)) painanger++;
					}
				}
			}
			CBRS JJJJ 2;
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			CBRS JJ 2;
			CBRS J 2 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS JJJ 1;
			Goto See;
		Pain.Electric: 
		Pain.Electricity: 
		Pain.Lightning: 
		Pain.Thunder: 
		Pain.Shock:
			#### # 0 A_TimeFreezeCheckPain();
			CBRS J 2;
			CBRS J 2;
			CBRS J 2 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS J 2;
			CBRS J 2;
			CBRS J 2;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS J 2;
			CBRS J 2;
			CBRS J 2;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CBRS K 6 Bright A_Scream();
			CBRS LMN 6 Bright;
			CBRS O 6 Bright A_NoBlocking();
			CBRS QR 6 Bright;
			CBRS S 6;
			CBRS T -1 A_BossDeath();
			Stop;
		Ice:
			CBRS J 5 A_GenericFreezeDeath();
			CBRS J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CBRS S 6;
			CBRS RQONMLK 6;
			Goto See;
	}
}
// Bruiser Demon Ball 1 Trail
class BruiserBallTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.70;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
			BRBA CDEFGHIJ 4 Bright;
			Stop;
	}
}
class BruiserBall : KCProjectile
{
	default
	{
		Tag "Bruiser Ball";
		Radius 16;
		Height 16;
		Speed 18;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.9;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "Scorch";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(16,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(16,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn: 
			BRBA AABB 2 BRIGHT A_SpawnItemEx("BruiserBallTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			BRBA KLMNOPQRSTUVWX 3 Bright;
			Stop;
	}
}
class BruiserBall2 : KCProjectile
{
	default
	{
		Tag "Bruiser Shot";
		Radius 8;
		Height 8;
		Speed 10;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.9;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "BaronScorch";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BRB2 AB 6 BRIGHT;
			Loop;
		Death:
			BRB2 CDEFGHI 3 Bright;
			Stop;
	}
}
class BruiserFireSpawner : KCProjectile
{
	default
	{
		Tag "Bruiser FireWave";
		Radius 8;
		Height 8;
		Speed 12;
		Damage 0;
		+RIPPER;
		+FLOORHUGGER;
		+BLOODLESSIMPACT;
		Projectile;
		MissileType "BruiserFire";
		Missileheight 0;
		DamageType "Fire";
	}
	
	States
	{
		Spawn: 
			TNT1 A 3 Bright A_SpawnProjectile("BruiserFire",0,0,0,4); // A_MissileAttack
			TNT1 AA 3;
			Loop;
		Death:
			TNT1 A 6;
			Stop;
	}
}
class BruiserFire : KCProjectile
{
	default
	{
		Tag "Bruiser FireWave";
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.9;
		DamageType "Fire";
		+NOCLIP;
		+FLOORHUGGER;
		SeeSound "weapons/rocklx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			XXBF AB 3 Bright;
			XXBF C 3 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(48,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,0,0,32, damagetype:"Fire");
			}
			XXBF DEFGHIJKLMNOPQRST 3 Bright;
			Stop;
	}
}
class BruiserDemon : BaronOfHellNew
{
	int user_fireswipeangle; 
	int user_fireswipeframe; 
	int user_fireswipeframemax;
	int user_groundwaverepeatchance;
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Bruiser Demon";

		Health 2000;
		Radius 24;
		Height 64;
		Mass 1500;
		Speed 8;
		MissileType "BruiserBall";
		MeleeDamage 15;
		Scale 1.125;
		Painchance 15;
		PainChance "Ice", 60;
		DamageFactor "Ice", 3.33;
		DamageFactor "Fire", 0.2;
		PainChance "Fire", 7;

		Species "HellNoble";
		Monster;
		+FLOORCLIP;
		MissileChanceMult 0.125;
		//+MISSILEEVENMORE;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "superbaron/scream";
		PainSound "superbaron/pain";
		DeathSound "superbaron/death";
		ActiveSound "superbaron/act";
		MeleeSound "baron/melee";
		Obituary "%o was slaughtered by a Bruiser demon.";
		HitObituary "%o was cremated by a Bruiser demon.";
	}

	States
	{
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			BRUS E 0 Bright
			{
				A_DynamicMusic();
			}
			BRUS E 0 Bright A_Jump(24, "Missile5"); // Jump to Ground Fire Wave
			BRUS E 0 Bright A_Jump(144, "MissileCheck3"); // Jump to Swipe attack #1
			// Bruiser Main Fireball #1 - Normal
		Missile1:
			BRUS EF 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS G 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_SpawnProjectile("BruiserBall",user_tempvar1,0,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile2"); // Jump to Main Fireball #2
			Goto See;

		// Bruiser Main Fireball #2 - Normal
		Missile2:
			BRUS HI 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_SpawnProjectile("BruiserBall",user_tempvar1,0,0,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			Goto See;

		// Bruiser Fire Swipe #1
		MissileCheck3:
			BRUS E 0 Bright A_Jump(96, "Missile5"); // Jump to Ground Fire Wave Attack
		Missile3:
			BRUS E 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			BRUS F 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = -40;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS GGGGGG 1 Bright 
			{
				user_tempvar1 = 56; // attack height
				//user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle += 10;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile4"); // Jump to Fire Swipe #2
			Goto See;

		// Bruiser Fire Swipe #2
		Missile4:
			BRUS H 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS I 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			BRUS I 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = 40;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS JJJJJJ 1 Bright 
			{
				user_tempvar1 = 40; // attack height
				//user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle -= 10;
				A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_SpawnProjectile("BruiserBall2",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			Goto See;

		// Bruiser Ground Fire Wave
		Missile5:
			BRUS KL 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS M 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				user_tempvar1 = 16; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				A_FaceTarget();

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-3),0); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-2),0); }
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*-1),0);
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,0,0);
				A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*1),0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*2),0); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SpawnProjectile("BruiserFireSpawner",user_tempvar1,0,(user_tempvar2*3),0); }
			}
			BRUS MM 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			TNT1 A 0 
			{
				if (random(1,256) <= user_groundwaverepeatchance)
				{
					user_groundwaverepeatchance *= frandompick(0.5,0.25);
					return resolvestate("Missile5");
				}
				return resolvestate(null);
			}
			Goto See;

		ResetLevel:
			BRUS A 1 A_Look();
			BRUS A 1; 
			BRUS A 1 { user_ressurrectstr += random(10,20); }
			BRUS A 1;
			goto Spawn+1;
		Spawn:
			BRUS A 0 NoDelay;
			BRUS AB 10 BRIGHT A_Look();
			goto Spawn+1;
		See:
			BRUS AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				user_groundwaverepeatchance = ((8 * random(6,10)) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(4.5,true,self)));
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			TNT1 A 0 A_Jump(256,"Melee1","Melee2");
		Melee1:
			BRUS EF 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS G 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int dmg = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("BruiserBall",user_tempvar1,(dmg),"baron/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Melee2:
			BRUS HI 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5); // base angle
				int dmg = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("BruiserBall",user_tempvar1,(dmg),"baron/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BruiserBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BRUS N 5 Bright A_KCPain();
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			BRUS N 5 Bright A_KCPain();
			BRUS N 20 Bright;
			BRUS N 0 Bright A_Jump (128, 4);
			BRUS N 5 Bright;
			BRUS N 0 Bright A_Jump (128, 2);
			BRUS N 5 Bright;
			BRUS N 0 Bright;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BRUD A 6 Bright A_Scream();
			BRUD BCD 4 Bright;
			BRUD EFG 4 Bright;
			BRUD H 4 Bright A_Fall();
			BRUD IJKLMNOP 4 Bright;
			BRUD QRSTUV 4;
			BRUD W -1 A_BossDeath();
			Stop;
		Ice:
			BRUS N 5 A_GenericFreezeDeath();
			BRUS N 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BRUD V 4;
			BRUD UTSRQPONMLKJIHGFEDCBA 4;
			Goto See;
	}
}
class ArchonOfHell : BaronOfHellNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Archon of Hell";
		
		Health 2000;
		Radius 24;
		Height 64;
		Mass 1500;
		Speed 8;
		MONSTER;
		MeleeDamage 15;
		BloodColor "20 60 20";
		Scale 1.125;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 80;
		PainChance "Fire", 8;
		Painchance "Holy", 45; // Demons = +300% Pain Chance

		DamageFactor 0.875;
		RadiusDamageFactor 0.4375;
		DamageFactor "Explosive", 0.4375;

		Damagefactor "Crush", 0.5;
		DamageFactor "Ice", 3.33;
		DamageFactor "Fire", 0.4;
		Species "HellNoble";
		+FLOORCLIP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "monster/ar2sit";
		PainSound "archon/pain";
		DeathSound "monster/ar2dth";
		MeleeSound "baron/melee";
		Obituary "%o was no match for an archon of hell.";
		HitObituary "%o was ripped apart by an archon of hell.";
	}

	States 
	{
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			BOS4 E 0 A_DynamicMusic();
			BOS4 E 0 A_Jump(128, "Missile1"); // Jumps to Comet Attack
			goto Missile2;

		// Comet Attack - Normal
		Missile1:
			BOS4 M 0 Bright A_Jump(128, "Missile4"); // Jumps to Wave Throw
			BOS4 M 0 A_DynamicMusic();
			BOS4 MN 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("ArchonComet",user_tempvar1,0,0,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("ArchonComet",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("ArchonComet",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("ArchonComet",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("ArchonComet",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
			}
			Goto See;

			// Right Throw - Normal
		Missile2:
			BOS4 E 0 A_DynamicMusic();
			BOS4 EF 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 G 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,0,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,-4,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,4,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)+4);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			BOS4 H 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			BOS4 H 0 Bright A_Jump(64, "Missile1"); // Jumps to Comet Attack
			Goto Missile3; // Jumps to Left Throw

		// Left Throw - Normal
		Missile3:
			BOS4 I 0 A_DynamicMusic();
			BOS4 IJ 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 K 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,0,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,-4,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,4,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)+4);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			BOS4 L 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			BOS4 L 0 Bright A_Jump(64, "Missile1"); // Jumps to Comet Attack
			Goto See;

		// Middle Attack - Normal
		Missile4:
			BOS4 M 0 A_DynamicMusic();
			BOS4 MN 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,6,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,4,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,2,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,0,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,-2,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,-4,0);
				A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,-6,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)-6);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)-6);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)-4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)-2);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)-2);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)+2);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)+2);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)+4);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1)+6);
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1)+6);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)-6);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)-6);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)-4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)-2);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)-2);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)+2);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)+2);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)+4);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2)+6);
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2)+6);
					}
				}
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			Goto See;

		ResetLevel:
			BOS4 A 1 A_Look();
			BOS4 A 1;
			BOS4 A 1
			{
				user_ressurrectstr += random(10,20);
			}
			BOS4 A 1;
		goto Spawn+1;
		Spawn:
			BOS4 A 0 NoDelay;
			BOS4 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS4 AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			BOS4 E 0 A_DynamicMusic();
			BOS4 EF 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 G 4 Bright
			{
				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_FaceTarget();

				A_CustomComboAttack("ArchonOfHellBall",user_tempvar1,(15*random(1,8)),"baron/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("ArchonOfHellBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
			}
			BOS4 H 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			BOS4 H 0 A_Jump(128,1);
			Goto See;
			BOS4 I 0 A_DynamicMusic();
			BOS4 IJ 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 K 4 Bright
			{
				A_FaceTarget();
				
				A_CustomComboAttack("ArchonOfHellBall",32,(15*random(1,8)),"baron/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
			}
			BOS4 L 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			BOS4 L 0 A_Jump (64,1);
			Goto See;
			BOS4 M 0 A_DynamicMusic();
			BOS4 MN 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				
				A_CustomComboAttack("ArchonOfHellBall",32,(20*random(1,8)),"baron/melee");
				A_CustomComboAttack("ArchonOfHellBall",32,(20*random(1,8)),"baron/melee");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BOS4 Q 2;
			BOS4 Q 2 A_KCPain();
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			BOS4 Q 2;
			BOS4 Q 2 A_KCPain();
			BOS4 Q 12;
			BOS4 Q 0 Bright A_Jump(128,4);
			BOS4 Q 6 Bright;
			BOS4 Q 0 Bright A_Jump(128,2);
			BOS4 Q 6 Bright;
			BOS4 Q 0 Bright;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BOS4 R 6 Bright;
			BOS4 S 6 Bright A_Scream();
			BOS4 T 6 Bright;
			BOS4 U 6 Bright A_NoBlocking();
			BOS4 VW 6 Bright;
			BOS4 X 6 Bright A_SpawnProjectile("ArchonASoul",86,0,0,2,-90);
			BOS4 YZ 6 Bright;
			BOS4 [ 6 Bright A_Fall();
			TNT1 A 0 A_BossDeath();
			Stop;
		Ice:
			BOS4 Q 5 A_GenericFreezeDeath();
			BOS4 Q 1 A_FreezeDeathChunks();
			wait;
	}
}
// The Archon of Hell's ball is intended to be around 50-100% stronger than a Baron's
class ArchonOfHellBall : BaronBallNew
{
	default
	{
		Tag "Archon Plasma";
		decal "BaronScorch";
		Speed 22.5;
		DamageFunction (8 * random(21,32)); // [168-256] 8
	}
	
	States
	{
		Spawn:
			BAL7 A 0;
			#### AABB 2 Bright;
			Loop;
		Death:
			#### CDE 6 Bright;
			Stop;
	}
}
// Archon Comet Trail
class ArchonCometTrail : KCBaseZSC
{
	default
	{
		Radius 3;
		Height 3;
		scale 0.75;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			TNT1 A 3 Bright;
			ARCB DEFGHI 3 BRIGHT;
			Stop;
	}
}
class ArchonComet : KCProjectile
{
	default
	{
		Tag "Archon Comet";
		Radius 8;
		Height 12;
		Speed 25;
		DamageFunction (20 * random(1,8));
		PROJECTILE;
		RenderStyle "Normal";
		SeeSound "weapons/firbfi";
		DeathSound "weapons/hellex";
		DONTHURTSHOOTER;
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			ARCB AAAABBBBCCCC 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			Loop;
		Death:
			ARCB J 0 Bright A_SetTranslucent(0.67,1);
			ARCB J 3 Bright;
			ARCB K 3 Bright A_Explode(128,128,0);
			ARCB LMN 3 Bright;
			Stop;
	}
}
// Archon of Hell Soul [death animation]
class ArchonASoul : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 3;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.80;
	}
	
	States
	{
		Spawn:
			BFX1 ABCD 6 BRIGHT;
			Stop;
	}
}
// Pyro Demon
class PyroDemon : BaronofHellNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Pyro Demon";

		Scale 1.1875;
		Health 3000;
		Radius 24;
		Height 64;
		Mass 1750;
		Speed 8;
		MeleeDamage 20;
		Bloodcolor "75 25 00";
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 160;
		PainChance "Fire", 1;

		DamageFactor 0.8334;
		RadiusDamageFactor 0.4167;
		DamageFactor "Explosive", 0.4167;
		DamageFactor "Crush", 0.4;
		DamageFactor "Ice", 8.88;
		DamageFactor "Fire", 0.05;
		Species "HellNoble";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		+BOSSDEATH;
		+E1M8BOSS;
		SEESOUND "pyro/see";
		PAINSOUND "pyro/pain";
		DEATHSOUND "pyro/death";
		ACTIVESOUND "pyro/idle";
		OBITUARY "%o was burnt to a crisp by a pyro demon";
		HITOBITUARY "%o was melted my a pyro demon";
	}

	states 
	{
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			PYRO E 0 A_DynamicMusic();
			PYRO E 0 
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (!(CountInv("PyroDemonTeleportCooldown")))
					{
						if (random (1,256) <= 32) { return resolvestate("Missile4"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO E 0 A_Jump(32,"Missile3");
		// Fire Shots - Normal
		Missile1:
			PYRO E 0 A_DynamicMusic();
			PYRO EF 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO G 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("FireShot",user_tempvar1,0,-4,0);
				A_SpawnProjectile("FireShot",user_tempvar1,0,0,0);
				A_SpawnProjectile("FireShot",user_tempvar1,0,4,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1)-4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1)+4);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2)-4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			PYRO H 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			PYRO H 0 A_Jump(32,"Missile2");
		Missile1a:
			PYRO I 0 A_DynamicMusic();
			PYRO IJ 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO K 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("FireShot",user_tempvar1,0,-4,0);
				A_SpawnProjectile("FireShot",user_tempvar1,0,0,0);
				A_SpawnProjectile("FireShot",user_tempvar1,0,4,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1)-4);
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*1)+4);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2)-4);
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("FireShot",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			PYRO L 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			PYRO L 0 A_Jump(32,"Missile2");
			Goto See;

		// Pyro Blast - Normal
		Missile2:
			PYRO M 0 A_DynamicMusic();
			PYRO MN 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO O 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("PyroBlast",user_tempvar1,0,0,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("PyroBlast",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("PyroBlast",user_tempvar1,0,(user_tempvar2*1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("PyroBlast",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("PyroBlast",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			PYRO P 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			Goto See;

		// Comet Rain Attack - Normal
		Missile3:
			PYRO M 0 A_DynamicMusic();
			PYRO MN 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO O 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_SpawnProjectile("RainCometNull",user_tempvar1,0,0,0);
				A_SpawnProjectile("RainCometNull",user_tempvar1,0,90,0);
				A_SpawnProjectile("RainCometNull",user_tempvar1,0,180,0);
				A_SpawnProjectile("RainCometNull",user_tempvar1,0,270,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(225,1,true,self))
				{
					A_SpawnProjectile("RainCometNull",user_tempvar1,0,45,0);
					A_SpawnProjectile("RainCometNull",user_tempvar1,0,135,0);
					A_SpawnProjectile("RainCometNull",user_tempvar1,0,225,0);
					A_SpawnProjectile("RainCometNull",user_tempvar1,0,315,0);
				}
			}
			PYRO P 4 BRIGHT
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			Goto See;

		// Teleportation w/ Pyroballs - Normal
		Missile4:
			PYRO O 1 A_FaceTarget();
			PYRO O 0
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (!(CountInv("PyroDemonTeleportCooldown")))
					{
						A_SetInvulnerable();
						A_SpawnProjectile("EscapeExplosion",28,10,0,0);
						A_Mushroom("Pyroball",16); //,MSF_DontHurt
						if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(225,1,true,self))
						{
							A_Mushroom("Pyroball",8); //,MSF_DontHurt
						}
					}
					else
					{
						return resolvestate("See");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO O 3;
			PYRO P 3 BRIGHT;
			PYRO A 0 A_DynamicMusic();
			PYRO A 0 A_UnSetShootable();
			PYRO A 1 A_StartSound("pyro/tele");
			PYRO A 1 A_SetTranslucent(0.90);
			PYRO A 1 A_SetTranslucent(0.80);
			PYRO A 1 A_SetTranslucent(0.70);
			PYRO A 1 A_SetTranslucent(0.60);
			PYRO A 1 A_SetTranslucent(0.50);
			PYRO A 1 A_SetTranslucent(0.40);
			PYRO A 1 A_SetTranslucent(0.30);
			PYRO A 1 A_SetTranslucent(0.20);
			PYRO A 1 A_SetTranslucent(0.10);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			PYRO A 1 A_StartSound("pyro/tele");
			PYRO A 1 A_SetTranslucent(0.10);
			PYRO A 1 A_SetTranslucent(0.20);
			PYRO A 1 A_SetTranslucent(0.30);
			PYRO A 1 A_SetTranslucent(0.40);
			PYRO A 1 A_SetTranslucent(0.50);
			PYRO A 1 A_SetTranslucent(0.60);
			PYRO A 1 A_SetTranslucent(0.70);
			PYRO A 1 A_SetTranslucent(0.80);
			PYRO A 1 A_SetTranslucent(0.90);
			PYRO A 1 A_SetTranslucent(1.0);
			PYRO A 0 
			{
				A_Mushroom("Pyroball",16); //,MSF_DontHurt
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(225,1,true,self))
				{
					A_Mushroom("Pyroball",8); //,MSF_DontHurt
				}
			}
			PYRO A 0
			{
				A_SetShootable();
				A_UnSetInvulnerable();
				A_GiveInventory("PyroDemonTeleportCooldown", 1);
				A_DynamicMusic();
			}
			Goto See;

		ResetLevel:
			PYRO A 1 A_Look();
			PYRO A 1;
			PYRO A 1
			{
				user_ressurrectstr += random(10,20);
			}
			PYRO A 1;
		goto Spawn+1;

		Spawn:
			PYRO A 0 NoDelay;
			PYRO AB 10 A_Look();
			goto Spawn+1;
		See:
			PYRO A 0 
			{
				A_SetShootable();
				A_UnSetInvulnerable();
			}
			PYRO AA 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO A 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("kc_gfxeffectlevel") == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
			}
			PYRO B 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("kc_gfxeffectlevel") == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
			}
			PYRO C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO C 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("kc_gfxeffectlevel") == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO DD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO D 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("kc_gfxeffectlevel") == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			loop;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			PYRO A 0
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (!(CountInv("PyroDemonTeleportCooldown")))
					{
						if (random(1,256) <= 8) { return resolvestate("Missile4"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_KCPain();
			Goto See;
		Pain.Fist: 
			#### # 0 A_TimeFreezeCheckPain();
			PYRO A 0
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (!(CountInv("PyroDemonTeleportCooldown")))
					{
						if (random(1,256) <= 2) { return resolvestate("Missile4"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_KCPain();
			Goto See;
		Pain.Kick: 
			#### # 0 A_TimeFreezeCheckPain();
			PYRO A 0
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (!(CountInv("PyroDemonTeleportCooldown")))
					{
						if (random(1,256) <= 6) { return resolvestate("Missile4"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_KCPain();
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			PYRO Q 2;
			PYRO Q 2 A_KCPain();
			PYRO Q 36;
			PYRO Q 0 Bright A_Jump (128, 8);
			PYRO Q 24 Bright;
			PYRO Q 0 Bright A_Jump (128, 6);
			PYRO Q 18 Bright;
			PYRO Q 0 Bright A_Jump (128, 4);
			PYRO Q 12 Bright;
			PYRO Q 0 Bright A_Jump (128, 2);
			PYRO Q 6 Bright;
			PYRO Q 0 Bright;
			PYRO Q 0
			{
				int bholechance = 256 - (A_CheckBlackHoleSpeedPenalty() * random(12,16));
				if (random(1,256) <= bholechance)
				{
					if (random(1,256) <= 240) 
					{
						A_TakeInventory("PyroDemonTeleportCooldown",9999);
						return resolvestate("Missile4"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			PYRO R 20 BRIGHT A_Scream();
			PYRO S 20 BRIGHT;
			PYRO T 20 BRIGHT;
			PYRO U 20 BRIGHT A_NoBlocking();
			PYRO VW 6 BRIGHT;
			PYRO X 6 BRIGHT;
			PYRO Y 3 BRIGHT;
			PYRO Z -1 BRIGHT A_BossDeath();
			Stop;
		Ice:
			PYRO Q 5 A_GenericFreezeDeath();
			PYRO Q 1 A_FreezeDeathChunks();
			wait;
		Raise:
			PYRO Y 3 BRIGHT;
			PYRO XWV 6 BRIGHT;
			PYRO UTSR 20 BRIGHT;
			Goto See;
	}
}
class FireTail : KCBaseZSC
{
	default
	{
		PROJECTILE;
		RenderStyle "Add";
		+NOCLIP;
		ALPHA 0.4;
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			FRTB ABCDEFGHI 1 Bright;
			Stop;
	}
}
// Pyro Demon Comet Death Glow
class CometDeathGlow : FireTail
{
	default
	{
		Scale 2.0;
		Alpha 0.6;
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			FRTB ABCDEFGHI 3 Bright;
			Stop;
	}
}
class FallingComet : KCProjectile
{
	default
	{
		Tag "Falling PyroComet";
		Radius 6;
		Height 8;
		Speed 5;
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Scale 0.55;
		Projectile;
		SeeSound "pyro/comet";
		DeathSound "pyro/cometdeath";
		-NOGRAVITY;
		-FLOAT;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+SPAWNCEILING;
		Decal "RevenantScorch";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	states
	{
		Spawn:
			COMT AAAABBBBCCCC 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			COMT D 3 BRIGHT A_SpawnItemEx("CometDeathGlow", 0, 0, 0, 0, 0, 0, 0, 128);
			COMT E 3 BRIGHT A_Explode(20,128,0);
			COMT E 0 A_SpawnItemEx("CometDeath", 0, 0, 0, 0, 0, 0, 0, 128);
			Stop;
	}
}
class CometDeath : KCProjectile
{
	default
	{
		PROJECTILE;
		RenderStyle "Add";
		+NOCLIP;
		ALPHA 0.7;
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			COMT FGHI 3 Bright;
			Stop;
	}
}
class PyroBall : KCProjectile
{
	default
	{
		Tag "Pyro Ball";
		Radius 10;
		Height 8;
		Speed 15;
		DamageFunction (6 * random(1,8));
		SEESOUND "pyro/bomb";
		DEATHSOUND "pyro/bombhit";
		PROJECTILE;
		RenderStyle "Add";
		Obituary "%o was killed by a PyroBall.";
		Alpha 0.7;
		-NoGravity;
		BounceType "Doom";
		Gravity 0.125;
		+SeekerMissile;
		Decal "RevenantScorch";
		DamageType "Fire";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	states
	{
		Spawn:
			RBAL A 0 BRIGHT;
			RBAL AAAABBBB 1 BRIGHT;
			Goto Spawn+2;
		Death:
			RBAL DEFGHI 4 BRIGHT;
			Stop;
	}
}
class FirebombExplosion1 : KCProjectile
{
	default
	{
		Tag "Pyro Blast";
		DamageType "Fire";
		Radius 11;
		Height 8;
		Speed 18;
		DamageFunction (6 * random(1,8));
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+ACTIVATEIMPACT;
		+ACTIVATEPCROSS;
		Obituary "%o was killed by a Firebomb explosion.";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			FRME A 0;
			#### A 1 Bright;
			#### A 1 Bright;
			Loop;
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode(128,144,0);
			#### B 1 Bright A_Mushroom("Pyroball",8,MSF_DontHurt);
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion2",25,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class FirebombExplosion2 : FirebombExplosion1
{
	default
	{
		Tag "Pyro Blast";
		DamageType "Fire";
	}
	
	States
	{
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode(128,136,0);
			#### B 1 Bright;
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion3",20,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class FirebombExplosion3 : FirebombExplosion1
{
	default
	{
		Tag "Pyro Blast";
		DamageType "Fire";
		Speed 14;
		DamageFunction (5 * random(1,8));
	}
	
	States
	{
		Death:
			FRME A 0;
			FRME A 0 A_StartSound("pyro/blastexplosion");
			FRME A 3 Bright A_Explode(128,128,0);
			FRME BCDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class PyroBlast : KCProjectile
{
	default
	{
		Tag "Pyro Blast";
		DamageType "Fire";
		PROJECTILE;
		+SeekerMissile;
		+NoGravity;
		RenderStyle "Add";
		Alpha 0.4;
		SEESOUND "pyro/blast";
		DEATHSOUND "pyro/flamepoof";
		Speed 17;
		Height 10;
		Radius 10;
		Decal "Scorch";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	states
	{
		Spawn:
			SBLL ABCDEFGHIJ 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			SBLL A 0 BRIGHT A_SeekerMissile(0,2);
			Loop;
		Death:
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1",1,0,45,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1",1,0,135,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1",1,0,225,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1",1,0,315,4);
			SBLL LMNOPQRSTUVW 1 BRIGHT;
			Stop;
	}
}
class RainCometNull : KCProjectile
{
	default
	{
		Radius 0;
		Height 0;
		Speed 8;
		RenderStyle "Add";
		Alpha 0.25;
		PROJECTILE;
		+FLOORCLIP;
		+RIPPER;
		BounceType "Doom";
		+CEILINGHUGGER;
		+DONTHARMSPECIES;
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	states
	{
		Spawn:
			RCMN A 0 A_Jump(5,8);
			RCMN AAAAAA 1 A_Wander();
			RCMN A 8 A_SpawnProjectile("FallingComet",-24,frandom(0,128),frandom(0,360),2,frandom(0,90));
			RCMN A 0 Bright { user_theta += 1; }
			RCMN A 0 Bright A_JumpIf(user_theta==32,"Death");
			Loop;
		Death:
			RCMN A 0;
			Stop;
	}
}
class FireShot : KCProjectile
{
	default
	{
		Tag "Pyro Fire";
		Radius 3;
		Height 3;
		Speed 15;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
		DamageType "Fire";
		SeeSound "pyro/flame";
		DeathSound "pyro/flamepoof";
		Decal "RevenantScorch";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			FSHT AAAAAA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			FSHT A 0 Bright A_Explode(128,128,0);
			FSHT BCDE 3 Bright;
			Stop;
	}
}
class EscapeExplosion : KCProjectile
{
	default
	{
		Tag "Pyroportation";
		SeeSound "pyro/explosion";
		Radius 8;
		Height 28;
		Speed 0;
		PROJECTILE;
		DamageType "Fire";
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			NKXP BC 3 BRIGHT;
			NKXP D 3 BRIGHT A_Explode(50,192,0);
			NKXP EFGHIJKLMNOPQRSTUV 3 BRIGHT;
			Stop;
	}
}
// Pyro Demon Walking Fire
class WalkFire : KCBaseZSC
{
	default
	{
		DamageType "Fire";
		+NOCLIP;
		+MISSILE;
		+DROPOFF;
		+RANDOMIZE;
		scale 1.5;
		Speed 1;
		RenderStyle "Add";
		ALPHA 0.67;
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
	}
	
	States
	{
		Spawn:
			TNT1 A 8;
			FRTF A 3 Bright;
			FRTF B 3 Bright;
			FRTF C 3 Bright;
			FRTF C 0
			{
				if (A_CheckRange(1024,"Null")) { } else 
				{
					if (random(1,8) <= 2)
					{
						if (GetCVar("kc_gfxeffectlevel") == 0)
						{
							A_SpawnProjectile("WalkFire2", 0, 24, 0);
							A_SpawnProjectile("WalkFire2", 0, 0, 0);
							A_SpawnProjectile("WalkFire2", 0, -24, 0);
						}
						else
						if (GetCVar("kc_gfxeffectlevel") == 1)
						{
							A_SpawnProjectile("WalkFire2", 0, 0, 0);
						}
					}
				}
			}
			FRTF DEFGHIJKLMNO 3 Bright;
			Stop;
	}
}
class WalkFire2 : WalkFire
{
	default
	{
		DamageType "Fire";
		+NOCLIP;
		+MISSILE;
		+DROPOFF;
		+RANDOMIZE;
		scale 1.5;
		Speed 1;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			TNT1 A 8
			{
				A_SetScale(frandom(1.25,1.5),frandom(1.25,1.5));
			}
			FRTF ABCDEFGHIJKLMNO 3 Bright;
			Stop;
	}
}
// Hierophant
class Hierophant : KCCreature 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hierophant";

		Health 2700;
		Radius 24;
		Height 60;
		Mass 2500;
		Speed 15;
		PainChance 24;
		Painchance "Fist", 36; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 60; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 3;
		Painchance "Ice", 192;

		RadiusDamageFactor 0.25;
		DamageFactor "Explosive", 0.25;

		DamageFactor "Fire", 0.25;
		DamageFactor "Ice", 2.5;
		DamageFactor "Crush", 0.4; // 3.2
		MeleeDamage 15;
		Monster;
		Species "HellNoble";
		+NOTARGET;
		+FLOORCLIP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+FLOAT;
		+NOGRAVITY;
		+DONTHARMSPECIES;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "monster/Hiesit";
		PainSound "monster/Hiepai";
		DeathSound "monster/Hiedth";
		MeleeSound "baron/melee";
		ActiveSound "monster/Hieact";
		Obituary "%o was hexed by a Hierophant.";
		HitObituary "%o got shredded by a Hierophant.";
	}

	States
	{
		Spawn: 
			HIER A 0 NoDelay;
			HIER AC 5 A_FloatLook(12);
			goto Spawn+1;
		See:
			HIER A 0;
			HIER AABBAACCDDCC 2
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,3,6)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HIER A 0 A_Jump(64, "Blur");
			Loop;
		Blur:
			HIER A 1 A_StartSound("monster/blur");
			HIER AAAAAAAAAAAAAAAAAAAAAA 1 
			{
				A_SpawnItemEx("HieroFX",0,0,0,0,0,0,0,128,0);
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			HIER A 0 A_FaceTarget();
			HIER A 0 A_Jump(256, "Missile1", "Missile2", "Missile3");
		Missile1:
			HIER E 0 Bright A_DynamicMusic();
			HIER EF 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER G 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();

				user_tempvar1 = 26;
				user_tempvar2 = 15;
				A_SpawnProjectile("HieroBall1",user_tempvar1,0,random(-6,-1),0);
				A_SpawnProjectile("HieroBall1",user_tempvar1,0,random(1,6),0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*1)+random(1,6));
					A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*-1)+random(-6,-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*2)+random(1,6));
						A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*-2)+random(-6,-1));
					}
				}
			}
			HIER A 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			HIER HI 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER J 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();

				user_tempvar1 = 26;
				user_tempvar2 = 15;
				A_SpawnProjectile("HieroBall1",26,0,random(-6,-1),0);
				A_SpawnProjectile("HieroBall1",26,0,random(1,6),0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*1)+random(1,6));
					A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*-1)+random(-6,-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*2)+random(1,6));
						A_SpawnProjectile("HieroBall1",user_tempvar1,0,(user_tempvar2*-2)+random(-6,-1));
					}
				}
			}
			HIER A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpidRefire();
			}
			HIER A 0 A_Jump(64, "Missile1");
			Goto See;
		Missile2: // Curse Shot
			HIER H 0 Bright A_DynamicMusic();
			HIER HI 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER J 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();

				A_SpawnProjectile("CurseBall",26,0,0,0);
			}
			HIER A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpidRefire();
			}
			HIER EF 7 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
					A_FaceTarget();
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER G 7 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
					A_FaceTarget();
	
					user_tempvar1 = 26;
					user_tempvar2 = 15;
					A_SpawnProjectile("CurseBall",user_tempvar1,0,0);
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
					{
						A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*1));
						A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*-1));
						if (A_CheckMonsterLevel(225,1,true,self))
						{
							A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*2));
							A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*-2));
						}
					}
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
					A_SpidRefire();
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER A 0 A_Jump(128,"Missile1","Missile3");
			Goto See;

		Missile3:
			HIER K 0 Bright A_DynamicMusic();
			HIER KLM 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				user_shotsfired = 0;
				user_shotsfiredmax = 8 + ((CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(7.5,true,self))*2) + random(0,2);
				A_FaceTarget();
			}
		Missile3Loop:
			HIER N 1 Bright
			{
				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_SpawnProjectile("HieroBall2",user_tempvar1,0,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("HieroBall2",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("HieroBall2",user_tempvar1,0,(user_tempvar2*-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("HieroBall2",user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile("HieroBall2",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			HIER O 1 Bright A_FaceTarget();
			HIER O 0 Bright 
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("Missile3End"); }
				return resolvestate(null);
			}
			loop;
		Missile3End:
			HIER L 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			HIER E 0 A_DynamicMusic();
			HIER EF 8  
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			HIER G 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(15,"baron/melee","none","Melee",1); // A_MeleeAttack;
			}
			HIER A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			HIER A 0 A_Jump(128, 1);
			Goto See;
			HIER H 0 A_DynamicMusic();
			HIER HI 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			HIER J 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(15,"baron/melee","none","Melee",1); // A_MeleeAttack;
			}
			HIER A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 3 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			#### # 0 A_TimeFreezeCheckPain();
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 12 * random(1,8);
			}
			HIER PPPPPPPP 2;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HIER Q 6;
			HIER R 6 A_Scream();
			HIER S 6 A_NoBlocking();
			HIER TUV 6;
			HIER W 6;
			HIER X 0 A_SetFloorClip();
			HIER X -1 A_BossDeath();
			Stop;
		Ice:
			HIER P 5 A_GenericFreezeDeath();
			HIER P 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HIER W 6;
			HIER VUTSRQ 6;
			goto See;
	}
}
// Hierophant Curses = Blunt/Sap/Deceleratle
class CurseTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Projectile;
		+ForceXYBillBoard;
		RenderStyle "Add";
		Alpha 0.80;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			CURS JLMNOPR 3 Bright;
			Stop;
	}
}
class CurseBall : KCEffectProjectile
{
	default
	{
		Tag "CurseBane Ball";
		Radius 6;
		Height 16;
		Speed 20;
		FastSpeed 26;
		DamageFunction (0);
		Projectile;
		+RANDOMIZE;
		+FORCEXYBILLBOARD;
		+FORCERADIUSDMG;
		+NODAMAGETHRUST;
		+SEEKERMISSILE;
		RenderStyle "Add";
		Alpha 0.90;
		SeeSound "monster/curse1";
		DeathSound "monster/curse2";
		Decal "MummyScorch";
		DamageType "Dark";
	}
	
	void A_Effect(int basechance, int actualroll, int inflicttics, int sndchannel)
	{
		actor player = players[0].mo;
		A_StatusEffectChecker(basechance);
		if (random(1,user_ailmentmaxchance) <= actualroll && user_canafflict)
		{
			user_random = random(1,12);
			if (user_random >= 1 && user_random <= 4)
			{
				A_InflictWeaken(inflicttics,sndchannel);
			}
			if (user_random >= 5 && user_random <= 8)
			{
				A_InflictHalve(inflicttics,sndchannel);
			}
			if (user_random >= 9 && user_random <= 12)
			{
				A_InflictSlow(inflicttics,sndchannel);
			}
		}
	}
	
	States
	{
		Spawn: 
			CURS A 2 Bright 
			{
				A_SpawnItemEx("CurseTrail",0,0,0,0,0,0,0,128,0);
				A_SeekerMissile(random(6,9),random(7,10));
			}
			CURS B 2 Bright 
			{
				A_SpawnItemEx("CurseTrail",0,0,0,0,0,0,0,128,0);
				if (random(1,10) == 1) { A_SeekerMissile(random(2,3),random(3,4)); }
			}
			CURS C 2 Bright 
			{
				A_SpawnItemEx("CurseTrail",0,0,0,0,0,0,0,128,0);
				A_SeekerMissile(random(6,9),random(7,10));
			}
			CURS D 2 Bright 
			{
				A_SpawnItemEx("CurseTrail",0,0,0,0,0,0,0,128,0);
				if (random(1,10) == 1) { A_SeekerMissile(random(2,3),random(3,4)); }
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					// 1
					A_Effect(4,2,random(315,525),401);
	
					// 2
					A_Effect(4,2,random(315,525),402);
	
					// 3
					A_Effect(4,2,random(315,525),403);
	
					// 4
					A_Effect(4,2,random(315,525),404);
				}
			}
		Death2:
			CURS E 0 Bright A_SetTranslucent(0.80, 1);
			CURS E 3 Bright A_Explode(25, 32, 0, 1, 32, 0, 0);
			CURS FGHI 3 Bright;
			Stop;
	}
}
class HieroFX : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		+NoGravity;
		+NoBlockMap;
		RenderStyle "Translucent";
		Scale 1.0;
		Alpha 0.80;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			HIER A 5 A_FadeOut(0.10);
			Goto Spawn+1;
	}
}
class HieroBall1 : BaronBallNew
{
	default
	{
		Tag "Hierophant Fireblast";
		Speed 10;
		Damage 10;
		+FORCEXYBILLBOARD;
		Decal "RevenantScorch";
		DamageType "Fire";
	}
	
	States
	{
		Spawn: 
			HIB1 AABB 2 Bright;
			Loop;
		Death:
			HIB1 C 0 Bright A_SetTranslucent(0.75, 1);
			HIB1 C 3 Bright;
			HIB1 D 3 Bright A_Explode(32, 32, 0);
			HIB1 EFG 3 Bright;
			Stop;
	}
}
class HieroBall2 : KCProjectile
{
	default
	{
		Tag "Hierophant Spiraler";
		Radius 10;
		Height 6;
		Speed 16;
		DamageFunction (6 * random(1,6));
		Projectile;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+FORCEXYBILLBOARD;
		RenderStyle "Add";
		Seesound "weapons/firmfi";
		DeathSound "weapons/firex5";
		Decal "PlasmaScorchLower";
		DamageType "Fire";
	}
	States
	{
		Spawn: 
			HIB2 ABCD 1 Bright A_Weave(3, 3, 1.0, 1.0);
			HIB2 A 0 Bright A_SeekerMissile(5, 6);
			Loop;
		Death:
			HIB2 E 0 Bright A_SetTranslucent(0.75, 1);
			HIB2 EFGHIJ 3 Bright;
			Stop;
	}
}
// Rockets (Monsters)
class RocketMonster : RocketBase
{
	default
	{
		Tag "Rocket";
		DamageFunction (finaldamagedealt);
		DamageType "Explosive";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}
class CyberdemonNew : KCCreature
{
	default
	{
		Tag "Cyberdemon";
		Health 4000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		//MeleeRange 120;
		PainChance 20;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 75;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MinMissileChance 160;
		+BOSS 
		MissileChanceMult 0.5; //+MISSILEMORE;
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E2M8BOSS
		+E4M6BOSS
		SeeSound "cyber/sight";
		PainSound "cyberdemon/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "$OB_CYBORG";
		Species "Cyberdemon";
	}
	
	state A_CybCheckStompDist(int basedist = 24, int minc = 1, int maxc = 5, bool domissile = false)
	{
		if (A_CheckCCInvertGrav() == false)
		{
			float basechance;
			if (A_JumpIfCloser((basedist*random(1,5)), "Stomp"))
			{
				basechance = 0 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(3.3334,true,self));
				if (frandom(0.1,100.0) <= basechance) return resolvestate("Stomp");
				else 
				{
					if (domissile)
					{
						basechance = 0 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(6.6667,true,self));
						if (frandom(0.1,100.0) <= basechance) return resolvestate("Missile");
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			return resolvestate(null);
		}
		return resolvestate(null);
	}
	
	States
	{
		Spawn:
			CYBR AB 10 A_Look();
			Loop;
		See:
			CYBR A 0
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CYBR A 0 { user_walksound = 0; }
			CYBR AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("cyber/hoof",CHAN_BODY); 
				}
				if (user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}

				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			Loop;

		Stomp:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR Z 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA A 7 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				
				A_FaceTarget();
				A_SpawnProjectile("CyberStomp",10,0,0,0);
				A_Quake(2, 21, 0, 512, "nosound/silent");
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				
				A_DynamicMusic();
			}
			CYMA B 0 A_Jump(64,2);
			CYMA B 0 A_CybCheckStompDist(24,3,5,true);
			CYMA B 0;
			Goto See;
		
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR E 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_FaceTarget();
				A_DynamicMusic();
			}
		MissileB:
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }

				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			CYBR E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,4) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			CYBR E 0 A_JumpIfCloser(180, "Stomp");
			CYBR E 12 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }

				A_FaceTarget();
				A_DynamicMusic();
			}
			loop;
			
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 10 A_KCPain();
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR GG 5;
			CYBR G 5 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 2;
			CYBR G 3;
			CYBR G 2;
			Goto See;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 5;
			CYBR G 5;
			CYBR G 5 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 5;
			CYBR G 5;
			CYBR G 5;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 5;
			CYBR G 5;
			CYBR G 5;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P 0
			{
				if (level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' &&
						(IsDoom1() && level.mapname == "E2M8"))
				{
					A_SetTics(110);
				}
			}
			CYBR P -1 A_BossDeath();
			Stop;
		Ice:
			CYBR G 5 A_GenericFreezeDeath();
			CYBR G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CYBR O 10;
			CYBR NMLKJHI 10;
			goto See;
	}
}
// Cyberdemon Stomps
class CyberStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "Add";
		Alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+DONTREFLECT;
		Health 5;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp",CHAN_7);
			}
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(85,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,128,0,0,32);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
	}
}
class ExplosionSmoke : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOGRAVITY;
		BounceType "Doom";
		+THRUACTORS;
		Health 99999;
		BounceFactor 0.5;
		Radius 0;
		Height 0;
		Alpha 0.1;
		RenderStyle "Translucent";
		Scale 1.1;
		Speed 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(waterlevel > 1, "Stap");
			SMK3 BBB 2 A_FadeIn(0.1);
			SMK3 B 20;
			TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
			SMK3 CDEFGHIJKLM 3;
			Goto Death;
		Death:
			TNT1 A 0;
			Stop;
		Stap:		
			TNT1 A 0;
			Stop;
	}
}
class BigSmokes : ExplosionSmoke
{
	default
	{
		Speed 1;
		Alpha 0.1;
		Scale 1.5;
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			Goto Death;
		Death:
			SMK3 B 100;
			SMK3 CDEFGHIJKLM 1;
			Stop;
	}
}
class FootStep : KCProjectile
{
	default
	{
		Radius 10;
		Height 10;
		Speed 7;
		Projectile;
		-NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+NOEXTREMEDEATH;
		DamageType "Trample";
		Damage 0;
		+NODAMAGETHRUST;
		+BLOODLESSIMPACT; 
		+THRUACTORS;
		+DONTREFLECT;
		Gravity 40;
		Mass 1000;
		Obituary "%o was trampled by %k.";
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
		Death:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
	}
}
class Footstep5 : FootStep
{
	default
	{
		Damage 0;
		-CLIENTSIDEONLY;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
}
class Footstep6 : FootStep
{
	default
	{
		DamageFunction (random(2,3));
		-CLIENTSIDEONLY;
		-DONTSPLASH;
		-EXPLODEONWATER;
		Mass 500;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 3;
			Goto Death;
		Death:
			TNT1 A 1;
			//NULL A 0 A_StartSound("floor/tile2")
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			stop;
	}
}
class WallChunk : KCBaseZSC
{
	int user_random1;
	default
	{
		Scale 0.16;
		+NOTELEPORT;
		+MISSILE;
		+BOUNCEONACTORS;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		Speed 6;
		Gravity 0.7;
		Bouncefactor 0.2;
		BounceType "Doom";
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		See:
			TNT1 A 0
			{
				user_random1 = random(1,4);
				if (user_random1 == 1) { return resolvestate("See1"); }
				if (user_random1 == 2) { return resolvestate("See2"); }
				if (user_random1 == 3) { return resolvestate("See3"); }
				if (user_random1 == 4) { return resolvestate("See4"); }
				return resolvestate(null);
			}
		See1:
			DUST A 1;
			loop;
		See2:
			DUST B 1;
			loop;
		See3:
			DUST C 1;
			loop;
		See4:
			DUST D 1;
			loop;
		Death:
			TNT1 A 0 
			{
				bMISSILE = false;
				bBOUNCEONACTORS = false;
			}
			TNT1 A 0
			{
				if (user_random1 == 1) { return resolvestate("Death1"); }
				if (user_random1 == 2) { return resolvestate("Death2"); }
				if (user_random1 == 3) { return resolvestate("Death3"); }
				if (user_random1 == 4) { return resolvestate("Death4"); }
				return resolvestate(null);
			}
		Death1:
			DUST A 100;
			Stop;
		Death2:
			DUST B 100;
			Stop;
		Death3:
			DUST C 100;
			Stop;
		Death4:
			DUST D 100;
			Stop;
	}
}
class TinyWallChunk : WallChunk
{
	default
	{
		Scale 0.12;
	}
}
class BigWallChunk : WallChunk
{
	default
	{
		Scale 0.3;
	}
}
class HugeWallChunk : WallChunk
{
	default
	{
		Scale 0.4;
	}
}
class DirtChunk1 : WallChunk
{
	default
	{
		Scale 0.6;
		Speed 16;
		BounceFactor 0.5;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
class DirtChunk2 : WallChunk
{
	default
	{
		Scale 0.4;
		Speed 12;
		BounceFactor 0.3;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
// Annihilator Rocket
class Rocket2 : KCProjectile
{
	default
	{
		Tag "Rocket";
		DamageType "Explosive";
		obituary "%o rode %k's rocket.";
		radius 11;
		height 8;
		speed 20;
		DamageFunction (finaldamagedealt);
		seesound "weapons/rocklf";
		deathsound "weapons/rocklx";
		PROJECTILE;
		+RANDOMIZE;
		+ROCKETTRAIL;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}

	States
	{
		Spawn:
			MISL A 1 bright;
			loop;
		Death:
			MISL B 0 bright A_SetTranslucent(0.67,1);
			MISL B 8 bright 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");

				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 bright;
			MISL D 4 bright;
			stop;
	}
}
class HomRocket1 : KCProjectile
{
	default
	{
		Tag "Homing Rocket";
		DamageType "Explosive";
		Radius 8;
		Height 11;
		Speed 30;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+SeekerMissile;
		+Rockettrail;
		SeeSound "";
		DeathSound "";
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HMIS A 0 NoDelay A_StartSound("weapons/hrlfir",CHAN_7);
			HMIS A 2 Bright A_SeekerMissile(25,35);
			HMIS A 2 Bright;
			HMIS A 2 Bright A_SeekerMissile(10,25);
			HMIS A 2 Bright;
			goto Spawn+2;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1);
			BAL3 C 8 Bright
			{
				int dmg = A_CalcDamageFormulaEx(96,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BAL3 DE 5 Bright;
			stop;
	}
}
class Annihilator : CyberdemonNew 
{
	default
	{
		Tag "Cyber-Annhilator";
		Health 8000;
		Radius 40;
		Height 110;
		Mass 1500;
		Speed 16;
		MeleeRange 120;
		Painchance 10;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 100;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 38;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "Cyberdemon";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		MissileChanceMult 0.125;
		//+MISSILEEVENMORE;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		+BOSSDEATH;
		+E2M8BOSS;
		SeeSound "monster/annsit";
		DeathSound "monster/anndth";
		ActiveSound "cyber/active";
		PainSound "annihilator/pain";
		Obituary "The Cyber Annihilator blew %o away with its rockets.";
	}
	
	States 
	{
		Stomp:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI B 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			ANMA A 7 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			ANMA B 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }

				A_FaceTarget();
				A_SpawnProjectile("AnnhiliatorStomp",10,0,0,0);
				A_Quake(3, 32, 0, 768, "nosound/silent");
			}
			ANMA B 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
			}
			ANMA B 0 A_Jump(64,2);
			ANMA B 0 A_CybCheckStompDist(24,3,5,true);
			Goto See;

		AttackPhaseChange:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump(128,"Missile2");
			goto See;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			TNT1 A 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump(128,"Missile2");

		Missile1:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI E 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }
				
				A_FaceTarget();
				A_SpawnProjectile("Rocket2",40,27,0);
				A_SpawnProjectile("Rocket2",40,-27,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("Rocket2",40,27,15);
					A_SpawnProjectile("Rocket2",40,27,-15);
					A_SpawnProjectile("Rocket2",40,-27,15);
					A_SpawnProjectile("Rocket2",40,-27,-15);
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("Rocket2",40,27,30);
						A_SpawnProjectile("Rocket2",40,27,-30);
						A_SpawnProjectile("Rocket2",40,-27,30);
						A_SpawnProjectile("Rocket2",40,-27,-30);
					}
				}
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				
				A_FaceTarget();
			}
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "AttackPhaseChange");
			Goto Missile1;

		Missile2:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(15,2,true,self)) { A_SetTics(11); }
				
				A_FaceTarget();
				A_SpawnProjectile("HomRocket1",40,27,0);
				A_SpawnProjectile("HomRocket1",40,-27,0);
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "See");
			Goto Missile2;

		Spawn: 
			ANNI AB 10 A_Look();
			loop;
		See:
			ANNI A 0
			{
				user_walksound = 0; 
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			ANNI AABBCCDD 3 
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1 || user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound ("monster/anhoof"); 
				}
				
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			loop;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5 A_KCPain();
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI GG 5;
			ANNI G 5 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 2;
			ANNI G 3;
			ANNI G 2;
			Goto See;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5;
			ANNI G 5 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 5;
			ANNI G 5;
			ANNI G 5;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 5;
			ANNI G 5;
			ANNI G 5;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			ANNI H 10 Bright;
			ANNI I 10 Bright A_Scream();
			ANNI JKL 10 Bright;
			ANNI M 10 Bright A_NoBlocking();
			ANNI NO 10 Bright;
			ANNI P 30;
			ANNI P 0
			{
				if (level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' &&
						(IsDoom1() && level.mapname == "E2M8"))
				{
					A_SetTics(110);
				}
			}
			ANNI P -1 A_BossDeath();
		Ice:
			ANNI G 5 A_GenericFreezeDeath();
			ANNI G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ANNI O 10 Bright;
			ANNI NMLKJIH 10 Bright;
			goto See;
	}
}
class AnnhiliatorStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "translucent";
		alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		Health 5;
		Obituary "%o was stomped on by the Cyber-Annhiliator.";
	}
	
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp");
			}
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,192,0,0,48);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
  }
}
class SpiderMastermindNew : KCCreature
{
	default
	{
		Tag "Spider Mastermind";
		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 4;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 130;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+BOSS
		MissileChanceMult 0.5; //+MISSILEMORE;
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E3M8BOSS
		+E4M8BOSS
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "mastermind/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
	}
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				//Console.Printf("i: %d, angle: %.8f, slope: %.8f", i, ang, slope);

				int damage = A_CalcDamageFormula(3,random(1,5),0.015,0.3334,0.1667,0.01);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	States
	{
		Spawn:
			SPID AB 10 A_Look();
			Loop;
		See:
			SPID A 0
			{
				user_shotsfired = 0;
				user_walksound = 0;
			}
			SPID AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("SpidMastChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((50 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(3,true,self))),(75 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(1.5,true,self)))); }
					else { user_shotsfiredmax = random(50,75); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			SPID A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 5.625; // 22.5;
				user_shotzaccuracy = 0.0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			SPID A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				A_StartSound(AttackSound, CHAN_WEAPON);
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID G 0 A_MonsterRefire(10,"See");
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID H 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				A_StartSound(AttackSound, CHAN_WEAPON);
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID H 1 A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SPID I 3;
			SPID I 3 A_KCPain();
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			SPID II 3;
			SPID I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 1;
			SPID I 2;
			SPID I 1;
			Goto See;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
			#### # 0 A_TimeFreezeCheckPain();
			SPID I 3;
			SPID I 3;
			SPID I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 3;
			SPID I 3;
			SPID I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 3;
			SPID I 3;
			SPID I 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SPID J 20 A_Scream();
			SPID K 10 A_NoBlocking();
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S 0
			{
				if (level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' &&
						(IsDoom1() && level.mapname == "E3M8"))
				{
					A_SetTics(130);
				}
			}
			SPID S -1 A_BossDeath();
			Stop;
		Ice:
			SPID I 5 A_GenericFreezeDeath();
			SPID I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SPID S 30;
			SPID QRPONMLK 10;
			SPID J 20;
			goto See;
	}
}
class Demolisher : SpiderMastermindNew
{
	default
	{
		Tag "Spider-Demolisher";
		Health 6000;
		Radius 128;
		Height 100;
		Mass 1500;
		Speed 16;
		Painchance 20;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 65;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "SpiderMastermind";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+BOSS;
		MissileChanceMult 0.125;
		//+MISSILEEVENMORE;
		+NORADIUSDMG;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		+BOSSDEATH;
		+E3M8BOSS;
		+E4M8BOSS;
		SeeSound "monster/demsit";
		AttackSound "spider2/attack";
		PainSound "demolisher/pain";
		DeathSound "monster/demdth";
		ActiveSound "spider/active";
		Obituary "%o felt the power of the Spider-Demolisher.";
	}
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double bslope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (33.75/256);
				double slope = bslope + Random2[SPosAttack]() * (6.4/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.025,0.5,0.25,0.01);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}

	States 
	{
		Spawn:
			DEMO AB 10 A_Look();
			goto Spawn;
		See:
			DEMO A 0
			{
				user_shotsfired = 0;
				user_walksound = 0;
			}
			DEMO AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			loop;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (random(1,256) <= 48)
				{
					if (!(CountInv("SpidMastChaingunCooldown")))
					{
						if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((50 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(3,true,self))),(75 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(1.5,true,self)))); }
						else { user_shotsfiredmax = random(50,75); }
						return resolvestate("Missile2");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto Missile1;
		Missile1:
			DEMO A 20 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_FaceTarget();
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 1 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(0); }
				A_StartSound("weapons/bfgf");
			}
			DEMO TT 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*3));
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 0 BRIGHT A_Jump(88,"Missile2");
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO TT 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				user_tempvar2 *= 0.5;
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*3));
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 A_CheckIfTargetDead("See");
			DEMO T 0 BRIGHT A_Jump (8, "MissileLoop");
			DEMO T 0 BRIGHT A_Jump (192, "Missile2");
			Goto See;

		Missile2:
			DEMO A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 33.75;
				user_shotzaccuracy = 6.4;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		Missile2Loop:
			DEMO G 0 A_CheckIfTargetDead("See");
			DEMO G 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO G 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO H 0 A_CheckIfTargetDead("See");
			DEMO H 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO H 1 BRIGHT A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DEMO I 3;
			DEMO I 3 A_KCPain(); 
			Goto See;

		Pain.Plasma:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump(192,"Pain");
			DEMO II 3;
			DEMO I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 1;
			DEMO I 2;
			DEMO I 1;
			Goto See;
		Pain.Electric:
		Pain.Electricity: 
		Pain.Lightning:
		Pain.Thunder:
			#### # 0 A_TimeFreezeCheckPain();
			DEMO I 3;
			DEMO I 3;
			DEMO I 3 A_KCPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 3;
			DEMO I 3;
			DEMO I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 3;
			DEMO I 3;
			DEMO I 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DEMO J 20 A_Scream();
			DEMO K 10 Bright A_NoBlocking();
			DEMO LMNOPQR 10 Bright;
			DEMO S 30;
			DEMO S 0
			{
				if (level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' &&
						(IsDoom1() && level.mapname == "E3M8"))
				{
					A_SetTics(130);
				}
			}
			DEMO S -1 A_BossDeath();
			Stop;
		Ice:
			DEMO I 5 A_GenericFreezeDeath();
			DEMO I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DEMO S 30;
			DEMO QRPONMLK 10;
			DEMO J 20;
			goto See;
	}
}
class BFGBallMonster : BFGBallBase 
{
	default
	{
		DamageFunction (finaldamagedealt);
		Tag "BFG Ball";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BFS1 AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/bfgx",CHAN_7);
				A_Quake(1, 12, 0, 768, "nosound/silent");
				A_Quake(5, 12, 0, 512, "nosound/silent");
			}
			BFE1 AB 8 Bright;
			BFE1 C 8 Bright A_BFGSpray();
			BFE1 DEF 8 Bright;
			Stop;
		
		ShotDown:
			TNT1 A 0 
			{
				A_ScaleVelocity(0);
				A_StartSound("weapons/bfgx",CHAN_7, CHANF_DEFAULT, 0.5);
				A_Quake(1, 12, 0, 384, "nosound/silent");
				A_Quake(5, 12, 0, 256, "nosound/silent");
			}
			BFE1 ABCDEF 4 Bright;
			Stop;
	}
}
// Hades Sphere Explosions
class HSBoom : KCProjectile
{
	default
	{
		Tag "Explosion";
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Alpha 0.90;
		PROJECTILE;
		RENDERSTYLE "ADD";
		DONTHURTSHOOTER;
		Obituary "%o was blown away by a Hades Sphere.";
		SeeSound "monster/hadexp";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			HADE M 4 Bright 
			{
				A_HadesSphereExplode(112,112);
			}
			HADE NOPQ 5 Bright;
			Stop;
	}
}
class HadesSphere : KCCreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		ProjectilePassHeight 62;
		Mass 3000;
		Speed 10;
		ExplosionDamage 112;
		ExplosionRadius 112;
		Damagefactor "IncarnateGlare", 0;
		RENDERSTYLE "Normal";
		Obituary "%o was blown away by a Hades Sphere.";
		PainChance 0;
		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		MeleeThreshold 196;
		+THRUSPECIES;
		Species "HadesSphere";
		SeeSound "monster/hadsit";
		DamageFactor "Crush", 2.0;
	}

	States 
	{
		Spawn:
			TNT1 A 4 Bright A_Look();
			Loop;
		See:
			HADE EFGH 4 Bright;
			goto Chase;

		Chase:
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				A_UnSetInvulnerable();
				A_SetShootable();
				A_SetSolid();
				
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
	
				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0
			{
				A_DynamicMusic(matktype:11);
				A_HadesSphereTeleport("PhaseOut",128,1024);
			}
			loop;

		PhaseOut:
			HADE H 0 Bright
			{
				A_DynamicMusic();
				A_UnSetSolid();
				A_UnSetShootable();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 4 Bright;
			goto Stalking;

		Stalking:
			TNT1 AAAAAAA 2 Bright A_KCChase(null,null,CHF_NOPLAYACTIVE|CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright 
			{
				A_DynamicMusic();
				if (random(1,256) <= 96) return resolvestate("PhaseIn");
				return resolvestate(null);
			}
			loop;

		PhaseIn:
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright
			{
				A_DynamicMusic();
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
			}
			Goto Chase;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			HADE H 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_SetInvulnerable();
					A_DynamicMusic();
				}
				else
				{
					A_Die("Illus");
				}
			}
			HADE HGFE 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
			}
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			Stop;
		Illus:
			#### # 1 A_CCIllusionDisperse();
			stop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			Goto See;
			
		Death.HSExplode:
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HADE E 0 Bright 
			{
				A_DynamicMusic();
				A_Noblocking();
			}
			HADE E 0 Bright A_SpawnProjectile("HSBoom",0,0,0,0);
			HADE E 0 A_UnSetInvulnerable();
			TNT1 A 1;
			TNT1 A 1;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			HADE E 0 A_Jump(8,"Death");
			HADE E 0 A_UnSetInvulnerable();
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Ice:
			goto Death;
	}
}
class HSOverlord : KCCreature
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		ProjectilePassHeight 62;
		Mass 3000; 
		Speed 10;
		RenderStyle "Normal";
		Obituary "%o was blown away by a Hades Sphere.";

		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMSPECIES;
		+FORCEXYBILLBOARD;
		+AVOIDMELEE;
		+THRUSPECIES;
		Species "HadesSphere";
		DamageFactor "Crush", 2.0;
		Damagefactor "Zap", 2.56;
		Damagefactor "Suck", 10.0;
		MeleeThreshold 192;
		SeeSound "monster/hadsit";
	}
	
	States 
	{
		Spawn:
			TNT1 A 4 Bright A_Look();
			loop;
		See:
			HADE EFGH 4 Bright;
			goto Chasing;
		Chasing:
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				A_UnSetInvulnerable();
				A_SetShootable();
				A_SetSolid();
				
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0 Bright 
			{
				A_HadesSphereTeleport("Teleport",128,1024);
			}
			loop;

		Teleport:
			HADE H 0 Bright 
			{
				A_UnSetSolid();
				A_UnSetShootable();
				A_SetInvulnerable();
				A_DynamicMusic();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 3 Bright;
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 Bright A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright 
			{
				A_SetSolid();
				A_SetShootable();
				A_UnSetInvulnerable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
				A_DynamicMusic();
			}
			Goto Chasing;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			HADE A 0 A_DynamicMusic();
			HADE H 0 A_SetInvulnerable();
			HADE HGFE 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
			}
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			stop;
			
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			Goto See;
			
		Death.HSExplode:
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HADE E 0 Bright A_Noblocking();
			HADE E 0 Bright A_SpawnProjectile("HSBoomOverlord",0,0,0,0);
			TNT1 A 0 A_UnSetInvulnerable();
			TNT1 A 5;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 A_UnSetInvulnerable();
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			Stop;
		Ice:
			goto Death;
	}
}
class HadesElementalBall : CacodemonBallNew
{
	default
	{
		Tag "Hades Darkball";
		DamageFunction (8 * random(1,8));
		Speed 15;
		Alpha 0.80;
		DamageType "HadesThunder";
		+FORCEXYBILLBOARD;
		SeeSound "Monster/hadtel";
		DeathSound "Monster/hadsit";
	}
	
	states
	{
		Spawn:
			HEFX AB 4 bright;
			loop;
		Death:
			HEFX CDEEFGH 3 bright;
			stop;
	}
}

class HadesBolt : CacodemonBallNew
{
	default
	{
		Tag "Hades Darkbolt";
		DamageFunction (5 * random(1,8));
		Speed 5;
		Radius 8;
		Height 8;
		DamageType "HadesThunder";
		SeeSound "weapons/none";
		DeathSound "weapons/gntidl";
		YScale 4.0;
		XScale 2.0;
		ReactionTime 35;
		+FLOORHUGGER;
		BounceType "Hexen";
		+RIPPER;
		-NOGRAVITY;
		-STRIFEDAMAGE;
	}
	States
	{
		Spawn:
			LFX2 F 0 ThrustThing(random(0,255),1,0,0);
			LFX2 FGHIJ 1 Bright 
			{
				A_Explode(16,64,0);
				A_StartSound("Monster/hadsit");
				A_Explode(16,64,0);
			}
			LFX2 J 0 Bright A_CountDown();
			loop;
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(32,64,0);
			stop;
	}
}

class HadesElemental : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hades Scions"
		Tag "Hades Elemental";

		obituary "%o was electrocuted by a Hades Elemental.";
		hitobituary "%o got chomped by a Hades Elemental.";
		health 1600;
		radius 31;
		height 60;
		Mass 800;
		speed 10;
		MeleeDamage 10;
		DamageType "Normal";
		seesound "monster/helsit";
		painsound "monster/helpai";
		deathsound "monster/heldth";
		activesound "monster/helact";
		meleesound "caco/melee";
		MONSTER;
		+FLOAT;
		+NOGRAVITY;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+NOTARGET;
		+DONTHARMSPECIES;
		+NORADIUSDMG;
		+AVOIDMELEE;
		Damagefactor "Crush", 0.5;
		painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Damagefactor "Fire", 0.5;
		PainChance "Fire", 16;
		Damagefactor "Ice", 1.75;
		Painchance "Ice", 56; // Fist attacks have a +50% chance of stunning an enemy
		Damagefactor "Zap", 2.56;
		PainChance "Zap", 82;
		DamageFactor "Breakfast", 7.5;
		Painchance "Breakfast", 240;
		DamageFactor "Suck", 11.25;
		Painchance "Suck", 256;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 80;
		DamageFactor "Dust", 5;
		Painchance "Dust", 160;
	}
	
	states
	{
		Spawn:
			HELE A 0 NoDelay;
			HELE A 10 A_FloatLook(12);
			Goto Spawn+1;
		See:
			HELE A 0;
			HELE A 0 A_SetShootable();
			HELE AAAAAAAAAAA 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HELE A 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { if (random(1,1000) <= 550) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { if (random(1,1000) <= 400) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HELE A 0
			{
				A_HETeleport("TeleportChoose");
			}
			goto See+1;

		TeleportChoose:
			HELE A 0 A_HadesTeleportChoose(45);
			goto Teleport;
		Teleport:
			HELE A 0 
			{
				A_DynamicMusic();
				A_UnSetShootable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.90);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.70);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.50);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.30);
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.10);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.10);
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.30);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.50);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.70);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.90);
			HELE A 1 A_SetTranslucent(1.0);
			HELE A 0 
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HadesTeleportCooldown", 1);
				A_DynamicMusic();
			}
			goto See+1;
			
		Teleport2:
			HELE A 0 
			{
				A_DynamicMusic();
				A_UnSetShootable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.20);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(1.0);
			HELE A 0 
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HadesTeleportCooldown", 1);
				A_DynamicMusic();
			}
			goto See+1;

		IdleMissile:
			#### # 0 A_TimeFreezeCheckMissile();
			HELE BC 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			HELE D 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				A_PainAttack("HadesSphere",0,PAF_NOSKULLATTACK|PAF_AIMFACING);
			}
			goto See+1;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
		ChooseMissile:
			TNT1 A 0 A_DynamicMusic();
			HELE A 0 A_Jump(256,"Missile1","Missile2","Missile3");
		Missile1:
			HELE EF 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
			}
			HELE G 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }

				double angvar = 1.0 + frandompick(-0.25,-0.125,-0.125,0,0,0,0.125,0.125,0.25);
				A_SpawnProjectile("HadesElementalBall",24,0,(-10*angvar));
				A_SpawnProjectile("HadesElementalBall",24,0,(-5*angvar));
				A_SpawnProjectile("HadesElementalBall",24,0,(0*angvar));
				A_SpawnProjectile("HadesElementalBall",24,0,(5*angvar));
				A_SpawnProjectile("HadesElementalBall",24,0,(10*angvar));
			}
			goto See+1;

		Missile2:
			TNT1 A 0 A_DynamicMusic();
			HELE EF 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
			}
			HELE G 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("HadesBolt",32,0,-16);
				A_SpawnProjectile("HadesBolt",32,0,0);
				A_SpawnProjectile("HadesBolt",32,0,16);
			}
			goto See+1;

		Missile3:
			TNT1 A 0 A_DynamicMusic();
			HELE BC 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
			}
			HELE D 5 Bright 
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }

				A_DualPainAttack("HadesSphere");
			}
			goto See+1;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			HELE ABD 5 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
			}
			HELE C 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(1,10) * 10, "caco/melee","none","Melee",true);
			}
			goto See+1;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(90,96);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE H 6;
			goto See;
		Pain.Zap:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(90,96);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE HH 6;
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(90,24);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE H 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(90,72);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE H 6;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HELE I 5 Bright A_Scream();
			HELE JKL 5 Bright;
			HELE M 5 Bright A_NoBlocking();
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",36,36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",-36,36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",-36,-36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",36,-36);
			HELE NOP 5 Bright;
			HELE QRSTU 5;
			HELE V -1 A_SetFloorClip();
			stop;
		Ice:
			HELE H 5 A_GenericFreezeDeath();
			HELE H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HELE V 0 A_UnsetFloorClip();
			HELE U 0;
			HELE TSRQPONMLKJI 5;
			goto See;
	}
}

class OverBall : KCProjectile
{
	default
	{
		Tag "Overlord Darkball";
		Radius 10;
		Height 20;
		Speed 15;
		DamageFunction (8 * random(1,8));
		DamageType "HadesThunder";
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.75;
		Translation "192:207=168:191";
		+FORCEXYBILLBOARD;
		DeathSound "weapons/devzap";
	}
	
	States
	{
		Spawn:
			AFX1 ABC 1 Bright;
			loop;
		Death:
			AFX1 DE 4 Bright A_Explode(32,32,0);
			AFX1 FGHI 4 bright;
			stop;
	}
}

class HadesOverlordBall : CacodemonBallNew
{
	default
	{
		Tag "Overlord Darkblast";
		DamageFunction (12 * random(1,8));
		Speed 18;
		Alpha 0.80;
		DamageType "HadesThunder";
		+FORCEXYBILLBOARD;
		SeeSound "Monster/hadtel";
		DeathSound "Monster/hadsit";
	}
	
	states
	{
		Spawn:
			HEFX A 0;
			#### A 2 bright;
			#### A 2 bright;
			#### B 2 bright;
			#### B 2 bright;
			loop;
		Death:
			#### CDEEFGH 3 bright;
			stop;
	}
}

class StormShot1 : KCProjectile
{
	default
	{
		Tag "Overlord Stormshot";
		Radius 12;
		Height 6;
		Speed 30;
		DamageFunction (50 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.80;
		DamageType "HadesThunder";
		+NODAMAGETHRUST;
		+FORCEXYBILLBOARD;
		DeathSound "weapons/devexp";
	}
	
	States
	{
		Spawn:
			LFX1 S 0;
			#### STUVW 1 Bright;
			#### W 0 Bright A_SpawnProjectile("StormLite1",0,0,90,6);
			#### W 0 Bright A_SpawnProjectile("StormLite1",0,0,270,6);
			loop;
		Death:
			#### STUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVW 1 Bright A_Explode(16,32,0);
			stop;
	}
}

class StormShot2 : StormShot1
{
	default
	{
		Tag "Overlord Stormshot";
		DamageType "HadesThunder";
		DamageFunction (100 * random(1,8));
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			LFX2 KLMNO 1 Bright;
			LFX2 O 0 Bright A_SpawnProjectile("StormLite2",0,0,90,6);
			LFX2 O 0 Bright A_SpawnProjectile("StormLite2",0,0,270,6);
			Goto Spawn+1;
		Death:
			LFX2 KLMNO 1 Bright A_Explode(32,64,0);
			LFX2 KKKKKK 0 Bright A_SpawnItemEx("StormBolt",0,0,0,4,0,0,random(0,359),0,0);
			LFX2 LMNO 1 Bright A_Explode(32,64,0);
			stop;
	}
}

class StormStrike1 : KCProjectile
{
	default
	{
		Tag "Overlord Stormstrike";
		DamageType "HadesThunder";
		Radius 16;
		Height 1;
		Speed 90;
		DamageFunction (2 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+RIPPER;
		+NODAMAGETHRUST;
		+STRIFEDAMAGE;
		DeathSound "weapons/devzap";
	}
	
	States
	{
		Spawn:
			LFX1 IJKLM 1 Bright A_Explode(64,64,0);
			loop;
		Death:
			LFX1 NOPQR 2 Bright;
			stop;
	}
}

class StormBolt : StormStrike1
{
	default
	{
		Tag "Overlord Stormbolt";
		DamageType "HadesThunder";
		Speed 4;
		Radius 8;
		Height 16;
		DamageFunction (1 * random(1,8));
		SeeSound "weapons/none";
		DeathSound "weapons/gntidl";
		YScale 4.0;
		XScale 2.0;
		ReactionTime 35;
		+FLOORHUGGER;
		BounceType "Hexen";
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			LFX2 F 1 Bright A_Explode(16,64,0);
			LFX2 F 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 F 0 ThrustThing(random(0,255),1,0,0);
			LFX2 G 1 Bright A_Explode(16,64,0);
			LFX2 G 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 H 1 Bright A_Explode(16,64,0);
			LFX2 H 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 I 1 Bright A_Explode(16,64,0);
			LFX2 I 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 J 1 Bright A_Explode(16,64,0);
			LFX2 J 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 J 0 Bright A_CountDown();
			loop;
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(16,64,0);
			stop;
	}
}

class StormBolt2 : StormStrike1
{
	default
	{
		Tag "Overlord Stormbolt";
		DamageType "HadesThunder";
		Speed 184;
		DamageFunction (1 * random(1,8));
		Height 15;
		Radius 8;
		SeeSound "Monster/hadtel";
		DeathSound "Monster/hadsit";
		+RIPPER;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 Bright A_Explode(16,64,0);
			loop;
		Death:
			TNT1 A 1 Bright;
			stop;
	}
}

class StormLite1 : KCProjectile
{
	default
	{
		Tag "Overlord Stormball";
		DamageType "HadesThunder";
		Radius 6;
		Height 12;
		Speed 32;
		DamageFunction (5 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.80;
		DeathSound "weapons/devzap";
		+RIPPER;
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			DLIT A 0;
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 1 Bright;
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 1 Bright;
			Loop;
		Death:
			#### DEFGHIJKLMNO 1 Bright;
			Stop;
	}
}

class StormLite2 : StormLite1
{
	default
	{
		Tag "Overlord Stormball";
		DamageType "HadesThunder";
		Speed 64;
		DamageFunction (10 * random(1,8));
	}
	
	States
	{
		Spawn:
			LFX1 X 1 Bright;
			LFX1 Y 1 Bright;
			LFX1 Z 1 Bright;
			LFX1 X 1 Bright;
			LFX1 Y 1 Bright;
			LFX1 Z 1 Bright;
			Loop;
		Death:
			LFX1 STUVW 3 Bright;
			Stop;
	}
}

class HSBoomOverlord : KCProjectile
{
	default
	{
		Tag "Explosion";
		DamageType "HadesThunder";
		Radius 1;
		Height 1;
		Alpha 0.90;
		PROJECTILE;
		RenderStyle "Add";
		DONTHURTSHOOTER;
		+FORCEXYBILLBOARD;
		SeeSound "monster/hadexp";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright;
			Goto Death;
		Death:
			HADE M 4 Bright 
			{
				A_HadesSphereExplode(112,112);
			}
			HADE NOPQ 5 Bright;
			Stop;
	}
}

class HadesOverLord : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hades Scions";
		Tag "Hades Overlord";
		Health 4000;
		Radius 31;
		Height 78;
		Mass 2000;
		Speed 13;
		DamageType "Normal";
		MONSTER;
		Obituary "%o was smitten by a Hades Overlord.";
		HitObituary "A Hades Overlord ate %o for lunch.";
		+FLOORCLIP;
		+NORADIUSDMG;
		+NOTARGET;
		MissileChanceMult 0.125;
		//+MISSILEEVENMORE;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		+AVOIDMELEE;
		MeleeDamage 20;
		MeleeRange 68;
		SeeSound "monster/ovlsit";
		PainSound "monster/ovlpai";
		DeathSound "monster/ovldth";
		ActiveSound "monster/ovlact";
		MeleeSound "caco/melee";

		PainChance 30;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		Damagefactor "Ice", 1.75;
		PainChance "Ice", 53;
		Damagefactor "Fire", 0.5;
		PainChance "Fire", 15;
		Damagefactor "Zap", 2.56;
		PainChance "Zap", 77;
		DamageFactor "Breakfast", 10;
		Painchance "Breakfast", 256;
		DamageFactor "Suck", 15;
		Painchance "Suck", 256;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 75;
		DamageFactor "Dust", 5;
		Painchance "Dust", 150;
		Damagefactor "Crush", 0.5;
		
	}

	states
	{
		Spawn:
			OVER A 0 NoDelay;
			OVER A 10 A_FloatLook(12);
			Goto Spawn+1;
		See:
			OVER A 0 A_UnSetInvulnerable();
			OVER AABBAAC 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			OVER C 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_KCChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { if (random(1,1000) <= 350) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { if (random(1,1000) <= 275) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { if (random(1,1000) <= 100) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			OVER A 0
			{
				A_HOTeleport("TeleportChoose");
				return resolvestate(null);
			}
			goto See;

		TeleportChoose:
			OVER F 0 A_HadesTeleportChoose(45);
			goto Teleport;
		Teleport:
			OVER F 0;
			OVER F 0 
			{
				A_DynamicMusic();
				A_SetInvulnerable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.90);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.70);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.50);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.30);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.10);
			OVER F 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.10);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.30);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.50);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.70);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.90);
			OVER F 1 A_SetTranslucent(1.0);
			OVER F 0
			{
				A_SetSolid();
				A_UnSetInvulnerable();
				A_GiveInventory("HadesTeleportCooldown", 1);
				A_DynamicMusic();
			}
			goto See;
		Teleport2:
			OVER F 0 
			{
				A_DynamicMusic();
				A_SetInvulnerable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(1.0);
			OVER F 0
			{
				A_SetSolid();
				A_UnSetInvulnerable();
				A_GiveInventory("HadesTeleportCooldown", 1);
				A_DynamicMusic();
			}
			goto See;

		IdleMissile:
			#### # 0 A_TimeFreezeCheckMissile();
			OVER DE 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER FF 4 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				A_PainAttack("HSOverlord",0,PAF_AIMFACING);
			}
			OVER F 0 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self))
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
					A_FaceTarget();
					A_PainAttack("HSOverlord",0,PAF_AIMFACING);
				}
				else
				{
					A_SetTics(0);
				}
			}
			goto See+1;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			OVER D 0 A_Jump(256,"Missile1","Missile2","Missile3");
		Missile1:
			OVER DE 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER FF 4 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				A_PainAttack("HSOverlord",0,PAF_AIMFACING);
			}
			OVER F 0 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self))
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
					else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
					A_FaceTarget();
					A_PainAttack("HSOverlord",0,PAF_AIMFACING);
				}
				else
				{
					A_SetTics(0);
				}
			}
			goto See;
		Missile2:
			OVER GH 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER H 8 Bright 
			{
				A_FaceTarget();
				A_StartSound("weapons/shock");
				if (health <= user_HPLowRange)
				{
					A_SpawnProjectile("StormShot2",43,0,0,0,0);
				}
				else
				{
					A_SpawnProjectile("StormShot1",43,0,0,0,0);
				}
			}
			goto See;
		Missile3:
			OVER JJJJ 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
			}
			OVER K 4 Bright 
			{
				A_DynamicMusic();
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				A_SpawnProjectile("HadesOverlordBall",92,-40,random(-3,3),0,random(-3,3));
				A_SpawnProjectile("HadesOverlordBall",8,-40,random(-3,3),0,random(-3,3));
				A_SpawnProjectile("HadesOverlordBall",92,40,random(-3,3),0,random(-3,3));
				A_SpawnProjectile("HadesOverlordBall",8,40,random(-3,3),0,random(-3,3));
				A_SpawnProjectile("OverBall",54,-50,random(-3,3),0,random(-3,3));
				A_SpawnProjectile("OverBall",54,50,random(-3,3),0,random(-3,3));
			}
			OVER J 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SpidRefire();
			}
			OVER J 0 A_Jump(32,"See");
			goto Missile3+5;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0;
			OVER ADF 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			OVER E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(1,10) * 14, "caco/melee","none","Melee",true);
			}
			goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(45,48);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			goto See;
		Pain.Zap:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(45,48);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(45,12);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_HadesTeleport(45,36);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			OVER M 0 bright A_Facetarget();
			OVER M 8 bright A_Scream();
			OVER NO 8 bright;
			OVER P 0 bright A_Noblocking();
			OVER PPPPP 0 bright A_SpawnProjectile("OverFlesh1",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPP 0 bright A_SpawnProjectile("OverFlesh2",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh3",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh4",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh5",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh6",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverBigArm1",40,-40,-90,2,random(-1,1));
			OVER P 0 bright A_SpawnProjectile("OverBigArm2",40,40,90,2,random(-1,1));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm1",100,-30,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm1",100,30,90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm2",100,-30,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm2",100,30,90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverHorn1",110,-16,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverHorn2",110,16,90,2,random(-15,15));
			OVER PQRSTUV 8 bright;
			stop;
		Ice:
			OVER L 5 A_GenericFreezeDeath();
			OVER L 1 A_FreezeDeathChunks();
			wait;
	}
}
class OverFlesh1 : KCCustomGib
{
	default
	{
		Speed 8;
		Mass 100;
		Radius 1;
		Height 1;
		PROJECTILE;
		Gravity 0.125;
		-NOGRAVITY;
	}
	
	States
	{
		Spawn:
			OVF1 ACEGIKM 5;
			loop;
		Death:
			OVF1 O 3;
			OVF1 Q 350;
			stop;
	}
}
class OverFlesh2 : OverFlesh1
{
	States
	{
		Spawn:
			OVF1 BDFHJLN 5;
			loop;
		Death:
			OVF1 P 3;
			OVF1 R 350;
			stop;
	}
}
class OverFlesh3 : OverFlesh1
{
	States
	{
		Spawn:
			OVF2 ACEG 5;
			loop;
		Death:
			OVF2 I 350;
			stop;
	}
}
class OverFlesh4 : OverFlesh1
{
	States
	{
		Spawn:
			OVF2 BDFH 5;
			loop;
		Death:
			OVF2 J 350;
			stop;
	}
}
class OverFlesh5 : OverFlesh1
{
	States
	{
		Spawn:
			OVF3 ACEGI 5;
			loop;
		Death:
			OVF3 K 350;
			stop;
	}
}
class OverFlesh6 : OverFlesh1
{
	States
	{
		Spawn:
			OVF3 BDFHJ 5;
			loop;
		Death:
			OVF3 L 350;
			stop;
	}
}
class OverBigArm1 : OverFlesh1
{
	States
	{
		Spawn:
			OVF4 ACEGI 5;
			loop;
		Death:
			OVF4 K 3;
			OVF4 M 350;
			stop;
	}
}
class OverBigArm2 : OverFlesh1
{
	States
	{
		Spawn:
			OVF4 BDFHJ 5;
			loop;
		Death:
			OVF4 L 3;
			OVF4 N 350;
			stop;
	}
}
class OverSmallArm1 : OverFlesh1
{
	States
	{
		Spawn:
			OVF5 ACEG 5;
			loop;
		Death:
			OVF5 I 350;
			stop;
	}
}
class OverSmallArm2 : OverFlesh1
{
	States
	{
		Spawn:
			OVF5 BDFH 5;
			loop;
		Death:
			OVF5 J 350;
			stop;
	}
}
class OverHorn1 : OverFlesh1
{
	States
	{
		Spawn:
			OVF6 ACEGI 5;
			loop;
		Death:
			OVF6 K 350;
			stop;
	}
}
class OverHorn2 : OverFlesh1
{
	States
	{
		Spawn:
			OVF6 BDFHJ 5;
			loop;
		Death:
			OVF6 L 350;
			stop; 
	}
}

class BossBrainNew : BossBrain replaces BossBrain
{
	mixin MonsterCollider;
	default
	{
		Tag "Icon of Sin"; // Tag "John Romero"
		Health 250;
		Mass 10000000;
		PainChance 255;
		Height 80;
		Radius 20;
		//MONSTER;
		//+ISMONSTER

		+SHOOTABLE
		+SOLID
		+NOICEDEATH
		+OLDRADIUSDMG
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	bool A_CheckKCTimeFreeze()
	{
		bool freeze = false;
		actor playera = players[0].mo;
		if ((playera.CountInv("KCTimeFreezer1") ||
				 playera.CountInv("KCTimeFreezer2") ||
				 playera.CountInv("KCTimeFreezer3"))) freeze = true;
		return freeze;
	}
	
	void A_TimeFreezeCheckPain()
	{
		if (A_CheckKCTimeFreeze()) A_SetTics(1);
	}
	
	void A_TimeFreezeCheckDeath()
	{
		if (A_CheckKCTimeFreeze()) A_SetTics(1);
	}
	
	States
	{
		BrainExplode:
			MISL BC 10 Bright;
			MISL D 10 A_BrainExplode();
			Stop;
		Spawn:
			BBRN A -1;
			Stop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BBRN B 36 A_BrainPain();
			Goto Spawn;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BBRN B 10 
			{
				if (kc_iconofsindthkillminions) A_KillChildren("Massacre");
				A_BrainScream();
			}
			BBRN B 0 
			{
				if (kc_iconofsindthkillminions) A_ExplodMinions();
			}
			BBRN BBBBBBBBB 10;
			BBRN BB 10;
			BBRN B -1 A_BrainDie();
			Stop;
	}
	
	void A_ExplodMinions()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while (mo = Actor(it.Next()))
		{
			if (mo.master == self)
			{
				double xpos = mo.pos.x;
				double ypos = mo.pos.y;
				double zpos = mo.pos.z;
				double mradius = mo.radius;
				double mheight = mo.height;
				bool success;
				actor explod;
				[success, explod] = mo.A_SpawnItemEx("IoSDeathExplosionEffect",0.0,0.0,(mo.height*0.5), 0.0,0.0,frandom(0.01,1.00), 0.0,SXF_NOCHECKPOSITION);
				if (explod && success)
				{
					explod.target = mo;
					let ndf = IoSDeathExplosionEffect(explod);
					if (ndf)
					{
						ndf.target = mo;
						ndf.mradius = mradius;
						ndf.mheight = mheight;
					}
				}
			}
		}
	}
}
class BossEyeNew : BossEye replaces BossEye
{
	mixin MonsterCollider;
	int user_bosseyetype;
	double bosseyetimefactor;
	default
	{
		Height 32;
		+NOBLOCKMAP;
		+NOSECTOR;
		+BOSS;
	}
	
	States
	{
		Spawn:
			SSWV A 10 
			{
				A_Look();
				if (skill <= 0) bosseyetimefactor = 1.5;
				if (skill == 1) bosseyetimefactor = 1.25;
				if (skill == 2) bosseyetimefactor = 1.0;
				if (skill == 3) bosseyetimefactor = 0.8;
				if (skill >= 4) bosseyetimefactor = 0.667;
			}
			Loop;
		See:
			SSWV A 181 
			{
				A_BrainAwake();
				if (user_bosseyetype > 0) A_SetTics(tics*frandom(0.45,0.55)*bosseyetimefactor);
														 else A_SetTics(tics*frandom(0.9,1.1)*bosseyetimefactor);
			}
		Shoot:
			SSWV A 150 
			{
				if (user_bosseyetype > 0) 
				{
					double timefactor = 1.00;
					if (master)
					{
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.95)) timefactor = frandom(0.925,0.95);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.667)) timefactor = frandom(0.625,0.667);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.4)) timefactor = frandom(0.375,0.4);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.25)) timefactor = frandom(0.3,0.334);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.125)) timefactor = frandom(0.2,0.25);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.05)) timefactor = frandom(0.1,0.125);
						if (master.health <= ((master.SpawnHealth() + master.Stamina) * 0.005)) timefactor = frandom(0.025,0.0375);
					}
					A_SetTics(tics*(frandom(0.675,0.825) * timefactor)*bosseyetimefactor);
				}
				else 
				{
					A_SetTics(tics*frandom(0.9,1.1)*bosseyetimefactor); 
				}
				
				if (master) 
				{
					if (master.health >= 1) 
					{
						A_BrainSpit("SpawnShotNew");
						A_StartSound("brain/spit", 16, CHANF_DEFAULT, 1., ATTN_NONE);
					}
				}
				else
				{
					A_BrainSpit("SpawnShotNew");
					A_StartSound("brain/spit", 16, CHANF_DEFAULT, 1., ATTN_NONE);
				}
			}
			loop;
	}
	
	void A_BrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShotNew";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Assign [try to] the BossBrain as the shot's master
				if (master) spit.tracer = master;
				if (kcdebug_bossbraininfo2 && spit.tracer) Console.Printf("SpawnShot (\c[green]%p\c-) Tracer: \c[gold]%p\c-", spit, spit.tracer);

				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_StartSound(self.AttackSound, CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
			else
			{
				// compatibility fallback
				A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}
class SpawnShotNew : SpawnShot
{
	Default
	{
		Radius 6;
		Height 32;
		Speed 10;
		Damage 3;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		+RANDOMIZE
		SeeSound "brain/spit";
		DeathSound "brain/cubeboom";
		
		DropItem "DoomImp",							255,	50;
		DropItem "Demon",								255,	40;
		DropItem "Spectre",							255,	30;
		DropItem "PainElemental",				255,	10;
		DropItem "Cacodemon",						255,	30;
		DropItem "Archvile",							255,	4;
		DropItem "Revenant",							255,	10;
		DropItem "Arachnotron",					255,	20;
		DropItem "Fatso",							255,	30;
		DropItem "HellKnight",						255,	20;
		DropItem "BaronOfHell",					255,	10;
		DropItem "Cyberdemon",						255,	2;
	}
	
	States
	{
		Spawn:
			BOSF A 3 BRIGHT A_SpawnSound;
			BOSF BCD 3 BRIGHT A_SpawnFly;
			Loop;
	}
	
	void A_SpawnFly(class<Actor> spawntype = null)
	{
		sound snd; 
		if (spawntype != null) 
		{
			snd = GetDefaultByType(spawntype).SeeSound;
		}
		else
		{
			spawntype = "SpawnFire";
			snd = "brain/spawn";
		}
		SpawnFly(spawntype, snd);
	}
	
	void A_SpawnSound()
	{
		// travelling cube sound
		A_StartSound("brain/cube", CHAN_BODY);
		SpawnFly("SpawnFire", "brain/spawn");
	}

	void SpawnFly(class<Actor> spawntype, sound snd)
	{
		Actor newmobj;
		Actor fog;
		Actor eye = master; // The eye is the spawnshot's master, not the target!
		Actor targ = target; // Unlike other projectiles, the target is the intended destination.
		int r;
		
		if (tracer == null || (tracer && tracer.health <= 0))
		{
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Tracer)\c-", self);
			Destroy();
			return;
		}
		
		if (targ == null)
		{
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[red]Destroyed (Targ)\c-", self);
			Destroy();
			return;
		}
			
		// [GZ] Should be more viable than a countdown...
		if (special2 != 0)
		{
			if (special2 > level.maptime)
				return;		// still flying
		}
		else
		{
			if (reactiontime == 0 || --reactiontime != 0)
				return;		// still flying
		}
		
		if (spawntype)
		{
			fog = Spawn (spawntype, targ.pos, ALLOW_REPLACE);
			if (fog) A_StartSound(snd, CHAN_BODY);
		}

		class<Actor> SpawnName = null;

		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		int n = 0;

		// First see if this cube has its own actor list
		drop = GetDropItems();

		// If not, then default back to its master's list
		if (drop == null)
		{
			if (eye != null)
			{
				drop = eye.GetDropItems();
				if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting Eye DropTable\c-", self);
			}
			else
			{
				if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[RED]NO DROP TABLE INFO\c-", self);
			}
		}
		else
		{
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: \c[green]Getting SpawnShot DropTable\c-", self);
		}

		if (drop != null)
		{
			for (di = drop; di != null; di = di.Next)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1; // default value is -1, we need a positive value.
					}
					n += amt; // this is how we can weight the list.
				}
			}
			di = drop;
			n = random[pr_spawnfly](0, n);
			while (n >= 0)
			{
				if (di.Name != 'none')
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n -= amt;
				}
				if ((di.Next != null) && (n >= 0))
				{
					di = di.Next;
				}
				else
				{
					n = -1;
				}
			}
			SpawnName = di.Name;
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[blue]%s\c-", self, di.Name);
		}
		if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post droptable)", self);
		if (SpawnName == null)
		{
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname was: \c[yellow]null\c-", self);
			// Randomly select monster to spawn.
			r = random[pr_spawnfly](0, 255);

			// Probability distribution (kind of :),
			// decreasing likelihood.
				 if (r < 50)  SpawnName = "DoomImp";
			else if (r < 90)  SpawnName = "Demon";
			else if (r < 120) SpawnName = "Spectre";
			else if (r < 130) SpawnName = "PainElemental";
			else if (r < 160) SpawnName = "Cacodemon";
			else if (r < 162) SpawnName = "Archvile";
			else if (r < 172) SpawnName = "Revenant";
			else if (r < 192) SpawnName = "Arachnotron";
			else if (r < 222) SpawnName = "Fatso";
			else if (r < 246) SpawnName = "HellKnight";
			else			  SpawnName = "BaronOfHell";
		}

		if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname (post list)", self);
		if (spawnname != null)
		{
			if (kcdebug_bossbraininfo2) Console.Printf("\c[green]%p\c-: spawnname: \c[sapphire]%s\c-", self, spawnname.GetClassName());
			newmobj = Spawn(spawnname, targ.pos, ALLOW_REPLACE);
			if (newmobj != null)
			{
				if (tracer) 
				{
					newmobj.master = tracer;
					newmobj.A_SetInventory("IoSMinion",1);
				}
				if (kcdebug_bossbraininfo2 && newmobj.master) 
				{
					Console.Printf("\c[green]%p\c-: Spawned Monster (\c[blue]%s\c-) Master: \c[gold]%p\c-", self, newmobj.GetClassName(), newmobj.master);
				}
				// Make the new monster hate what the boss eye hates
				if (eye != null)
				{
					newmobj.CopyFriendliness (eye, false);
				}
				// Make it act as if it was around when the player first made noise
				// (if the player has made noise).
				newmobj.LastHeard = newmobj.CurSector.SoundTarget;

				if (newmobj.SeeState != null && newmobj.LookForPlayers (true))
				{
					newmobj.SetState (newmobj.SeeState);
				}
				if (!newmobj.bDestroyed)
				{
					// telefrag anything in this spot
					newmobj.TeleportMove (newmobj.pos, true);
				}
				newmobj.bBossSpawned = true;
			}
		}

		// remove self (i.e., cube).
		Destroy ();
	}
}
class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		+PUSHABLE
		Tag "Explosive Barrel";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
		ProjectilePassHeight 32;
		//$Sprite "BAR1A0"
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 BRIGHT;
			BEXP B 5 Bright
			{
				A_Scream();
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
				A_AlertMonsters();
			}
			BEXP C 5 BRIGHT;
			BEXP D 10 BRIGHT 
			{
				A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BEXP E 10 BRIGHT;
			TNT1 A 1050 BRIGHT A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}

