// Bullet Tracers
class ZombieBulletTracer : KCBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction (finaldamagedealt);
		Damagetype "Hitscan";
		Radius 2;
		Height 2;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		KCFastProjectile.PostBeginPlay();
		A_ScaleVelocity(kc_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (5 * random(1,3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("ZombieBulletTracerTrail",random(2,3),-2.5);
			loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("BulletPuff");
			stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("BulletPuff");
			stop;
	}
}

class ZombieBulletTracerTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			stop;
	}
}

class KCHowitzerPuff : KCPuff replaces BulletPuff
{
	default
	{
		+PUFFGETSOWNER
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		Scale 1.5;
	}
	
	states
	{
		Spawn:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			stop;
	}
}

class KCBulletPuff : KCPuff replaces BulletPuff
{
	default
	{
		+PUFFGETSOWNER
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}

	States
	{
		Spawn:
			PUFF A 4 Bright;
			PUFF B 4 Bright;
		Melee:
			PUFF CD 4;
			Stop;
	}
}

class KCBulletPuff2 : KCPuff
{
	default
	{
		+PUFFGETSOWNER
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		DamageType "Bullet";
		Species "Players";
		+MTHRUSPECIES;
		+THRUSPECIES;
	}

	States
	{
		Spawn:
			PUFF A 4 Bright;
			PUFF B 4 Bright;
		Melee:
			PUFF CD 4;
			Stop;
	}
}

//
class FistPuff : KCPuff
{
	default
	{
		Tag "Fist";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG 
		+PUFFGETSOWNER 
		+PUFFONACTORS 
		+THRUSPECIES 
		+MTHRUSPECIES
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Fist";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	void A_SetPainForcedPain(int basechance = 44, double playerlvlfactor = 0.44)
	{
		int TruePlayerLevel = A_GetPlayerLvlProj();
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (TruePlayerLevel * playerlvlfactor);
		}
		if (kcdebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(44,0.44);
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, false, (A_MeleeImpactRadius(3)*0.25));
				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");
				
				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56); 
					} else { A_StartSound("FistHitWall", 56); }
				}
				//Console.Printf("Spawn");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(44,0.44);
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, false, (A_MeleeImpactRadius(3)*0.25));
				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserk", 56); 
					} else { A_StartSound("FistHit", 56); }
				}
				//Console.Printf("Melee");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(44,0.44);
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, false, (A_MeleeImpactRadius(3)*0.25));
				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56); 
					} else { A_StartSound("FistHitWall", 56); }
				}
				//Console.Printf("Crash");
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class UppercutPuff : FistPuff
{
	default
	{
		Tag "Uppercut";
		ProjectileKickback 0;
		+NODAMAGETHRUST
		RenderStyle "Translucent";
		Alpha 0.875;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(32,0.32);
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, false, (A_MeleeImpactRadius(4)*0.25));
				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(32,0.32);
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, false, (A_MeleeImpactRadius(4)*0.25));
				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserk", 56); 
					} else { A_StartSound("FistHit", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(32,0.32);
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, false, (A_MeleeImpactRadius(4)*0.25));
				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");
				
				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuff : KCPuff
{
	default
	{
		Tag "Kick";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG 
		+PUFFGETSOWNER 
		+PUFFONACTORS 
		+THRUSPECIES 
		+MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}
	
	void A_SetPainForcedPain(int basechance = 16, double playerlvlfactor = 0.16)
	{
		int TruePlayerLevel = A_GetPlayerLvlProj();
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (TruePlayerLevel * playerlvlfactor);
		}
		if (kcdebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(16,0.16);
				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, false, (A_MeleeImpactRadius(7)*0.25));
				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(16,0.16);
				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, false, (A_MeleeImpactRadius(7)*0.25));
				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserk", 56); 
					} else { A_StartSound("FistHit", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(16,0.16);
				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, false, (A_MeleeImpactRadius(7)*0.25));
				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuffNoThrust : KickPuff
{
	default
	{
		ProjectileKickback 0;
		+NODAMAGETHRUST
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(16,0.16);

				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recoil = frandom(-0.125,-0.075);
				double dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);

				if (target)
				{
					if (A_CheckBerserk()) 
					{
						radi *= 2.5;
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, false, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				A_SetPainForcedPain(16,0.16);
				
				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recoil = frandom(-0.125,-0.075);
				double dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);
				
				if (target)
				{
					if (A_CheckBerserk()) 
					{
						radi *= 2.5;
						A_StartSound("fisthitberserk", 56); 
					} else { A_StartSound("FistHit", 56); }
				}
				
				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, false, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				A_SetPainForcedPain(16,0.16);
				
				int KPower = 0;
				if (target) KPower = (target.player.mo.Stamina / 10);
				if (KPower > 10) KPower = 10;
				double recoil = frandom(-0.125,-0.075);
				double dmg = random(28,52) + (KPower * 3.275);
				if (KPower) dmg *= frandom(1.00,(1.00 + (KPower * frandompick(0.667,0.75,0.834))));
				int radi = 24 * frandom(0.84375,1.15625);
				
				if (target)
				{
					if (A_CheckBerserk()) 
					{
						radi *= 2.5;
						A_StartSound("fisthitberserkwall", 56);
					} else { A_StartSound("FistHitWall", 56); }
				}
				
				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, false, (radi*0.25));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class ChainsawPuff : KCPuff
{
	default
	{
		Tag "Chainsaw";
		DamageType "Chainsaw";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 32;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
			}
			PUFF A 4 Bright;
			PUFF B 4;
			// Intentional fall-through
		Melee:
			TNT1 A 0
			{
				user_randompain = 32;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
			}
			PUFF CD 4;
			Stop;
	}
}

class ChainsawPlayerPuff : ChainsawPuff
{
	default
	{
		DamageType "Bullet";
		Species "Players";
		+MTHRUSPECIES;
		+THRUSPECIES;
		+PUFFGETSOWNER
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}
}

class Chainsaw2Puff : ChainsawPuff
{
	default
	{
		Tag "Double-Bladed Chainsaw";
		DamageType "Chainsaw";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 16;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
			}
			PUFF A 4 Bright;
			PUFF B 4;
			// Intentional fall-through
		Melee:
			TNT1 A 0
			{
				user_randompain = 16;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
			}
			PUFF CD 4;
			Stop;
	}
}

class STGrenade : KCProjectile
{
	default
	{
		Tag "Grenade";
		Radius 8;
		Height 8;
		Speed 25;
		DamageType "Explosive";
		DamageFunction (20 * random(1,8));
		Scale 1.125;
		Gravity 0.50;
		Projectile;
		BounceCount 0;
		BounceFactor 0.8;
		WallBounceFactor 0.8;
		-NOGRAVITY;
		+DEHEXPLOSION;
		+GRENADETRAIL;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+EXPLODEONWATER;
		//+DONTREFLECT;
		SeeSound "Weapons/GrBnce";
		BounceSound "Weapons/GrBnce";
		WallBounceSound "Weapons/GrBnce";
	}
	
	States
	{
		Spawn:
			SGRN A 0 Bright NoDelay
			{
				user_fusemax = random(95,115);
				A_StartSound("Weapons/GrenLF");
			}
		Idle:
			SGRN A 1 Bright 
			{
				user_fuse += 1;
				if (user_fuse >= user_fusemax) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			loop;

		Death:
			TNT1 A 0 
			{
				A_StartSound("Weapons/GrenLX",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 0 Bright 
			{
				bNOGRAVITY = true;
				A_ScaleVelocity(0);
				A_SetScale(1.0);
			}
			MISL B 8 Bright A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			MISL C 6 Bright;
			MISL D 4 Bright;
			stop;
	}
}

class STGrenadeNoAOE : STGrenade
{
	default
	{
		DamageType "Explosive";
	}

	States
	{
		Spawn:
			SGRN A 0 Bright NoDelay
			{
				user_fusemax = random(95,115);
				A_StartSound("Weapons/GrenLF");
			}
		Idle:
			SGRN A 1 Bright 
			{
				user_fuse += 1;
				if (user_fuse >= user_fusemax) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			loop;

		Death:
			TNT1 A 0 
			{
				A_StartSound("Weapons/GrenLX",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 0 Bright 
			{
				bNOGRAVITY = true;
				A_ScaleVelocity(0);
				A_SetScale(1.0);
			}
			MISL B 8 Bright A_Explode(128,128,0,false,0,0,10,"BulletPuff","Explosive");
			MISL C 6 Bright;
			MISL D 4 Bright;
			stop;
	}
}

class STGrenadeMonster : STGrenade
{
	default
	{
		Tag "Grenade";
		Radius 8;
		Height 8;
		Speed 25;
		DamageType "Explosive";
		DamageFunction (20 * random(1,8));
		Scale 1.0;
		Gravity 0.50;
		Projectile;
		BounceCount 0;
		BounceFactor 0.8;
		WallBounceFactor 0.8;
		-NOGRAVITY
		+DEHEXPLOSION
		+GRENADETRAIL;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+EXPLODEONWATER;
		//+DONTREFLECT
		SeeSound "Weapons/GrBnce";
		BounceSound "Weapons/GrBnce";
		WallBounceSound "Weapons/GrBnce";
	}
	
	States
	{
		Spawn:
			SGRN A 0 Bright NoDelay
			{
				user_fusemax = random(95,115);
				A_StartSound("Weapons/GrenLF");
			}
		Idle:
			SGRN A 1 Bright 
			{
				user_fuse += 1;
				if (user_fuse >= user_fusemax) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			loop;

		Death:
			TNT1 A 0 
			{
				A_StartSound("Weapons/GrenLX",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 0 Bright 
			{
				bNOGRAVITY = true;
				A_ScaleVelocity(0);
				A_SetScale(1.0);
			}
			MISL B 8 Bright A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class HowitzerBase : KCPuff
{
	default
	{
		Tag "Howitzer Shell";
		Radius 11;
		Height 8;
		DamageType "Explosive";
		VSpeed 0;
		RenderStyle "Translucent";
		+PUFFGETSOWNER;
		+PUFFONACTORS;
		+NOGRAVITY
		Scale 1.5;
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				bFORCERADIUSDMG = false;
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }

				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
				A_Explode(256,192,XF_HURTSOURCE,false,64,0,10,"BulletPuff","Explosive");
			}
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class HowitzerNoAOE : HowitzerBase
{
	default
	{
		+PUFFGETSOWNER;
		+PUFFONACTORS;
		+NOGRAVITY
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				bFORCERADIUSDMG = false;
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }
				
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
				A_Explode(256,192,XF_HURTSOURCE,false,64,0,10,"BulletPuff","Explosive");
			}
			MISL B 8 Bright; 
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}
class DevastatorShot : KCProjectile
{
	int explrand;
	int expdmg, exprad, expfullrad;
	default
	{
		Tag "Stinger Missile";
		Radius 4;
		Height 4;
		Speed 24;
		Scale 0.125;
		DamageFunction (38);
		DamageType "Explosive";
		PROJECTILE;
		+FORCERADIUSDMG;
		ExplosionDamage 10; // 20
		ExplosionRadius 48; // 48
		SeeSound "weapons/devlnch";
		DeathSound "weapons/devexpl";
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			MNSS A 1 Bright;
			MNSS A 1 Bright A_SpawnItem("DevRockTrail");
			Loop;
		Death:
			GRNE A 0 
			{
				explrand = randompick(1,4);
				if (explrand <= 3)
				{
					expdmg = 10;
					exprad = 48;
					expfullrad = 24;
				}
				if (explrand >= 4)
				{
					expdmg = 20;
					exprad = 60;
					expfullrad = 30;
				}
				A_SetScale(0.20,0.20);
			}
			GRNE A 3 Bright 
			{
				A_Explode(expdmg,exprad,XF_HURTSOURCE,true,expfullrad,0,0,"","Explosive");
				if (random(1,64) <= 1) 
				{
					A_Explode(expdmg,exprad,XF_HURTSOURCE,true,expfullrad,0,0,"","Explosive");
				}
			}
			GRNE BCDEFGHIJKLMN 3 Bright;
			Stop;
	}
}

class DevastatorShot2 : DevastatorShot
{
	default
	{
		Tag "Stinger Missile";
		Speed 42;
		Scale 0.1;
		DamageFunction (randompick(26,32,32,32,38,38,38,38,38,38,38,38,34,44,44,50));
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			MNSS AA 1 Bright;
			MNSS A 1 Bright A_SpawnItem("DevRockTrail");
			Loop;
	}
}

class DevRockTrail : Actor
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Scale 0.125;
		RenderStyle "Add";
		Alpha 0.5;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			PDBA VWXYZ 1 A_FadeOut(0.1);
			wait;
	}
}

class SawPuff : KCPuff
{
	default
	{
		Tag "Saw Ripper";
		DamageType "Ripsaw";
		+PUFFGETSOWNER;
		+PUFFONACTORS;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
	}

	States
	{
		Spawn:
			PUFF A 4 Bright;
			PUFF B 4;
		Melee:
			PUFF CD 4;
			Stop;
	}
}


class SawPlayerPuff : SawPuff
{
	default
	{
		Tag "Saw Ripper";
		Species "Players";
		+MTHRUSPECIES;
		+THRUSPECIES;
		+PUFFGETSOWNER;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}
	
	void A_CheckSawT()
	{
		actor playera = players[0].mo;
		if (target && target == playera)
		{
			let weapon = target.player.ReadyWeapon;
			//Console.Printf("$#");
			if (weapon is "SawThrower")
			{
				actor playera = players[0].mo;
				let SawT = SawThrower(playera.FindInventory("SawThrower"));
				if (SawT)
				{
					//Console.Printf("%p [%s] (A_CustomPunch)", pufftype, pufftype.GetClassName());
					SawT.A_SawTDrainDurability(2);
				}
			}
		}
	}
	
	States
	{
		Spawn:
			PUFF A 4 Bright
			{
				A_CheckSawT();
			}
			PUFF B 4;
		Melee:
			PUFF CD 4
			{
				A_CheckSawT();
			}
			Stop;
	}
}

class SawShot : KCProjectile
{
	double sawduraratio;
	default
	{
		Tag "Flying Saw Ripper";
		Radius 4;
		Height 2;
		Speed 32;
		Scale 0.3;
		DamageFunction (finaldamagedealt);
		+NOGRAVITY;
		+DROPOFF;
		+MISSILE;
		+ACTIVATEIMPACT;
		+ACTIVATEPCROSS;
		+SEEKERMISSILE;
		+RIPPER;
		+EXTREMEDEATH;
		+NOEXPLODEFLOOR;
		+THRUGHOST;
		ExplosionDamage 16;
		ExplosionRadius 8;
		DeathSound "weapons/throwsawhit";
		DamageType "SawShot";
	}
	
	
	
	override void PostBeginPlay()
	{
		finaldamagedealt = 6 * random(3,6);
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		finaldamagedealt *= (2.5 - (sawduraratio * 1.5));
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		finaldamagedealt = 6 * random(3,6);
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		finaldamagedealt *= (2.5 - (sawduraratio * 1.5));
		super.Tick();
	}
	
	void A_SawRip()
	{
		A_SeekerMissile(90,90);
		int baseexpdmg = 16;
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		baseexpdmg *= (2.5 - (sawduraratio * 1.5));
		A_Explode(baseexpdmg,8,0,false,4,0,0,"","Sawshot");
	}
	
	States
	{
		Spawn:
			SAWS AABBCCDDEEFFGGHH 1 A_SawRip();
			SAWS AABBCCDDEEFFGGHH 1 A_SawRip();
			SAWS AABBCCDDEEFFGGHH 1 A_SawRip();
			SAWS AABBCCDDEEFFGGHH 1 A_SawRip();
			SAWS A 0 A_Gravity();
		SpawnFall:
			SAWS AABBCCDDEEFFGGHH 1 A_SawRip();
			Loop;
		Crash:
			SAWE A 1 { bRIPPER = false; }
		Death:
			SAWE A 1 
			{
				A_Gravity();
				if (ProjTrackerConn) ProjTrackerConn.Destroy();
			}
			SAWE A 128 A_SpawnProjectile("SawSmoke",0,0,180,2);
			SAWE B 96;
			SAWE C 64;
			SAWE DEF 48;
			SAWE F 32;
			SAWE G 16;
			Stop;
	}
}

class SSawShot : Sawshot
{
	default
	{
		Tag "Ultra Flying Saw Ripper";
		Radius 4;
		Height 2;
		Speed 48;
		Scale 0.3;
		DamageFunction (finaldamagedealt);
		+NOGRAVITY;
		+DROPOFF;
		+MISSILE;
		+ACTIVATEIMPACT;
		+ACTIVATEPCROSS;
		+SEEKERMISSILE;
		+RIPPER;
		+EXTREMEDEATH;
		+NOEXPLODEFLOOR;
		+THRUGHOST;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		BounceCount 4;
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		ExplosionDamage 24;
		ExplosionRadius 8;
		DeathSound "weapons/throwsawhit";
		DamageType "SawShot";
	}
	
	override void PostBeginPlay()
	{
		finaldamagedealt = 8 * random(4,8);
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		finaldamagedealt *= (4.0 - (sawduraratio * 3));
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		finaldamagedealt = 8 * random(4,8);
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		finaldamagedealt *= (4.0 - (sawduraratio * 3));
		super.Tick();
	}
	
	void A_SawRip()
	{
		A_SeekerMissile(90,90);
		int baseexpdmg = 24;
		if (sawduraratio < 0.00) sawduraratio = 0.00;
		baseexpdmg *= (4.0 - (sawduraratio * 3));
		A_Explode(baseexpdmg,8,0,false,4,0,0,"","Sawshot");
	}
	
	States
	{
		Spawn:
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS ABCDEFGH 1 A_SawRip();
			SAWS A 0 A_Gravity();
		SpawnFall:
			SAWS ABCDEFGH 1 A_SawRip();
			Loop;
		Crash:
			SAWE A 1 { bRIPPER = false; }
		Death:
			SAWE A 1 
			{
				A_Gravity();
				if (ProjTrackerConn) ProjTrackerConn.Destroy();
			}
			SAWE A 128 A_SpawnProjectile("SawSmoke",0,0,180,2);
			SAWE B 96;
			SAWE C 64;
			SAWE DEF 48;
			SAWE F 32;
			SAWE G 16;
			Stop;
	}
}

class SawSmoke : KCBaseZSC
{
	default
	{
		Height 1;
		Radius 1;
		Speed 1;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+THRUGHOST;
		RenderStyle "Translucent";
		Alpha 0.15;
		Scale 0.1;
	}
	
	States
	{
		Spawn:
			CSM2 D 2 Bright;
		Death:
			CSM2 EEFFGGHHIIJJKK 1 Bright A_FadeOut(0.01);
			Stop;
	}
}

class ImpalerMissile : SingleDamageFastRipper
{
	default
	{
		Tag "Impaler Bolt";
		PROJECTILE;
		+BLOODSPLATTER;
		+NOEXTREMEDEATH;
		+RIPPER;
		Radius 2;
		Height 4;
		DamageFunction (finaldamagedealt);
		Speed 320;
		SeeSound "Weapon/XBowFire";
		KCFastProjectile.TimeUnFreezeSpeedUpFactor 8.0;
		KCFastProjectile.TimeFreezeSlowDownFactor 0.125;
	}
	
	override void PostBeginPlay()
	{
		SingleDamageFastRipper.PostBeginPlay();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
		
		if (finaldamagedealt <= 0) finaldamagedealt = (75 + (random(-25,25)));
		//Console.Printf("finaldamagedealt [%s]: %d", self.GetClassName(), finaldamagedealt);
	}

	override void Tick()
	{
		SingleDamageFastRipper.Tick();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			ARRW A 1;
			Loop;
		Death:
		Crash:
			NLPJ B 3 A_StartSound("Weapon/XBowHit");
			NLPJ CDEFG 3;
			Stop;
		XDeath:
			TNT1 A 10 A_StartSound("Weapon/XBowSplatter");
			Stop;
	}
}

class ImpalerMissile2 : SingleDamageFastRipper
{
	default
	{
		Tag "Mini Impaler Bolt";
		PROJECTILE;
		+BLOODSPLATTER;
		+NOEXTREMEDEATH;
		+RIPPER;
		Radius 1;
		Height 2;
		Scale 0.75;
		DamageFunction (finaldamagedealt);
		Speed 280;
		SeeSound "Weapon/XBowFire";
		KCFastProjectile.TimeUnFreezeSpeedUpFactor 7.0;
		KCFastProjectile.TimeFreezeSlowDownFactor 0.1428572;
	}
	
	override void PostBeginPlay()
	{
		SingleDamageFastRipper.PostBeginPlay();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
		
		if (finaldamagedealt <= 0) finaldamagedealt = (50 + (random(randompick(-16,-17,-17),randompick(16,17,17))));
		//Console.Printf("finaldamagedealt [%s]: %d", self.GetClassName(), finaldamagedealt);
	}

	override void Tick()
	{
		SingleDamageFastRipper.Tick();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			ARRW A 1;
			Loop;
		Death:
		Crash:
			NLPJ B 3 A_StartSound("Weapon/XBowHit");
			NLPJ CDEFG 3;
			Stop;
		XDeath:
			TNT1 A 10 A_StartSound("Weapon/XBowSplatter");
			Stop;
	}
}

class ImpalerMissile3 : SingleDamageFastRipper
{
	default
	{
		Tag "Mini Impaler Bolt";
		PROJECTILE;
		+BLOODSPLATTER;
		+NOEXTREMEDEATH;
		+RIPPER;
		Radius 1;
		Height 2;
		DamageFunction (finaldamagedealt);
		Scale 0.5;
		Speed 240;
		SeeSound "Weapon/XBowFire";
		KCFastProjectile.TimeUnFreezeSpeedUpFactor 6.0;
		KCFastProjectile.TimeFreezeSlowDownFactor 0.166667;
	}
	
	override void PostBeginPlay()
	{
		SingleDamageFastRipper.PostBeginPlay();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
		
		if (finaldamagedealt <= 0) finaldamagedealt = (25 + (random(randompick(-8,-8,-9),randompick(8,8,9))));
		//Console.Printf("finaldamagedealt [%s]: %d", self.GetClassName(), finaldamagedealt);
	}

	override void Tick()
	{
		SingleDamageFastRipper.Tick();
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			if (!scale1)
			{
				A_ScaleVelocity(speedmul2);
				scale1 = true;
			}
		}
		else
		{
			if (scale1)
			{
				if (!scale2)
				{
					A_ScaleVelocity(speedmul);
					scale2 = true;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			ARRW A 1;
			Loop;
		Death:
		Crash:
			NLPJ B 3 A_StartSound("Weapon/XBowHit");
			NLPJ CDEFG 3;
			Stop;
		XDeath:
			TNT1 A 10 A_StartSound("Weapon/XBowSplatter");
			Stop;
	}
}

class RocketBase : KCProjectile
{
	default
	{
		Tag "Rocket";
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		Projectile;
		+RANDOMIZE;
		+DEHEXPLOSION;
		+ROCKETTRAIL;
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Obituary "$OB_MPROCKET"; // "%o rode %k's rocket."
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright A_Explode();
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class BFGBallBase : KCProjectile
{
	double user_radiusdmg; 
	double user_radiussize; 
	int user_detonationtimer;
	
	default
	{
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction 100;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
		DeathSound "weapons/bfgx";
		Obituary "$OB_MPBFG_BOOM";
	}
	
	States
	{
		Spawn:
			BFS1 AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/bfgx",CHAN_7);
				A_Quake(1, 12, 0, 768, "nosound/silent");
				A_Quake(5, 12, 0, 512, "nosound/silent");
			}
			BFE1 AB 8 Bright;
			BFE1 C 8 Bright A_BFGSpray();
			BFE1 DEF 8 Bright;
			Stop;
		
		ShotDown:
			TNT1 A 0 
			{
				A_ScaleVelocity(0);
				A_StartSound("weapons/bfgx",CHAN_7, CHANF_DEFAULT, 0.5);
				A_Quake(1, 12, 0, 384, "nosound/silent");
				A_Quake(5, 12, 0, 256, "nosound/silent");
			}
			BFE1 ABCDEF 4 Bright;
			Stop;
	}
}

class RocketPlayer : RocketBase
{
	default
	{
		Tag "Rocket";
		DamageType "Explosive";
	}
	
	States
	{
		Spawn:
			MISL A 0 NoDelay 
			{ 
				bFORCERADIUSDMG = false;
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }
			}
		Idle:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class RocketPlayerSeeking : RocketPlayer
{
	double user_seekstrength;
	int user_specificTarget;
	default
	{
		Tag "Homing Rocket";
		DamageType "Explosive";
		Radius 11;
		Height 8;
		Speed 30;
		DamageFunction (15 * random(1,8));
		SeeSound "weapons/hrlfir";
		DeathSound "weapons/hrlexp";
	}
	
	States
	{
		Spawn:
			HMIS A 0 NoDelay 
			{
				bFORCERADIUSDMG = false;
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { bFORCERADIUSDMG = true; }
				
				user_seekstrength = frandom(12.5,17.5);
				user_seekstrength *= 1.00;
				if (user_seekstrength > 0)
				{
					bSEEKERMISSILE = true;
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim();
				}
				// This is needed so that subclasses can override the Idle state.
				return resolvestate("Idle");
			}
		Idle:
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1);
			BAL3 C 8 Bright A_Explode(96,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			BAL3 DE 5 Bright;
			stop;
	}
}

class RocketPlayerDrunk : RocketPlayerSeeking
{
	double user_drunkbasefactor;
	double user_drunkenness;
	default
	{
		Tag "Drunk Rocket";
		DamageType "Explosive";
		Radius 11;
		Height 8;
		Speed 30;
		DamageFunction (15 * random(1,8));
		SeeSound "weapons/hrlfir";
		DeathSound "weapons/hrlexp";
	}
	
	States
	{
		Idle:
			#### "#" 0 
			{
				if (random(1,8) == 1) { user_drunkbasefactor = 1.0; }
				else
				{
					if (random(1,8) == 1) { user_drunkbasefactor = 0.4; }
					else { user_drunkbasefactor = 0.7; }
				}
				user_drunkbasefactor *= (random(36,44) * 0.025);
				user_drunkenness = max(0.0, 10.0 - ((user_seekstrength * (1.0 * user_drunkbasefactor)) * (user_seekstrength * (0.4 * user_drunkbasefactor))));
				//A_LogFloat(user_drunkenness);
			}
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
					if (user_drunkenness > 0)
					{
						A_DrunkMissile(user_drunkenness, user_drunkenness);
					}
				}
			}
			Wait;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1);
			BAL3 C 8 Bright A_Explode(96,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			BAL3 DE 5 Bright;
			stop;
	}
}

class PlasmaBallNew : KCProjectile
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction (5 * random(1,8));
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
		DamageType "Plasma";
	}
	States
	{
		Spawn:
			PLSS AB 6 Bright;
			Loop;
		Death:
			PLSE ABCDE 4 Bright;
			Stop;
		}
}

class AltPlasmaBall : KCProjectile
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction ((5 * random(1,8)) * 0.667);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Scale 0.667;
		Alpha 0.50;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
		DamageType "Plasma";
	}
	States
	{
		Spawn:
			PLSS AB 6 Bright;
			Loop;
		Death:
			PLSE ABCDE 4 Bright;
			Stop;
		}
}

class PlasmaBall1New : PlasmaBallNew
{
	Default
	{
		Damage 4;
		BounceType "Classic";
		BounceFactor 1.0;
		Obituary "$OB_MPBFG_MBF";
		DamageType "BFG";
	}
	States
	{
		Spawn:
			PLS1 AB 6 Bright;
			Loop;
		Death:
			PLS1 CDEFG 4 Bright;
			Stop;
	}
}

class PlasmaBall2New : PlasmaBall1New
{
	States
	{
		Spawn:
			PLS2 AB 6 Bright;
			Loop;
		Death:
			PLS2 CDE 4 Bright;
			Stop;
	}
}

class BFGBallNew : KCProjectile
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		Damage 100;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		DeathSound "weapons/bfgx";
		Obituary "$OB_MPBFG_BOOM";
		DamageType "BFG";
	}
	States
	{
		Spawn:
			BFS1 AB 4 Bright;
			Loop;
		Death:
			BFE1 AB 8 Bright;
			BFE1 C 8 Bright A_BFGSpray("BFGExtraNew");
			BFE1 DEF 8 Bright;
			Stop;
	}
}

class BFGExtraNew : KCProjectile
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		DamageType "BFGSplash";
	}
	States
	{
		Spawn:
			BFE2 ABCD 8 Bright;
			Stop;
	}
}

class DBTPuff : KCPuff //replaces BulletPuff
{
	default
	{
		Tag "shot";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		+NOINTERACTION;
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 1;
		DamageType "Bullet";
	}
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,2);
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7);
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32);
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32);
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360));
			TNT1 A 1;
			Stop;
	}
}

class DBTPuffSmoke : KCBaseZSC
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		Scale 0.03;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,"T2");
		T1:
			X143 J 1 A_FadeOut(0.03);
			Wait;
		T2:
			X143 K 1 A_FadeOut(0.03);
			Wait;
	}
}

class DBTYellowSpark : KCBaseZSC
{
	default
	{
		+NOINTERACTION;
		Scale 0.16;
		RenderStyle "Add";
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_Jump(255,"Type1","Type2");
		Type1:
			FX26 A 2 Bright;
			FX26 BCD 2 Bright;
			FX26 EFGHI 2 Bright;
			FX26 J 1 Bright A_FadeOut();
			Wait;
		Type2:
			FX26 P 2 Bright;
			FX26 QRS 2 Bright;
			FX26 TUVWX 2 Bright;
			FX26 Y 1 Bright A_FadeOut();
			Wait;
	}
}

class DBTSparkExtra : KCProjectile
{
	default
	{
		Height 1;
		Radius 1;
		Speed 3;
		Scale 0.15;
		+NOCLIP;
		PROJECTILE;
		-NOGRAVITY;
		Gravity 0.09;
		+DONTSPLASH;
		+DONTBLAST;
		+THRUACTORS;
		RenderStyle "Add";
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			FX26 K 1 Bright ThrustThingZ(0,frandom(0.8,3.5),0,1);
			FX26 KKKLMNO 3 Bright A_FadeOut(0.05);
			Stop;
	}
}

class DBTRailPuff : DBTPuff
{
	default
	{
		Tag "Railgun Blast";
		DamageType "Railgun";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,2);
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7);
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32);
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32);
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360));
			TNT1 A 1;
			Stop;
	}
}
