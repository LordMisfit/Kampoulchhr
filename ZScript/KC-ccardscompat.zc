// This file is intended to be used to help me further incorporate lore-ish accurate effects
// to Corruption Cards effects without needing to alter the primary mod itself :P

// The main "beef" in regards to Kampoulchhr is that time-freezes don't generally block most
// card effects by default, when canonically, it SHOULD in almost all cases. >.>
// Some things [i.e. Healing Traps, Attention Curse, Nukage Rain] have workarounds that work
// on their own, but others will require more work to make work canonically with how Heiwa's
// time freeze power actually does [as in it's an absolute freeze of pretty much all things,
// even those things, places, etc. that are considered "outside of the flow of time and 
// space", well with exception to herself of course]. V:

//***********************************************************
//* Base "Replacement FX Actor", you know, just in case >.> *
//***********************************************************
class KC_CCards_Actor_FX : KCBaseZSC
{
	Default
	{
		+NOINTERACTION;
		+NOTIMEFREEZE; // OHAI THAR MR NOTIMEFREEZE FLAG, I'M WATCHING YOU LUL :V
		+NOTELEPORT;
		-FLOORCLIP;
		-SOLID
	}
}

//***********
//* Effects *
//***********
class KC_CCards_Actor_Smoke : KC_CCards_Actor_FX
{
	Default
	{
		-NOTIMEFREEZE;
		//translation "CCards_Shield";
		renderstyle "STYLE_Add";
		alpha 1.0;
		+ROLLSPRITE;
		scale 0.4;
	}

	bool dir;

	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0
			{
				if (random(0,1) == 0)
				{
					dir = true;
				}
				roll = random(0, 359.0);
			}
			Goto Fade;
		Fade:
			C_F2 A 1
			{
				A_FadeOut(0.05);
				A_SetScale(scale.x + 0.01, scale.y + 0.01);
				A_ScaleVelocity(0.9);
			}
			loop;
	}

	override void Tick()
	{
		A_SetRoll(dir ? roll + 2.7 : roll - 2.7);
		Super.Tick();
	}
}


//*********
//* Items *
//*********
//CCards_Actor_PriestPorridge
class KC_CCards_Actor_PriestPorridge : CustomInventoryExt // Health
{
	Default
	{
		Inventory.Amount 5;
		Inventory.PickupMessage "You ate some \cpPriest Porridge\c-.";
		+SHOOTABLE;
		+DONTTHRUST;
		mass 999999;
		height 4;
		bloodtype "";
		+NOTARGET;
		+NOTAUTOAIMED;
		health 100;
		tag "Priest Porridge";
		scale 0.5;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		string sbpmsg = "Picked up some \cpPriest Porridge\c- and converted it into the \c[brick]portable medikit\c- of your \c[cream]special backpack\c-.";
		if (!A_CheckHealthLevels(1.0))
		{
			actor playera = players[0].mo;
			let medbag = MediBag(playera.FindInventory("MediBag",false));
			if (medbag)
			{
				if (medbag.Amount <= medbag.MaxAmount) msg = sbpmsg;
			}
		}
		return msg;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		String s = mod;
		if (s.IndexOf("Fire") > -1 || ((flags & DMG_EXPLOSION) && damage > 45))
		{
			Spawn("KC_CCards_Actor_HotPriestPorridge", pos);
			Destroy();
		}

		return 0;
	}

	States
	{
		Spawn:
			C_F6 W 0;
			C_F6 W 0
			{
				if (cursector.DamageAmount > 0 && 
						(cursector.damagetype == 'Magma' ||
						cursector.damagetype == 'Lava' ||
						cursector.damagetype == 'Fire' ||
						cursector.damagetype == 'SpecialFire' ||
						cursector.damagetype == 'CCardsEyeFire' ||
						cursector.damagetype == 'Flames' ||
						cursector.damagetype == 'CCardsFire' ||
						cursector.damagetype == 'Fire' ||
						cursector.damagetype == 'Inferno' ||
						cursector.damagetype == 'Burn'))
				{
					Spawn("KC_CCards_Actor_HotPriestPorridge", pos);
					Destroy();
				}
			}
			C_F6 W -1;
			stop;
			
		Success:
			TNT1 A 0
			{
				A_PickupMedicalItem(0.05,1.00);
			}
			Stop;
		SuccessStore:
			TNT1 A 0
			{
				A_PickupMedicalItemStore(0.05,1.00,0,2);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) return resolvestate("Success");
				else
				{
					let medbag = MediBag(FindInventory("MediBag",false));
					if (medbag) 
					{
						if (medbag.Amount < medbag.MaxAmount) return resolvestate("SuccessStore");
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;
	}

}

class KC_CCards_Actor_HotPriestPorridge : KC_CCards_Actor_PriestPorridge
{
	Default
	{
		+BRIGHT;
		Inventory.Amount 30;
		Inventory.PickupMessage "You ate some \c[fire]Priest Porridge\c- Hot.";
		-SHOOTABLE;
		+DONTTHRUST;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		string sbpmsg = "Picked up some \c[fire]Hot Priest Porridge\c- and converted it into the \c[brick]portable medikit\c- of your \c[cream]special backpack\c-.";
		if (!A_CheckHealthLevels(1.0))
		{
			actor playera = players[0].mo;
			let medbag = MediBag(playera.FindInventory("MediBag",false));
			if (medbag)
			{
				if (medbag.Amount <= medbag.MaxAmount) msg = sbpmsg;
			}
		}
		return msg;
	}

	States
	{
		Spawn:
			C_F6 W 0;
			C_F6 WWWWWW 8
			{
				Actor smok = Spawn("KC_CCards_Actor_Smoke", pos + (0, 0, 10));
				if (smok)
				{
					smok.A_SetScale(0.15);
					smok.A_ChangeVelocity(0, 0, 4);
				}
			}
			C_F6 W -1;
			stop;
			
		Success:
			TNT1 A 0
			{
				//A_StartSound("gethealthkit",5);
				A_PickupMedicalItem(0.30,1.00);
			}
			Stop;
		SuccessStore:
			TNT1 A 0
			{
				A_PickupMedicalItemStore(0.30,1.00,0,6);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) return resolvestate("Success");
				else
				{
					let medbag = MediBag(FindInventory("MediBag",false));
					if (medbag) 
					{
						if (medbag.Amount < medbag.MaxAmount) return resolvestate("SuccessStore");
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;
	}
}

//*************
//* "Weapons" *
//*************
// "Mehmehmeh!!" - Cherry, JohnSuitePee's Cacodemon Plushy V:
class CCards_Actor_PlushWeaponEx1 : MarineWeapon
{
	Default
	{
		+WEAPON.NOAUTOFIRE;
		+WEAPON.CHEATNOTWEAPON;
		+WEAPON.NO_AUTO_SWITCH;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.NOALERT;
		weapon.slotnumber 1;
		Weapon.SelectionOrder 1;
		inventory.pickupsound "";
		inventory.pickupmessage "Picked up a... \c[purple]Cacodemon Plushie?\c- \cx[Slot ?]\c-";
		obituary "%o was bopped by a Cacodemon Plushie.";
		Tag "???";
		scale 0.4;
	}

	uint offs;

	States
	{
		Ready:
			CC_P A 10;
			CC_P B 6
			{
				invoker.A_KCAlertMonsters(); // Squeak won't awaken things if time is frozen :V
				A_StartSound("corruptioncards/squeakytoy", CHAN_WEAPON);
			}
			CC_P A 16;
		ReadyLoop:
			CC_P A 1 A_WeaponReady();
			Loop;
		Deselect:
			CC_P A 1 A_Lower(12);
			Loop;
		Select:
			CC_P AAAAA 1 A_WeaponOffset(0, -12, WOF_ADD);
			CC_P AAAAAAAA 1 A_WeaponOffset(0, -6, WOF_ADD);//A_Raise;
			Goto Ready;
		Fire:
			CC_P BBBBBBBBBBBBBBBBBBBAAAA 1
			{
				A_WeaponOffset(Max(0, 4 - invoker.offs),Max(1, 7 - invoker.offs),WOF_ADD);
				invoker.offs++;
			}
			CC_P A 0 
			{
				if (A_CheckBerserk()) A_FireProjectile("CCards_Actor_ThrownPlushExB", 0, 0, 0, 0, FPF_NOAUTOAIM);
				else A_FireProjectile("CCards_Actor_ThrownPlushEx", 0, 0, 0, 0, FPF_NOAUTOAIM);
				
				invoker.Destroy();
			}
			stop;
		Spawn:
			CC_P C -1;
			Stop;
	}
}

class CCards_Actor_ThrownPlushEx : KCFastProjectile
{
	int dmg;
	Default
	{
		PROJECTILE;
		damagefunction (dmg);
		speed 50;
		-NOGRAVITY;
		scale 0.4;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		radius 8;
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		dmg = 1;
		if (MiscItem) dmg *= MiscItem.PlayerLevel;
		dmg *= random(1,8);
		super.PostBeginPlay();
	}
	
	states
	{
		Spawn:
		CC_P C 1
		{
			roll += 22;
		}
		loop;
		Death:
		TNT1 A 0;
		CC_P C 0
		{
			string nm = "CCards_Actor_ThrownPlushFX";
			A_StopSound(CHAN_6);
			A_StartSound("corruptioncards/illusionbreak", CHAN_6);

			for(int i; i < 32; i++)
			{
				A_SpawnItemEx(nm, 0, 0, 0, frandom(2, 12), 0, frandom(-8, 8), random(0,360), SXF_NOCHECKPOSITION);
			}
			A_SetTranslation("CCards_Mist");
			bNOGRAVITY = true;
		}
		C_F0 GHI 3;
		stop;
	}

	override void BeginPlay()
	{
		A_StartSound("corruptioncards/squeakytoy", CHAN_6);
	}
}

class CCards_Actor_ThrownPlushExB : CCards_Actor_ThrownPlushEx
{
	Default
	{
		PROJECTILE;
		damagefunction (dmg);
		speed 250;
		-NOGRAVITY;
		scale 0.4;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		radius 8;
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		dmg = 10;
		if (MiscItem) dmg *= MiscItem.PlayerLevel;
		dmg *= random(4,8);
		super.PostBeginPlay();
	}
	
	states
	{
		Spawn:
			CC_P C 1
			{
				roll += 110;
			}
			loop;
		Death:
			TNT1 A 0;
			CC_P C 0
			{
				string nm = "CCards_Actor_ThrownPlushFX";
				A_StopSound(CHAN_6);
				A_StartSound("corruptioncards/illusionbreak", CHAN_6);
				A_StopSound(CHAN_7);
				A_StartSound("corruptioncards/illusionbreak", CHAN_7);
	
				for(int i; i < 64; i++)
				{
					A_SpawnItemEx(nm, 0, 0, 0, frandom(2, 12), 0, frandom(-8, 8), random(0,360), SXF_NOCHECKPOSITION);
				}
				A_SetTranslation("CCards_Mist");
				bNOGRAVITY = true;
			}
			C_F0 GHI 3;
		stop;
	}

	override void BeginPlay()
	{
		A_StartSound("corruptioncards/squeakytoy", CHAN_6);
	}
}

class CCards_Actor_PlushWeaponEx2 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 2; } }
class CCards_Actor_PlushWeaponEx3 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 3; } }
class CCards_Actor_PlushWeaponEx4 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 4; } }
class CCards_Actor_PlushWeaponEx5 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 5; } }
class CCards_Actor_PlushWeaponEx6 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 6; } }
class CCards_Actor_PlushWeaponEx7 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 7; } }
class CCards_Actor_PlushWeaponEx8 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 8; } }
class CCards_Actor_PlushWeaponEx9 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 9; } }
class CCards_Actor_PlushWeaponEx0 : CCards_Actor_PlushWeaponEx1 { Default { weapon.slotnumber 0; } }
