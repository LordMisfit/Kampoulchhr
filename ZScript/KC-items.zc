class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB;
		+NOTIMEFREEZE;
		-BLOCKEDBYSOLIDACTORS;
	}
}

class CustomInventoryExt : CustomInventory
{
	string texname;
	int user_type;
	
	bool PickupUseVoice;
	bool PickupUseVoice2;
	bool PickupUseVoiceHeiwa;
	bool PickupUseVoiceHeiwa2;
	string PickupSnd2;
	string PickupSndHeiwa;
	string PickupSndHeiwa2;
	property PickUpVoice: PickupUseVoice;
	property PickUpVoice2: PickupUseVoice2;
	property PickUpVoiceHeiwa: PickupUseVoiceHeiwa;
	property PickUpVoiceHeiwa2: PickupUseVoiceHeiwa2;
	property PickupSound2: PickupSnd2;
	property PickupSoundHeiwa: PickupSndHeiwa;
	property PickupSoundHeiwa2: PickupSndHeiwa2;
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return PickupMsg;
	}
	
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (toucher != NULL && toucher.CheckLocalView())
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
		}
		else
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_MAYBE_LOCAL;
		}
		//Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);

		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			}
		}
		toucher.A_StopSound(chan);
		toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		
		if (PickupSnd2 != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			//Console.Printf("Channel: %d [PUV2: %d]", chan, PickupUseVoice2);
			
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			double maskpitch = 1.00;
			if (PickupUseVoice2) 
			{
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
			}
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
		}
		
		// Plays Heiwa-Unique Lines for weapon drops
		if (A_CheckForHeiwaSnds())
		{
			if (kcdebug_pickupsounds) Console.Printf("PickupSounds: A_CheckForHeiwaSnds() found");
			if (PickupSndHeiwa != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSndHeiwa: %s", PickupSndHeiwa);
				if (toucher != NULL && toucher.CheckLocalView())
				{
					if (PickupUseVoiceHeiwa) chan = CHAN_VOICE;
															else chan = CHAN_ITEM;
					flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
				}
				else
				{
					if (PickupUseVoiceHeiwa) chan = CHAN_VOICE;
															else chan = CHAN_ITEM;
					flags = CHANF_MAYBE_LOCAL;
				}
				if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUVH: %d]", chan, PickupUseVoiceHeiwa);
				
				double maskpitch = 1.00;
				if (PickupUseVoiceHeiwa) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
				}
				toucher.A_StopSound(chan);
				toucher.A_StartSound(PickupSndHeiwa, chan, flags, 1.0, atten, maskpitch);
			}
			
			if (PickupSndHeiwa2 != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSndHeiwa2: %s", PickupSndHeiwa2);
				if (toucher != NULL && toucher.CheckLocalView())
				{
					if (PickupUseVoiceHeiwa2) chan = CHAN_VOICE;
															 else chan = CHAN_ITEM;
					flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
				}
				else
				{
					if (PickupUseVoiceHeiwa2) chan = CHAN_VOICE;
															 else chan = CHAN_ITEM;
					flags = CHANF_MAYBE_LOCAL;
				}
				if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUVH2: %d]", chan, PickupUseVoiceHeiwa2);
				
				double maskpitch = 1.00;
				if (PickupUseVoiceHeiwa2) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
				}
				toucher.A_StopSound(chan);
				toucher.A_StartSound(PickupSndHeiwa2, chan, flags, 1.0, atten, maskpitch);
			}
		}
	}
	
	action bool A_CheckForHeiwaSnds()
	{
		actor playera = players[0].mo;
		bool result = false;
		if (playera)
		{
			if (playera.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(playera)) result = true;
		}
		return result;
	}
	
	override void Tick()
	{
		super.Tick();
		Double Dbl;
		Sector Sec;
		[Dbl,Sec] = CurSector.LowestFloorAt(Pos.XY);
		if (pos.z <= Dbl && !owner)
		{
			if (cursector.damagetype == 'InstantDeath' ||
					cursector.damagetype == 'Massacre')
			{
				if (bCOUNTITEM) level.total_items--;
				Spawn("ItemFallSpot", (pos.x, pos.y, pos.z), NO_REPLACE);
				if (kcdebug_itempitfalls) Console.Printf("%s [%p] \c[green](CustomInventoryExt)\c- fell into a bottomless pit! [tic: %d]", GetClassName(), self, gametic);
				Destroy();
			}
		}
	}
	
	action void A_CapsuleSpawn(int basechance)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (HeiwaPlayer(playera))
		{
			if (!bDROPPED && random(1,basechance) <= 1)
			{
				int user_type = random(1,20);
				string spawntype;
				if (user_type >= 1 && user_type <= 4) spawntype = "VitalCapsule";
				if (user_type >= 5 && user_type <= 8)  spawntype = "SpeedCapsule";
				if (user_type >= 9 && user_type <= 12) spawntype = "IQCapsule";
				if (user_type >= 13 && user_type <= 16) spawntype = "GutsCapsule";
				if (user_type >= 17 && user_type <= 20) spawntype = "LuckCapsule";
				A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				if (bCOUNTITEM) level.total_items--;
				self.Destroy();
			}
		}
	}
	
	action bool A_CheckHealthLevels(double maxhealthratio = 1.0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int CurrentHealth = playera.health;
		int HealthValue;
		int MaxHealthTrue;
		if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
		int MaxHealthLimit = MaxHealthTrue * maxhealthratio;
		
		bool result = false;
		if (currenthealth < MaxHealthLimit) result = true;

		return result;
	}

	// Stimpacks/Medikits/Berserk Packs (All games)
	action void A_PickupMedicalItem(double healfactor, double maxhealthratio = 1.0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int CurrentHealth = playera.health;
		int HealAmount;
		int HealthValue;
		int MaxHealthTrue;
		if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
		int MaxHealthLimit = MaxHealthTrue * maxhealthratio;
		int oldhealthratio;
		if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
		if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
		if (playera.CountInv("LowHealth")) oldhealthratio = 2;
		if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
		
		HealAmount = MaxHealthTrue * healfactor;
		if (CurrentHealth < MaxHealthLimit)
		{
			CurrentHealth += HealAmount;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;
			playera.health = CurrentHealth;
			if (HeiwaPlayer(playera) && 
					(oldhealthratio == 3 || 
					 (oldhealthratio == 2 && random(1,25) <= 21) || 
					 (oldhealthratio == 1 && random(1,25) <= 9)))
			{
				double maskpitch = 1.00;
				if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				string voicenm;
				double voicevol = frandom(1.25,1.75);
				if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
				voicenm = "Heiwa/ReflievedSigh"; //
				Console.Printf("\c[HeiwaDeluge]-sighs in relief-\c-"); //
				playera.A_StopSound(CHAN_VOICE);
				playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
			}
		}
	}
	
	action void A_GiveBerserk(int basetime, bool bswitch = false, string type = "KCPowerStrength")
	{
		actor playera = players[0].mo;
		if (!playera.CountInv(type))
		{
			playera.SetInventory(type,1);
			let BerkserkItem = PowerStrength(playera.FindInventory(type));
			if (BerkserkItem) BerkserkItem.EffectTics = basetime;
		}
		else
		{
			let BerkserkItem = PowerStrength(playera.FindInventory(type));
			if (BerkserkItem) BerkserkItem.EffectTics += basetime;
		}

		if (kc_berserkweaponswitch && bswitch)
		{
			if (playera.CountInv("FistMarine")) { playera.A_SelectWeapon("FistMarine"); } 
			if (playera.CountInv("FistHeiwa")) { playera.A_SelectWeapon("FistHeiwa"); } 
		}
	}
}

class KampoulSphere : CustomInventoryExt
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[HeiwaDeluge](W-What is this thing?!)";
		Inventory.PickupSound "powerups/kampoul";
		Scale 0.75;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (!HeiwaPlayer(playera))
		{
			bool spawned;
			actor mo;
			[spawned, mo] = A_SpawnItemEx("InvulnerabilitySphere2",flags:SXF_NOCHECKPOSITION,tid:tid);
			if (mo) 
			{
				mo.bDROPPED = bDROPPED;
				InvulnerabilitySphere2 invl;
				invl = InvulnerabilitySphere2(mo);
				if (invl) invl.timestrength = 3;
			}
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			KMPS ABCDEFGHIJK 2 NoDelay bright; // 22
			KMPS K 10 bright; // 32
			KMPS KIJGFEDCBAL 2 bright; // 54
			KMPS MNOPQRSTU 2 bright; // 72
			KMPS U 10 bright; // 82
			KMPS UTSRQPONM 2 bright; // 100
			loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				if (HeiwaPlayer(playera))
				{
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						double maskpitch = 1.00;
						if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
						A_StopSound(CHAN_VOICE);
						Console.Printf("\c[HeiwaDeluge]'That's a -BIG- help!'\c-"); //
						A_StartSound("Heiwa/ABigHelp",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
					A_GiveInventory("KCPowerKampoul");
				}
			}
			Stop;
	}
}

class TSArtifactSpawner : CustomInventoryExt
{
	default
	{
		radius 1;
		height 2;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		+DONTGIB;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 BRIGHT NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				
				int bits;
				if (playera.CountInv("TimeSeraphCharm")) bits += 1;
				if (playera.CountInv("TimeSeraphPocketWatch")) bits += 2;
				if (playera.CountInv("TimeSeraphBangle")) bits += 4;
				
				string spawntype;
				int randsel;
				if (kcdebug_timeserapharmor) Console.Printf("bits: %d", bits);
				
				if (!playera.CountInv("TimeSeraphCharm"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [1] check: %d", bits);
					if (playera.CountInv("TimeSeraphPocketWatch") && playera.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-6] check: %d", bits);
						spawntype = "TimeSeraphCharm";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-!6] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphCharm";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				else
				if (!playera.CountInv("TimeSeraphPocketWatch"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [2] check: %d", bits);
					if (playera.CountInv("TimeSeraphCharm") && playera.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-5] check: %d", bits);
						spawntype = "TimeSeraphPocketWatch";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-!5] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphPocketWatch";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphCharm";
							}
							else
							{
								spawntype = "TimeSeraphCharm";
							}
						}
					}
				}
				else
				if (!playera.CountInv("TimeSeraphBangle"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [4] check: %d", bits);
					if (playera.CountInv("TimeSeraphCharm") && playera.CountInv("TimeSeraphPocketWatch"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-3] check: %d", bits);
						spawntype = "TimeSeraphBangle";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-!3] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphBangle";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphCharm"))
							{
								randsel = random(1,256);
								if (randsel <= 128) spawntype = "TimeSeraphCharm";
								if (randsel >= 129) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				
				if (bits < 7 && spawntype != "") 
				{
					if (kcdebug_timeserapharmor) Console.Printf("spawntype: %s", spawntype);
					A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				Destroy();
			}
			Loop;
	}
}

class BaseTimeSeraphArtifact : CustomInventoryExt
{
	default
	{
		+DONTGIB;
		+NOTIMEFREEZE;
		CustomInventoryExt.PickupSound2 "tsarmor/pickup";
	}
	
	int CheckNumArtifacts()
	{
		actor playera = players[0].mo;
		int numartifacts;
		if (playera.CountInv("TimeSeraphCharm")) numartifacts++;
		if (playera.CountInv("TimeSeraphPocketWatch")) numartifacts++;
		if (playera.CountInv("TimeSeraphBangle")) numartifacts++;
		return numartifacts;
	}
	
	int DecideColorPhase(int numartifacts)
	{
		actor playera = players[0].mo;
		string type = GetClassName();
		int colorphase = 0;
		// 0 = Platinum [neutral]
		// 1 = Aqua-Blue
		// 2 = Lime-Green
		// 3 = Violet-Purple
		Actor mo;
		int artifactsnearby;
		int charmsfound = 0;
		int watchesfound = 0;
		int banglesfound = 0;
		double checkdist = frandom(480.0,544.0);
		if (type != "TimeSeraphCharm")
		{
			ThinkerIterator CharmFinder = ThinkerIterator.Create("TimeSeraphCharm");
			while (mo = Actor(CharmFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphCharm") > 0)
				{
					charmsfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								charmsfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (charmsfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphPocketWatch")
		{
			ThinkerIterator WatchFinder = ThinkerIterator.Create("TimeSeraphPocketWatch");
			while (mo = Actor(WatchFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphPocketWatch") > 0)
				{
					watchesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								watchesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (watchesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphBangle")
		{
			ThinkerIterator BangleFinder = ThinkerIterator.Create("TimeSeraphBangle");
			while (mo = Actor(BangleFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphBangle") > 0)
				{
					banglesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								banglesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (banglesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		
		if (artifactsnearby) colorphase += 1;
		if (colorphase >= 3) colorphase = 3;
		if (kcdebug_timeserapharmor) Console.Printf("[%s] charmsfound: %d, watchesfound: %d, banglesfound: %d, artifactsnearby: %d, colorphase: %d [tic: %d]", GetClassName(), charmsfound, watchesfound, banglesfound, artifactsnearby, colorphase, gametic);
		return colorphase;
	}
	
	void CheckExistance()
	{
		actor playera = players[0].mo;
		string type = GetClassName();
		if (playera.CountInv(type)) Destroy();
	}
}

class TimeSeraphCharm : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'With great protection comes great responsibility...'\c-";
		Inventory.Icon "TSCHA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.1667;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return PickupMsg;
	}

	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSCHA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSCHB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSCHC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSCHD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Charm\c-");
			tagg.AppendFormat(": Said to allow the holder movement within frozen time if paired with the \c[gold]Pocket Watch\c-. Allows user to summon the \c[HeiwaDeluge]Time Seraph's armor\c- for protection. Using this will toggle \c[lightblue]level 1\c- protection on or off.");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSCH A 0 BRIGHT
			{
				actor playera = players[0].mo;
				invoker.CheckExistance();
				
				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSCH A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSCH B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSCH C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSCH D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("CharmEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && playera.CountInv("TimeSeraphCharm"))
				{
					if (playera.CountInv("TSArmorTier2"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/end",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",1);
					}
					else
					if (playera.CountInv("TSArmorTier1"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/end",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_SetInventory("TSArmorTier1",1);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/start",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
			}
			Fail;
	}
}

class TimeSeraphPocketWatch : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'With great responsibility, one can unlock a future self...'\c-";
		Inventory.Icon "TSPWA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSPWA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSPWB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSPWC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSPWD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????? ?????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Pocket Watch\c-");
			tagg.AppendFormat(": Said to allow its holder the Perception of Frozen Time. Upgrades \c[HeiwaDeluge]Time Seraph's Armor\c- to \c[green]Level 2\c- potency if used as an item and you possess the charm.");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSPW A 0 BRIGHT
			{
				invoker.CheckExistance();
				actor playera = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSPW A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSPW B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSPW C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSPW D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("PWatchEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && playera.CountInv("TimeSeraphCharm"))
				{
					if (playera.CountInv("TSArmorTier2"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/end",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/end",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					if (playera.CountInv("TSArmorTier1"))
					{
						playera.A_SetInventory("TSArmorTier2",1);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/start",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						playera.A_SetInventory("TSArmorTier2",1);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/start",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/start",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
			}
			Fail;
	}
}

class TimeSeraphBangle : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'The capacity to safely interpret which cannot usually be interpreted...'\c-";
		Inventory.Icon "TSBGA0";
		Tag "Time Seraph's Bangle: Creates a scanning visor over the eyes for various vision related perks when used, etc. Toggleable.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSBGA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSBGB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSBGC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSBGD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ??????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Bangle\c-");
			tagg.AppendFormat(": Creates a scanning visor over the eyes for various vision related perks when used. Toggleable. [boosts damage dealt by 12.5%%");
			tagg.AppendFormat(" and ignores up to ");
			if (playera.CountInv("TSArmorTier2") > 0) tagg.AppendFormat("62.5");
			else if (playera.CountInv("TSArmorTier1") > 0) tagg.AppendFormat("50");
			else tagg.AppendFormat("41.67");
			tagg.AppendFormat("%% of enemy defenses]");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSBG A 1 BRIGHT
			{
				invoker.CheckExistance();
				actor playera = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSBG A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSBG B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSBG C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSBG D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("BangleEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (playera.CountInv("TimeSeraphVisor"))
					{
						playera.A_SetInventory("TimeSeraphVisor",0);
						playera.A_SetInventory("KCPowerTorchBangle",0);
						playera.A_StopSound(558);
						playera.A_StartSound("tsbangle/start",558,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					{
						playera.A_SetInventory("TimeSeraphVisor",1);
						playera.A_SetInventory("KCPowerTorchBangle",1);
						playera.A_StopSound(558);
						playera.A_StartSound("tsbangle/end",558,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
			}
			Fail;
	}
}

// Doom Health Items
class Stimpack2 : CustomInventoryExt replaces Stimpack
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpstimpack\c-.";
		// Inventory.PickupSound "getstimpack";
	}
	
	States
	{
		Spawn:
			STIM A 0 NoDelay;
			STIM A -1;
			Stop;
		Success:
			TNT1 A 0
			{
				A_StartSound("gethealthkit",5);
				A_PickupMedicalItem(0.10,1.00);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}

class MiniBerserk : CustomInventoryExt
{
	default
	{
		//$Sprite "MBSKA0"
		//$Category Powerups
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crMini Berserk Pack\c-! Rip and Tear em' apart!";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			MBSK A 0 NoDelay;
			MBSK A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera)) // Heiwa's HP is able to reach 150% via [Mini-]Berserks
				{
					if (A_CheckHealthLevels(1.50)) 
					{
						A_PickupMedicalItem(0.375,1.50);
						A_StartSound("gethealthkit",5);
					}
				}
				else
				{
					if (A_CheckHealthLevels(1.00)) 
					{
						A_PickupMedicalItem(0.25,1.00);
						A_StartSound("gethealthkit",5);
					}
				}
				
				if (HeiwaPlayer(playera) && random(1,20) <= 1)
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					voicenm = "Heiwa/WantSomethingSweet"; //
					Console.Printf("\c[HeiwaDeluge]*groans hungrily* 'I waaaant somethiing sweeet!'\c-"); //
					playera.A_StopSound(CHAN_VOICE);
					playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}
				
				if (HeiwaPlayer(playera)) A_GiveBerserk(int(22.5 * TICRATE),false);
														 else A_GiveBerserk(int(33.75 * TICRATE),false);
				//A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

class Medikit2 : CustomInventoryExt replaces Medikit
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpmedikit\c-.";
		// Inventory.PickupSound "getmedikit";
	}
	
	States
	{
		Spawn:
			MEDI A 0 NoDelay;
			MEDI A -1;
			Stop;
		Success:
			TNT1 A 0
			{
				A_StartSound("gethealthkit",5);
				A_PickupMedicalItem(0.25,1.00);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) { return resolvestate("Success"); }
				return resolvestate(null); 
			}
			Fail;
	}
}

class Berserk2 : CustomInventoryExt replaces Berserk
{
	default
	{
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crBerserk Pack\c-! Rip and Tear em' apart!";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			PSTR A 0 NoDelay
			{
				A_CapsuleSpawn(16);
			}
		Idle:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

				if (HeiwaPlayer(playera)) // Heiwa's HP is able to reach 150% via [Mini-]Berserks
				{
					if (A_CheckHealthLevels(1.5)) 
					{
						A_PickupMedicalItem(1.5,1.5);
						A_StartSound("gethealthkit",5);
					}
				}
				else
				{
					if (A_CheckHealthLevels(1.0)) 
					{
						A_PickupMedicalItem(1.0,1.0);
						A_StartSound("gethealthkit",5);
					}
				}
				if (HeiwaPlayer(playera) && random(1,16) <= 1)
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					voicenm = "Heiwa/WantSomethingSweet"; //
					Console.Printf("\c[HeiwaDeluge]*groans hungrily* 'I waaaant somethiing sweeet!'\c-"); //
					playera.A_StopSound(CHAN_VOICE);
					playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}
				
				if (HeiwaPlayer(playera)) A_GiveBerserk(int(90 * TICRATE),false);
														 else A_GiveBerserk(int(135 * TICRATE),false);
				//A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

// Doom Powerups
class HealthBonus2 : CustomInventoryExt replaces HealthBonus
{
	default
	{
		//$Sprite "BON1A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus";
		Inventory.PickupMessage "Picked up a \cnhealth bonus\c-.";
	}
	
	States
	{
		Spawn:
			BON1 A 0 NoDelay
			{
				if (bDROPPED)
				{
					if (random(1,1024) <= 1)
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = true;
						if (bCOUNTITEM) level.total_items--;
						self.Destroy();
					}
				}
				else
				{
					if (random(1,1024) <= random(6,10))
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = false;
						if (bCOUNTITEM) level.total_items--;
						self.Destroy();
					}
					else
					{
						A_CapsuleSpawn(4096); // 16384
					}
				}
			}
		Idle:
			BON1 AABBCCDDCCBB 3 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0
			{
				//A_EmulateGiveHealthBonusACI(1,8,100,1);
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int HealthValue;
				int MaxHealthTrue;
				if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int MaxHealthLimit = MaxHealthTrue * 2;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue * 0.01;
					if (HealthValue < 1) HealthValue = 1;
				
					// if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					//Console.Printf("HealthValue: %d", HealthValue);
		
					playera.health = CurrentHealth;
				}
			}
			Stop;
	}
}

class HealthBonusBig : CustomInventoryExt
{
	default
	{
		//$Sprite "BON3A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		Scale 1.125;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus" ;
		Inventory.PickupMessage "Picked up a \cnlarge health bonus\c-.";
	}
	
	States
	{
		Spawn:
			BON3 A 0 NoDelay
			{
				A_CapsuleSpawn((4096/random(6,10))); // 16384
			}
			goto Float;
		Float:
			BON3 ABCDCB 6 BRIGHT;
			Loop;
		Pickup:
			NULL A 0
			{
				//A_EmulateGiveHealthBonusACI(10,8,100,1); 
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int HealthValue;
				int MaxHealthTrue;
				if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int MaxHealthLimit = MaxHealthTrue * 2;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue * 0.10;
					if (HealthValue < 10) HealthValue = 10;
				
					// if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					//Console.Printf("HealthValue: %d", HealthValue);
		
					playera.health = CurrentHealth;
				}
			}
			Stop;
	}
}

class Soulsphere2 : CustomInventoryExt replaces SoulSphere
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cnSoulSphere!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SOUL ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int HealthValue;
				int MaxHealthTrue;
				if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int MaxHealthLimit = MaxHealthTrue * 2;
				int oldhealthratio;
				if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
				if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
				if (playera.CountInv("LowHealth")) oldhealthratio = 2;
				if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue;
					//if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
		
					playera.health = CurrentHealth;
				}
				
				if (HeiwaPlayer(playera) && 
						(oldhealthratio == 3 || 
						(oldhealthratio == 2 && random(1,25) <= 21) || 
						(oldhealthratio == 1 && random(1,25) <= 9)))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					voicenm = "Heiwa/ReflievedSigh"; //
					Console.Printf("\c[HeiwaDeluge]-sighs in relief-\c-"); //
					playera.A_StopSound(CHAN_VOICE);
					playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}
			}
			Stop;
	}
}

class MiniSoulsphere : CustomInventoryExt
{
	default
	{
		Height 16;
		Radius 8;
		Scale 0.5;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cnMiniature SoulSphere!";
		Inventory.PickupSound "misc/p_pkup2";
	}
	
	States
	{
		Spawn:
			SOUL ABCD 4 Bright
			{
				A_SetTics(random(3,6));
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int HealthValue;
				int MaxHealthTrue;
				if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int MaxHealthLimit = MaxHealthTrue * 2;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = (MaxHealthTrue * 0.5);
					//if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
		
					playera.health = CurrentHealth;
				}
			}
			Stop;
	}
}

class Megasphere2 : CustomInventory replaces MegaSphere
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cjMegaSphere!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			MEGA ABCD 6 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int HealthValue;
				int MaxHealthTrue;
				if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
				int MaxHealthLimit = MaxHealthTrue * 2;
				int HealAmount;
				int ptemp1, ptemp2;
				int oldhealthratio;
				if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
				if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
				if (playera.CountInv("LowHealth")) oldhealthratio = 2;
				if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealAmount = MaxHealthLimit;
					//if ((dvds_showdamagemessages & 1) && HealAmount > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealAmount);
					CurrentHealth += HealAmount;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
				
					playera.health = CurrentHealth;
				}
				if (HeiwaPlayer(playera) && 
						(oldhealthratio == 3 || 
						(oldhealthratio == 2 && random(1,25) <= 21) || 
						(oldhealthratio == 1 && random(1,25) <= 9)))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					voicenm = "Heiwa/ReflievedSigh"; //
					Console.Printf("\c[HeiwaDeluge]-sighs in relief-\c-"); //
					playera.A_StopSound(CHAN_VOICE);
					playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}

				playera.A_GiveInventory("KCBlueArmorForMegasphere", 1); //A_MegaSphereArmor();
			}
			Stop;
	}
}

class RadSuit2 : RadSuit replaces RadSuit
{
	default
	{
		Height 46;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[lightgreen]Radiation Shielding Suit";
		Inventory.PickupSound "powerups/suit";
		Powerup.Type "KCPowerIronFeet";
	}

	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
	}
}

class BlurSphere2 : CustomInventoryExt replaces BlurSphere
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+VISIBILITYPULSE
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		RenderStyle "Translucent";
		Inventory.PickupMessage "\c[brick]Invisibility!";
		Inventory.PickupSound "powerups/invis";
	}
	
	States
	{
		Spawn:
			PINS ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
				A_GiveInventory("KCPowerInvisibility");
			}
			Stop;
	}
}

// Invuln Sphere
class InvulnerabilitySphere2 : CustomInventoryExt replaces InvulnerabilitySphere
{
	int timestrength;
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[green]Invulnerability!";
		Inventory.PickupSound "powerups/invuln";
	}
	
	States
	{
		Spawn:
			PINV A 0 Bright NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera))
				{
					int basechance = randompick(20,24,24,28,28,28,28,32,32,32,32,32,32,32,32,32,32,32,32,36,36,36,36,40,40,44);
					if (bDROPPED) basechance *= randompick(3,4,4,4,4,4,4,4,5);
					if (random(1,basechance) <= 1)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("KampoulSphere",flags:SXF_NOCHECKPOSITION,tid:tid);
						if (mo) 
						{
							mo.bDROPPED = bDROPPED;
							KampoulSphere kmpl;
							kmpl = KampoulSphere(mo);
						}
					}
				}
			}
			goto Idle;
		Idle:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					Console.Printf("\c[HeiwaDeluge]'That's a -BIG- help!'\c-"); //
					A_StartSound("Heiwa/ABigHelp",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				
				A_GiveInventory("KCPowerInvuln",1);
				// If spawned from a KampoulSphere while playing as Doomguy, the pickup should give 4x invuln time overall V:
				if (invoker.timestrength > 0 && KCPlayer(playera))
				{
					for (int i = 0; i < invoker.timestrength; i++) { A_GiveInventory("KCPowerInvuln",1); }
				}
			}
			Stop;
	}
}

class Infrared2 : PowerupGiver replaces Infrared
{
	Default
	{
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Powerup.Type "KCPowerLightAmp";
		Inventory.PickupMessage "\c[white]Light Amplification Visor!";
		Inventory.PickupSound "powerups/light";
	}
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
	}
}

class AllmapNew : MapRevealer replaces AllMap
{
	Default
	{
		+COUNTITEM
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "\c[green]Computer Area Map";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		GoAwayAndDie();
		if (toucher) toucher.A_SetInventory("PowerScannerKC",1);
		return true;
	}

	States
	{
		Spawn:
			PMAP ABCDCB 6 Bright;
			Loop;
	}
}

class SpreadSphere1 : CustomInventoryExt
{
	default
	{
		//$Category KC Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cfSpreader Sphere\c-";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("KCPowerSpread1");
			}
			Stop;
	}
}

class SpreadSphere2 : CustomInventoryExt
{
	default
	{
		//$Category KC Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cfSpreader Sphere Mk. 2!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH EFGH 6 Bright; // ABCD 3 Bright
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("KCPowerSpread2");
			}
			Stop;
	}
}

//***********
//** Armor **
//***********
// A specialized armor class for various armor types to allow future extra functions/features, maybe? V:
class KCArmor : BasicArmor
{
	Default
	{
		Inventory.Amount 0;
		+Inventory.KEEPDEPLETED
	}
	
	override void Tick()
	{
		Armor.Tick();
		AbsorbCount = 0;
		if (!Icon.isValid())
		{
			String icontex = gameinfo.ArmorIcon1;

			if (SavePercent >= gameinfo.Armor2Percent && gameinfo.ArmorIcon2.Length() != 0)
				icontex = gameinfo.ArmorIcon2;

			if (icontex.Length() != 0)
				Icon = TexMan.CheckForTexture (icontex, TexMan.TYPE_Any);
		}
	}
	
	override Inventory CreateCopy (Actor other)
	{
		// BasicArmor that is in use is stored in the inventory as BasicArmor.
		// BasicArmor that is in reserve is not.
		let copy = KCArmor(Spawn("KCArmor"));
		copy.SavePercent = SavePercent != 0 ? SavePercent : 0.33335;	// slightly more than 1/3 to avoid roundoff errors.
		copy.Amount = Amount;
		copy.MaxAmount = MaxAmount;
		copy.Icon = Icon;
		copy.BonusCount = BonusCount;
		copy.ArmorType = ArmorType;
		copy.ActualSaveAmount = ActualSaveAmount;
		GoAwayAndDie ();
		return copy;
	}
	
	override bool HandlePickup(Inventory item)
	{
		return item.GetClass() == 'KCArmor';
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

		string infl, sour, vict;
		if (owner == null) vict = "NONE"; else vict = owner.GetClassName();
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE"; else sour = source.GetClassName();
		int saved;
		double initSavePercent = SavePercent;
		
		KCPlayerPawn PlayPawn;
		PlayPawn = KCPlayerPawn(owner);
		if (PlayPawn)
		{
			SavePercent *= (1.0 - PlayPawn.PlayerArmorIgnoreFactor);
			if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]SavePercent:\c- \c[brick]%.4f\c- \c[gold][%.4f]\c", SavePercent, initSavePercent);
		}
		
		if (!DamageTypeDefinition.IgnoreArmor(damageType))
		{
			int full = MAX(0, MaxFullAbsorb - AbsorbCount);
			
			if (damage < full)
			{
				saved = damage;
			}
			else
			{
				saved = full + int((damage - full) * SavePercent);
				if (MaxAbsorb > 0 && saved + AbsorbCount > MaxAbsorb) 
				{
					saved = MAX(0,  MaxAbsorb - AbsorbCount);
				}
			}
			
			int oldsaved = saved;
			double savebase = 0.0;
			if (MiscItem)
			{
				if (savebase >= 0.75) savebase = 0.75;
			}
			saved *= (1.0 - savebase);
			if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post IP]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);

			if (random(1,16) <= (random(7,9) + (8 - (skill * 2)))) 
			{
				oldsaved = saved;
				savebase = 0.0;
				savebase *= frandompick(0.5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				if (savebase >= 0.25) savebase = 0.25;
				saved *= (1.0 - savebase);
				if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Special]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}
			
			if (MiscItem)
			{
				savebase = 0.00;
				if (MiscItem)
				{
					if (savebase >= 0.75) savebase = 0.75;
				}
				saved *= (1.0 - savebase);
				if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Wine]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}

			if (Amount < saved)
			{
				saved = Amount;
			}
			newdamage -= saved;
			Amount -= saved;
			AbsorbCount += saved;
			if (Amount == 0)
			{
				// The armor has become useless
				SavePercent = 0;
				ArmorType = 'None'; // Not NAME_BasicArmor.
				// Now see if the player has some more armor in their inventory
				// and use it if so. As in Strife, the best armor is used up first.
				KCArmorPickup best = null;
				Inventory probe = Owner.Inv;
				while (probe != null)
				{
					let inInv = KCArmorPickup(probe);
					if (inInv != null)
					{
						if (best == null || best.SavePercent < inInv.SavePercent)
						{
							best = inInv;
						}
					}
					probe = probe.Inv;
				}
				if (best != null)
				{
					Owner.UseInventory(best);
				}
			}
			damage = newdamage;
		}
		SavePercent = initSavePercent;

		// Once the armor has absorbed its part of the damage, then apply its damage factor, if any, to the player
		if ((damage > 0) && (ArmorType != 'None')) // KCArmor is not going to have any damage factor, so skip it.
		{
			newdamage = ApplyDamageFactors(ArmorType, damageType, damage, damage);
		}
	}
}

class KCArmorBonus : BasicArmorBonus
{
	override Inventory CreateCopy (Actor other)
	{
		let copy = KCArmorBonus(Super.CreateCopy(other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxSaveAmount = MaxSaveAmount;
		copy.BonusCount = BonusCount;
		copy.BonusMax = BonusMax;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}
	
	override bool Use (bool pickup)
	{
		let armor = KCArmor(Owner.FindInventory("KCArmor"));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn("KCArmor"));
			armor.BecomeItem ();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}

		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
	
	override void Tick()
	{
		super.Tick();
		Double Dbl;
		Sector Sec;
		[Dbl,Sec] = CurSector.LowestFloorAt(Pos.XY);
		if (pos.z <= Dbl && !owner)
		{
			if (cursector.damagetype == 'InstantDeath' ||
					cursector.damagetype == 'Massacre')
			{
				if (bCOUNTITEM) level.total_items--;
				Spawn("ItemFallSpot", (pos.x, pos.y, pos.z), NO_REPLACE);
				if (kcdebug_itempitfalls) Console.Printf("%s [%p] \c[green](KCArmorBonus)\c- fell into a bottomless pit! [tic: %d]", GetClassName(), self, gametic);
				Destroy();
			}
		}
	}
	
	Default
	{
		+Inventory.AUTOACTIVATE
		+Inventory.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Armor.SavePercent 33.335;
	}
}

class KCArmorPickup : BasicArmorPickup
{
	override Inventory CreateCopy (Actor other)
	{
		let copy = KCArmorPickup(Super.CreateCopy (other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}

	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";

		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
}

class ArmorBonus2 : KCArmorBonus replaces ArmorBonus
{
	mixin HUDRecovery;
	int user_type;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Picked up an \c[green]armor bonus\c-.";
		Inventory.Icon "ARM1A0";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 200;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupSound "getarmorbonus";
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return msg;
	}

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * 0.01);
			if (SaveAmount < 1) SaveAmount = 1;
			if (MiscItem.darmortype <= 1) MaxSaveAmount = (MiscItem.MaxHealthTrue * 1);
			if (MiscItem.darmortype >= 2) MaxSaveAmount = (MiscItem.MaxHealthTrue * 2);
		}
		else
		{
			SaveAmount = 1;
			MaxSaveAmount = 200;
		}
		KCArmorBonus.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			if (kcdebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			/*
			if (PrevArmorType == 0)
			{
				armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
				if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
			*/
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (kcdebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		//if (armordiff) A_RecoverHUD(armordiff, 1, true);
		
		return true;
	}
	
	
	action void A_CapsuleSpawn(int basechance)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (HeiwaPlayer(playera))
		{
			if (!bDROPPED && random(1,basechance) <= 1)
			{
				int user_type = random(1,20);
				string spawntype;
				if (user_type >= 1 && user_type <= 4) spawntype = "VitalCapsule";
				if (user_type >= 5 && user_type <= 8)  spawntype = "SpeedCapsule";
				if (user_type >= 9 && user_type <= 12) spawntype = "IQCapsule";
				if (user_type >= 13 && user_type <= 16) spawntype = "GutsCapsule";
				if (user_type >= 17 && user_type <= 20) spawntype = "LuckCapsule";
				A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				if (bCOUNTITEM) level.total_items--;
				self.Destroy();
			}
		}
	}
	
	States
	{
		Spawn:
			BON2 A 0 NoDelay
			{
				if (bDROPPED)
				{
					if (random(1,1024) <= 1)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("ArmorBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = true;
						if (bCOUNTITEM) level.total_items--;
						self.Destroy();
					}
				}
				else
				{
					if (random(1,1024) <= random(6,10))
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("ArmorBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = false;
						if (bCOUNTITEM) level.total_items--;
						self.Destroy();
					}
					else
					{
						A_CapsuleSpawn(4096); // 16384
					}
				}
			}
		Idle:
			BON2 ABCDCB 6;
			Loop;
	}
}

class ArmorBonusSilent : ArmorBonus2
{
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
			if (kcdebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
			/*
			if (PrevArmorType == 0)
			{
				if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M0]: %.4f", armor.SavePercent);
			}
			if (PrevArmorType == 1)
			{
				if (armor.Amount > (ArmorItemMax1-1))
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M1]: %.4f", armor.SavePercent);
				}
				else 
				{
					if (armor.Amount >= ((ArmorItemMax1*0.5)-1))
					{
						if (armor.Icon != TexMan.checkForTexture("KGWNI0")) armor.Icon = TexMan.checkForTexture("KGWNI0");
					}
					//armor.SavePercent = clamp(50, 0, 100) / 100;
					armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M1-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 2)
			{
				if (armor.Amount > (ArmorItemMax2-1))
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M2]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(75.0, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNJ0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M2-1]: %.4f", armor.SavePercent);
				}
			}
			else
			if (PrevArmorType == 3)
			{
				if (armor.Amount > (ArmorItemMax3-1))
				{
					armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNL0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M3]: %.4f", armor.SavePercent);
				}
				else
				{
					armor.SavePercent = clamp(87.5, 0, 100.0) / 100.0;
					armor.Icon = TexMan.checkForTexture("KGWNK0");
					if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M3-1]: %.4f", armor.SavePercent);
				}
			}
			if (PrevArmorType == 4)
			{
				armor.SavePercent = clamp(93.75, 0, 100.0) / 100.0;
				armor.Icon = TexMan.checkForTexture("KGWNL0");
				if (kcdebug_armordisplays) Console.Printf("armor.SavePercent [M4]: %.4f", armor.SavePercent);
			}
			*/
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (kcdebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		
		return true;
	}
}

class ArmorBonusBig : ArmorBonus2
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "getarmorbonus";
		Inventory.Icon "BON4A0";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupmessage "Picked up a \cdsuper armor bonus\c-.";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 10;
		Armor.MaxSaveAmount 200;
		Inventory.PickupSound "getarmorbonus";
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * 0.10);
			if (SaveAmount < 10) SaveAmount = 10;
			if (MiscItem.darmortype <= 1) MaxSaveAmount = (MiscItem.MaxHealthTrue * 1);
			if (MiscItem.darmortype >= 2) MaxSaveAmount = (MiscItem.MaxHealthTrue * 2);
		}
		else
		{
			SaveAmount = 10;
			MaxSaveAmount = 200;
		}
		KCArmorBonus.Tick();
	}
	
	States
	{
		Spawn:
			BON4 A 0 NoDelay
			{
				A_CapsuleSpawn((4096/random(6,10))); // 16384
			}
			goto Idle;
		Idle:
			BON4 AABBCCDDCCBB 3;
			Loop;

	}
}

class KCGreenArmor : KCArmorPickup replaces GreenArmor
{
	mixin HUDRecovery;
	mixin TSASpawnCheck;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "$GOTARMOR"; // "Picked up the armor.";
		Inventory.Pickupsound "GetArmorFull";
		Inventory.Icon "ARM1A0";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 100;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue);
		}
		else
		{
			SaveAmount = 100;
		}
		super.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);
		
		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	int cycle;
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int timefreezes;
				if (MiscItem) timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
				int basechance = (kc_inventorydroprate5 * 0.25);
				double skillmult = 1;
				if (skill <= 0) skillmult = 0.667;
				if (skill == 1) skillmult = 0.8;
				if (skill == 2) skillmult = 1;
				if (skill == 3) skillmult = 1.25;
				if (skill >= 4) skillmult = 1.5;

				if (!bDROPPED && timefreezes)
				{
					double basediv = 0.5;
					double basediv2 = 0.125;
					if ((playera.CountInv("KCTimeFreezer1") ||
							 playera.CountInv("KCTimeFreezer2") ||
							 playera.CountInv("KCTimeFreezer3")))
					{
						basediv = 0.5;
						basediv2 = 0.125;
					}
					else
					{
						basediv = 0.9375;
						basediv2 = 0.25;
					}
					if (MiscItem.TimeArmorRelicsOwned >= 1) 
					{
						basediv *= 2;
						basediv2 *= 0.5;
					}
					if (MiscItem.TimeArmorRelicsOwned >= 2) 
					{
						basediv *= 2;
						basediv2 *= 0.5;
					}
					if (timefreezes >= 20)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 40)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 80)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 160)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 320)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 640)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 1280)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 2560)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 5120)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 10240)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 20480)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					int rollrand = random(1,basechance);
					if (rollrand <= 1)
					{
						A_TSASpawnMessage();
						Destroy();
					}
				}
				bNOTIMEFREEZE = false;
			}
		Idle:
			ARM1 A 6 
			{
				if (cycle % 2 == 1) A_SetTics(7);
			}
			ARM1 B 7 Bright
			{
				if (cycle % 2 == 1) A_SetTics(6);
			}
			ARM1 B 0
			{
				cycle++;
			}
			Loop;
	}
}

class KCBlueArmorForMegasphere : KCArmorPickup replaces BlueArmorForMegasphere
{
	default
	{
		Armor.SavePercent 50;
		Armor.SaveAmount 200;
	}
	
	override void BeginPlay()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * 2);
		}
		else
		{
			SaveAmount = 200;
		}
		super.BeginPlay();
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * 2);
		}
		else
		{
			SaveAmount = 200;
		}
		super.Tick();
	}
}

class KCBlueArmor : KCArmorPickup replaces BlueArmor
{
	mixin HUDRecovery;
	mixin TSASpawnCheck;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "$GOTMEGA"; // "Picked up the MegaArmor!";
		Inventory.Icon "ARM2A0";
		Inventory.Pickupsound "GetArmorFull";
		Armor.SavePercent 50;
		Armor.SaveAmount 200;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * 2);
		}
		else
		{
			SaveAmount = 200;
		}
		super.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);
		
		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int timefreezes;
				if (MiscItem) timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
				int basechance = (kc_inventorydroprate5 * 0.125);
				double skillmult = 1;
				if (skill <= 0) skillmult = 0.667;
				if (skill == 1) skillmult = 0.8;
				if (skill == 2) skillmult = 1;
				if (skill == 3) skillmult = 1.25;
				if (skill >= 4) skillmult = 1.5;

				if (!bDROPPED && timefreezes)
				{
					double basediv = 0.5;
					double basediv2 = 0.125;
					if ((playera.CountInv("KCTimeFreezer1") ||
							 playera.CountInv("KCTimeFreezer2") ||
							 playera.CountInv("KCTimeFreezer3")))
					{
						basediv = 0.5;
						basediv2 = 0.125;
					}
					else
					{
						basediv = 0.9375;
						basediv2 = 0.25;
					}
					if (MiscItem.TimeArmorRelicsOwned >= 1) 
					{
						basediv *= 2;
						basediv2 *= 0.5;
					}
					if (MiscItem.TimeArmorRelicsOwned >= 2) 
					{
						basediv *= 2;
						basediv2 *= 0.5;
					}
					if (timefreezes >= 20)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 40)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 80)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 160)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 320)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 640)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 1280)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 2560)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 5120)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 10240)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					if (timefreezes >= 20480)
					{
						basechance *= basediv;
						basechance -= (timefreezes * basediv2);
					}
					int rollrand = random(1,basechance);
					if (rollrand <= 1)
					{
						A_TSASpawnMessage();
						Destroy();
					}
				}
				bNOTIMEFREEZE = false;
			}
		Idle:
			ARM2 A 6;
			ARM2 B 6 Bright;
			Loop;
	}
}

class BackPackTier1 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class BackPackTier2 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class Backpack2 : CustomInventoryExt replaces Backpack
{
	default
	{
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Height 26;
		Inventory.PickupMessage "Picked up a \cebackpack full of ammo\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	States
	{
		Spawn:
			BPAK A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!bDROPPED)
				{
					if (playera.CountInv("BackpackTier2"))
					{
						if (random(1,9) <= 1)
						{
							A_SpawnItemEx("CombatPack");
							Destroy();
						}
					}
					else
					if (playera.CountInv("BackpackTier1"))
					{
						if (random(1,24) <= 1)
						{
							A_SpawnItemEx("CombatPack");
							Destroy();
						}
					}
					else
					{
						if (random(1,64) <= 1)
						{
							A_SpawnItemEx("CombatPack");
							Destroy();
						}
					}
				}
			}
		Idle:
			BPAK A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BackPackTier1", 1);
				A_StartSound("GetBullets", 5);
				A_StartSound("GetShells", 6);
				A_StartSound("GetRockets", 7);
				A_StartSound("GetCells", 8);
				A_StartSound("gettgunclip", 9);
				A_StartSound("getdevsmall", 10);
				A_StartSound("getsawsmall", 11);
				A_StartSound("getxbowpouch", 12);
				A_StartSound("getteslasmall", 13);

				A_GiveInventory("Shell", 4);
				A_GiveInventory("Clip", 10);
				A_GiveInventory("RocketAmmo", 1);
				A_GiveInventory("Cell", 20);
				A_GiveInventory("Saws", 3);
				A_GiveInventory("MiniRockets", 10);
				A_GiveInventory("ImpalerBolts", 5);
				A_GiveInventory("Bolts", 50);
				A_GiveInventory("TommAmmo", 50);
			}
			Stop;
	}
}

class CombatPack : CustomInventoryExt
{
	default
	{
		Height 26;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You got a combat pack";
		Inventory.PickupSound "misc/i_pkup";
	}
	
	States
	{
		Spawn:
			CBPK A -1;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("getbulletbox", 5);
				A_StartSound("getshellbox", 6);
				A_StartSound("getrocketbox", 7);
				A_StartSound("getcellpack", 8);
				A_StartSound("gettgunset", 9);
				A_StartSound("getdevbox", 10);
				A_StartSound("getsawbox", 11);
				A_StartSound("getxbowbox", 12);
				A_StartSound("getteslabox", 13);
				
				A_GiveInventory("Backpack", 1);
				A_GiveInventory("BackPackTier1", 1);
				A_GiveInventory("BackPackTier2", 1);
				A_GiveInventory("Shell", 16);
				A_GiveInventory("Clip", 40);
				A_GiveInventory("RocketAmmo", 4);
				A_GiveInventory("Cell", 80);
				A_GiveInventory("Saws", 12);
				A_GiveInventory("MiniRockets", 40);
				A_GiveInventory("ImpalerBolts", 20);
				A_GiveInventory("Bolts", 200);
				A_GiveInventory("TommAmmo", 200);
			}
			//Please edit this with the custom ammo types of your mod.
			//Make it give a large pickup worth of ammo
			//but subtract that given from the backpack (so it gives exactly one large pickup worth)
			Stop;
	}
}

class DoubleSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Damage!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			DDMG ABCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("PowerDouble");
				A_StartSound("buff/atkup",205);
			}
			Stop;
	}
}

class GuardSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Defense!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			GUAD ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("PowerGuard");
				A_StartSound("buff/defup",205);
			}
			Stop;
	}
}

class HasteSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Speed Up!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			HAST ABC 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("PowerHaste");
				A_StartSound("buff/spdup",205);
			}
			Stop;
	}
}
class BaseAmmoSpawner : KCBaseZSC
{
	void A_AmmoDrops(string droptyp = "ClipNew", int basedroprate = 200, double dropfactor = 0.125)
	{
		double spread1 = 1.0;
		double spread2 = 1.25;
		double spread3 = 1.5;
		double spread4 = 1.75;
		double spread5 = 2.0;
		int droprate = basedroprate;
		if (bDROPPED) 
		{
			droprate *= dropfactor;
			spread1 *= frandom(1.25,1.5);
			spread2 *= frandom(1.25,1.5);
			spread3 *= frandom(1.25,1.5);
			spread4 *= frandom(1.25,1.5);
			spread5 *= frandom(1.25,1.5);
		}
		if (Random(1,1000) <= 1000) { A_SpawnItemEx(droptyp,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
		if (Random(1,1000) <= (droprate*1.00)) { A_SpawnItemEx(droptyp,frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.25)) { A_SpawnItemEx(droptyp,frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.05)) { A_SpawnItemEx(droptyp,frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.01)) { A_SpawnItemEx(droptyp,frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.002)) { A_SpawnItemEx(droptyp,frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),0,SXF_NOCHECKPOSITION,0); }
	}
}

class ClipNew : Clip // replaces Clip
{
	default
	{
		Inventory.Pickupsound "getbulletclip";
		Inventory.PickupMessage "Picked up \cua clip of bullets\c-!";
		Inventory.Amount 10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TommyGun"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("TommAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ClipBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CLIP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipSpawner : BaseAmmoSpawner replaces Clip
{
	default
	{
		//$Sprite "CLIPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ClipNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ClipBoxNew : ClipBox // replaces ClipBox
{
	default
	{
		Inventory.Pickupsound "getbulletbox";
		Inventory.PickupMessage "Picked up \cua box of bullets\c-!";
		Inventory.Amount 50;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TommyGun"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("TommAmmoBig",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ClipNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			AMMO A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipBoxSpawner : BaseAmmoSpawner replaces ClipBox
{
	default
	{
		//$Sprite "AMMOA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ClipBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellNew : Shell // replaces Shell
{
	default
	{
		Inventory.Pickupsound "getfourshells";
		Inventory.PickupMessage "Picked up \cusome shotgun shells\c-!";
		Inventory.Amount 4;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("ImpalerXBow"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("ImpalerBolts",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ShellBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SHEL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellSpawner : BaseAmmoSpawner replaces Shell
{
	default
	{
		//$Sprite "SHELA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ShellNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellBoxNew : ShellBox // replaces ShellBox
{
	default
	{
		Inventory.Pickupsound "getshellbox";
		Inventory.PickupMessage "Picked up a \cubox of shotgun shells\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("ImpalerXBow"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("ImpalerBoltsBig",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ShellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SBOX A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellBoxSpawner : BaseAmmoSpawner replaces ShellBox
{
	default
	{
		//$Sprite "SBOXA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ShellBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketAmmoNew : RocketAmmo // replaces RocketAmmo
{
	default
	{
		Inventory.Pickupsound "getsinglerocket";
		Inventory.PickupMessage "Picked up \cua single rocket\c-!";
		Inventory.Amount 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("Devastator"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRockets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("RocketBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			ROCK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketSpawner : BaseAmmoSpawner replaces RocketAmmo
{
	default
	{
		//$Sprite "ROCKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("RocketAmmoNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketBoxNew : RocketBox // replaces RocketBox
{
	default
	{
		Inventory.Pickupsound "getrocketbox";
		Inventory.PickupMessage "Picked up \cua box of rockets\c-!";
		Inventory.Amount 5;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("Devastator"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRocketBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("RocketAmmoNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			BROK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketBoxSpawner : BaseAmmoSpawner replaces RocketBox
{
	default
	{
		//$Sprite "BROKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("RocketBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellNew : Cell // replaces Cell
{
	default
	{
		Inventory.Pickupsound "getsmallcells";
		Inventory.PickupMessage "Picked up \cua small energy cell\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TeslaCannon"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("Bolts",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("CellPackNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellSpawner : BaseAmmoSpawner replaces Cell
{
	default
	{
		//$Sprite "CELLA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("CellNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellPackNew : CellPack // replaces CellPack
{
	default
	{
		Inventory.Pickupsound "getcellpack";
		Inventory.PickupMessage "Picked up \cua large energy cell\c-!";
		Inventory.Amount 100;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TeslaCannon"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("BoltsLarge",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("CellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellPackSpawner : BaseAmmoSpawner replaces CellPack
{
	default
	{
		//$Sprite "CELPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("CellPackNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class StatCaspuleBase : CustomInventoryExt
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		Scale 0.5;
		Radius 12;
		Height 24;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "Capsule/Pickup";
	}
}

class VitalCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnVitality Capsule\c-! \c[brick]Max HP permanently increased by 15!\c-";
	}
	
	States
	{
		Spawn:
			CAPS V -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem)
				{
					MiscItem.VitalityPieces++;
					globalvars.VitalityPieces++;
				}
			}
			Stop;
	}
}

class IQCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up an \cnIQ Capsule\c-! \c[brick]Max PP permanently increased by 5!\c-";
	}
	
	States
	{
		Spawn:
			CAPS I -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem)
				{
					MiscItem.PlayerIQ++;
					globalvars.PlayerIQ++;
				}
			}
			Stop;
	}
}

class GutsCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnGuts Capsule\c-! \c[brick]Critical Hit Chance permenantly increased slightly!\c-";
	}
	
	States
	{
		Spawn:
			CAPS G -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem)
				{
					MiscItem.PlayerGUTS++;
					globalvars.PlayerGUTS++;
				}
			}
			Stop;
	}
}

class SpeedCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnSpeed Capsule\c-! \c[brick]Speed permanently increased by 1!\c-";
	}
	
	States
	{
		Spawn:
			CAPS S -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem)
				{
					MiscItem.PlayerSPD++;
					globalvars.PlayerSPD++;
				}
			}
			Stop;
	}
}

class LuckCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnLuck Capsule\c-! \c[brick]Luck permanently increased by 1!\c-";
	}
	
	States
	{
		Spawn:
			CAPS L -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem)
				{
					MiscItem.PlayerLUCK++;
					globalvars.PlayerLUCK++;
				}
			}
			Stop;
	}
}