class KCE1M1FirstMarineDrop : CustomInventoryExt
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera))
				{
					string spawntype = "Glock21";
					int initspawn = randompick(5,6,6,7,7,7,8);
					int initspawn2 = randompick(8,8,8,8,9,9,10);
					double xoff, yoff, zoff, xvel, yvel, zvel;
					xoff = 64.0;
					yoff = 64.0;
					zoff = 0.0;
					xvel = 0.0;
					yvel = 0.0;
					zvel = 0.0;
					if (random(1,(initspawn2*4)) <= (initspawn/2))
					{
						spawntype = "TommyGun";
						if (random(1,initspawn2) >= initspawn) spawntype = "RiotGun";
						xoff = 2.4;
						yoff = 2.4;
						zoff = 0.0;
						xvel = 0.4;
						yvel = 0.4;
						zvel = 0.0;
					}
					else
					{
						spawntype = "Glock21";
						if (random(1,initspawn2) >= initspawn) spawntype = "BlasterPistol";
					}
					A_SpawnItemEx(spawntype,frandom(frandom(-xoff*0.5,-xoff*1.0),frandom(xoff*0.5,xoff*1.0)),frandom(frandom(-yoff*0.5,-yoff*1.0),frandom(yoff*0.5,yoff*1.0)),frandom((zoff*0.5),(zoff*1.5)),frandom(-xvel,xvel),frandom(-yvel,yvel),frandom((zvel*0.5),(zvel*1.5)),0,SXF_NOCHECKPOSITION,0,tid);
				}
			}
			stop;
	}
}

class KCInvBarItem : CustomInventoryExt
{
	default
	{
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.KEEPDEPLETED
	}
}

class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB;
		+NOTIMEFREEZE;
		-BLOCKEDBYSOLIDACTORS;
	}
}

class CustomInventoryExt : CustomInventory
{
	const HeiwaHPBoostTimerMult = 2.5;
	const HeiwaPPBoostTimerMult = 1.75;
	const HeiwaMPBoostTimerMult = 1.75;
	const HealItemBaseHPBoostRatio = 25;
	const HealItemBaseHPBoostRatio2 = 37.5;
	const HealItemBasePPBoostRatio = 12.5;
	const HealItemBasePPBoostRatio2 = 18.75;
	const HealItemBaseMPBoostRatio = 12.5;
	const HealItemBaseMPBoostRatio2 = 18.75;
	
	/*
	mixin InvWeaponShare;
	mixin HUDRecovery;
	mixin TimerCheck;
	*/
	mixin SecretChecker;
	mixin ItemFallSpotCheck;
	string texname;
	int user_type;
	
	int PickupChannel;
	int PickupChannel2;
	int PickupChannel3;
	string PickupSndHeiwa;
	string PickupSnd2;
	string PickupSnd2Heiwa;
	string PickupSnd3;
	string PickupSnd3Heiwa;
	property PickupChan1: PickupChannel;
	property PickUpChan2: PickupChannel2;
	property PickUpChan3: PickupChannel3;
	property PickupSound2: PickupSnd2;
	property PickupSound3: PickupSnd3;
	property PickupSound1Heiwa: PickupSndHeiwa;
	property PickupSound2Heiwa: PickupSnd2Heiwa;
	property PickupSound3Heiwa: PickupSnd3Heiwa;
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return PickupMsg;
	}
	
	override void PlayPickupSound(Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		
		if (kcdebug_pickupsounds) 
		{
			Console.Printf("PickupSound: %s", PickupSound);
			Console.Printf("PickupSndHeiwa: %s", PickupSndHeiwa);
			Console.Printf("PickupSnd2: %s", PickupSnd2);
			Console.Printf("PickupSnd2Heiwa: %s", PickupSnd2Heiwa);
			Console.Printf("PickupSnd3: %s", PickupSnd3);
			Console.Printf("PickupSnd3Heiwa: %s", PickupSnd3Heiwa);
		}
		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}
		
		maskpitch = 1.00;
		if (PickupSound != "" ||
				PickupSndHeiwa != "")
		{
			chan = CHAN_ITEM;
			if (PickupChannel != CHAN_ITEM) chan = PickupChannel;
			if (toucher != NULL && toucher.CheckLocalView())
			{
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				flags = CHANF_MAYBE_LOCAL;
			}
			
			if (A_CheckForHeiwaSnds() && 
					chan == CHAN_VOICE && 
					PickupSndHeiwa != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound: %s", PickupSndHeiwa);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSndHeiwa, chan, flags, 1.0, atten, maskpitch);
			}
			else
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound: %s", PickupSound);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
			}
		}
		
		maskpitch = 1.00;
		if (PickupSnd2 != "" ||
				PickupSnd2Heiwa != "")
		{
			chan = CHAN_ITEM;
			if (PickupChannel2 != CHAN_ITEM) chan = PickupChannel2;
			if (toucher != NULL && toucher.CheckLocalView())
			{
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				flags = CHANF_MAYBE_LOCAL;
			}

			if (A_CheckForHeiwaSnds() && 
					chan == CHAN_VOICE && 
					PickupSnd2Heiwa != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound2: %s", PickupSnd2Heiwa);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSnd2Heiwa, chan, flags, 1.0, atten, maskpitch);
			}
			else
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound2: %s", PickupSnd2);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
			}
		}
		
		maskpitch = 1.00;
		if (PickupSnd3 != "" ||
				PickupSnd3Heiwa != "")
		{
			chan = CHAN_ITEM;
			if (PickupChannel3 != CHAN_ITEM) chan = PickupChannel3;
			if (toucher != NULL && toucher.CheckLocalView())
			{
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				flags = CHANF_MAYBE_LOCAL;
			}

			if (A_CheckForHeiwaSnds() && chan == CHAN_VOICE && PickupSnd3Heiwa != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound3: %s", PickupSnd3Heiwa);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSnd3Heiwa, chan, flags, 1.0, atten, maskpitch);
			}
			else
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSound3: %s", PickupSnd3);
				if (chan == CHAN_VOICE) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
					toucher.A_StopSound(chan);
				}
				toucher.A_StartSound(PickupSnd3, chan, flags, 1.0, atten, maskpitch);
			}
		}
	}
	
	action bool A_CheckForHeiwaSnds()
	{
		actor playera = players[0].mo;
		bool result = false;
		if (playera)
		{
			if (playera.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(playera)) result = true;
		}
		return result;
	}
	
	override void Tick()
	{
		super.Tick();
		ItemFallCheck();
	}
	
	// ManaCube Pickup script
	action void A_PickupManaCube(int type = 0, int overmana = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		String nm, nn, no, np;
		int CharacterClass;
		int CurrentMana, MaxMana; 
		if (MiscItem)
		{
			CurrentMana = MiscItem.CurrentMagicPoints;
			MaxMana = MiscItem.MaxMagicPoints;
		}
		int GiveManaAmount;
		int MaxManaDouble = MaxMana * 2;
		
		if (type <= 1) GiveManaAmount = (20 + (MaxMana * 0.075)); // Small (0.75)
		if (type == 2) GiveManaAmount = (60 + (MaxMana * 0.1875)); // Medium (1.875)
		if (type >= 3) GiveManaAmount = (100 * (MaxMana * 0.30)); // Large (3)
		
		CurrentMana += GiveManaAmount;
		if (overmana == 0 && CurrentMana > MaxMana) CurrentMana = MaxMana;
		if (overmana == 1 && CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
		
		if (MiscItem) MiscItem.CurrentMagicPoints = CurrentMana;
		
		int temp;
		if (type <= 1) temp = randompick(25,30,35) * 1;
		if (type == 2) temp = randompick(25,30,35) * 3;
		if (type >= 3) temp = randompick(25,30,35) * 5;
		if (kcdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d", temp);
		if (MiscItem) MiscItem.MPRegenBoostTimer += temp;
	}
	
	// Mana Recovery Items
	action int A_CheckManaLevels(int overmana = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		int CurrentMana, MaxMana; 
		if (MiscItem)
		{
			CurrentMana = MiscItem.CurrentMagicPoints;
			MaxMana = MiscItem.MaxMagicPoints;
		}
		int MaxManaLimit = MaxMana * 2;
		int ManaThreshold;

		if (overmana == 0) ManaThreshold = MaxMana;
		if (overmana == 1) ManaThreshold = MaxManaLimit;

		int result = 0;
		if (CurrentMana < ManaThreshold) result = 1;
		return result;
	}
	
	action void A_CapsuleSpawn(int basechance)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int chancebase1 = 1;
		if (A_CheckSecret()) chancebase1 *= random(2,3);
		
		if (HeiwaPlayer(playera))
		{
			if (!bDROPPED && random(1,basechance) <= chancebase1)
			{
				int user_type = random(1,24);
				string spawntype;
				if (user_type >= 1 && user_type <= 4) spawntype = "VitalCapsule";
				if (user_type >= 5 && user_type <= 8) spawntype = "SpeedCapsule";
				if (user_type >= 9 && user_type <= 12) spawntype = "IQCapsule";
				if (user_type >= 13 && user_type <= 16) spawntype = "GutsCapsule";
				if (user_type >= 17 && user_type <= 20) spawntype = "LuckCapsule";
				if (user_type >= 21 && user_type <= 24) spawntype = "SensesCapsule";
				A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				if (bCOUNTITEM) level.total_items--;
				if (bCOUNTSECRET) level.total_secrets--;
				if (bCOUNTKILL) level.total_monsters--;
				self.Destroy();
			}
		}
	}
	
	action bool A_CheckHealthLevels(double maxhealthratio = 1.0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int CurrentHealth = playera.health;
		int CurrentPsychicPoints, CurrentMagicPoints;
		int HealthValue;
		int MaxHealthTrue;
		int MaxPsychicPoints;
		int MaxMagicPoints;
		if (MiscItem)
		{
			CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
			CurrentMagicPoints = MiscItem.CurrentMagicPoints;
			if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
			if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
			if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
		}
		int MaxHealthLimit = MaxHealthTrue * maxhealthratio;
		//int MaxPPLimit = MaxPsychicPoints * 2;
		//int MaxMPLimit = MaxMagicPoints * 2;
		
		bool result = false;
		if (currenthealth < MaxHealthLimit) result = true;

		return result;
	}

	// Stimpacks/Medikits/Berserk Packs (All games)
	action void A_PickupMedicalItemStore(double healfactor, double maxhealthratio = 1.0, int minchan = 5, int maxchan = 8)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int MaxHealthTrue = 100;
		if (MiscItem) MaxHealthTrue = MiscItem.MaxHealthTrue;

		let medbag = MediBag(playera.FindInventory("MediBag",false));
		if (medbag)
		{
			int giveamt = floor(MiscItem.MaxHealthTrue * healfactor);
			if (medbag.Amount < medbag.MaxAmount) 
			{
				medbag.Amount += giveamt;
				if (medbag.Amount > medbag.MaxAmount) medbag.Amount = medbag.MaxAmount;
			}
			
			double ptch = 1.00;
			for (int i = minchan; i < maxchan; i++) 
			{
				A_StartSound("misc/i_pkup",(i+1250),CHANF_DEFAULT,1.00,ATTN_NORM,ptch);
				ptch *= 1.125;
			}
		}
	}
	
	action void A_PickupMedicalItem(double healfactor, double maxhealthratio = 1.0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int CurrentHealth = playera.health;
		int CurrentPsychicPoints, CurrentMagicPoints;
		int HealAmount;
		int HealthValue;
		int MaxHealthTrue;
		int MaxPsychicPoints;
		int MaxMagicPoints;
		if (MiscItem)
		{
			CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
			CurrentMagicPoints = MiscItem.CurrentMagicPoints;
			if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
			if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
			if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
		}
		int MaxHealthLimit = MaxHealthTrue * maxhealthratio;
		//int MaxPPLimit = MaxPsychicPoints * 2;
		//int MaxMPLimit = MaxMagicPoints * 2;
		int oldhealthratio;
		if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
		if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
		if (playera.CountInv("LowHealth")) oldhealthratio = 2;
		if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
		
		HealAmount = MaxHealthTrue * healfactor;
		double healratio = double((HealAmount * 1.0) / (MaxHealthLimit * 1.0));
		if (CurrentHealth < MaxHealthLimit)
		{
			CurrentHealth += HealAmount;
			if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;
			playera.health = CurrentHealth;
			if (MiscItem) 
			{
				int HPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseHPBoostRatio * healratio));
				if (HeiwaPlayer(playera)) HPRegenBoostTimeAmt *= HeiwaHPBoostTimerMult;
				MiscItem.HPRegenBoostTimer += HPRegenBoostTimeAmt;
			}

			if (HeiwaPlayer(playera) && 
					(oldhealthratio >= 3 || 
					 (oldhealthratio == 2 && random(1,25) <= 21) || 
					 (oldhealthratio == 1 && random(1,25) <= 9)))
			{
				double maskpitch = 1.00;
				if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				string voicenm;
				double voicevol = frandom(1.25,1.75);
				if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
				
				if (MiscItem.OneLinerTimerCool <= 0)
				{
					MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
					voicenm = "Heiwa/ReflievedSigh"; //
					Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
					playera.A_StopSound(CHAN_VOICE);
					playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}
			}
		}
	}
	
	action void A_GiveBerserk(int basetime, bool bswitch = false, string type = "KCPowerStrength")
	{
		actor playera = players[0].mo;
		if (!playera.CountInv(type))
		{
			playera.SetInventory(type,1);
			let BerkserkItem = PowerStrength(playera.FindInventory(type));
			if (BerkserkItem) BerkserkItem.EffectTics = basetime;
		}
		else
		{
			let BerkserkItem = PowerStrength(playera.FindInventory(type));
			if (BerkserkItem) BerkserkItem.EffectTics += basetime;
		}

		if (kc_berserkweaponswitch && bswitch)
		{
			if (playera.CountInv("FistMarine")) { playera.A_SelectWeapon("FistMarine"); } 
			if (playera.CountInv("FistHeiwa")) { playera.A_SelectWeapon("FistHeiwa"); } 
		}
	}
}

class KampoulSphere : CustomInventoryExt
{
	default
	{
		+DONTGIB;
		+FLOATBOB;
		+COUNTITEM;
		+NOTIMEFREEZE;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		+INVENTORY.ADDITIVETIME;
		Inventory.PickupMessage "\c[HeiwaChamosis](W-What is this thing?!)";
		Inventory.PickupSound "powerups/kampoul";
		Scale 0.75;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int leveltick = level.time % 72;
		if (!HeiwaPlayer(playera))
		{
			bool spawned;
			actor mo;
			[spawned, mo] = A_SpawnItemEx("InvulnerabilitySphere2",flags:SXF_NOCHECKPOSITION,tid:tid);
			if (mo) 
			{
				mo.bDROPPED = bDROPPED;
				InvulnerabilitySphere2 invl;
				invl = InvulnerabilitySphere2(mo);
				if (invl) invl.timestrength = 3;
			}
		}
		if (leveltick == 0)
		{
			A_StopSound(CHAN_5);
			A_StopSound(CHAN_6);
			A_StopSound(CHAN_7);
			A_StopSound(8);
			A_StopSound(9);
			A_StopSound(10);
			A_StartSound("kampoulsphere/pulse",CHAN_5,CHANF_DEFAULT);
			A_StartSound("kampoulsphere/pulse",CHAN_6,CHANF_DEFAULT);
			A_StartSound("kampoulsphere/pulse",CHAN_7,CHANF_DEFAULT);
			A_StartSound("kampoulsphere/pulse",8,CHANF_DEFAULT);
			A_StartSound("kampoulsphere/pulse",9,CHANF_DEFAULT);
			A_StartSound("kampoulsphere/pulse",10,CHANF_DEFAULT);
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			KMPS ABCDEFGHIJK 2 NoDelay bright; // 22
			KMPS K 10 bright; // 32
			KMPS KIJGFEDCBAL 2 bright; // 54
			KMPS MNOPQRSTU 2 bright; // 72
			KMPS U 10 bright; // 82
			KMPS UTSRQPONM 2 bright; // 100
			loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				if (HeiwaPlayer(playera))
				{
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (MiscItem)
					{
						MiscItem.sielsgraceactivations = 0;
						MiscItem.A_SielsGraceCooldown(randompick(0,0,0,0,0,0,0,0,0,1));
						if (MiscItem.CanTalkUnderwater)
						{
							double maskpitch = 1.00;
							if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
							A_StopSound(CHAN_VOICE);
							Console.Printf("\c[HeiwaChamosis]'That's a -BIG- help!'\c-"); //
							A_StartSound("Heiwa/ABigHelp",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
						}
					}
					A_GiveInventory("KCPowerKampoul");
				}
			}
			Stop;
	}
}

class TSArtifactSpawner : CustomInventoryExt
{
	default
	{
		radius 1;
		height 2;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		+DONTGIB;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 BRIGHT NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				
				int bits;
				if (playera.CountInv("TimeSeraphCharm")) bits += 1;
				if (playera.CountInv("TimeSeraphPocketWatch")) bits += 2;
				if (playera.CountInv("TimeSeraphBangle")) bits += 4;
				
				string spawntype;
				int randsel;
				if (kcdebug_timeserapharmor) Console.Printf("bits: %d", bits);
				
				if (!playera.CountInv("TimeSeraphCharm"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [1] check: %d", bits);
					if (playera.CountInv("TimeSeraphPocketWatch") && playera.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-6] check: %d", bits);
						spawntype = "TimeSeraphCharm";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-!6] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphCharm";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				else
				if (!playera.CountInv("TimeSeraphPocketWatch"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [2] check: %d", bits);
					if (playera.CountInv("TimeSeraphCharm") && playera.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-5] check: %d", bits);
						spawntype = "TimeSeraphPocketWatch";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-!5] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphPocketWatch";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphCharm";
							}
							else
							{
								spawntype = "TimeSeraphCharm";
							}
						}
					}
				}
				else
				if (!playera.CountInv("TimeSeraphBangle"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [4] check: %d", bits);
					if (playera.CountInv("TimeSeraphCharm") && playera.CountInv("TimeSeraphPocketWatch"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-3] check: %d", bits);
						spawntype = "TimeSeraphBangle";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-!3] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphBangle";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!playera.CountInv("TimeSeraphCharm"))
							{
								randsel = random(1,256);
								if (randsel <= 128) spawntype = "TimeSeraphCharm";
								if (randsel >= 129) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				
				if (bits < 7 && spawntype != "") 
				{
					if (kcdebug_timeserapharmor) Console.Printf("spawntype: %s", spawntype);
					A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				Destroy();
			}
			Loop;
	}
}

class TSArtifactSpawnerSpecial : TSArtifactSpawner
{
}

class BaseTimeSeraphArtifact : CustomInventoryExt
{
	default
	{
		+DONTGIB;
		+NOTIMEFREEZE;
		CustomInventoryExt.PickupSound2 "tsarmor/pickup";
	}
	
	int CheckNumArtifacts()
	{
		actor playera = players[0].mo;
		int numartifacts;
		if (playera.CountInv("TimeSeraphCharm")) numartifacts++;
		if (playera.CountInv("TimeSeraphPocketWatch")) numartifacts++;
		if (playera.CountInv("TimeSeraphBangle")) numartifacts++;
		return numartifacts;
	}
	
	int DecideColorPhase(int numartifacts)
	{
		actor playera = players[0].mo;
		string type = GetClassName();
		int colorphase = 0;
		// 0 = Platinum [neutral]
		// 1 = Aqua-Blue
		// 2 = Lime-Green
		// 3 = Violet-Purple
		Actor mo;
		int artifactsnearby;
		int charmsfound = 0;
		int watchesfound = 0;
		int banglesfound = 0;
		double checkdist = frandom(480.0,544.0);
		if (type != "TimeSeraphCharm")
		{
			ThinkerIterator CharmFinder = ThinkerIterator.Create("TimeSeraphCharm");
			while (mo = Actor(CharmFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphCharm") > 0)
				{
					charmsfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								charmsfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (charmsfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphPocketWatch")
		{
			ThinkerIterator WatchFinder = ThinkerIterator.Create("TimeSeraphPocketWatch");
			while (mo = Actor(WatchFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphPocketWatch") > 0)
				{
					watchesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								watchesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (watchesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphBangle")
		{
			ThinkerIterator BangleFinder = ThinkerIterator.Create("TimeSeraphBangle");
			while (mo = Actor(BangleFinder.Next()))
			{
				if (Distance3D(playera) <= checkdist && playera.CountInv("TimeSeraphBangle") > 0)
				{
					banglesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								banglesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (banglesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		
		if (artifactsnearby) colorphase += 1;
		if (colorphase >= 3) colorphase = 3;
		if (kcdebug_timeserapharmor) Console.Printf("[%s] charmsfound: %d, watchesfound: %d, banglesfound: %d, artifactsnearby: %d, colorphase: %d [tic: %d]", GetClassName(), charmsfound, watchesfound, banglesfound, artifactsnearby, colorphase, gametic);
		return colorphase;
	}
	
	void CheckExistance()
	{
		actor playera = players[0].mo;
		string type = GetClassName();
		if (playera.CountInv(type)) Destroy();
	}
}

class TimeSeraphCharm : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'With great protection comes great responsibility...'\c-";
		Inventory.Icon "TSCHA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.1667;
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return PickupMsg;
	}

	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSCHA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSCHB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSCHC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSCHD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Charm\c-");
			tagg.AppendFormat(": Said to allow the holder movement within frozen time if paired with the \c[gold]Pocket Watch\c-. Allows user to summon the \c[HeiwaDeluge]Time Seraph's armor\c- for protection. Using this will toggle \c[lightblue]level 1\c- protection on or off.");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSCH A 0 BRIGHT
			{
				actor playera = players[0].mo;
				invoker.CheckExistance();
				
				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSCH A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSCH B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSCH C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSCH D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("CharmEnergyGive",1);
				if (MiscItem && MiscItem.titemadd[0] > 0) playera.A_PrintBold("\c[HeiwaDeluge]'With great protection comes great responsibility...'\c-");
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && playera.CountInv("TimeSeraphCharm"))
				{
					if (playera.CountInv("TSArmorTier2"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/end",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",1);
					}
					else
					if (playera.CountInv("TSArmorTier1"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/end",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_SetInventory("TSArmorTier1",1);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/start",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
			}
			Fail;
	}
}

class TimeSeraphPocketWatch : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'With great responsibility, one can unlock a future self...'\c-";
		Inventory.Icon "TSPWA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSPWA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSPWB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSPWC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSPWD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????? ?????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Pocket Watch\c-");
			tagg.AppendFormat(": Said to allow its holder the Perception of Frozen Time.");
			if (playera.CountInv("TimeSeraphCharm")) tagg.AppendFormat(" Upgrades \c[HeiwaDeluge]Time Seraph's Armor\c- to \c[green]Level 2\c- potency if used as an item and you possess the charm.");
																					else tagg.AppendFormat(" It also has one other effect which is \c[orange]currently unknown\c-, and its power is currently \c[red]sealed away...\c-");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSPW A 0 BRIGHT
			{
				invoker.CheckExistance();
				actor playera = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSPW A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSPW B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSPW C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSPW D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("PWatchEnergyGive",1);
				if (MiscItem && MiscItem.titemadd[1] > 0) playera.A_PrintBold("\c[HeiwaDeluge]'With great responsibility, one can unlock a future self...'\c-");
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && playera.CountInv("TimeSeraphCharm"))
				{
					if (playera.CountInv("TSArmorTier2"))
					{
						playera.A_SetInventory("TSArmorTier2",0);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/end",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/end",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					if (playera.CountInv("TSArmorTier1"))
					{
						playera.A_SetInventory("TSArmorTier2",1);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/start",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						playera.A_SetInventory("TSArmorTier2",1);
						playera.A_StopSound(556);
						playera.A_StartSound("tsarmor2/start",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						playera.A_SetInventory("TSArmorTier1",0);
						playera.A_StopSound(555);
						playera.A_StartSound("tsarmor1/start",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
				else
				{
					playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					playera.A_PrintBold("\c[HeiwaDeluge]Unfortunately, the Pocket Watch is sealed and fails to function as it currently is...\c-");
				}
			}
			Fail;
	}
}

class TimeSeraphBangle : BaseTimeSeraphArtifact
{
	default
	{
		//$Category KC Artifacts
		Inventory.PickupMessage "\c[HeiwaDeluge]'The capacity to safely interpret which cannot usually be interpreted...'\c-";
		Inventory.Icon "TSBGA0";
		Tag "Time Seraph's Bangle: Creates a scanning visor over the eyes for various vision related perks when used, etc. Toggleable.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSBGA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSBGB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSBGC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSBGD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ??????";
		if (playera.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Bangle\c-");
			tagg.AppendFormat(": Creates a scanning visor over the eyes for various vision related perks when used. Toggleable. [boosts damage dealt by 12.5%%");
			tagg.AppendFormat(" and ignores up to ");
			if (playera.CountInv("TSArmorTier3Plus") > 0) tagg.AppendFormat("87.5");
			else if (playera.CountInv("TSArmorTier2") > 0) tagg.AppendFormat("62.5");
			else if (playera.CountInv("TSArmorTier1") > 0) tagg.AppendFormat("50");
			else tagg.AppendFormat("41.67");
			tagg.AppendFormat("%% of enemy defenses]");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSBG A 1 BRIGHT
			{
				invoker.CheckExistance();
				actor playera = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSBG A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSBG B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSBG C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSBG D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				playera.A_SetInventory("BangleEnergyGive",1);
				if (MiscItem && MiscItem.titemadd[2] > 0) playera.A_PrintBold("\c[HeiwaDeluge]'The capacity to safely interpret which cannot usually be interpreted...'\c-");
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (playera.CountInv("TimeSeraphVisor"))
					{
						playera.A_SetInventory("TimeSeraphVisor",0);
						playera.A_SetInventory("KCPowerTorchBangle",0);
						playera.A_StopSound(558);
						playera.A_StartSound("tsbangle/start",558,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
					else
					{
						playera.A_SetInventory("TimeSeraphVisor",1);
						playera.A_SetInventory("KCPowerTorchBangle",1);
						playera.A_StopSound(558);
						playera.A_StartSound("tsbangle/end",558,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
					}
				}
			}
			Fail;
	}
}

// Doom Health Items
class Stimpack2 : CustomInventoryExt replaces Stimpack
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpstimpack\c-.";
		// Inventory.PickupSound "getstimpack";
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		string sbpmsg = "Picked up a \cpstimpack\c- and converted it into the \c[brick]portable medikit\c- of your \c[cream]special backpack\c-.";
		if (!A_CheckHealthLevels(1.0))
		{
			actor playera = players[0].mo;
			let medbag = MediBag(playera.FindInventory("MediBag",false));
			if (medbag)
			{
				if (medbag.Amount <= medbag.MaxAmount) msg = sbpmsg;
			}
		}
		return msg;
	}
	
	States
	{
		Spawn:
			STIM A 0 NoDelay;
			STIM A -1;
			Stop;
		Success:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

				A_StartSound("gethealthkit",5);
				A_PickupMedicalItem(0.10,1.00);
			}
			Stop;
		SuccessStore:
			TNT1 A 0
			{
				A_PickupMedicalItemStore(0.10,1.00,0,2);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) return resolvestate("Success");
				else
				{
					let medbag = MediBag(FindInventory("MediBag",false));
					if (medbag) 
					{
						if (medbag.Amount < medbag.MaxAmount) return resolvestate("SuccessStore");
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;
	}
}

class MiniBerserk : CustomInventoryExt
{
	default
	{
		//$Sprite "MBSKA0"
		//$Category Powerups
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crMini Berserk Pack\c-! Rip and Tear em' apart! \c[fire](All melee damage x10, ~2x melee weapon speed)";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			MBSK A 0 NoDelay;
			MBSK A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera)) // Heiwa's HP is able to reach 200% via [Mini-]Berserks
				{
					if (A_CheckHealthLevels(2.0)) 
					{
						A_PickupMedicalItem(0.5,2.0);
						A_StartSound("gethealthkit",5);
					}
				}
				else
				{
					if (A_CheckHealthLevels(1.00)) 
					{
						A_PickupMedicalItem(0.25,1.00);
						A_StartSound("gethealthkit",5);
					}
				}
				
				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,10);
					int randv1 = random(6,9);
					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (randvoice >= 1 && randvoice <= randv1)
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
							voicenm = "HeiwaLaugh"; //
							Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
						}
						if (randvoice >= (randv1+1))
						{
							MiscItem.OneLinerTimerCool = ceil(int(2.097 * TICRATE));
							voicenm = "Heiwa/WantSomethingSweet"; //
							Console.Printf("\c[HeiwaChamosis]*groans hungrily* 'I waaaant somethiing sweeet!'\c-"); //
						}
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
				
				if (HeiwaPlayer(playera)) A_GiveBerserk(int(22.5 * TICRATE),false);
														 else A_GiveBerserk(int(33.75 * TICRATE),false);
				//A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

class Medikit2 : CustomInventoryExt replaces Medikit
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpmedikit\c-.";
		// Inventory.PickupSound "getmedikit";
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		string sbpmsg = "Picked up a \cpmedikit\c- and converted it into the \c[brick]portable medikit\c- of your \c[cream]special backpack\c-.";
		if (!A_CheckHealthLevels(1.0))
		{
			actor playera = players[0].mo;
			let medbag = MediBag(playera.FindInventory("MediBag",false));
			if (medbag)
			{
				if (medbag.Amount <= medbag.MaxAmount) msg = sbpmsg;
			}
		}
		return msg;
	}
	
	States
	{
		Spawn:
			MEDI A 0 NoDelay;
			MEDI A -1;
			Stop;
		Success:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				
				A_StartSound("gethealthkit",5);
				A_PickupMedicalItem(0.25,1.00);
			}
			Stop;
		SuccessStore:
			TNT1 A 0
			{
				A_PickupMedicalItemStore(0.25,1.00,0,5);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(1.0)) return resolvestate("Success");
				else
				{
					let medbag = MediBag(FindInventory("MediBag",false));
					if (medbag) 
					{
						if (medbag.Amount < medbag.MaxAmount) return resolvestate("SuccessStore");
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;
	}
}

class Berserk2 : CustomInventoryExt replaces Berserk
{
	default
	{
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crBerserk Pack\c-! Rip and Tear em' apart! \c[fire](All melee damage x10, ~2x melee weapon speed)\c-";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			PSTR A 0 NoDelay
			{
				A_CapsuleSpawn(16);
			}
		Idle:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

				if (HeiwaPlayer(playera)) // Heiwa's HP is able to reach 200% via [Mini-]Berserks
				{
					if (A_CheckHealthLevels(2.0)) 
					{
						A_PickupMedicalItem(2.0,2.0);
						A_StartSound("gethealthkit",5);
					}
				}
				else
				{
					if (A_CheckHealthLevels(1.0)) 
					{
						A_PickupMedicalItem(1.0,1.0);
						A_StartSound("gethealthkit",5);
					}
				}
				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,8);
					int randv1 = random(4,7);
					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (randvoice >= 1 && randvoice <= randv1)
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
							voicenm = "HeiwaLaugh"; //
							Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
						}
						if (randvoice >= (randv1+1))
						{
							MiscItem.OneLinerTimerCool = ceil(int(2.097 * TICRATE));
							voicenm = "Heiwa/WantSomethingSweet"; //
							Console.Printf("\c[HeiwaChamosis]*groans hungrily* 'I waaaant somethiing sweeet!'\c-"); //
						}
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
				
				if (HeiwaPlayer(playera)) A_GiveBerserk(int(90 * TICRATE),false);
														 else A_GiveBerserk(int(135 * TICRATE),false);
				//A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

// A more "artifact" style version of the Berserk Pack [for Heretic/Hexen mode, etc]
class BerserkSphere : Berserk2
{
	default
	{
		+FLOATBOB
		+COUNTITEM
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			BERS ABCDEFGH 3 Bright;
			loop;
		Pickup:
			TNT1 A 0 
			{
				let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
				int temp1 = player.mo.health;
				int oldhealth = player.mo.health;
				int prevtemp1 = temp1;
				int temp4 = player.mo.CountInv("PlayerMaxHP");
				int temp2 = (temp4 * 1.25);
				int perc = 125;

				int temp3 = temp4;
				temp3 *= 1.00;
				
				if (temp1 < temp2)
				{
					temp1 += temp3;
					if (temp1 > temp2) temp1 = temp2;
					player.mo.health = player.health = temp1;
					int healdiff = player.mo.health - oldhealth;
					//if (healdiff) invoker.A_RecoverHUD(healdiff, 0, true);
				}
				//int AngerLevelNInc = randompick(1,1,1,1,2,2,2,3);
				//player.mo.A_GiveInventory("AngerLevelEventN",AngerLevelNInc);
				//player.mo.A_GiveInventory("AngerLevelEventNMin",AngerLevelNInc);
				
				/*
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				*/
				A_SetBlend("f0 f0 f0",0.2,random(8,12));
				if (HeiwaPlayer(Player.mo)) A_GiveBerserk(int(90 * TICRATE),false);
															 else A_GiveBerserk(int(135 * TICRATE),false);
			}
			Stop;
	}
}

/*
class RageSphere : PowerupGiver
{
	default
	{
		//$Title Rage Sphere
		//$Category PowerUps

		+COUNTITEM;
		+NOGRAVITY;
		+FLOATBOB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;

		Inventory.MaxAmount 0;
		Inventory.PickupMessage "Firing Speed Doubled!";
		Powerup.Type "PowerDoubleFiringSpeed2";
		Powerup.Color "FF 10 10", 0.25;
		Powerup.Duration -60;
		RenderStyle "Translucent";
		Alpha 0.8;
		FloatBobStrength 0.5;
	}
	
	States
	{
		Spawn:
			RAGS ABCDCB 5 Bright;
			Loop;
	}
}
*/

// Doom Powerups
class HealthBonus2 : CustomInventoryExt replaces HealthBonus
{
	default
	{
		//$Sprite "BON1A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus";
		Inventory.PickupMessage "Picked up a \cnhealth bonus\c-.";
	}
	
	States
	{
		Spawn:
			BON1 A 0 NoDelay
			{
				if (bDROPPED)
				{
					if (random(1,1024) <= 1)
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = true;
						if (bCOUNTITEM) level.total_items--;
						if (bCOUNTSECRET) level.total_secrets--;
						if (bCOUNTKILL) level.total_monsters--;
						self.Destroy();
					}
				}
				else
				{
					if (random(1,1024) <= random(6,10))
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = false;
						if (bCOUNTITEM) level.total_items--;
						if (bCOUNTSECRET) level.total_secrets--;
						if (bCOUNTKILL) level.total_monsters--;
						self.Destroy();
					}
					else
					{
						A_CapsuleSpawn(4096); // 16384
					}
				}
			}
		Idle:
			BON1 AABBCCDDCCBB 3 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0
			{
				//A_EmulateGiveHealthBonusACI(1,8,100,1);
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int CurrentPsychicPoints, CurrentMagicPoints;
				int HealthValue;
				int MaxHealthTrue;
				int MaxPsychicPoints;
				int MaxMagicPoints;
				if (MiscItem)
				{
					CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
					CurrentMagicPoints = MiscItem.CurrentMagicPoints;
					if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
					if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
					if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
				}
				int MaxHealthLimit = MaxHealthTrue * 2;
				int MaxPPLimit = MaxPsychicPoints * 2;
				int MaxMPLimit = MaxMagicPoints * 2;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue * 0.01;
					if (HealthValue < 1) HealthValue = 1;
				
					// if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					//Console.Printf("HealthValue: %d", HealthValue);
		
					playera.health = CurrentHealth;
				}
			}
			Stop;
	}
}

class HealthBonusBig : CustomInventoryExt
{
	default
	{
		//$Sprite "BON3A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		Scale 1.125;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus" ;
		Inventory.PickupMessage "Picked up a \cnlarge health bonus\c-.";
	}
	
	States
	{
		Spawn:
			BON3 A 0 NoDelay
			{
				A_CapsuleSpawn((4096/random(6,10))); // 16384
			}
			goto Float;
		Float:
			BON3 ABCDCB 6 BRIGHT;
			Loop;
		Pickup:
			NULL A 0
			{
				//A_EmulateGiveHealthBonusACI(10,8,100,1); 
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int CurrentPsychicPoints, CurrentMagicPoints;
				int HealthValue;
				int MaxHealthTrue;
				int MaxPsychicPoints;
				int MaxMagicPoints;
				if (MiscItem)
				{
					CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
					CurrentMagicPoints = MiscItem.CurrentMagicPoints;
					if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
					if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
					if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
				}
				int MaxHealthLimit = MaxHealthTrue * 2;
				int MaxPPLimit = MaxPsychicPoints * 2;
				int MaxMPLimit = MaxMagicPoints * 2;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue * 0.10;
					if (HealthValue < 10) HealthValue = 10;
				
					// if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					//Console.Printf("HealthValue: %d", HealthValue);
		
					playera.health = CurrentHealth;
				}
			}
			Stop;
	}
}

class Soulsphere2 : CustomInventoryExt replaces SoulSphere
{
	bool spawnroll;
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\c[LightBlue]SoulSphere! \c[purple](HP +100% to 200%, PP +50% to 200%, MP +50% to 200%)";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SOUL A 0 Bright
			{
				if (invoker.spawnroll && 
						A_CheckSecret() && 
						!bDROPPED)
				{
					actor playera = players[0].mo;
					int chance = 64;
					int chance2 = 1;
					if (playera.CountInv("PlayingDoom1")) 
					{
						chance = randompick(8,16,16,16,16,16,16,16);
						chance2 = randompick(1,1,1,1,2,2,2,3);
					}
					else
					{
						chance = randompick(32,64,64,64,64,64,64,64);
						chance2 = randompick(1,1,1,1,1,1,1,2);
					}
					
					if (random(1,chance) <= chance2)
					{
						A_SpawnItemEx("MegaSphere2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						if (bCOUNTITEM) level.total_items--;
						if (bCOUNTSECRET) level.total_secrets--;
						if (bCOUNTKILL) level.total_monsters--;
						self.Destroy();
					}
					invoker.spawnroll = true;
				}
			}
		Idle:
			SOUL ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int CurrentPsychicPoints, CurrentMagicPoints;
				int HealthValue;
				int MaxHealthTrue;
				int MaxPsychicPoints;
				int MaxMagicPoints;
				if (MiscItem)
				{
					CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
					CurrentMagicPoints = MiscItem.CurrentMagicPoints;
					if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
					if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
					if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
				}
				int MaxHealthLimit = MaxHealthTrue * 2;
				int MaxPPLimit = MaxPsychicPoints * 2;
				int MaxMPLimit = MaxMagicPoints * 2;
				int oldhealthratio;
				if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
				if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
				if (playera.CountInv("LowHealth")) oldhealthratio = 2;
				if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = MaxHealthTrue;
					double healratio = double((HealthValue * 1.0) / (MaxHealthTrue * 1.0));
					//if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					if (MiscItem) 
					{
						int HPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseHPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) HPRegenBoostTimeAmt *= HeiwaHPBoostTimerMult;
						MiscItem.HPRegenBoostTimer += HPRegenBoostTimeAmt;
					}
		
					playera.health = CurrentHealth;
				}
				
				if (CurrentPsychicPoints < MaxPPLimit)
				{
					HealthValue = (MaxPsychicPoints * 0.5);
					double healratio = double((HealthValue * 1.0) / (MaxPsychicPoints * 1.0));
					CurrentPsychicPoints += HealthValue;
					if (CurrentPsychicPoints > MaxPPLimit) CurrentPsychicPoints = MaxPPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentPsychicPoints = CurrentPsychicPoints;
						
						int PPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBasePPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) PPRegenBoostTimeAmt *= HeiwaPPBoostTimerMult;
						MiscItem.PPRegenBoostTimer += PPRegenBoostTimeAmt;
					}
				}
				
				if (CurrentMagicPoints < MaxMPLimit)
				{
					HealthValue = (MaxMagicPoints * 0.5);
					double healratio = double((HealthValue * 1.0) / (MaxMagicPoints * 1.0));
					CurrentMagicPoints += HealthValue;
					if (CurrentMagicPoints > MaxMPLimit) CurrentMagicPoints = MaxMPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentMagicPoints = CurrentMagicPoints;
						
						int MPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseMPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) MPRegenBoostTimeAmt *= HeiwaMPBoostTimerMult;
						MiscItem.MPRegenBoostTimer += MPRegenBoostTimeAmt;
					}
				}
				
				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);

					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (oldhealthratio >= 3 || 
								(oldhealthratio == 2 && random(1,25) <= 21) || 
								(oldhealthratio == 1 && random(1,25) <= 9))
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
							voicenm = "Heiwa/ReflievedSigh"; //
							Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
						}
						else
						{
							voicenm = "Heiwa/OohNice"; //
							Console.Printf("\c[HeiwaChamosis]'Ooooh, nice!'\c-"); //
						}
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			Stop;
	}
}

class MiniSoulsphere : CustomInventoryExt
{
	default
	{
		Height 16;
		Radius 8;
		Scale 0.5;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\c[LightBlue]Miniature SoulSphere! \c[purple](HP +50% to 200%, PP +25% to 200%, MP +25% to 200%)";
		Inventory.PickupSound "misc/p_pkup2";
	}
	
	States
	{
		Spawn:
			SOUL ABCD 4 Bright
			{
				A_SetTics(random(3,6));
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int CurrentPsychicPoints, CurrentMagicPoints;
				int HealthValue;
				int MaxHealthTrue;
				int MaxPsychicPoints;
				int MaxMagicPoints;
				if (MiscItem)
				{
					CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
					CurrentMagicPoints = MiscItem.CurrentMagicPoints;
					if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
					if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
					if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
				}
				int MaxHealthLimit = MaxHealthTrue * 2;
				int MaxPPLimit = MaxPsychicPoints * 2;
				int MaxMPLimit = MaxMagicPoints * 2;
				int oldhealthratio;
				if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
				if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
				if (playera.CountInv("LowHealth")) oldhealthratio = 2;
				if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealthValue = (MaxHealthTrue * 0.5);
					double healratio = double((HealthValue * 1.0) / (MaxHealthTrue * 1.0));
					//if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
					CurrentHealth += HealthValue;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					if (MiscItem) 
					{
						int HPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseHPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) HPRegenBoostTimeAmt *= HeiwaHPBoostTimerMult;
						MiscItem.HPRegenBoostTimer += HPRegenBoostTimeAmt;
					}
		
					playera.health = CurrentHealth;
				}
				
				if (CurrentPsychicPoints < MaxPPLimit)
				{
					HealthValue = (MaxPsychicPoints * 0.25);
					double healratio = double((HealthValue * 1.0) / (MaxPsychicPoints * 1.0));
					CurrentPsychicPoints += HealthValue;
					if (CurrentPsychicPoints > MaxPPLimit) CurrentPsychicPoints = MaxPPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentPsychicPoints = CurrentPsychicPoints;
						
						int PPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBasePPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) PPRegenBoostTimeAmt *= HeiwaPPBoostTimerMult;
						MiscItem.PPRegenBoostTimer += PPRegenBoostTimeAmt;
					}
				}
				
				if (CurrentMagicPoints < MaxMPLimit)
				{
					HealthValue = (MaxMagicPoints * 0.25);
					double healratio = double((HealthValue * 1.0) / (MaxMagicPoints * 1.0));
					CurrentMagicPoints += HealthValue;
					if (CurrentMagicPoints > MaxMPLimit) CurrentMagicPoints = MaxMPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentMagicPoints = CurrentMagicPoints;
						
						int MPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseMPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) MPRegenBoostTimeAmt *= HeiwaMPBoostTimerMult;
						MiscItem.MPRegenBoostTimer += MPRegenBoostTimeAmt;
					}
				}
				
				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);

					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (oldhealthratio >= 3 || 
								(oldhealthratio == 2 && random(1,25) <= 21) || 
								(oldhealthratio == 1 && random(1,25) <= 9))
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
							voicenm = "Heiwa/ReflievedSigh"; //
							Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
						}
						else
						{
							voicenm = "Heiwa/OohNice"; //
							Console.Printf("\c[HeiwaChamosis]'Ooooh, nice!'\c-"); //
						}
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			Stop;
	}
}

class Megasphere2 : CustomInventoryExt replaces MegaSphere
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\c[White]MegaSphere! \c[purple](HP +200% to 200%, PP +100% to 200%, MP +100% to 200%, etc)";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			MEGA ABCD 6 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int CurrentHealth = playera.health;
				int CurrentPsychicPoints, CurrentMagicPoints;
				int HealthValue;
				int MaxHealthTrue;
				int MaxPsychicPoints;
				int MaxMagicPoints;
				if (MiscItem)
				{
					CurrentPsychicPoints = MiscItem.CurrentPsychicPoints;
					CurrentMagicPoints = MiscItem.CurrentMagicPoints;
					if (MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
					if (MiscItem.MaxPsychicPoints > 0) MaxPsychicPoints = MiscItem.MaxPsychicPoints;
					if (MiscItem.MaxMagicPoints > 0) MaxMagicPoints = MiscItem.MaxMagicPoints;
				}
				int MaxHealthLimit = MaxHealthTrue * 2;
				int MaxPPLimit = MaxPsychicPoints * 2;
				int MaxMPLimit = MaxMagicPoints * 2;
				int HealAmount;
				int ptemp1, ptemp2;
				int oldhealthratio;
				if (playera.CountInv("NormalHealth")) oldhealthratio = 0;
				if (playera.CountInv("DecentHealth")) oldhealthratio = 1;
				if (playera.CountInv("LowHealth")) oldhealthratio = 2;
				if (playera.CountInv("CriticalHealth")) oldhealthratio = 3;
				
				if (CurrentHealth < MaxHealthLimit)
				{
					HealAmount = MaxHealthLimit;
					double healratio = double((HealAmount * 1.0) / (MaxHealthTrue * 1.0));
					//if ((dvds_showdamagemessages & 1) && HealAmount > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealAmount);
					CurrentHealth += HealAmount;
					if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
					if (MiscItem) 
					{
						int HPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseHPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) HPRegenBoostTimeAmt *= HeiwaHPBoostTimerMult;
						MiscItem.HPRegenBoostTimer += HPRegenBoostTimeAmt;
					}
				
					playera.health = CurrentHealth;
				}
				let armr = KCArmor(playera.FindInventory("KCArmor"));
				if (armr)
				{
					if (armr.amount >= (MiscItem.MaxHealthTrue * BLUEARMORVALDOUBLE))
					{
						playera.A_GiveInventory("KCHeavyArmorForMegasphere", 1); //A_MegaSphereArmor();
					}
					else
					{
						playera.A_GiveInventory("KCBlueArmorForMegasphere", 1); //A_MegaSphereArmor();
					}
				}
				else
				{
					playera.A_GiveInventory("KCBlueArmorForMegasphere", 1); //A_MegaSphereArmor();
				}
				
				if (CurrentPsychicPoints < MaxPPLimit)
				{
					HealthValue = (MaxPsychicPoints * 1.0);
					double healratio = double((HealthValue * 1.0) / (MaxPsychicPoints * 1.0));
					CurrentPsychicPoints += HealthValue;
					if (CurrentPsychicPoints > MaxPPLimit) CurrentPsychicPoints = MaxPPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentPsychicPoints = CurrentPsychicPoints;
						
						int PPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBasePPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) PPRegenBoostTimeAmt *= HeiwaPPBoostTimerMult;
						MiscItem.PPRegenBoostTimer += PPRegenBoostTimeAmt;
					}
				}
				
				if (CurrentMagicPoints < MaxMPLimit)
				{
					HealthValue = (MaxMagicPoints * 1.0);
					double healratio = double((HealthValue * 1.0) / (MaxMagicPoints * 1.0));
					CurrentMagicPoints += HealthValue;
					if (CurrentMagicPoints > MaxMPLimit) CurrentMagicPoints = MaxMPLimit;
					if (MiscItem) 
					{
						MiscItem.CurrentMagicPoints = CurrentMagicPoints;
						
						int MPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseMPBoostRatio2 * healratio));
						if (HeiwaPlayer(playera)) MPRegenBoostTimeAmt *= HeiwaMPBoostTimerMult;
						MiscItem.MPRegenBoostTimer += MPRegenBoostTimeAmt;
					}
				}

				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);

					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (oldhealthratio >= 3 || 
								(oldhealthratio == 2 && random(1,25) <= 21) || 
								(oldhealthratio == 1 && random(1,25) <= 9))
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
							voicenm = "Heiwa/ReflievedSigh"; //
							Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
						}
						else
						{
							int randvoice = random(1,3);
							if (randvoice == 1)
							{
								voicenm = "Heiwa/OohNice"; //
								Console.Printf("\c[HeiwaChamosis]'Ooooh, nice!'\c-"); //
							}
							if (randvoice == 2)
							{
								voicenm = "Heiwa/Awwwsome"; //
								Console.Printf("\c[HeiwaChamosis]'Awwwsome!'\c-"); //
							}
							if (randvoice == 3)
							{
								voicenm = "Heiwa/ThisIsAmazing"; //
								Console.Printf("\c[HeiwaChamosis]'This is amaaazing!'\c-"); //
							}
						}
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			Stop;
	}
}

class RadSuit2 : RadSuit replaces RadSuit
{
	default
	{
		Height 46;
		+DONTGIB
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "\c[lightgreen]Radiation Shielding Suit";
		Inventory.PickupSound "powerups/suit";
		Powerup.Type "KCPowerIronFeet";
	}

	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
	}
}

class BlurSphere2 : CustomInventoryExt replaces BlurSphere
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+VISIBILITYPULSE
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		RenderStyle "Translucent";
		Inventory.PickupMessage "\c[brick]Invisibility! \c[lightblue](Evasion Chance +~33.4%)";
		Inventory.PickupSound "powerups/invis";
	}
	
	States
	{
		Spawn:
			PINS ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,5);
					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (randvoice >= 2 && randvoice <= 3)
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.402 * TICRATE));
							voicenm = "Heiwa/JustTryToHitMe"; //
							Console.Printf("\c[HeiwaChamosis]Just Try And Hit Me!\c-"); //
							playera.A_StopSound(CHAN_VOICE);
							playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
						}
						if (randvoice >= 4 && randvoice <= 5)
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.541 * TICRATE));
							voicenm = "Heiwa/ThatsSus"; //
							Console.Printf("\c[HeiwaChamosis]That's suspicious...\c-"); //
							playera.A_StopSound(CHAN_VOICE);
							playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
						}
					}
				}
				
				int basesecs = 60;
				if (HeiwaPlayer(playera)) basesecs *= 1.5; // If playing as Heiwa, Invis gives 90 seconds instead of 60
				if (!playera.CountInv("KCPowerInvisibility"))
				{
					playera.SetInventory("KCPowerInvisibility",1);
					let InvisItem = KCPowerInvisibility(playera.FindInventory("KCPowerInvisibility"));
					if (InvisItem) InvisItem.EffectTics = basesecs * TICRATE;
				}
				else
				{
					let InvisItem = KCPowerInvisibility(playera.FindInventory("KCPowerInvisibility"));
					if (InvisItem) InvisItem.EffectTics += basesecs * TICRATE;
				}
			}
			Stop;
	}
}

// Invuln Sphere
class InvulnerabilitySphere2 : CustomInventoryExt replaces InvulnerabilitySphere
{
	int timestrength;
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[green]Invulnerability!";
		Inventory.PickupSound "powerups/invuln";
	}
	
	States
	{
		Spawn:
			PINV A 0 Bright NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera))
				{
					int basechance = randompick(20,24,24,28,28,28,28,32,32,32,32,32,32,32,32,32,32,32,32,36,36,36,36,40,40,44);
					if (bDROPPED) basechance *= randompick(3,4,4,4,4,4,4,4,5);
					if (random(1,basechance) <= 1)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("KampoulSphere",flags:SXF_NOCHECKPOSITION,tid:tid);
						if (mo) 
						{
							mo.bDROPPED = bDROPPED;
							KampoulSphere kmpl;
							kmpl = KampoulSphere(mo);
							self.Destroy();
						}
					}
				}
			}
			goto Idle;
		Idle:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,8);
					if (MiscItem.OneLinerTimerCool <= 0)
					{
						if (randvoice <= 3)
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.383 * TICRATE));
							voicenm = "Heiwa/ABigHelp";
							Console.Printf("\c[HeiwaChamosis]'That's a -BIG- help!'\c-"); //
						}
						else
						if (randvoice >= 4 && randvoice <= 6)
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.032 * TICRATE));
							voicenm = "Heiwa/TimesLikeThis";
							Console.Printf("\c[HeiwaChamosis]'At times like this...'\c-"); //
						}
						else
						if (randvoice >= 7)
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.117 * TICRATE));
							voicenm = "Heiwa/WontHoldBack";
							Console.Printf("\c[HeiwaChamosis]'I WON'T HOLD BACK!!'\c-"); //
						}
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
					}
				}
				
				int basesecs = 30;
				// If spawned from a KampoulSphere while playing as Doomguy, the pickup should give 4x invuln time overall V:
				if (invoker.timestrength > 0 && KCPlayer(playera)) basesecs *= (1 + invoker.timestrength);
				if (HeiwaPlayer(playera)) basesecs *= 1.5; // If playing as Heiwa, Invuln gives 45 seconds instead of 30
				if (!playera.CountInv("KCPowerInvuln"))
				{
					playera.SetInventory("KCPowerInvuln",1);
					let InvulnItem = KCPowerInvuln(playera.FindInventory("KCPowerInvuln"));
					if (InvulnItem) InvulnItem.EffectTics = basesecs * TICRATE;
				}
				else
				{
					let InvulnItem = KCPowerInvuln(playera.FindInventory("KCPowerInvuln"));
					if (InvulnItem) InvulnItem.EffectTics += basesecs * TICRATE;
				}
			}
			Stop;
	}
}

class Infrared2 : PowerupGiver replaces Infrared
{
	Default
	{
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Powerup.Type "KCPowerLightAmp";
		Inventory.PickupMessage "\c[white]Light Amplification Visor!";
		Inventory.PickupSound "powerups/light";
	}
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
	}
}

class AllmapNew : MapRevealer replaces AllMap
{
	Default
	{
		+COUNTITEM
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Inventory.PickupSound "misc/p_pkup";
		Inventory.PickupMessage "\c[green]Computer Area Map";
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		level.allmap = true;
		GoAwayAndDie();
		if (toucher) toucher.A_SetInventory("PowerScannerKC",1);
		return true;
	}

	States
	{
		Spawn:
			PMAP ABCDCB 6 Bright;
			Loop;
	}
}

class SpreadSphere1 : CustomInventoryExt
{
	default
	{
		//$Category KC Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cfSpreader Sphere\c-";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("KCPowerSpread1");
			}
			Stop;
	}
}

class SpreadSphere2 : CustomInventoryExt
{
	default
	{
		//$Category KC Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "\cfSpreader Sphere Mk. 2!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH EFGH 6 Bright; // ABCD 3 Bright
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("KCPowerSpread2");
			}
			Stop;
	}
}

class TerrorSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "The Terrorsphere!";
		Inventory.PickupSound "powerup/fear";
	}
	
	States
	{
		Spawn:
			TERR ABCDE 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					if (MiscItem.OneLinerTimerCool <= 0)
					{
						MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
						voicenm = "HeiwaLaugh"; //
						Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
				A_GiveInventory("PowerTerror");
			}
			Stop;
	}
}

//***********
//** Armor **
//***********
// A specialized armor class for various armor types to allow future extra functions/features, maybe? V:
class KCArmor : BasicArmor
{
	mixin GrabArmorItems;
	Default
	{
		Inventory.Amount 0;
		+Inventory.KEEPDEPLETED
	}
	
	override void Tick()
	{
		Armor.Tick();
		AbsorbCount = 0;
		if (!Icon.isValid())
		{
			String icontex = gameinfo.ArmorIcon1;

			if (SavePercent >= gameinfo.Armor2Percent && gameinfo.ArmorIcon2.Length() != 0)
				icontex = gameinfo.ArmorIcon2;

			if (icontex.Length() != 0)
				Icon = TexMan.CheckForTexture (icontex, TexMan.TYPE_Any);
		}
	}
	
	override Inventory CreateCopy (Actor other)
	{
		// BasicArmor that is in use is stored in the inventory as BasicArmor.
		// BasicArmor that is in reserve is not.
		let copy = KCArmor(Spawn("KCArmor"));
		copy.SavePercent = SavePercent != 0 ? SavePercent : 0.33335;	// slightly more than 1/3 to avoid roundoff errors.
		copy.Amount = Amount;
		copy.MaxAmount = MaxAmount;
		copy.Icon = Icon;
		copy.BonusCount = BonusCount;
		copy.ArmorType = ArmorType;
		copy.ActualSaveAmount = ActualSaveAmount;
		GoAwayAndDie ();
		return copy;
	}
	
	bool CheckMeleeDamageTypes(Name damageType)
	{
		bool check = false;
		if (damageType == 'Melee' || 
				damageType == 'Trample' || 
				damageType == 'Stomp' || 
				damageType == 'Fist' || 
				damageType == 'Kick' || 
				damageType == 'Knife' || 
				damageType == 'Chainsaw' ||
				damageType == 'Bonk' || 
				damageType == 'Bap' || 
				damageType == 'Chop') check = true;
		return check;
	}
	
	override bool HandlePickup(Inventory item)
	{
		return item.GetClass() == 'KCArmor';
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		int saved;
		//
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int olddamage = damage;
		string infl, sour, vict;
		if (owner == null) vict = "NONE"; else vict = owner.GetClassName();
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE"; else sour = source.GetClassName();
		double initSavePercent = SavePercent;
		
		KCPlayerPawn PlayPawn;
		PlayPawn = KCPlayerPawn(owner);
		actor weapon = PlayPawn.player.ReadyWeapon;
		
		if (PlayPawn)
		{
			SavePercent *= (1.0 - PlayPawn.PlayerArmorIgnoreFactor);
			if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]SavePercent:\c- \c[brick]%.4f\c- \c[gold][%.4f]\c", SavePercent, initSavePercent);
		}
		if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]Damage: %d", damage);
		//
		
		if (!DamageTypeDefinition.IgnoreArmor(damageType))
		{
			int full = MAX(0, MaxFullAbsorb - AbsorbCount);
			
			if (damage < full)
			{
				saved = damage;
			}
			else
			{
				saved = full + int((damage - full) * SavePercent);
				if (MaxAbsorb > 0 && saved + AbsorbCount > MaxAbsorb) 
				{
					saved = MAX(0,  MaxAbsorb - AbsorbCount);
				}
			}
			//
			//
			//
			int firstsaved = saved;
			
			int oldsaved = saved;
			double savebase = 0.00;
			double savebasemax = 0.75;
			if (MiscItem)
			{
				if (MiscItem.darmortype == 1) 
				{
					savebase = (random(1,8) * 0.0015625);
					savebasemax = 0.75;
				}
				if (MiscItem.darmortype == 2) 
				{
					savebase = (random(2,8) * 0.00625);
					savebasemax = 0.875;
				}
				if (MiscItem.darmortype == 3) 
				{
					savebase = (random(4,8) * 0.025);
					savebasemax = 0.9375;
				}
				if (savebase >= savebasemax) savebase = savebasemax;
			}
			saved *= (1.0 - savebase);
			if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post armortype]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			
			if (random(1,16) <= (random(7,9) + (8 - (skill * 2)))) 
			{
				double spbkpkarmorbonus = 0.10;
				if (MiscItem) spbkpkarmorbonus = MiscItem.spbkpkarmorbonus;
				oldsaved = saved;
				savebase = 0.00;
				int BKPKBonus;
				if (PlayPawn) 
				{
					BKPKBonus = PlayPawn.CountInv("SpecialBackpackBonus");
					if (BKPKBonus > 0) 
					{
						double maxsavebase = frandompick(0.75,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,1.0);
						savebase += (BKPKBonus * frandompick(0.0025,0.005,0.0075,0.01,0.0125));
						savebase *= frandompick(0.5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
						if (savebase >= (spbkpkarmorbonus * BKPKBonus)) savebase = (spbkpkarmorbonus * BKPKBonus);
						if (savebase >= maxsavebase) savebase = maxsavebase;
					}
				}
				saved *= (1.0 - savebase);
				if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Special]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}
			
			if (MiscItem)
			{
				oldsaved = saved;
				savebase = 0.00;
				if (MiscItem)
				{
					if (weapon is "FistHeiwa" &&
							PlayPawn.CountInv("FistPlayerBlockItem"))
					{
						savebase = frandompick(0.2,0.225,0.225,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.275,0.275,0.3);
						
						if (MiscItem.TruePlayerLevel >= 120) savebase *= 2.0;
						else if (MiscItem.TruePlayerLevel >= 90) savebase *= 1.75;
						else if (MiscItem.TruePlayerLevel >= 60) savebase *= 1.5;
						else if (MiscItem.TruePlayerLevel >= 30) savebase *= 1.25;
						if (savebase >= 0.6) savebase = 0.6;
					}
				}
				saved *= (1.0 - savebase);
				if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]armor - saved [post Misc]:\c- \c[brick]%d\c- \c[gold][%d]\c", saved, oldsaved);
			}
			//
			//
			//
			if (Amount < saved)
			{
				saved = Amount;
			}
			newdamage -= firstsaved;
			Amount -= saved;
			AbsorbCount += saved;
			if (Amount == 0)
			{
				// The armor has become useless
				SavePercent = 0;
				ArmorType = 'None'; // Not NAME_BasicArmor.
				// Now see if the player has some more armor in their inventory
				// and use it if so. As in Strife, the best armor is used up first.
				KCArmorPickup best = null;
				Inventory probe = Owner.Inv;
				while (probe != null)
				{
					let inInv = KCArmorPickup(probe);
					if (inInv != null)
					{
						if (best == null || best.SavePercent < inInv.SavePercent)
						{
							best = inInv;
						}
					}
					probe = probe.Inv;
				}
				if (best != null)
				{
					Owner.UseInventory(best);
				}
			}
			damage = newdamage;
		}
		if (Amount > 0) SavePercent = initSavePercent;

		if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]Damage: %d vs [%d], SavePercent: %.8f vs [%.8f]", damage, olddamage, SavePercent, initSavePercent);
		// Once the armor has absorbed its part of the damage, then apply its damage factor, if any, to the player
		if ((damage > 0) && (ArmorType != 'None')) // KCArmor is not going to have any damage factor, so skip it.
		{
			if (kcdebug_playerdamagemobj) Console.Printf("\c[darkgreen]Damage: %d vs [%d]", newdamage, olddamage);
			newdamage = ApplyDamageFactors(ArmorType, damageType, damage, damage);
		}
	}
}

class KCArmorBonus : BasicArmorBonus
{
	mixin GrabArmorItems;
	mixin ItemFallSpotCheck;
	
	int A_CheckMaxArmor(int fSaveAmount) // BasicArmorBonus
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			double fact = (playera.CountInv("SpecialBackpackBonus") * MiscItem.spbkpkarmorbonus);
			fSaveAmount *= (1.0 + fact);
		}
		return fSaveAmount;
	}
	
	override Inventory CreateCopy (Actor other)
	{
		actor playera = players[0].mo;
		let copy = KCArmorBonus(Super.CreateCopy(other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxSaveAmount = MaxSaveAmount;
		copy.BonusCount = BonusCount;
		copy.BonusMax = BonusMax;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}
	
	override bool Use (bool pickup)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		let armor = KCArmor(Owner.FindInventory("KCArmor"));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn("KCArmor"));
			armor.BecomeItem ();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}
		
		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}

		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
	
	override void Tick()
	{
		super.Tick();
		ItemFallCheck();
	}
	
	Default
	{
		+Inventory.AUTOACTIVATE
		+Inventory.ALWAYSPICKUP
		Inventory.MaxAmount 0;
		Armor.SavePercent 33.335;
	}
}

class KCArmorPickup : BasicArmorPickup
{
	mixin GrabArmorItems;
	mixin ItemFallSpotCheck;
	
	int A_CheckMaxArmor(int fSaveAmount) // KCArmorPickup
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			double fact = (playera.CountInv("SpecialBackpackBonus") * MiscItem.spbkpkarmorbonus);
			fSaveAmount *= (1.0 + fact);
		}
		return fSaveAmount;
	}
	
	override Inventory CreateCopy (Actor other)
	{
		let copy = KCArmorPickup(Super.CreateCopy (other));
		copy.SavePercent = SavePercent;
		copy.SaveAmount = SaveAmount;
		copy.MaxAbsorb = MaxAbsorb;
		copy.MaxFullAbsorb = MaxFullAbsorb;

		return copy;
	}

	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";

		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	override void SetGiveAmount(Actor receiver, int amount, bool bycheat)
	{
		SaveAmount *= amount;
	}
	
	int GetSaveAmount ()
	{
		return !bIgnoreSkill ? int(SaveAmount * G_SkillPropertyFloat(SKILLP_ArmorFactor)) : SaveAmount;
	}
}

class ArmorBonus2 : KCArmorBonus replaces ArmorBonus
{
	mixin HUDRecovery;
	mixin SecretChecker;
	int user_type;
	int framenum;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Picked up an \c[green]armor bonus\c-.";
		Inventory.Icon "ARM1A0";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 200;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupSound "getarmorbonus";
	}
	
	override String PickupMessage()
	{
		string msg = PickupMsg;
		return msg;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
	}
	
	void GetSaveAmounts()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			double mult1 = 1.00;
			if (skill <= 0) mult1 = 1.50;
			if (skill == 1) mult1 = 1.25;
			if (skill == 2) mult1 = 1.00;
			if (skill == 3) mult1 = 0.75;
			if (skill >= 4) mult1 = 0.50;
			SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS1DOUBLE * mult1));
			if (MiscItem.truearmortype <= 1) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS1DOUBLE * mult1) * GREENARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * GREENARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
			if (MiscItem.truearmortype == 2) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS1DOUBLE * mult1) * BLUEARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * BLUEARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
			if (MiscItem.truearmortype >= 3) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS1DOUBLE * mult1) * REDARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * REDARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
			if (kcdebug_armordisplays) Console.Printf("MiscItem.truearmortype: %d, SaveAmount: %d, MaxSaveAmount: %d", MiscItem.truearmortype, SaveAmount, MaxSaveAmount);
		}
		else
		{
			SaveAmount = ARMORBONUS1MININT;
			MaxSaveAmount = BLUEARMORVALINT;
			if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d, MaxSaveAmount: %d", SaveAmount, MaxSaveAmount);
		}
		if (SaveAmount < ARMORBONUS1MININT) SaveAmount = ARMORBONUS1MININT;
	}
	
	override void Tick()
	{
		GetSaveAmounts();
		KCArmorBonus.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d, MaxSaveAmount: %d", PrevArmorType, PrevArmorAmt, MaxSaveAmount);

		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			if (kcdebug_armordisplays) Console.Printf("saveAmount <= 0");
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (kcdebug_armordisplays) Console.Printf("MaxSaveAmount: %d", MaxSaveAmount);
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			if (kcdebug_armordisplays) Console.Printf("armor.Amount (%d) >= MaxSaveAmount (%d) + armor.BonusCount (%d)", armor.Amount, MaxSaveAmount, armor.BonusCount);
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
			if (kcdebug_armordisplays) Console.Printf("armor.Amount <= 0");
		}
		else
		{
			if (kcdebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (kcdebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		//if (armordiff) A_RecoverHUD(armordiff, 1, true);
		A_GrabArmorHUD();
		
		return true;
	}
	
	
	action void A_CapsuleSpawn(int basechance)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int chancebase1 = 1;
		if (A_CheckSecret()) chancebase1 *= random(2,3);
		
		if (HeiwaPlayer(playera))
		{
			if (!bDROPPED && random(1,basechance) <= chancebase1)
			{
				int user_type = random(1,24);
				string spawntype;
				if (user_type >= 1 && user_type <= 4) spawntype = "VitalCapsule";
				if (user_type >= 5 && user_type <= 8)  spawntype = "SpeedCapsule";
				if (user_type >= 9 && user_type <= 12) spawntype = "IQCapsule";
				if (user_type >= 13 && user_type <= 16) spawntype = "GutsCapsule";
				if (user_type >= 17 && user_type <= 20) spawntype = "LuckCapsule";
				if (user_type >= 21 && user_type <= 24) spawntype = "SensesCapsule";
				A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				if (bCOUNTITEM) level.total_items--;
				if (bCOUNTSECRET) level.total_secrets--;
				if (bCOUNTKILL) level.total_monsters--;
				self.Destroy();
			}
		}
	}
	
	States
	{
		Spawn:
			BON2 A 0 NoDelay
			{
				if (bDROPPED)
				{
					if (random(1,1024) <= 1)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("ArmorBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = true;
						if (bCOUNTITEM) level.total_items--;
						if (bCOUNTSECRET) level.total_secrets--;
						if (bCOUNTKILL) level.total_monsters--;
						self.Destroy();
					}
				}
				else
				{
					if (random(1,1024) <= random(6,10))
					{
						actor mo;
						bool spawned;
						[spawned, mo] = A_SpawnItemEx("ArmorBonusBig",0,0,0,0,0,0,0,0,tid);
						if (mo) mo.bDROPPED = false;
						if (bCOUNTITEM) level.total_items--;
						if (bCOUNTSECRET) level.total_secrets--;
						if (bCOUNTKILL) level.total_monsters--;
						self.Destroy();
					}
					else
					{
						A_CapsuleSpawn(4096); // 16384
					}
				}
			}
		Idle:
			BON2 ABCDCB 6
			{
				int frametrue = framenum % 6;
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (MiscItem.truearmortype <= 1) { A_SetTranslation("GreenArmorBonus"); } // If you have no Armor Class
					if (MiscItem.truearmortype == 2) { A_SetTranslation("BlueArmorBonus"); } // If you have Blue Armor Class
					if (MiscItem.truearmortype >= 3) { A_SetTranslation("RedArmorBonus"); } // If you have Red Armor Class
					if (frametrue == 0) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","ARMORBONUSGREEN1");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","ARMORBONUSBLUE1");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","ARMORBONUSRED1");
					}
					if (frametrue == 1 || frametrue == 5) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","ARMORBONUSGREEN2");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","ARMORBONUSBLUE2");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","ARMORBONUSRED2");
					}
					if (frametrue == 2 || framenum == 4) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","ARMORBONUSGREEN3");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","ARMORBONUSBLUE3");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","ARMORBONUSRED3");
					}
					if (frametrue == 3) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","ARMORBONUSGREEN4");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","ARMORBONUSBLUE4");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","ARMORBONUSRED4");
					}
				}
				framenum++;
			}
			Loop;
	}
}

class ArmorBonusSilent : ArmorBonus2
{
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d, PrevArmorAmt: %d", PrevArmorType, PrevArmorAmt);

		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		bool result = false;

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem();
			armor.Amount = 0;
			armor.MaxAmount = MaxSaveAmount;
			Owner.AddInventory (armor);
		}

		if (BonusCount > 0 && armor.BonusCount < BonusMax)
		{
			armor.BonusCount = min(armor.BonusCount + BonusCount, BonusMax);
			result = true;
		}

		int saveAmount = min(GetSaveAmount(), MaxSaveAmount);

		if (saveAmount <= 0)
		{ // If it can't give you anything, it's as good as used.
			return BonusCount > 0 ? result : true;
		}

		// If you already have more armor than this item can give you, you can't
		// use it.
		if (armor.Amount >= MaxSaveAmount + armor.BonusCount)
		{
			return result;
		}

		if (armor.Amount <= 0)
		{ // Should never be less than 0, but might as well check anyway
			armor.Amount = 0;
			armor.Icon = Icon;
			armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
			armor.MaxAbsorb = MaxAbsorb;
			armor.ArmorType = GetClassName();
			armor.MaxFullAbsorb = MaxFullAbsorb;
			armor.ActualSaveAmount = MaxSaveAmount;
		}
		else
		{
			armor.SavePercent = clamp(50.0, 0, 100.0) / 100.0;
			if (kcdebug_armordisplays) Console.Printf("armor.Amount: %d", armor.Amount);
		}
		
		armor.Amount = min(armor.Amount + saveAmount, MaxSaveAmount + armor.BonusCount);
		armor.MaxAmount = max(armor.MaxAmount, MaxSaveAmount);
		
		int armordiff = Owner.CountInv(armorclasstype) - PrevArmorAmt;
		if (kcdebug_armordisplays) Console.Printf("%d", Owner.CountInv(armorclasstype));
		
		return true;
	}
}

class ArmorBonusBig : ArmorBonus2
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "getarmorbonus";
		Inventory.Icon "BON4A0";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupmessage "Picked up a \cdsuper armor bonus\c-.";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 10;
		Armor.MaxSaveAmount 200;
		Inventory.PickupSound "getarmorbonus";
	}
	
	void GetSaveAmountsBig()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			double mult1 = 1.00;
			if (skill <= 0) mult1 = 1.50;
			if (skill == 1) mult1 = 1.25;
			if (skill == 2) mult1 = 1.00;
			if (skill == 3) mult1 = 0.75;
			if (skill >= 4) mult1 = 0.50;

			SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS2DOUBLE * mult1));
			if (MiscItem.truearmortype <= 1) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS2DOUBLE * mult1) * GREENARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * GREENARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
			if (MiscItem.truearmortype == 2) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS2DOUBLE * mult1) * BLUEARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * BLUEARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
			if (MiscItem.truearmortype >= 3) 
			{
				SaveAmount = (MiscItem.MaxHealthTrue * (ARMORBONUS2DOUBLE * mult1) * REDARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
				MaxSaveAmount = (MiscItem.MaxHealthTrue * REDARMORVALDOUBLE);
				MaxSaveAmount = A_CheckMaxArmor(MaxSaveAmount);
			}
		}
		else
		{
			SaveAmount = ARMORBONUS2MININT;
			MaxSaveAmount = BLUEARMORVALINT;
		}
		if (SaveAmount < ARMORBONUS2MININT) SaveAmount = ARMORBONUS2MININT;
	}
	
	override void Tick()
	{
		GetSaveAmountsBig();
		KCArmorBonus.Tick();
	}
	
	States
	{
		Spawn:
			BON4 A 0 NoDelay
			{
				A_CapsuleSpawn((4096/random(6,10))); // 16384
			}
			goto Idle;
		Idle:
			BON4 AABBCCDDCCBB 3
			{
				int frametrue = framenum % 12;
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (MiscItem.truearmortype <= 1) { A_SetTranslation("GreenArmorBonus"); } // If you have no Armor Class
					if (MiscItem.truearmortype == 2) { A_SetTranslation("BlueArmorBonus"); } // If you have Blue Armor Class
					if (MiscItem.truearmortype >= 3) { A_SetTranslation("RedArmorBonus"); } // If you have Red Armor Class
					if (frametrue >= 0 && frametrue <= 1) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSGREEN1");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSBLUE1");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSRED1");
					}
					if (frametrue >= 2 && frametrue <= 3 || 
							frametrue >= 10 && frametrue <= 11) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSGREEN2");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSBLUE2");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSRED2");
					}
					if (frametrue >= 6 && frametrue <= 7 || 
							frametrue >= 10 && frametrue <= 11) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSGREEN3");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSBLUE3");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSRED3");
					}
					if (framenum >= 8 && framenum <= 9) 
					{
						if (MiscItem.truearmortype <= 1) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSGREEN4");
						if (MiscItem.truearmortype == 2) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSBLUE4");
						if (MiscItem.truearmortype >= 3) A_AttachLightDef("ArmorDLight","SUPERARMORBONUSRED4");
					}
				}
				framenum++;
			}
			Loop;

	}
}

class KCGreenArmor : KCArmorPickup replaces GreenArmor
{
	mixin HUDRecovery;
	mixin SecretChecker;
	mixin TSASpawnCheck;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "$GOTARMOR"; // "Picked up the armor.";
		Inventory.Pickupsound "GetArmorFull";
		Inventory.Icon "ARM1A0";
		Armor.SavePercent 33.335;
		Armor.SaveAmount 100;
		+NOTIMEFREEZE;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * GREENARMORVALDOUBLE);
			SaveAmount = A_CheckMaxArmor(SaveAmount);
		}
		else
		{
			SaveAmount = GREENARMORVALINT;
		}
		super.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);
		
		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		A_GrabArmorHUD();
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	int cycle;
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int timefreezes;
				if (MiscItem) timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
				int basechance = (kc_inventorydroprate5 * 0.25);
				double skillmult = 1;
				if (skill <= 0) skillmult = 0.667;
				if (skill == 1) skillmult = 0.8;
				if (skill == 2) skillmult = 1;
				if (skill == 3) skillmult = 1.25;
				if (skill >= 4) skillmult = 1.5;

				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (!bDROPPED && timefreezes)
					{
						double basediv = 0.5;
						double basediv2 = 0.125;
						if ((playera.CountInv("KCTimeFreezer1") ||
								 playera.CountInv("KCTimeFreezer2") ||
								 playera.CountInv("KCTimeFreezer3")))
						{
							basediv = 0.5;
							basediv2 = 0.125;
						}
						else
						{
							basediv = 0.9375;
							basediv2 = 0.25;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 1) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 2) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (timefreezes >= 20)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 40)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 80)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 160)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 320)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 640)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 1280)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 2560)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 5120)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 10240)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 20480)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						int randroll = 1;
						if (A_CheckSecret())
						{
							basechance /= random(2,3);
							randroll *= random(2,3);
						}
						int rollrand = random(1,basechance);
						if (rollrand <= randroll)
						{
							A_TSASpawnMessage();
							Destroy();
						}
					}
				}
				bNOTIMEFREEZE = false;
			}
		Idle:
			ARM1 A 6 
			{
				if (cycle % 2 == 1) A_SetTics(7);
			}
			ARM1 B 7 Bright
			{
				if (cycle % 2 == 1) A_SetTics(6);
			}
			ARM1 B 0
			{
				cycle++;
			}
			Loop;
	}
}

class KCBlueArmorForMegasphere : KCArmorPickup replaces BlueArmorForMegasphere
{
	default
	{
		Armor.SavePercent 50;
		Armor.SaveAmount 200;
	}
	
	void CheckArmorGiveVal()
	{
		actor playera = players[0].mo;
		let armor = KCArmor(playera.FindInventory("KCArmor"));
		textureid aicon;
		if (armor) aicon = armor.icon;

		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			if (MiscItem.truearmortype <= 2) 
			{
				A_GrabArmorHUD();
				
				SaveAmount = (MiscItem.MaxHealthTrue * BLUEARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
			}
		}
		else
		{
			SaveAmount = BLUEARMORVALINT;
		}
	}
	
	override void BeginPlay()
	{
		CheckArmorGiveVal();
		super.BeginPlay();
	}
	
	override void Tick()
	{
		CheckArmorGiveVal();
		super.Tick();
	}
}

class KCBlueArmor : KCArmorPickup replaces BlueArmor
{
	mixin HUDRecovery;
	mixin SecretChecker;
	mixin TSASpawnCheck;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "$GOTMEGA"; // "Picked up the MegaArmor!";
		Inventory.Icon "ARM2A0";
		Inventory.Pickupsound "GetArmorFull";
		Armor.SavePercent 50;
		Armor.SaveAmount 200;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * BLUEARMORVALDOUBLE);
			SaveAmount = A_CheckMaxArmor(SaveAmount);
		}
		else
		{
			SaveAmount = BLUEARMORVALINT;
		}
		super.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);
		
		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		A_GrabArmorHUD();
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int timefreezes;
				if (MiscItem) timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
				int basechance = (kc_inventorydroprate5 * 0.125);
				double skillmult = 1;
				if (skill <= 0) skillmult = 0.667;
				if (skill == 1) skillmult = 0.8;
				if (skill == 2) skillmult = 1;
				if (skill == 3) skillmult = 1.25;
				if (skill >= 4) skillmult = 1.5;

				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (!bDROPPED && timefreezes)
					{
						double basediv = 0.5;
						double basediv2 = 0.125;
						if ((playera.CountInv("KCTimeFreezer1") ||
								 playera.CountInv("KCTimeFreezer2") ||
								 playera.CountInv("KCTimeFreezer3")))
						{
							basediv = 0.5;
							basediv2 = 0.125;
						}
						else
						{
							basediv = 0.9375;
							basediv2 = 0.25;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 1) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 2) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (timefreezes >= 20)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 40)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 80)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 160)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 320)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 640)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 1280)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 2560)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 5120)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 10240)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 20480)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						int randroll = 1;
						if (A_CheckSecret())
						{
							basechance /= random(2,3);
							randroll *= random(2,3);
						}
						int rollrand = random(1,basechance);
						if (rollrand <= randroll)
						{
							A_TSASpawnMessage();
							Destroy();
						}
					}
				}
				bNOTIMEFREEZE = false;
			}
		Idle:
			ARM2 A 6;
			ARM2 B 6 Bright;
			Loop;
	}
}

class KCHeavyArmorForMegasphere : KCArmorPickup
{
	default
	{
		Inventory.Icon "HEVAB0";
		Armor.SavePercent 87.5;
		Armor.SaveAmount 425;
	}
	
	void CheckArmorGiveVal()
	{
		actor playera = players[0].mo;
		let armor = KCArmor(playera.FindInventory("KCArmor"));
		textureid aicon;
		if (armor) aicon = armor.icon;

		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			if (MiscItem.truearmortype <= 3) 
			{
				A_GrabArmorHUD();
				SaveAmount = (MiscItem.MaxHealthTrue * REDARMORVALDOUBLE);
				SaveAmount = A_CheckMaxArmor(SaveAmount);
			}
		}
		else
		{
			SaveAmount = REDARMORVALINT;
		}
	}
	
	override void BeginPlay()
	{
		CheckArmorGiveVal();
		super.BeginPlay();
	}
	
	override void Tick()
	{
		CheckArmorGiveVal();
		super.Tick();
	}
}

class KCHeavyArmor : KCArmorPickup
{
	mixin HUDRecovery;
	mixin SecretChecker;
	mixin TSASpawnCheck;
	default
	{
		Radius 20;
		Height 16;
		Inventory.PickupMessage "Picked up the \c[red]heavy armor\c-"; // "Picked up the MegaArmor!";
		Inventory.Icon "HEVAB0";
		Inventory.Pickupsound "GetArmorFull";
		Armor.SavePercent 87.5;
		Armor.SaveAmount 425;
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			SaveAmount = (MiscItem.MaxHealthTrue * REDARMORVALDOUBLE);
			SaveAmount = A_CheckMaxArmor(SaveAmount);
		}
		else
		{
			SaveAmount = REDARMORVALINT;
		}
		super.Tick();
	}
	
	override bool Use (bool pickup)
	{
		name armorclasstype = "KCArmor";
		
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem) 
		{
			MiscItem.ArmorGrabTimer += ARMORFLICKERTIMERBASE;
			if (MiscItem.ArmorGrabTimer >= ARMORFLICKERTIMERBASE) MiscItem.ArmorGrabTimer = ARMORFLICKERTIMERBASE;
		}
		int PrevArmorAmt = Owner.CountInv(armorclasstype);
		int PrevArmorType;
		if (kcdebug_armordisplays) Console.Printf("PrevArmorType: %d", PrevArmorType);
		
		int SaveAmount = GetSaveAmount();
		let armor = KCArmor(Owner.FindInventory(armorclasstype));
		if (kcdebug_armordisplays) Console.Printf("SaveAmount: %d", SaveAmount);

		// This should really never happen but let's be prepared for a broken inventory.
		if (armor == null)
		{
			armor = KCArmor(Spawn(armorclasstype));
			armor.BecomeItem ();
			Owner.AddInventory (armor);
		}
		else
		{
			// If you already have more armor than this item gives you, you can't
			// use it.
			if (armor.Amount >= SaveAmount + armor.BonusCount)
			{
				return false;
			}
			// Don't use it if you're picking it up and already have some.
			if (pickup && armor.Amount > 0 && MaxAmount > 0)
			{
				return false;
			}
		}
		
		armor.SavePercent = clamp(SavePercent, 0, 100) / 100;
		armor.Amount = SaveAmount + armor.BonusCount;
		armor.MaxAmount = SaveAmount;
		armor.Icon = Icon;
		armor.MaxAbsorb = MaxAbsorb;
		armor.MaxFullAbsorb = MaxFullAbsorb;
		armor.ArmorType = GetClassName();
		armor.ActualSaveAmount = SaveAmount;
		return true;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int timefreezes;
				if (MiscItem) timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
				int basechance = (kc_inventorydroprate5 * 0.0625);
				double skillmult = 1;
				if (skill <= 0) skillmult = 0.667;
				if (skill == 1) skillmult = 0.8;
				if (skill == 2) skillmult = 1;
				if (skill == 3) skillmult = 1.25;
				if (skill >= 4) skillmult = 1.5;

				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (!bDROPPED && timefreezes)
					{
						double basediv = 0.5;
						double basediv2 = 0.125;
						if ((playera.CountInv("KCTimeFreezer1") ||
								 playera.CountInv("KCTimeFreezer2") ||
								 playera.CountInv("KCTimeFreezer3")))
						{
							basediv = 0.5;
							basediv2 = 0.125;
						}
						else
						{
							basediv = 0.9375;
							basediv2 = 0.25;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 1) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (MiscItem.TimeArmorRelicsOwned >= 2) 
						{
							basediv *= 2;
							basediv2 *= 0.5;
						}
						if (timefreezes >= 20)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 40)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 80)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 160)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 320)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 640)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 1280)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 2560)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 5120)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 10240)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						if (timefreezes >= 20480)
						{
							basechance *= basediv;
							basechance -= (timefreezes * basediv2);
						}
						int randroll = 1;
						if (A_CheckSecret())
						{
							basechance /= random(2,3);
							randroll *= random(2,3);
						}
						int rollrand = random(1,basechance);
						if (rollrand <= randroll)
						{
							A_TSASpawnMessage();
							Destroy();
						}
					}
				}
				bNOTIMEFREEZE = false;
			}
		Idle:
			HEVA B 6;
			HEVA A 6 Bright;
			Loop;
	}
}

class BackPackTier1 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class BackPackTier2 : PlaceHolderItem 
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class Backpack2 : CustomInventoryExt replaces Backpack
{
	default
	{
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Height 26;
		Inventory.PickupMessage "Picked up a \cebackpack full of ammo\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	void A_SpawnOtherBKPK()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int basechance = 1;
		if (A_CheckSecret()) basechance *= 4;

		if (playera.CountInv("BackpackTier2"))
		{
			if (random(1,9) <= basechance)
			{
				A_SpawnItemEx("CombatPack",tid:tid);
				Destroy();
			}
		}
		else
		if (playera.CountInv("BackpackTier1"))
		{
			if (random(1,24) <= basechance)
			{
				A_SpawnItemEx("CombatPack",tid:tid);
				Destroy();
			}
		}
		else
		{
			if (random(1,64) <= basechance)
			{
				A_SpawnItemEx("CombatPack",tid:tid);
				Destroy();
			}
		}
	}
	
	States
	{
		Spawn:
			BPAK A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				int basechance = 1024;
				int basechance2 = 32;
				if (playera.CountInv("SpecialBackpackBonus") > 20) basechance *= frandom(0.375,0.5);
				else if (playera.CountInv("SpecialBackpackBonus") > 15) basechance *= frandom(0.5,0.625);
				else if (playera.CountInv("SpecialBackpackBonus") > 10) basechance *= frandom(0.625,0.75);
				else if (playera.CountInv("SpecialBackpackBonus") > 5) basechance *= frandom(0.75,0.875);
				else if (playera.CountInv("SpecialBackpackBonus") > 0) basechance *= frandom(0.875,1.000);
				int basechance3 = 1;
				if (A_CheckSecret()) basechance3 *= random(2,3);
				if (!bDROPPED)
				{
					if (random(1,basechance) <= basechance3)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("SpecialBackPack",tid:tid);
						if (mo) 
						{
							mo.bDROPPED = bDROPPED;
						}
						Destroy();
					}
					else
					{
						invoker.A_SpawnOtherBKPK();
					}
				}
				else
				{
					basechance *= 4;
					if (random(1,basechance) <= basechance3)
					{
						bool spawned;
						actor mo;
						[spawned, mo] = A_SpawnItemEx("SpecialBackPack",tid:tid);
						if (mo) 
						{
							mo.bDROPPED = bDROPPED;
						}
						Destroy();
					}
					else
					{
						int basechance4 = 1;
						if (A_CheckSecret()) basechance4 *= random(2,3);
						if (random(1,16) <= basechance4) invoker.A_SpawnOtherBKPK();
					}
				}
			}
		Idle:
			BPAK A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BackPackTier1", 1);
				A_StartSound("GetBullets", 5);
				A_StartSound("GetShells", 6);
				A_StartSound("GetRockets", 7);
				A_StartSound("GetCells", 8);
				A_StartSound("gettgunclip", 9);
				A_StartSound("getdevsmall", 10);
				A_StartSound("getsawsmall", 11);
				A_StartSound("getxbowpouch", 12);
				A_StartSound("getteslasmall", 13);
				A_StartSound("pickup/pikeammo", 14);

				A_GiveInventory("PikeAmmo", 1);
				A_GiveInventory("Shell", 4);
				A_GiveInventory("Clip", 10);
				A_GiveInventory("RocketAmmo", 1);
				A_GiveInventory("Cell", 20);
				A_GiveInventory("Saws", 3);
				A_GiveInventory("MiniRockets", 10);
				A_GiveInventory("ImpalerBolts", 5);
				A_GiveInventory("Bolts", 50);
				A_GiveInventory("TommAmmo", 50);
			}
			Stop;
	}
}

class CombatPack : CustomInventoryExt
{
	default
	{
		Height 26;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You got a combat pack";
		Inventory.PickupSound "misc/i_pkup";
	}
	
	States
	{
		Spawn:
			CBPK A -1;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("getbulletbox", 5);
				A_StartSound("getshellbox", 6);
				A_StartSound("getrocketbox", 7);
				A_StartSound("getcellpack", 8);
				A_StartSound("gettgunset", 9);
				A_StartSound("getdevbox", 10);
				A_StartSound("getsawbox", 11);
				A_StartSound("getxbowbox", 12);
				A_StartSound("getteslabox", 13);
				A_StartSound("pickup/pikeammo", 14);
				
				A_GiveInventory("Backpack", 1);
				A_GiveInventory("BackPackTier1", 1);
				A_GiveInventory("BackPackTier2", 1);
				A_GiveInventory("PikeAmmo", 3);
				A_GiveInventory("Shell", 16);
				A_GiveInventory("Clip", 40);
				A_GiveInventory("RocketAmmo", 4);
				A_GiveInventory("Cell", 80);
				A_GiveInventory("Saws", 12);
				A_GiveInventory("MiniRockets", 40);
				A_GiveInventory("ImpalerBolts", 20);
				A_GiveInventory("Bolts", 200);
				A_GiveInventory("TommAmmo", 200);
			}
			//Please edit this with the custom ammo types of your mod.
			//Make it give a large pickup worth of ammo
			//but subtract that given from the backpack (so it gives exactly one large pickup worth)
			Stop;
	}
}

class DoubleSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Damage!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			DDMG ABCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				A_StartSound("buff/atkup",205);
				
				int basesecs = 30;
				if (HeiwaPlayer(playera)) basesecs *= 1.5; // If playing as Heiwa, Invis gives 90 seconds instead of 60
				if (!playera.CountInv("PowerDouble"))
				{
					playera.SetInventory("PowerDouble",1);
					let DoubleItem = PowerDouble(playera.FindInventory("PowerDouble"));
					if (DoubleItem) DoubleItem.EffectTics = basesecs * TICRATE;
				}
				else
				{
					let DoubleItem = PowerDouble(playera.FindInventory("PowerDouble"));
					if (DoubleItem) DoubleItem.EffectTics += basesecs * TICRATE;
				}
			}
			Stop;
	}
}

class GuardSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Double Defense!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			GUAD ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				A_StartSound("buff/defup",205);
				
				int basesecs = 30;
				if (HeiwaPlayer(playera)) basesecs *= 1.5; // If playing as Heiwa, Invis gives 90 seconds instead of 60
				if (!playera.CountInv("PowerGuard"))
				{
					playera.SetInventory("PowerGuard",1);
					let GuardItem = PowerGuard(playera.FindInventory("PowerGuard"));
					if (GuardItem) GuardItem.EffectTics = basesecs * TICRATE;
				}
				else
				{
					let GuardItem = PowerGuard(playera.FindInventory("PowerGuard"));
					if (GuardItem) GuardItem.EffectTics += basesecs * TICRATE;
				}
			}
			Stop;
	}
}

class HasteSphere : CustomInventoryExt
{
	default
	{
		+FLOATBOB
		+DONTGIB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		Inventory.PickupMessage "Speed Up!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			HAST ABC 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				A_StartSound("buff/spdup",205);
				
				int basesecs = 30;
				if (HeiwaPlayer(playera)) basesecs *= 1.5; // If playing as Heiwa, Invis gives 90 seconds instead of 60
				if (!playera.CountInv("PowerHaste"))
				{
					playera.SetInventory("PowerHaste",1);
					let HasteItem = PowerHaste(playera.FindInventory("PowerHaste"));
					if (HasteItem) HasteItem.EffectTics = basesecs * TICRATE;
				}
				else
				{
					let HasteItem = PowerHaste(playera.FindInventory("PowerHaste"));
					if (HasteItem) HasteItem.EffectTics += basesecs * TICRATE;
				}
			}
			Stop;
	}
}
class BaseAmmoSpawner : KCBaseZSC
{
	mixin SecretChecker;
	void A_AmmoDrops(string droptyp = "ClipNew", int basedroprate = 200, double dropfactor = 0.125)
	{
		double spread1 = 1.0;
		double spread2 = 1.25;
		double spread3 = 1.5;
		double spread4 = 1.75;
		double spread5 = 2.0;
		int droprate = basedroprate;
		if (A_CheckSecret()) droprate *= random(2,3);
		if (bDROPPED) 
		{
			droprate *= dropfactor;
			spread1 *= frandom(1.25,1.5);
			spread2 *= frandom(1.25,1.5);
			spread3 *= frandom(1.25,1.5);
			spread4 *= frandom(1.25,1.5);
			spread5 *= frandom(1.25,1.5);
		}
		if (Random(1,1000) <= 1000) { A_SpawnItemEx(droptyp,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
		if (Random(1,1000) <= (droprate*1.00)) { A_SpawnItemEx(droptyp,frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),frandom(-spread1,spread1),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.25)) { A_SpawnItemEx(droptyp,frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),frandom(-spread2,spread2),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.05)) { A_SpawnItemEx(droptyp,frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),frandom(-spread3,spread3),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.01)) { A_SpawnItemEx(droptyp,frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),frandom(-spread4,spread4),0,SXF_NOCHECKPOSITION,0); }
		if (Random(1,1000) <= (droprate*0.002)) { A_SpawnItemEx(droptyp,frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),frandom(-spread5,spread5),0,SXF_NOCHECKPOSITION,0); }
	}
}

class ClipNew : Clip // replaces Clip
{
	default
	{
		Inventory.Pickupsound "getbulletclip";
		Inventory.PickupMessage "Picked up \cua clip of bullets\c-!";
		Inventory.Amount 10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TommyGun"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("TommAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ClipBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CLIP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipSpawner : BaseAmmoSpawner replaces Clip
{
	default
	{
		//$Sprite "CLIPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ClipNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ClipBoxNew : ClipBox // replaces ClipBox
{
	default
	{
		Inventory.Pickupsound "getbulletbox";
		Inventory.PickupMessage "Picked up \cua box of bullets\c-!";
		Inventory.Amount 50;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TommyGun"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("TommAmmoBig",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ClipNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			AMMO A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipBoxSpawner : BaseAmmoSpawner replaces ClipBox
{
	default
	{
		//$Sprite "AMMOA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ClipBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellNew : Shell // replaces Shell
{
	default
	{
		Inventory.Pickupsound "getfourshells";
		Inventory.PickupMessage "Picked up \cusome shotgun shells\c-!";
		Inventory.Amount 4;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("ImpalerXBow"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("ImpalerBolts",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ShellBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SHEL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellSpawner : BaseAmmoSpawner replaces Shell
{
	default
	{
		//$Sprite "SHELA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ShellNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellBoxNew : ShellBox // replaces ShellBox
{
	default
	{
		Inventory.Pickupsound "getshellbox";
		Inventory.PickupMessage "Picked up a \cubox of shotgun shells\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("ImpalerXBow"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("ImpalerBoltsBig",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("ShellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SBOX A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellBoxSpawner : BaseAmmoSpawner replaces ShellBox
{
	default
	{
		//$Sprite "SBOXA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("ShellBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketAmmoNew : RocketAmmo // replaces RocketAmmo
{
	default
	{
		Inventory.Pickupsound "getsinglerocket";
		Inventory.PickupMessage "Picked up \cua single rocket\c-!";
		Inventory.Amount 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("Devastator"))
				{
					double droprate = (256.0*0.67);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRockets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				else
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRockets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("RocketBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			ROCK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketSpawner : BaseAmmoSpawner replaces RocketAmmo
{
	default
	{
		//$Sprite "ROCKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("RocketAmmoNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketBoxNew : RocketBox // replaces RocketBox
{
	default
	{
		Inventory.Pickupsound "getrocketbox";
		Inventory.PickupMessage "Picked up \cua box of rockets\c-!";
		Inventory.Amount 5;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("Devastator"))
				{
					double droprate = (256.0*0.67);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRocketBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				else
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("MiniRocketBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("RocketAmmoNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			BROK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketBoxSpawner : BaseAmmoSpawner replaces RocketBox
{
	default
	{
		//$Sprite "BROKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("RocketBoxNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellNew : Cell // replaces Cell
{
	default
	{
		Inventory.Pickupsound "getsmallcells";
		Inventory.PickupMessage "Picked up \cua small energy cell\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TeslaCannon"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("Bolts",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("CellPackNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellSpawner : BaseAmmoSpawner replaces Cell
{
	default
	{
		//$Sprite "CELLA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("CellNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellPackNew : CellPack // replaces CellPack
{
	default
	{
		Inventory.Pickupsound "getcellpack";
		Inventory.PickupMessage "Picked up \cua large energy cell\c-!";
		Inventory.Amount 100;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				actor playera = players[0].mo;
				if (playera.CountInv("TeslaCannon"))
				{
					double droprate = (256.0*0.34);
					if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
					if (frandom(0.001,256.0) <= droprate) 
					{
						A_SpawnItemEx("BoltsLarge",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						return resolvestate("KillObject");
					}
					return resolvestate(null);
				}
				
				double droprate = (32.0*0.34);
				if (bDROPPED) droprate *= frandompick(0.1,0.125,0.125,0.125,0.14287,0.14287,0.14287,0.14287,0.14287,0.1667,0.1667,0.1667,0.2);
				if (frandom(0.001,256.0) <= droprate) 
				{
					A_SpawnItemEx("CellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellPackSpawner : BaseAmmoSpawner replaces CellPack
{
	default
	{
		//$Sprite "CELPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_AmmoDrops("CellPackNew");
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class StatCaspuleBase : CustomInventoryExt
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		Scale 0.5;
		Radius 12;
		Height 24;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "Capsule/Pickup";
	}
}

class VitalCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnVitality Capsule\c-! \c[brick]Max HP permanently increased by 15!\c-";
	}
	
	States
	{
		Spawn:
			CAPS V -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.VitalityPieces++;
					globalvars.VitalityPieces++;
					//playera.A_GiveInventory("PlayerVIT",1);
				}
			}
			Stop;
	}
}

class IQCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up an \cnIQ Capsule\c-! \c[purple]Max PP permanently increased by 5!\c-";
	}
	
	States
	{
		Spawn:
			CAPS I -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.IQPieces++;
					globalvars.IQPieces++;
					//playera.A_GiveInventory("PlayerIQ",1);
				}
			}
			Stop;
	}
}

class SensesCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up an \cnSenses Capsule\c-! \c[lightblue]Max MP permanently increased by 5!\c-";
	}
	
	States
	{
		Spawn:
			CAPS X -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.SensesPieces++;
					globalvars.SensesPieces++;
					//playera.A_GiveInventory("PlayerSenses",1);
				}
			}
			Stop;
	}
}

class GutsCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnGuts Capsule\c-! \c[orange]Critical Hit Chance permenantly increased slightly!\c-";
	}
	
	States
	{
		Spawn:
			CAPS G -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.PlayerGUTS++;
					globalvars.PlayerGUTS++;
					playera.A_GiveInventory("PlayerGUTS",1);
				}
			}
			Stop;
	}
}

class SpeedCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnSpeed Capsule\c-! \c[sapphire]Speed permanently increased by 1!\c-";
	}
	
	States
	{
		Spawn:
			CAPS S -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.PlayerSPD++;
					globalvars.PlayerSPD++;
					playera.A_GiveInventory("PlayerSPD",1);
				}
			}
			Stop;
	}
}

class LuckCapsule : StatCaspuleBase
{
	default
	{
		Inventory.PickupMessage "Picked up a \cnLuck Capsule\c-! \c[gold]Luck permanently increased by 1!\c-";
	}
	
	States
	{
		Spawn:
			CAPS L -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				if (MiscItem && 
						playera && 
						globalvars)
				{
					MiscItem.PlayerLUCK++;
					globalvars.PlayerLUCK++;
					playera.A_GiveInventory("PlayerLUCK",1);
				}
			}
			Stop;
	}
}

class SpecialBackpack : CustomInventoryExt
{
	default
	{
		Radius 10;
		Height 20;
		Inventory.PickupMessage "Picked up an odd beige and pink backpack...";
		Scale 0.125;
		inventory.icon "RSBKA0";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+INVENTORY.KEEPDEPLETED; 
	}
	
	States
	{
		Spawn:
			RSBK A 35;
			RSBK A 35 bright;
			loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveInventory("SpecialBackpackBonus",1);
				
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (HeiwaPlayer(playera))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);

					if (MiscItem.OneLinerTimerCool <= 0)
					{
						MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
						voicenm = "HeiwaLaugh"; //
						Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
						playera.A_StopSound(CHAN_VOICE);
						playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				}
			}
			Stop;
	}
}

class MediBag : CustomInventoryExt
{
	default
	{
		inventory.icon "MEDBA0";
		Inventory.MaxAmount 1;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Tag "\c[cream]Special Backpack's Portable Medikit\c-: Stores Medikits and Stimpacks in raw HP energy units up to a certain limit.";
	}
	
	override void Tick()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();
		
		if (HeiwaPlayer(playera))
		{
			if (MiscItem) 
			{
				MaxAmount = MiscItem.spbkpkmaxhealthcarry;
				InterHubAmount = MiscItem.spbkpkmaxhealthcarry;
				
				string tagg = "\c[cream]Special Backpack's Portable Medikit";
				if (playera.CountInv("SpecialBackpackBonus") > 0)
				{
					if (playera.CountInv("SpecialBackpackBonus") >= 25) tagg.AppendFormat("\c[HeiwaDeluge]");
																												 else tagg.AppendFormat("\c[HeiwaChamosis]");
					tagg.AppendFormat(" [L%d]", playera.CountInv("SpecialBackpackBonus"));
					tagg.AppendFormat("\c-: Stores Medikits and Stimpacks in raw HP energy units up to a certain limit.");
				}
				SetTag(tagg);
			}
			else Destroy();
		}
		else Destroy();
		
		super.Tick();
	}
	
	states
	{
		Spawn:
			TNT1 A -1 BRIGHT;
			stop;
		Use:
			TNT1 A 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				//Console.Printf("try to use");
				if (HeiwaPlayer(playera))
				{
					if (MiscItem)
					{
						int HealAmount;
						int MaxHealthTrue;
						if (MiscItem && MiscItem.MaxHealthTrue > 0) MaxHealthTrue = MiscItem.MaxHealthTrue;
						int MaxHealthLimit = MaxHealthTrue;
						HealAmount = MaxHealthTrue - playera.health;
						int CurrentHealth = playera.health;
						if (CurrentHealth < MaxHealthLimit)
						{
							int temp = invoker.Amount;
							if (temp > 0)
							{
								if (HealAmount > temp) 
								{
									HealAmount = temp;
									invoker.Amount -= temp;
									//Console.Printf("HealAmount > temp");
								}
								else
								{
									invoker.Amount -= HealAmount;
									//Console.Printf("temp > HealAmount");
								}
								//Console.Printf("temp: %d, \c[brick]HealAmount: %d\c-", temp, HealAmount);
								
								CurrentHealth += HealAmount;
								if (CurrentHealth >= MaxHealthLimit) CurrentHealth = MaxHealthLimit;
								playera.health = CurrentHealth;
								
								playera.A_StartSound("gethealthkit",5);
								
								// Play a Heiwa voice/sound
								double healratio = double((HealAmount * 1.0) / (MaxHealthLimit * 1.0));
								bool playvoice = false;
								if (healratio >= 0.50) playvoice = true;
								else
								{
									if (healratio >= 0.3334 && random(1,8) <= random(4,6)) playvoice = true;
									else
									{
										if (healratio >= 0.1667 && random(1,8) <= random(1,2)) playvoice = true;
									}
								}
								//Console.Printf("healratio: %.8f, playvoice %d", healratio, playvoice);
								if (MiscItem) 
								{
									int HPRegenBoostTimeAmt = (randompick(9,10,10,11,11,12,13) * (HealItemBaseHPBoostRatio * healratio));
									if (HeiwaPlayer(playera)) HPRegenBoostTimeAmt *= HeiwaHPBoostTimerMult;
									MiscItem.HPRegenBoostTimer += HPRegenBoostTimeAmt;
								}

								if (MiscItem && MiscItem.CanTalkUnderwater && playvoice)
								{
									double maskpitch = 1.00;
									if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
									string voicenm;
									double voicevol = frandom(1.25,1.75);
									if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
									int randvoice = random(1,8);
									if (MiscItem.OneLinerTimerCool <= 0)
									{
										if (healratio >= 0.75)
										{
											if (randvoice <= 4)
											{
												voicenm = "Heiwa/ABigHelp"; //
												Console.Printf("\c[HeiwaChamosis]'That's a -BIG- help!'\c-");
											}
											else
											if (randvoice >= 5 && randvoice <= 7)
											{
												MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
												voicenm = "HeiwaLaugh"; //
												Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
											}
											else
											if (randvoice >= 8)
											{
												MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
												voicenm = "Heiwa/ReflievedSigh"; //
												Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
											}
										}
										else
										{
											if (randvoice <= 4)
											{
												MiscItem.OneLinerTimerCool = ceil(int(0.334 * TICRATE));
												voicenm = "Heiwa/ReflievedSigh"; //
												Console.Printf("\c[HeiwaChamosis]-sighs in relief-\c-"); //
											}
											else
											if (randvoice >= 5 && randvoice <= 7)
											{
												voicenm = "Heiwa/ABigHelp"; //
												Console.Printf("\c[HeiwaChamosis]'That's a -BIG- help!'\c-");
											}
											else
											if (randvoice >= 8)
											{
												MiscItem.OneLinerTimerCool = ceil(int(0.75 * TICRATE));
												voicenm = "HeiwaLaugh"; //
												Console.Printf("\c[HeiwaChamosis]-Laughs in Triumph-\c-"); //
											}
										}
										A_StopSound(CHAN_VOICE);
										A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
									}
								}
							}
							else 
							{
								Console.Printf("no energy left");
								playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							}
							//Console.Printf("health less than max");
						}
						else 
						{
							//Console.Printf("health more/equal-to max");
							playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						}
					}
					else Destroy();
				} 
				else Destroy();
			}
			Fail;
	}
}

class BaseModPack : CustomInventoryExt
{
	bool grabbed;
	default
	{
		-COUNTITEM;
		+INVENTORY.BIGPOWERUP;
		+DONTGIB;
		Scale 0.25;
		Inventory.Pickupsound "misc/modpackpickup";
		Inventory.InterHubAmount 0;
		Inventory.MaxAmount 0;
	}
}

class RiotGunModpack : BaseModPack
{
	default
	{
		Tag "Riot Gun Modpack";
		Inventory.Icon "RGMDA0";
		Inventory.PickupMessage "You picked up a Riot Gun Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("RiotGunUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			RGMD ABCDCB 3 Bright;
			RGMD ABCDCB 3 Bright;
			RGMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("RiotGunUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[white]You picked up a Riot Gun Mod Pack.");
			}
			Stop;
	}
}

class TommyGunModpack : BaseModPack
{
	default
	{
		Tag "Tommy Gun Modpack";
		Inventory.Icon "TMMDA0";
		Inventory.PickupMessage "You picked up a Tommy Gun Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("TommyGunUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			TMMD ABCDCB 3 Bright;
			TMMD ABCDCB 3 Bright;
			TMMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("TommyGunUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[grey]You picked up a Tommy Gun Mod Pack.");
			}
			Stop;
	}
}

class BlasterRifleModpack : BaseModPack
{
	default
	{
		Tag "Blaster Rifle Modpack";
		Inventory.Icon "BMMDA0";
		Inventory.PickupMessage "You picked up a Blaster Rifle Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("BlasterRifleUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			BMMD ABCDCB 3 Bright;
			BMMD ABCDCB 3 Bright;
			BMMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("BlasterRifleUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[red]You picked up a Blaster Rifle Mod Pack.");
			}
			Stop;
	}
}

class BlasterPistolModpack : BaseModPack
{
	default
	{
		Tag "Blaster Pistol Modpack";
		Inventory.Icon "BPMDA0";
		Inventory.PickupMessage "You picked up a Blaster Pistol Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("BlasterPistolUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			BPMD ABCDCB 3 Bright;
			BPMD ABCDCB 3 Bright;
			BPMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("BlasterPistolUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[red]You picked up a Blaster Pistol Mod Pack.");
			}
			Stop;
	}
}

class DevastatorModpack : BaseModPack
{
	default
	{
		Tag "Devastator Modpack";
		Inventory.Icon "DVMDA0";
		Inventory.PickupMessage "You picked up a Devastator Weapon Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("DevastatorUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			DVMD ABCDCB 3 Bright;
			DVMD ABCDCB 3 Bright;
			DVMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("DevastatorUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[red]You picked up a Devastator Weapon Mod Pack.");
			}
			Stop;
	}
}

class CalamityBladeModPack : BaseModPack
{
	default
	{
		Tag "Calamity Blade Modpack";
		Inventory.Icon "CBMDA0";
		Inventory.PickupMessage "You picked up a Calamity Blade Mod Pack.";
	}
	
	override void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("CalamityBladeUpgrade") && !self.grabbed)
		{
			A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
			self.Destroy();
		}
		super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			CBMD ABCDCB 3 Bright;
			CBMD ABCDCB 3 Bright;
			CBMD E 5 Bright;
			Loop;
			
		Pickup:
			TNT1 A 0 
			{
				actor playera = players[0].mo;
				A_GiveInventory("CalamityBladeUpgrade",1);
				invoker.grabbed = true;
				playera.A_PrintBold("\c[fire]You picked up a Calamity Blade Mod Pack.");
			}
			Stop;
	}
}

class RandomModpack : CustomInventoryExt
{
	default
	{
		radius 1;
		height 2;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 Bright NoDelay
			{
				ThinkerIterator RMPackFinder = ThinkerIterator.Create("RandomModpack");
				bool spawned;
				actor mo;
				RandomModpack mo2;
				int numfound = 0;
				while (mo = Actor(RMPackFinder.Next()))
				{
					mo2 = RandomModpack(mo);
					if (mo2 != self) numfound++;
				}
				
				if (numfound < 4)
				{
					actor playera = players[0].mo;
					for (int i = 0; i < 16; i++)
					{
						int rand = random(1,5);
						//Console.Printf("i: %d / 16, rand: %d / 5", i, rand);
						if (rand <= 1)
						{
							if (!playera.CountInv("TommyGunUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("TommyGunModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
						if (rand == 2)
						{
							if (!playera.CountInv("BlasterRifleUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("BlasterRifleModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
						if (rand == 3)
						{
							if (!playera.CountInv("BlasterPistolUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("BlasterPistolModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
						if (rand == 4)
						{
							if (!playera.CountInv("RiotGunUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("RiotGunModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
						if (rand == 5)
						{
							if (!playera.CountInv("DevastatorUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("DevastatorModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
						if (rand >= 6)
						{
							if (!playera.CountInv("CalamityBladeUpgrade"))
							{
								[spawned, mo] = A_SpawnItemEx("CalamityBladeModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
								self.Destroy();
								break;
							}
						}
					}
					
					if (!(playera.CountInv("BlasterRifleUpgrade") ||
								playera.CountInv("TommyGunUpgrade") ||
								playera.CountInv("BlasterPistolUpgrade") ||
								playera.CountInv("RiotGunUpgrade") ||
								playera.CountInv("DevastatorUpgrade") ||
								playera.CountInv("CalamityBladeUpgrade")))
					{
						A_SpawnItemEx("RandomModpack",flags:SXF_NOCHECKPOSITION,tid:tid);
						self.Destroy();
					}
				}
			}
			TNT1 A 1 Bright;
			loop;
	}
}


//**************
// Mana Glitter*
//**************
class ManaGlitter : KCBaseTeleGlitter
{
	default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 6 A_SetTics(random(4,6));
		Travel:
			TGLT FGHIJ 2 Bright
			{
				A_FadeOut(0.075,FTF_REMOVE);
				A_SetScale(scale.x-0.075,scale.y-0.075);
			}
			stop;
	}
}

// Mana Pickups
class ManaPickupFlash : PickupFlash
{
	default
	{
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			ACLO DCDCBCBABA 3
			{
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
			}
			Stop;
	}
}

// Small Mana Recharge
class ManaCube : CustomInventoryExt 
{
	int TransPulseType, SizePulseType;
	default
	{
		//$NotAngled
		//$Color 6
		//$Category "Kampoulchhr Ammunition/Magic"
		Radius 8;
		Height 8;
		Scale 0.5;
		RenderStyle "Translucent";
		Alpha 0.8;
		Inventory.Pickupsound "PickupArtifact";
		Inventory.Pickupflash "ManaPickupFlash";
		Tag "Small Mana Cube [Kampoulchhr]: Restores a small amount of MP/Mana";
		Inventory.Pickupmessage "Accquired a \cfSmall Mana Cube\c-";
		+FLOATBOB;
		+DONTGIB;
	}

	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.425,0.475));
				invoker.SizePulseType = random(0,1);

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				invoker.TransPulseType = random(0,1);
			}
		Idle:
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scale.x <= 0.425 && scale.y <= 0.425) { invoker.SizePulseType = 1; } // Set to Expand
				if (scale.x >= 0.475 && scale.y >= 0.475) { invoker.SizePulseType = 0; } // Set to Shrink
				if (invoker.SizePulseType == 0) { A_SetScale(scale.x-0.0025,scale.y-0.0025); } // Shrinking
				if (invoker.SizePulseType == 1) { A_SetScale(scale.x+0.0025,scale.y+0.0025); } // Expanding
	
				if (alpha <= 0.60) { invoker.TransPulseType = 1; } // Set to Fade In
				if (alpha >= 1.00) { invoker.TransPulseType = 0; } // Set to Fade Out
				if (invoker.TransPulseType == 0) { A_FadeOut(0.025); } // Fading Out
				if (invoker.TransPulseType == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop;
		Success:
			TNT1 A 0 A_PickupManaCube(1,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}

class ManaCube2 : ManaCube
{
	default
	{
		//$NotAngled
		//$Color 6
		//$Category "Kampoulchhr Ammunition/Magic"
		Scale 0.75;
		Tag "Mana Cube [Kampoulchhr]: Restores a medium amount of MP/Mana";
		Inventory.Pickupmessage "Accquired a \cfMana Cube\c-";
	}
	
	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.7,0.8));
				invoker.SizePulseType = random(0,1);

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				invoker.TransPulseType = random(0,1);
			}
		Idle:
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scale.x <= 0.70 && scale.y <= 0.70) { invoker.SizePulseType = 1; } // Set to Expand
				if (scale.x >= 0.80 && scale.y >= 0.80) { invoker.SizePulseType = 0; } // Set to Shrink
				if (invoker.SizePulseType == 0) { A_SetScale(scale.x-0.005,scale.y-0.005); } // Shrinking
				if (invoker.SizePulseType == 1) { A_SetScale(scale.x+0.005,scale.y+0.005); } // Expanding
	
				if (alpha <= 0.60) { invoker.TransPulseType = 1; } // Set to Fade In
				if (alpha >= 1.00) { invoker.TransPulseType = 0; } // Set to Fade Out
				if (invoker.TransPulseType == 0) { A_FadeOut(0.025); } // Fading Out
				if (invoker.TransPulseType == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop;
		Success:
			TNT1 A 0 A_PickupManaCube(2,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}

class ManaCube3 : ManaCube
{
	default
	{
		//$NotAngled
		//$Color 6
		//$Category "Kampoulchhr Ammunition/Magic"
		Scale 1.0;
		Tag "Large Mana Cube [Kampoulchhr]: Restores a large amount of MP/Mana";
		Inventory.Pickupmessage "Accquired a \cfLarge Mana Cube\c-";
	}
	
	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.8,1.2));
				invoker.SizePulseType = random(0,1);

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				invoker.TransPulseType = random(0,1);
			}
		Idle:
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scale.x <= 0.8 && scale.y <= 0.8) { invoker.SizePulseType = 1; } // Set to Expand
				if (scale.x >= 1.2 && scale.y >= 1.2) { invoker.SizePulseType = 0; } // Set to Shrink
				if (invoker.SizePulseType == 0) { A_SetScale(scale.x-0.01,scale.y-0.01); } // Shrinking
				if (invoker.SizePulseType == 1) { A_SetScale(scale.x+0.01,scale.y+0.01); } // Expanding
	
				if (alpha <= 0.60) { invoker.TransPulseType = 1; } // Set to Fade In
				if (alpha >= 1.00) { invoker.TransPulseType = 0; } // Set to Fade Out
				if (invoker.TransPulseType == 0) { A_FadeOut(0.025); } // Fading Out
				if (invoker.TransPulseType == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop;
		Success:
			TNT1 A 0 A_PickupManaCube(3,0);
			Stop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}
