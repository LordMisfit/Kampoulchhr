class TSArtifactSpawner : CustomInventoryExt
{
	default
	{
		radius 1;
		height 2;
		+NOINTERACTION;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 BRIGHT NoDelay
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				
				int bits;
				if (player.CountInv("TimeSeraphCharm")) bits += 1;
				if (player.CountInv("TimeSeraphPocketWatch")) bits += 2;
				if (player.CountInv("TimeSeraphBangle")) bits += 4;
				
				string spawntype;
				int randsel;
				if (kcdebug_timeserapharmor) Console.Printf("bits: %d", bits);
				
				if (!player.CountInv("TimeSeraphCharm"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [1] check: %d", bits);
					if (player.CountInv("TimeSeraphPocketWatch") && player.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-6] check: %d", bits);
						spawntype = "TimeSeraphCharm";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!1-!6] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphCharm";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!player.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				else
				if (!player.CountInv("TimeSeraphPocketWatch"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [2] check: %d", bits);
					if (player.CountInv("TimeSeraphCharm") && player.CountInv("TimeSeraphBangle"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-5] check: %d", bits);
						spawntype = "TimeSeraphPocketWatch";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!2-!5] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphPocketWatch";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!player.CountInv("TimeSeraphBangle"))
							{
								randsel = random(1,256);
								if (randsel <= 192) spawntype = "TimeSeraphBangle";
								if (randsel >= 193) spawntype = "TimeSeraphCharm";
							}
							else
							{
								spawntype = "TimeSeraphCharm";
							}
						}
					}
				}
				else
				if (!player.CountInv("TimeSeraphBangle"))
				{
					if (kcdebug_timeserapharmor) Console.Printf("!bit [4] check: %d", bits);
					if (player.CountInv("TimeSeraphCharm") && player.CountInv("TimeSeraphPocketWatch"))
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-3] check: %d", bits);
						spawntype = "TimeSeraphBangle";
					}
					else
					{
						if (kcdebug_timeserapharmor) Console.Printf("bit [!4-!3] check: %d", bits);
						randsel = random(1,256);
						if (randsel <= 224) spawntype = "TimeSeraphBangle";
						if (randsel >= 225 && randsel <= 256)
						{
							if (!player.CountInv("TimeSeraphCharm"))
							{
								randsel = random(1,256);
								if (randsel <= 128) spawntype = "TimeSeraphCharm";
								if (randsel >= 129) spawntype = "TimeSeraphPocketWatch";
							}
							else
							{
								spawntype = "TimeSeraphPocketWatch";
							}
						}
					}
				}
				
				if (bits < 7 && spawntype != "") 
				{
					if (kcdebug_timeserapharmor) Console.Printf("spawntype: %s", spawntype);
					A_SpawnItemEx(spawntype,0.0,0.0,0.0,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				Destroy();
			}
			Loop;
	}
}

class BaseTimeSeraphArtifact : CustomInventoryExt
{
	void PickupArtifactFirstTime()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			MiscItem.TimeArmorEnergyTics += (3600 * TICRATE);
		}
	}
	
	int CheckNumArtifacts()
	{
		actor player = players[0].mo;
		int numartifacts;
		if (player.CountInv("TimeSeraphCharm")) numartifacts++;
		if (player.CountInv("TimeSeraphPocketWatch")) numartifacts++;
		if (player.CountInv("TimeSeraphBangle")) numartifacts++;
		return numartifacts;
	}
	
	int DecideColorPhase(int numartifacts)
	{
		actor player = players[0].mo;
		string type = GetClassName();
		int colorphase = 0;
		// 0 = Platinum [neutral]
		// 1 = Aqua-Blue
		// 2 = Lime-Green
		// 3 = Violet-Purple
		Actor mo;
		int artifactsnearby;
		int charmsfound = 0;
		int watchesfound = 0;
		int banglesfound = 0;
		double checkdist = frandom(480.0,544.0);
		if (type != "TimeSeraphCharm")
		{
			ThinkerIterator CharmFinder = ThinkerIterator.Create("TimeSeraphCharm");
			while (mo = Actor(CharmFinder.Next()))
			{
				if (Distance3D(player) <= checkdist && player.CountInv("TimeSeraphCharm") > 0)
				{
					charmsfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								charmsfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("CharmFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (charmsfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphPocketWatch")
		{
			ThinkerIterator WatchFinder = ThinkerIterator.Create("TimeSeraphPocketWatch");
			while (mo = Actor(WatchFinder.Next()))
			{
				if (Distance3D(player) <= checkdist && player.CountInv("TimeSeraphPocketWatch") > 0)
				{
					watchesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								watchesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("WatchFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (watchesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		if (type != "TimeSeraphBangle")
		{
			ThinkerIterator BangleFinder = ThinkerIterator.Create("TimeSeraphBangle");
			while (mo = Actor(BangleFinder.Next()))
			{
				if (Distance3D(player) <= checkdist && player.CountInv("TimeSeraphBangle") > 0)
				{
					banglesfound++;
					artifactsnearby++;
					if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[green][owned]\c-: %p [%s]", mo, mo.GetClassName());
				}
				else
				{
					CustomInventoryExt mo2;
					mo2 = CustomInventoryExt(mo);
					if (mo2)
					{
						if (Distance3D(mo2) <= checkdist)
						{
							if (!mo2.owner)
							{
								banglesfound++;
								artifactsnearby++;
								if (kcdebug_timeserapharmor) Console.Printf("BangleFinder \c[brick][loose]\c-: %p [%s]", mo, mo.GetClassName());
							}
						}
					}
				}
				if (banglesfound) 
				{
					colorphase += 1;
					break;
				}
			}
		}
		
		if (artifactsnearby) colorphase += 1;
		if (colorphase >= 3) colorphase = 3;
		if (kcdebug_timeserapharmor) Console.Printf("[%s] charmsfound: %d, watchesfound: %d, banglesfound: %d, artifactsnearby: %d, colorphase: %d [tic: %d]", GetClassName(), charmsfound, watchesfound, banglesfound, artifactsnearby, colorphase, gametic);
		return colorphase;
	}
	
	void CheckExistance()
	{
		actor player = players[0].mo;
		string type = GetClassName();
		if (player.CountInv(type)) Destroy();
	}
}

class TimeSeraphCharm : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSCHA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.1667;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSCHA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSCHB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSCHC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSCHD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????";
		if (player.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Charm\c-");
			tagg.AppendFormat(": Said to allow the holder movement within frozen time if paired with the \c[gold]Pocket Watch\c-. Allows user to summon the \c[HeiwaDeluge]Time Seraph's armor\c- for protection. Using this will toggle \c[lightblue]level 1\c- protection on or off.");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSCH A 0 BRIGHT
			{
				actor player = players[0].mo;
				invoker.CheckExistance();
				
				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSCH A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSCH B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSCH C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSCH D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				player.A_SetInventory("CharmEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && player.CountInv("TimeSeraphCharm"))
				{
					if (player.CountInv("TSArmorTier2"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",1);
					}
					else
					if (player.CountInv("TSArmorTier1"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						player.A_SetInventory("TSArmorTier1",0);
						player.A_SetInventory("TSArmorTier1",1);
					}
				}
			}
			Fail;
	}
}

class TimeSeraphPocketWatch : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSPWA0";
		Tag "";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSPWA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSPWB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSPWC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSPWD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ?????? ?????";
		if (player.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Pocket Watch\c-");
			tagg.AppendFormat(": Said to allow its holder the Perception of Frozen Time. Upgrades \c[HeiwaDeluge]Time Seraph's Armor\c- to \c[green]Level 2\c- potency if used as an item and you possess the charm.");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSPW A 0 BRIGHT
			{
				invoker.CheckExistance();
				actor player = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSPW A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSPW B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSPW C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSPW D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				player.A_SetInventory("PWatchEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && player.CountInv("TimeSeraphCharm"))
				{
					if (Player.CountInv("TSArmorTier2"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					if (Player.CountInv("TSArmorTier1"))
					{
						player.A_SetInventory("TSArmorTier2",1);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						player.A_SetInventory("TSArmorTier2",1);
						player.A_SetInventory("TSArmorTier1",0);
					}
				}
			}
			Fail;
	}
}

class TimeSeraphBangle : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSBGA0";
		Tag "Time Seraph's Bangle: Creates a scanning visor over the eyes for various vision related perks when used. Toggleable.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	override void Tick()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		string itemname = GetClassName();

		texname = "TSBGA0";
		if (MiscItem)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) texname = "TSBGB0";
			if (MiscItem.TimeArmorRelicsOwned == 2) texname = "TSBGC0";
			if (MiscItem.TimeArmorRelicsOwned == 3) texname = "TSBGD0";
		}
		icon = TexMan.CheckForTexture(texname, TexMan.TYPE_MiscPatch);
		
		string tagg = "???? ??????'? ??????";
		if (player.CountInv(itemname) > 0)
		{
			if (MiscItem.TimeArmorRelicsOwned == 1) tagg = "\c[lightblue]";
			if (MiscItem.TimeArmorRelicsOwned == 2) tagg = "\c[green]";
			if (MiscItem.TimeArmorRelicsOwned == 3) tagg = "\c[HeiwaDeluge]";
			tagg.AppendFormat("Time Seraph's Bangle\c-");
			tagg.AppendFormat(": Creates a scanning visor over the eyes for various vision related perks when used. Toggleable. [boosts damage dealt by 12.5%]");
		}
		SetTag(tagg);
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSBG A 1 BRIGHT
			{
				invoker.CheckExistance();
				actor player = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSBG A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSBG B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSBG C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSBG D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				player.A_SetInventory("BangleEnergyGive",1);
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (Player.CountInv("TimeSeraphVisor"))
					{
						player.A_SetInventory("TimeSeraphVisor",0);
					}
					else
					{
						player.A_SetInventory("TimeSeraphVisor",1);
					}
				}
			}
			Fail;
	}
}


// Invuln Sphere
class InvulnerabilitySphere2 : CustomInventoryExt replaces InvulnerabilitySphere
{
	default
	{
		+DONTGIB
		+FLOATBOB
		+COUNTITEM
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ADDITIVETIME
		Inventory.PickupMessage "\c[green]Invulnerability!";
		Inventory.PickupSound "powerups/invuln";
	}
	
	States
	{
		Spawn:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					//A_StopSound(CHAN_VOICE);
					//A_StartSound("Dinah/What",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM,maskpitch);
				}
				A_GiveInventory("KCPowerInvuln");
			}
			Stop;
	}
}
