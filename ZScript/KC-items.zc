class BaseTimeSeraphArtifact : CustomInventoryExt
{
	void PickupArtifactFirstTime()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			MiscItem.TimeArmorEnergyTics += (3600 * TICRATE);
		}
	}
	
	int CheckNumArtifacts()
	{
		actor player = players[0].mo;
		int numartifacts;
		if (player.CountInv("TimeSeraphCharm")) numartifacts++;
		if (player.CountInv("TimeSeraphPocketWatch")) numartifacts++;
		if (player.CountInv("TimeSeraphBangle")) numartifacts++;
		return numartifacts;
	}
	
	int DecideColorPhase(int numartifacts)
	{
		actor player = players[0].mo;
		string type = GetClassName();
		int colorphase = 0;
		// 0 = Platinum [neutral]
		// 1 = Aqua-Blue
		// 2 = Lime-Green
		// 3 = Violet-Purple
		Actor mo;
		int artifactsnearby;
		if (type != "TimeSeraphCharm")
		{
			int charmsfound = 0;
			ThinkerIterator CharmFinder = ThinkerIterator.Create("TimeSeraphCharm");
			while (mo = Actor(CharmFinder.Next()))
			{
				charmsfound++;
				artifactsnearby++;
			}
			if (charmsfound) colorphase += 1;
		}
		if (type != "TimeSeraphPocketWatch")
		{
			int watchesfound = 0;
			ThinkerIterator WatchFinder = ThinkerIterator.Create("TimeSeraphPocketWatch");
			while (mo = Actor(WatchFinder.Next()))
			{
				watchesfound++;
				artifactsnearby++;
			}
			if (watchesfound) colorphase += 1;
		}
		if (type != "TimeSeraphBangle")
		{
			int banglesfound = 0;
			ThinkerIterator BangleFinder = ThinkerIterator.Create("TimeSeraphBangle");
			while (mo = Actor(BangleFinder.Next()))
			{
				banglesfound++;
				artifactsnearby++;
			}
			
			if (banglesfound) colorphase += 1;
		}
		if (artifactsnearby) colorphase += 1;
		else 
		{
			if (Distance3D(player) <= frandom(480.0,544.0)) colorphase += 1;
		}
		if (colorphase >= 3) colorphase = 3;
		return colorphase;
	}
	
	void CheckExistance()
	{
		actor player = players[0].mo;
		string type = GetClassName();
		if (player.CountInv(type)) Destroy();
	}
}

class TimeSeraphCharm : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSCHA0";
		Tag "Time Seraph's Charm: Allows movement within frozen time if paired with the Pocket Watch. Allows user to summon the Time Seraph's armor for protection. Using this will toggle level 1 protection on or off.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.1667;
	}
	
	States
	{
		Spawn:
			TSCH A 0 BRIGHT
			{
				actor player = players[0].mo;
				invoker.CheckExistance();
				
				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSCH A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSCH B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSCH C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSCH D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				invoker.PickupArtifactFirstTime();
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && player.CountInv("TimeSeraphCharm"))
				{
					if (player.CountInv("TSArmorTier2"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",1);
					}
					else
					if (player.CountInv("TSArmorTier1"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						player.A_SetInventory("TSArmorTier1",0);
						player.A_SetInventory("TSArmorTier1",1);
					}
				}
			}
			Fail;
	}
}

class TimeSeraphPocketWatch : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSPWA0";
		Tag "Time Seraph's Pocket Watch: Allows Perception of Frozen Time. Upgrades Time Seraph's Armor to Level 2 potency if used as an item and you possess the charm.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	States
	{
		Spawn:
			TSPW A 0 BRIGHT
			{
				invoker.CheckExistance();
				actor player = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSPW A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSPW B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSPW C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSPW D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				invoker.PickupArtifactFirstTime();
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem && player.CountInv("TimeSeraphCharm"))
				{
					if (Player.CountInv("TSArmorTier2"))
					{
						player.A_SetInventory("TSArmorTier2",0);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					if (Player.CountInv("TSArmorTier1"))
					{
						player.A_SetInventory("TSArmorTier2",1);
						player.A_SetInventory("TSArmorTier1",0);
					}
					else
					{
						player.A_SetInventory("TSArmorTier2",1);
						player.A_SetInventory("TSArmorTier1",0);
					}
				}
			}
			Fail;
	}
}

class TimeSeraphBangle : BaseTimeSeraphArtifact
{
	default
	{
		//$Category EE Artifacts
		Inventory.PickupMessage "";
		Inventory.Icon "TSBGA0";
		Tag "Time Seraph's Bangle: Creates a scanning visor over the eyes for various vision related perks when used. Toggleable.";
		+FLOATBOB
		+DONTGIB
		-COUNTITEM;
		+INVENTORY.INVBAR
		+INVENTORY.HUBPOWER
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNDROPPABLE
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupFlash "PickupFlash";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		scale 0.125;
	}
	
	States
	{
		Spawn:
			TSBG A 1 BRIGHT
			{
				invoker.CheckExistance();
				actor player = players[0].mo;

				int numartifacts = invoker.CheckNumArtifacts();
				int colorphase = invoker.DecideColorPhase(numartifacts);
				if (colorphase <= 0) return resolvestate("Idle0");
				if (colorphase == 1) return resolvestate("Idle1");
				if (colorphase == 2) return resolvestate("Idle2");
				if (colorphase >= 3) return resolvestate("Idle3");
				return resolvestate("Idle0");
			}
			Loop;
		Idle0:
			TSBG A 1 BRIGHT;
			goto Spawn;
		Idle1:
			TSBG B 1 BRIGHT;
			goto Spawn;
		Idle2:
			TSBG C 1 BRIGHT;
			goto Spawn;
		Idle3:
			TSBG D 1 BRIGHT;
			goto Spawn;
		Pickup:
			TNT1 A 0
			{
				invoker.PickupArtifactFirstTime();
			}
			stop;
		Use:
			TNT1 A 0
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (Player.CountInv("TimeSeraphVisor"))
					{
						player.A_SetInventory("TimeSeraphVisor",0);
					}
					else
					{
						player.A_SetInventory("TimeSeraphVisor",1);
					}
				}
			}
			Fail;
	}
}