// Heretic
class PodNew : Pod // replaces Pod
{
	Default
	{
		+PUSHABLE
		Tag "Explosive Pod";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}

	States
	{
		Death:
			PPOD C 5 BRIGHT A_RemovePod;
			PPOD D 5 BRIGHT A_Scream();
			Goto Super::Death+2;
	}
}
class ChickenNew : KCCreature // replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			loop;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			CHKN A 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			CHKN D 5 A_Feathers();
			CHKN C 5 A_KCPain();
			Goto See;
		Death:
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}
class HereticImpNew : KCCreature { } // Filler for later implementation
class HereticImpLeaderNew : KCCreature { } // Filler for later implementation
class PlagueImp : KCCreature { } // Filler for later implementation
class WatcherImp : KCCreature { } // Filler for later implementation
class MummyNew : KCCreature { } // Filler for later implementation
class MummyGhostNew : KCCreature { } // Filler for later implementation
class MummyLeaderNew : KCCreature { } // Filler for later implementation
class MummyLeaderGhostNew : KCCreature { } // Filler for later implementation
class IceGolem : KCCreature { } // Filler for later implementation
class IceGolemGhost : KCCreature { } // Filler for later implementation
class FrostGolem : KCCreature { } // Filler for later implementation
class FrostGolemGhost : KCCreature { } // Filler for later implementation
class KnightNew : KCCreature { } // Filler for later implementation
class KnightGhostNew : KCCreature { } // Filler for later implementation
class DeathKnight : KCCreature { } // Filler for later implementation
class DeathKnightGhost : KCCreature { } // Filler for later implementation
class WizardNew : KCCreature { } // Filler for later implementation
class GreaterDisciple : KCCreature { } // Filler for later implementation
class HereticApprenticeNew : KCCreature { } // Filler for later implementation
class Banshee : KCCreature { } // Filler for later implementation
class IronlichNew : KCCreature { } // Filler for later implementation
class IceLich : KCCreature { } // Filler for later implementation
class GoldLich : KCCreature { } // Filler for later implementation
class FakeGoldLich : KCCreature { } // Filler for later implementation
class BloodLich : KCCreature { } // Filler for later implementation
class ClinkNew : KCCreature { } // Filler for later implementation
class DarkClink : KCCreature { } // Filler for later implementation
class BeastNew : KCCreature // replaces Beast
{
	default
	{
		Tag "Were-Dragon";
		Health 220;
		Radius 32;
		Height 74;
		Mass 200;
		Speed 14;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.125;
		Painchance "Fire", 13;
		DamageFactor "Ice", 4.0;
		Painchance "Ice", 256;
		Monster;
		+FLOORCLIP;
		SeeSound "beast/sight";
		AttackSound "beast/attack";
		PainSound "beast/pain";
		DeathSound "beast/death";
		ActiveSound "beast/active";
		Obituary "$OB_BEAST";
		DropItem "CrossbowAmmo", 84, 10;
		DropItem "CrossbowHefty", 8, 50;
	}
	
	States
	{
		Spawn:
			BEAS A 0 NoDelay;
			BEAS AB 10 A_Look();
			goto Spawn+1;
		See:
			BEAS ABCDEF 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BEAS H 0 A_DynamicMusic(); 
			BEAS H 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			BEAS I 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomComboAttack("BeastBallNew", 32, random[BeastAttack](1,8)*3, "beast/attack");
			}
			Goto See;
		Pain:
			BEAS G 3;
			BEAS G 3 A_KCPain();
			Goto See;
		Pain.Fist:
			BEAS G 3;
			BEAS G 3 A_KCPain();
			BEAS GG 3;
			Goto See;
		Pain.Kick:
			BEAS G 3;
			BEAS G 3 A_KCPain();
			BEAS GGGG 3;
			Goto See;
		Death:
			BEAS R 6;
			BEAS S 6 A_Scream();
			BEAS TUV 6;
			BEAS W 6 A_NoBlocking();
			BEAS XY 6;
			BEAS Z -1;
			Stop;
		XDeath:
			BEAS J 5;
			BEAS K 6 A_Scream();
			BEAS L 5;
			BEAS M 6;
			BEAS N 5;
			BEAS O 6 A_NoBlocking();
			BEAS P 5;
			BEAS Q -1;
			Stop;
		Ice:
			BEAS G 5 A_GenericFreezeDeath();
			BEAS G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BEAS P 5;
			BEAS O 6;
			BEAS N 5;
			BEAS M 6;
			BEAS L 5;
			BEAS K 6;
			BEAS J 5;
			Goto See;
	}
}
class BeastBallNew : KCProjectile // replaces BeastBall 
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 9;
		Height 8;
		Speed 12;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "beast/attack";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			FRB1 DEFGH 4;
			Stop;
	}
}
class ShadowBeast : KCCreature
{
	default
	{
		Tag "Shadow Beast";
		Obituary "%o was killed by a shadow beast.";
		Bloodcolor "70 AC 00";
		Health 750; // 500
		Radius 40;
		Height 80;
		Mass 1250; // 500
		Speed 12;
		PainChance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		SEESOUND "shadowbeast/sight";
		PAINSOUND "shadowbeast/pain";
		DEATHSOUND "shadowbeast/death";
		ACTIVESOUND "shadowbeast/active";
		Alpha 1.0;
		RenderStyle "Translucent";
		MONSTER;
		+FloorClip;
	}
	
	states
	{
		Spawn:
			BDEM AB 10 A_Look();
			Loop;
		See:
			TNT1 A 0 A_JumpIfHealthLower((user_MaxHP / 2), "Run");
			BDEM ABCDEF 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); bAVOIDMELEE = true; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); bAVOIDMELEE = true; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Run:
			TNT1 A 0 A_StartSound("shadowbeast/sight");
			BDEM AABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFF 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_KCChase(null,null,0,1,3,1,1);
			}
			TNT1 A 0 A_Jump(252, "Missile");
			Goto See;

		Missile:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_JumpIfHealthLower ((user_MaxHP / 2), "Missile2");
			TNT1 A 0 A_Jump(90, "Missile1b");
		
		Missile1a:
			BDEM H 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 0);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 8);
			}
			Goto See;
		Missile1b:
			BDEM H 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -16);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -8);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 0);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 8);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 16);
			}
			BDEM I 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 32);
			}
			Goto See;

		Missile2:
			TNT1 A 0 A_Jump(90, "Missile2b");
		Missile2a:
			BDEM H 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM IIIIIIIIIIIII 2 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }

				A_SpawnProjectile("ShadowBeastBallFire", 56, 0, random(-8,8));
			}
			Goto See;
		Missile2b:
			BDEM H 16 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(78,79,79,79)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(67,68)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(56,56,56,57)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(22,23)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(15); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();

				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 0);
			}
			Goto See;

		Pain:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / 2)), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / 8)), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			BDEM GG 4;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / 16)), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			BDEM GGGG 4;
			Goto See;

		Death:
			BDEM R 8;
			BDEM S 8 A_Scream();
			BDEM TUVWX 6;
			BDEM Y 6 A_NoBlocking();
			BDEM Z -1;
			Stop;
		Raise:
			BDEM Y 6;
			BDEM XWVUT 6;
			BDEM SR 8;
			Goto See;

		Spread:
			TNT1 A 0 
			{
				A_SpawnItemEx("ShadowBeastSpread", 0, 0, 0, 0, 0, 0, 0, 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);

				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				
				A_SetTranslucent(0.0);
			}
			Goto Wander;
		Wander:
			TNT1 A 0 
			{
				A_UnSetShootable();
				bNOPAIN = true;
			}
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }
				A_KCWander(0,1,3,1,1);
			}
			BDEM ABCDEF 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FadeIn(0.1667,FTF_CLAMP);
				if (random(1,6) == 1) { A_KCWander(0,1,3,1,1); } else { A_KCChase(null,null,0,1,3,1,1); }
			}
			TNT1 A 0 
			{
				A_SetShootable();
				bNOPAIN = false;
			}
			Goto See;
	}
}
class ShadowBeastSpread : KCBaseZSC
{
	default
	{
		Tag "Shadow Beast Shot";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spread");
			BDEM JKLMNOP 8;
			BDEM Q 70;
			BDEM QQQQQQQQQQ 1 A_FadeOut(0.1);
			Stop;
	}
}
class ShadowBeastCreature : KCSpawnedItem
{
	default
	{
		Tag "Shadow Beast Spirit";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 16;
		MONSTER;
		-SOLID;
		-SHOOTABLE;
		-COUNTKILL;
		+FLOAT;
		+NOGRAVITY;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spiritsit");
			Goto See;
		See:
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			BDSP ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB 2 A_Chase();
			Goto Death; 
		Melee:
			BDSP AB 2 A_CustomMeleeAttack((5 * random(1,8)), "none", "none", "Magic");
			Goto See;
		Death:
			TNT1 A 0 A_StartSound("shadowbeast/spiritdth");
			BDSP EFGHIJ 5;
			Stop;
	}
}
class ShadowBeastSparkle : KCProjectile
{   
	default
	{
		Alpha 1.0;
		RenderStyle "Add";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
		Scale 1.0;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(128,2);
			BDP1 GHI 5;
			Stop;
	}
}
class ShadowBeastBallFire : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (1 * random(1,8)); // 2
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1death";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			BDP2 DEFGH 5 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 A 0;
			Stop;
	}
}
class ShadowBeastBall1 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0  ;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (5 * random(1,8));
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1sight";
		DeathSound "shadowbeast/pr1death";
	}
	
	States
	{
		Spawn:
			BDP2 ABC 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BDP2 DE 4 Bright;
			BDP2 FGH 3 Bright;
			Stop;
	}
}
class ShadowBeastBall2 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (2 * random(1,8));
		Speed 16;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DE 1 A_BishopMissileWeave();
			Loop;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class ShadowBeastBall3 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		Scale 1.4;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (10 * random(1,8));
		Speed 20;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DEDEDEDED 2 A_BishopMissileWeave();
			BDP1 ED 2 A_BishopMissileWeave();
			TNT1 A 0 A_FadeOut(0.20);
			Goto Spawn+9;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class MaulotaurBase : KCCreature
{
 const MAULATORTICS = 25 * TICRATE;
 const MNTR_CHARGE_SPEED =13.;
 const MINOTAUR_LOOK_DIST = 16*54.;
	
	void MinotaurSlam (Actor target)
	{
		double ang = AngleTo(target);
		double thrust = 16 + random[MinotaurSlam]() / 64.;
		target.VelFromAngle(ang, thrust);
		int damage = random[MinotaurSlam](1, 8) * (bSummonedMonster? 4 : 6);
		int newdam = target.DamageMobj (null, null, damage, 'Melee');
		target.TraceBleedAngle (newdam > 0 ? newdam : damage, ang, 0.);
		if (target.player)
		{
			target.reactiontime = random[MinotaurSlam](14, 21);
		}
	}

	override void Tick ()
	{
		Super.Tick ();
		
		// The unfriendly Minotaur (Heretic's) is invulnerable while charging
		if (!bSummonedMonster)
		{
			bInvulnerable = bSkullFly;
		}
	}

	override bool Slam (Actor thing)
	{
		// Slamming minotaurs shouldn't move non-creatures
		if (!thing.bIsMonster && !thing.player)
		{
			return false;
		}
		return Super.Slam (thing);
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		damage = Super.DoSpecialDamage (target, damage, damagetype);
		if (damage != -1 && bSkullFly)
		{
			// Slam only when in charge mode
			MinotaurSlam (target);
			return -1;
		}
		return damage;
	}

	void A_MinotaurAtk1(int atkdamage = 4, int squishamount = -16)
	{
		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/melee", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
	}

	void A_MinotaurDecide()
	{
		bool friendly = bSummonedMonster;

		if (!target)
		{
			return;
		}
		if (!friendly)
		{
			A_StartSound("minotaur/sight", CHAN_WEAPON);
		}
		double dist = Distance2D(target);
		if (target.pos.z + target.height > pos.z
			&& target.pos.z + target.height < pos.z + height
			&& dist < (friendly ? 16*64. : 8*64.)
			&& dist > 1*64.
			&& random[MinotaurDecide]() < 150)
		{
			// Charge attack
			// Don't call the state function right away
			SetStateLabel("Charge", true);
			bSkullFly = true;
			if (!friendly)
			{
				// Heretic's Minotaur is invulnerable during charge attack
				// bInvulnerable = true;
				A_SetInventory("MaulotaurChargeDefense",1);
				bNoPain = true;
				bNoBlood = true;
			}
			A_FaceTarget ();
			VelFromAngle(MNTR_CHARGE_SPEED);
			special1 = TICRATE/2; // Charge duration
		}
		else if (target.pos.z == target.floorz
				&& dist < 9*64.
				&& random[MinotaurDecide]() < (friendly ? 100 : 220))
		{
			// Floor fire attack
			SetStateLabel("Hammer");
			special2 = 0;
		}
		else
		{
			// Swing attack
			A_FaceTarget ();
			// Don't need to call P_SetMobjState because the current state
			// falls through to the swing attack
		}
	}
	
	void A_MinotaurCharge()
	{
		if (target == null)
		{
			return;
		}
		if (special1 > 0)
		{
			Class<Actor> type;

			if (gameinfo.gametype == GAME_Heretic)
			{
				type = "PhoenixPuff";
			}
			else
			{
				type = "PunchPuff";
			}
			Actor puff = Spawn (type, Pos, ALLOW_REPLACE);
			if (puff != null) puff.Vel.Z = 2;
			special1--;
		}
		else
		{
			bSkullFly = false;
			bInvulnerable = false;
			A_SetInventory("MaulotaurChargeDefense",0);
			bNoPain = false;
			bNoBlood = false;
			SetState (SeeState);
		}
	}

	void A_MinotaurAtk2(string missiletype = "MinotaurFX1", int meleedamage = 5, int friendlymeleedamage = 3)
	{
		bool friendly = bSummonedMonster;

		int actualmeleedmg = meleedamage;
		if (friendly == 1) actualmeleedmg = friendlymeleedamage;
		string actualmissile = missiletype;
		
		if (target == null)
		{
			return;
		}
		A_StartSound("minotaur/attack2", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = actualmeleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		double z = pos.z + 40;
		Class<Actor> fx = actualmissile;
		Actor mo = SpawnMissileZ (z, target, fx);
		if (mo != null)
		{
			//S_Sound (mo, CHAN_WEAPON, "minotaur/attack2", 1, ATTN_NORM);
			double vz = mo.Vel.Z;
			double ang = mo.angle;
			SpawnMissileAngleZ (z, fx, ang-(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang-(45./16), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./16), vz);
		}
	}

	void A_MinotaurAtk3(int atkdamage = 4, int squishamount = -16, string missiletype = "MinotaurFX2New")
	{
		string attacktype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/attack3", CHAN_VOICE);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
		else
		{
			if (Floorclip > 0 && compat_minotaur)
			{
				// only play the sound. 
				A_StartSound("minotaur/fx2hit", CHAN_WEAPON);
			}
			else
			{
				Actor mo = SpawnMissile (target, attacktype);
				if (mo != null)
				{
					mo.A_StartSound("minotaur/attack1", CHAN_WEAPON);
				}
			}
		}
		if (random[MinotaurAtk3]() < 192 && special2 == 0)
		{
			SetStateLabel ("HammerLoop");
			special2 = 1;
		}
	}

	void A_MinotaurDeath()
	{
		if (Wads.CheckNumForName ("MNTRF1", Wads.ns_sprites) < 0 &&
			Wads.CheckNumForName ("MNTRF0", Wads.ns_sprites) < 0)
			SetStateLabel("FadeOut");
	}

	void A_MinotaurRoam()
	{
		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		let mf = MinotaurFriend(self);
		if (mf)
		{
			if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
			{
				DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
				return;
			}
		}

		if (random[MinotaurRoam]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (random[MinotaurRoam]() < 6)
		{
			//Choose new direction
			movedir = random[MinotaurRoam]() % 8;
			FaceMovementDirection ();
		}
		if (!MonsterMove())
		{
			// Turn
			if (random[MinotaurRoam]() & 1)
				movedir = (movedir + 1) % 8;
			else
				movedir = (movedir + 7) % 8;
			FaceMovementDirection ();
		}
	}

	void A_MinotaurLook()
	{
		if (!(self is "MinotaurFriend"))
		{
			A_Look();
			return;
		}

		Actor mo = null;
		PlayerInfo player;
		double dist;
		Actor master = tracer;

		target = null;
		if (deathmatch)					// Quick search for players
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				player = players[i];
				mo = player.mo;
				if (mo == master) continue;
				if (mo.health <= 0) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				target = mo;
				break;
			}
		}

		if (!target)				// Near player monster search
		{
			if (master && (master.health > 0) && (master.player))
				mo = master.RoughMonsterSearch(20);
			else
				mo = RoughMonsterSearch(20);
			target = mo;
		}

		if (!target)				// Normal monster search
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");

			while ((mo = Actor(it.Next())) != null)
			{
				if (!mo.bIsMonster) continue;
				if (mo.health <= 0) continue;
				if (!mo.bShootable) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				if (mo == master || mo == self) continue;
				if (mo.bSummonedMonster && mo.tracer == master) continue;
				target = mo;
				break;			// Found actor to attack
			}
		}

		if (target)
		{
			SetState (SeeState, true);
		}
		else
		{
			SetStateLabel ("Roam", true);
		}
	}

	void A_MinotaurChase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0, int value6 = 0)
	{
		let mf = MinotaurFriend(self);
		if (!mf)
		{
			A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5,value6);
			return;
		}

		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
		{
			DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
			return;
		}

		if (random[MinotaurChase]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (!target || (target.health <= 0) || !target.bShootable)
		{
			// look for a new target
			SetIdle();
			return;
		}

		FaceMovementDirection ();
		reactiontime = 0;

		// Melee attack
		if (MeleeState && CheckMeleeRange ())
		{
			if (AttackSound)
			{
				A_StartSound(AttackSound, CHAN_WEAPON);
			}
			SetState (MeleeState);
			return;
		}

		// Missile attack
		if (MissileState && CheckMissileRange())
		{
			SetState (MissileState);
			return;
		}

		// chase towards target
		if (!MonsterMove ())
		{
			NewChaseDir ();
			FaceMovementDirection ();
		}

		// Active sound
		if (random[MinotaurChase]() < 6)
		{
			PlayActiveSound ();
		}
	}
}
class MaulotaurNew : MaulotaurBase // replaces Minotaur
{
	default
	{
		Tag "Maulotaur";
		Health 3000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOTARGET;
		+BOSSDEATH;
		+AVOIDMELEE;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "PhoenixRodAmmo", 168, 2;
		DropItem "PhoenixRodHefty", 17, 10;
		DropItem "PhoenixRodAmmo", 84, 2;
		DropItem "PhoenixRodHefty", 8, 10;
		DropItem "PhoenixRodAmmo", 42, 2;
		DropItem "PhoenixRodHefty", 4, 10;
		DropItem "PhoenixRodAmmo", 21, 2;
		DropItem "PhoenixRodHefty", 2, 10;
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
			MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR ABCD 5 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / 22.5));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			MNTR F 6 A_MinotaurDeath();
			MNTR G 5;
			MNTR H 6 A_Scream();
			MNTR I 5;
			MNTR J 6;
			MNTR K 5;
			MNTR L 6;
			MNTR M 5 A_NoBlocking();
			MNTR N 6;
			MNTR O 5;
			MNTR P 6;
			MNTR Q 5;
			MNTR R 6;
			MNTR S 5;
			MNTR T -1 A_BossDeath();
			Stop;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			MNTR E 5 A_GenericFreezeDeath();
			MNTR E 1 A_FreezeDeathChunks();
			wait;
		Raise:
			MNTR S 5;
			MNTR R 6;
			MNTR Q 5;
			MNTR P 6;
			MNTR O 5;
			MNTR N 6;
			MNTR M 5;
			MNTR L 6;
			MNTR K 5;
			MNTR J 6;
			MNTR I 5;
			MNTR H 6;
			MNTR G 5;
			MNTR F 6;
			goto See;
	}
}
class MinotaurFX1New : KCEffectProjectile // replaces MinotaurFX1 
{
	default
	{
		Tag "'taur Fire";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 26;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX12 AAABBB 2 Bright;
			Loop;
		Death:
			FX12 CDEFGH 5 Bright;
			Stop;
	}
}
class MinotaurFX2New : MinotaurFX1New // replaces MinotaurFX2 
{
	default
	{
		Tag "'taur Firesnake";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 5;
		Height 12;
		Speed 14;
		FastSpeed 20;
		+FLOORHUGGER;
		ExplosionDamage 24;
		DeathSound "minotaur/fx2hit";
	}

	States
	{
		Spawn:
			FX13 A 2 Bright 
			{
				A_MntrFloorFire("MinotaurFX3New");
			}
			Loop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(24,64);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class MinotaurFX3New : MinotaurFX2New // replaces MinotaurFX3 
{
	default
	{
		Tag "'taur Firesnake";
		DamageType "Fire";
		Radius 8;
		Height 16;
		Speed 0;
		DeathSound "minotaur/fx3hit";
		ExplosionDamage 128;
	}
	
	States
	{
		Spawn:
			FX13 DDCC 2 Bright;
			FX13 BB 2 Bright;
			FX13 B 1 Bright;
			FX13 CC 2 Bright;
			FX13 C 1 Bright;
			FX13 DD 2 Bright;
			FX13 D 1 Bright;
			FX13 EE 2 Bright;
			FX13 E 1 Bright;
			FX13 FFGGHH 2 Bright;
			Stop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(128,128);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class SnakeNew : KCCreature // replaces Snake
{
	double user_varience;
	default
	{
		Tag "Ophidian";
		Health 280;
		Radius 22;
		Height 70;
		Speed 10;
		Painchance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 42;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 60;
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Obituary "$OB_SNAKE";
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodHefty", 8;
		DropItem "PhoenixRodHefty", 8;
		Species "Ophidian";
	}
	
	States
	{
		Spawn:
			SNKE A 0 NoDelay;
			SNKE AB 10 A_Look();
			goto Spawn+1;
		See:
			SNKE A 0;
			SNKE ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			SNKE FF 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE FFF 4
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjANew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			SNKE FFF 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE F 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjBNew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			goto See;
		Pain:
			SNKE E 3;
			SNKE E 3 A_KCPain();
			goto See;
		Pain.Fist:
			SNKE E 3;
			SNKE E 3 A_KCPain();
			SNKE EE 3;
			goto See;
		Pain.Kick:
			SNKE E 3;
			SNKE E 3 A_KCPain();
			SNKE EEEE 3;
			goto See;
		Death:
			SNKE G 5;
			SNKE H 5 A_Scream();
			SNKE IJKL 5;
			SNKE M 5 A_NoBlocking();
			SNKE NO 5;
			SNKE P -1;
			Stop;
		Ice:
			SNKE E 5 A_GenericFreezeDeath();
			SNKE E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			SNKE P 5;
			SNKE ONMLKJIHG 5;
			goto See;
	}
}
class SnakeProjANew : KCProjectile // replaces SnakeProjA 
{
	default
	{
		Tag "Lil' Iceball";
		DamageFunction (1 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 8;
		Speed 14;
		FastSpeed 20;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "snake/attack";
		DeathSound "misc/magicsmall";
	}
	
	States
	{
		Spawn:
			SNFX AABBCCDD 2 Bright;
			Loop;
		Death:
			SNFX EF 5 Bright;
			SNFX G 4 Bright;
			SNFX HI 3 Bright;
			Stop;
	}
}
class SnakeProjBNew : SnakeProjANew // replaces SnakeProjB 
{
	default
	{
		Tag "Lil' Fireball";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/magichit";
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			SNFX JJJKKK 2 Bright;
			Loop;
		Death:
			SNFX LM 5 Bright;
			SNFX N 4 Bright;
			SNFX O 3 Bright;
			Stop;
	}
}
class HellGuard : KCCreature
{
	default
	{
		//$Category Monsters
		Tag "Abyssal Guard";
		Health 420; // 300
		Radius 24;
		Height 64;
		Speed 12; // 8
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Mass 750; // 500
		MONSTER;
		+FLOORCLIP;
		SeeSound "hellguard/sight";
		PainSound "hellguard/pain";
		DeathSound "hellguard/death";
		ActiveSound "hellguard/idle";
		Obituary "%o was fried to cinders by an abyssal guard.";
		MeleeDamage 12; // 8
		Species "Ophidian";
		+DONTHARMSPECIES;
		DropItem "PhoenixRodAmmo", 132, 5;
		DropItem "PhoenixRodHefty", 13, 25;
		DropItem "PhoenixRodAmmo", 44, 5;
		DropItem "PhoenixRodHefty", 4, 25;
		DropItem "PhoenixRodAmmo", 15, 5;
		DropItem "PhoenixRodHefty", 2, 25;
	}
	
	void A_HGShot()
	{
		if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0));
		if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
	}
	
	States
	{
		Spawn:
			HLGD A 0 NoDelay;
			HLGD AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			HLGD AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HLGD E 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_HGShot();
			}
			goto See;
		Pain:
			HLGD G 2;
			HLGD G 2 A_KCPain();
			goto See;
		Pain.Fist:
			HLGD G 2;
			HLGD G 2 A_KCPain();
			HLGD GG 2;
			goto See;
		Pain.Kick:
			HLGD G 2;
			HLGD G 2 A_KCPain();
			HLGD GGGG 2;
			goto See;
		Death:
			HLGD H 6;
			HLGD I 6 A_Scream();
			HLGD J 6;
			HLGD K 6 A_Fall();
			HLGD L 6;
			HLGD M 6;
			HLGD N -1;
			Stop;
		Ice:
			HLGD G 5 A_GenericFreezeDeath();
			HLGD G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HLGD O 8;
			HLGD NMLKJI 8;
			goto See;
	}
}
class HellGuardBall : KCProjectile
{
	default
	{
		Tag "Abyssal Sphere";
		DamageFunction (6 * random(1,8));
		Radius 13;
		Height 8;
		Speed 12;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
		SeeSound "hellguard/shot";
		DeathSound "hellguard/shothit";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			HGFB A 0 Bright NoDelay 
			{
				A_ScaleVelocity(frandom(0.875,1.125));
			}
		Idle:
			HGFB ABCD 2 Bright;
			Loop;
		Death:
			HGFB EFGH 4 Bright;
			Stop;
	}
}
class Serpathor : KCCreature
{
	default
	{
		//$Category Monsters
		Tag "Serpathor";
		Health 650;
		Radius 20;
		Height 64;
		ProjectilePassHeight 92;
		Speed 12; // 10
		PainChance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Fire", 12;
		DamageFactor "Fire", 0.25;
		Mass 900; // 500
		Reactiontime 8;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		+MISSILEMORE;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Species "Ophidian";
		+DONTHARMSPECIES;
		Obituary "%o was stoned by a Serpathor.";
		DropItem "PhoenixRodAmmo", 84, 5;
		DropItem "PhoenixRod", 28, 1;
	}
	
	States
	{
		Spawn:
			SBTC A 0 NoDelay;
			SBTC AB 10 A_Look();
			goto Spawn+1;
		See:
			SBTC AABBCCDD 2 
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(1); } 

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 3; } else { user_shotsfiredmax = 2; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 2; } else { user_shotsfiredmax = 1; }
				}

				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
					user_fastchasetimer = 0; 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Missile:
			SBTC E 0 A_DynamicMusic();
			SBTC E 0 A_Jump(128,"MedusaBlast");
			SBTC E 0 A_StartSound("snake/sight", CHAN_VOICE);
			SBTC EE 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(4); }
				A_FaceTarget();
			}
		MissileFire:
			SBTC E 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				
				A_SpawnProjectile("SerpathorPhoenixFX1", 32, 0, 0, CMF_CHECKTARGETDEAD);
			}
			SBTC EE 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(4); }
				A_FaceTarget();
			}
			SBTC E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,8) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			Loop; //goto See;
		MedusaBlast:
			SBTC AF 8 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			SBTC G 8 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				A_StartSound("weapons/blastershoot");
				A_SpawnProjectile("MedusaBeam", 64, 8);
				A_SpawnProjectile("MedusaBeam", 64, -8);
			}
			SBTC F 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto Missile+1;
		Pain:
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,75);
			goto See;
		Pain.Fire:
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Pain.Fist:
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,150);
			SBTC HH 3;
			goto See;
		Pain.Kick:
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,225);
			SBTC HHHH 3;
			goto See;

		Death:
			SBTC I 5 A_Scream();
			SBTC JKLM 5;
			SBTC N 5 A_NoBlocking();
			SBTC OPQR 5;
			SBTC R -1;
			Stop;

		Ice:
			SBTC H 5 A_GenericFreezeDeath();
			SBTC H 1 A_FreezeDeathChunks();
			Wait;

		Raise:
			SBTC RQPONMLKJI 5;
			goto See;
	}
}
class PhoenixFX1Base : KCProjectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		DamageType "Fire";
		Projectile;
		+THRUGHOST
		+SPECIALFIREDAMAGE
		SeeSound "weapons/phoenixshoot";
		DeathSound "weapons/phoenixhit";
		Obituary "$OB_MPPHOENIXROD";
	}

	States
	{
		Spawn:
			FX04 A 4 BRIGHT A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 6 BRIGHT A_Explode();
			FX08 BC 5 BRIGHT;
			FX08 DEFGH 4 BRIGHT;
			Stop;
	}
	
	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilUnmountedNew s2; 
		s2 = DSparilUnmountedNew(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				RandCall = 96;

				if (random[HornRodFX2]() <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}

	//----------------------------------------------------------------------------
	//
	// PROC A_PhoenixPuff
	//
	//----------------------------------------------------------------------------

	void A_PhoenixPuff(string missiletype = "PhoenixPuff", double anglediff = 90.0, double puffspeed = 1.3)
	{
		//[RH] Heretic never sets the target for seeking
		//P_SeekerMissile (self, 5, 10);
		Actor puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle + anglediff, puffspeed);
		}

		puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle - anglediff, puffspeed);
		}
	}
}
class SerpathorPhoenixFX1 : PhoenixFX1Base
{
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (10 * random(1,8)); // 5
		Speed 20; // 18
	}
	
	States
	{
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 3 Bright A_Explode((64+random(-12,12)),128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class Medusabeam : KCEffectFastProjectile
{
	default
	{
		Tag "Serpathor Eye Beam";
		Speed 125; // 100
		Radius 4;
		Height 4;
		DamageFunction (1*random(1,8));
		MissileType "MBSpark";
		Scale 0.25;
		Decal "CrossbowScorch2";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,5);
						if (user_random <= 1) { A_InflictSlow(random(140,280),401); }
						if (user_random == 2) { A_InflictSlow(random(210,350),401); }
						if (user_random == 3) { A_InflictSlow(random(210,350),401); }
						if (user_random == 4) { A_InflictSlow(random(210,350),401); }
						if (user_random >= 5) { A_InflictSlow(random(280,420),401); }
					}
				}
			}
		Death2:
			FX16 GHIJKL 2 bright;
			Stop;
	}
}
class DSparilBase : KCUniqueBoss
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 8;
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New")
	{
		string projtype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (kcdebug_showactormoveinfo) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 3;
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (CountInv("MonsterLevel") / 90);
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (CountInv("MonsterLevel") / 90);
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype2 = "Sorcerer2FX2New")
	{
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}
}
class DSparilMountedNew : DSparilBase // replaces Sorcerer1
{
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Health 6000; //24000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Painchance 56;
		Painchance "Fist", 84; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 140; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		meleerange 82;
		Monster;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+DONTGIB;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparilserpent/sight";
		AttackSound "dsparilserpent/attack";
		PainSound "dsparilserpent/pain";
		DeathSound "dsparilserpent/death";
		ActiveSound "dsparilserpent/active";
		Obituary "$OB_DSPARIL1";
		HitObituary "$OB_DSPARIL1HIT";
	}
	
	States
	{
		Spawn:
			SRCR A 0 NoDelay;
			SRCR AB 10 A_Look();
			goto Spawn+1;
		See:
			SRCR A 0;
			SRCR ABCD 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				A_Sor1Chase();
			}
			Loop;
		Missile:
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8 * random(1,8), "SorcererFX1New");
			}
			Goto See;
		Missile2:
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8*random(1,8), "SorcererFX1New");
			}
			Goto See;
		Pain:
			SRCR Q 6 A_Sor1Pain();
			Goto See;
		Pain.Fist:
			SRCR Q 6 A_Sor1Pain();
			SRCR Q 6;
			Goto See;
		Pain.Kick:
			SRCR Q 6 A_Sor1Pain();
			SRCR QQ 6;
			Goto See;
		Death:
			SRCR E 7;
			SRCR F 7 A_Scream();
			SRCR G 7;
			SRCR HIJK 6;
			SRCR L 25 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 20 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 12;
			SRCR P -1 A_SorcererRise();
			Stop;
		Ice:
			goto Death;
	}
}
class SorcererFX1New : KCProjectile // replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}
class DSparilUnmountedNew : DSparilBase // replaces Sorcerer2
{
	int user_chaseteleportchance;
	int user_chaseteleportchance2;
	int lulwat;
	int lultimer1, lultimer1max;
	default
	{
		Tag "\c[gold]D'Sparil";
		Health 14000; // 56000;
		Radius 16;
		Height 70;
		Mass 300;
		Speed 14;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		MeleeRange 92;
		Monster;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+FULLVOLACTIVE;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparil/sight";
		AttackSound "dsparil/attack";
		PainSound "dsparil/pain";
		ActiveSound "dsparil/active";
		Obituary "$OB_DSPARIL2";
		HitObituary "$OB_DSPARIL2HIT";
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	States
	{
		Spawn:
			SOR2 A 0 NoDelay;
			SOR2 MN 10 A_Look();
			goto Spawn+1;
		See:
			SOR2 A 0;
			SOR2 MNOP 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }

				user_chaseteleportchance = 512;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { user_chaseteleportchance = 256; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 210) { user_chaseteleportchance = 288; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { user_chaseteleportchance = 320; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { user_chaseteleportchance = 352; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_chaseteleportchance = 384; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_chaseteleportchance = 416; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_chaseteleportchance = 448; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_chaseteleportchance = 480; }
				
				user_chaseteleportchance2 = 1;
				if (health <= user_HPCritRange) { user_chaseteleportchance2 = 8; }
				else if (health <= user_HPLowRange) { user_chaseteleportchance2 = 4; }
				else if (health <= (user_MaxHP/2)) { user_chaseteleportchance2 = 2; }
				else { user_chaseteleportchance2 = 1; }
				if (random(1,user_chaseteleportchance) <= user_chaseteleportchance2)
				{
					DSparilTeleport();
				}
				else
				{
					A_Sor2Chase(); 
				}
			}
			Loop;
		Rise:
			SOR2 A 0;
			SOR2 A 0;
			SOR2 AB 4;
			SOR2 C 4 A_StartSound("dsparil/rise", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SOR2 DEF 4;
			SOR2 G 12 A_StartSound("dsparil/sight", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			Goto See;
		Pain:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			Goto See;
		Pain.Fist:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 Q 3;
			Goto See;
		Pain.Kick:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 QQ 3;
			Goto See;
		Missile:
			SOR2 R 0 A_DynamicMusic();
			SOR2 R 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_Srcr2Decide();
			}
			SOR2 S 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_FaceTarget();
			}
			SOR2 T 20 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }
				A_Srcr2Attack(20*random(1,8),"Sorcerer2FX1New","Sorcerer2FX2New");
			}
			Goto See;
		Teleport:
			TNT1 A 0; // makes sure D'Sparil is as stealth as possible when proceeding to teleport if flagged as stealth
			SOR2 LKJIHG 6;
			Goto See;
		Death:
			SDTH A 8 A_Sor2DthInit();
			SDTH B 8;
			SDTH C 8 A_StartSound("dsparil/scream", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
		DeathLoop:
			SDTH DE 7;
			SDTH F 7 A_Sor2DthLoop();
			SDTH G 6 A_StartSound("dsparil/explode", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH H 6;
			SDTH I 18;
			SDTH J 6 A_NoBlocking();
			SDTH K 6 A_StartSound("dsparil/bones", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH LMN 6;
			SDTH O -1 A_BossDeath();
			Stop;
		Ice:
			goto Death;
	}
}
class Sorcerer2FX1New : KCProjectile // replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2New : KCProjectile // replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
