// Heretic
class PodNew : Pod // replaces Pod
{
	Default
	{
		+PUSHABLE
		Tag "Explosive Pod";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}

	States
	{
		Death:
			PPOD C 5 BRIGHT A_RemovePod;
			PPOD D 5 BRIGHT A_Scream();
			Goto Super::Death+2;
	}
}
class ChickenNew : KCCreature // replaces Chicken
{
	default
	{
		Tag "Chicken";
		Health 10;
		Radius 9;
		Height 22;
		Mass 40;
		Speed 4;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		+FLOORCLIP;
		SeeSound "chicken/pain";
		AttackSound "chicken/attack";
		PainSound "chicken/pain";
		DeathSound "chicken/death";
		ActiveSound "chicken/active";
		Obituary "$OB_CHICKEN";
	}
	
	States
	{
		Spawn:
			CHKN A 0 NoDelay;
			CHKN AB 10 A_Look();
			loop;
		See:
			CHKN A 0;
			CHKN AB 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0;
			CHKN A 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			CHKN C 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ChicAttack](1,2));
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CHKN D 5 A_Feathers();
			CHKN C 5 A_KCPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CHKN E 6 A_Scream();
			CHKN F 6 A_Feathers();
			CHKN G 6;
			CHKN H 6 A_NoBlocking();
			CHKN IJK 6;
			CHKN L -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			wait;
	}
}
class HereticImpNew : KCCreature // replaces HereticImp
{
	default
	{
		Tag "Gargoyle";
		Health 40;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 10;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 150;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 175;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 225;
		DamageFactor "Cricket", 1.25;
		Painchance "Cricket", 250;
		DamageFactor "Lead", 1.5;
		Painchance "Lead", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		DamageFactor "Breakfast", 0.625;
		Painchance "Breakfast", 125;
		DamageFactor "Suck", 1.75;
		Painchance "Suck", 256;
		DamageFactor "Dust", 0.875;
		Painchance "Dust", 175;
		DamageFactor "BRocket", 1.5;
		Painchance "BRocket", 256;
		DamageFactor "Popper", 3;
		Painchance "Popper", 256;
		DamageFactor "Spinner", 1;
		Painchance "Spinner", 200;
		DamageFactor "Beats", 1;
		Painchance "Beats", 200;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTHARMSPECIES;
		Species "Gargoyle";
		DamageFunction (0);
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "$OB_HERETICIMP";
		HitObituary "$OB_HERETICIMPHIT";
	}
	
	states
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(24);
			loop;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(6,12,18,24,0.333,0.333);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](5,12), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			IMPX A 0
			{
				user_chargechance = 25;
				if (kc_monsterlevelenabledflags) user_chargechance += (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.075,true,self));
				if (user_chargechance > 70) user_chargechance = 70;

				if (random(1,100) > user_chargechance) { return resolvestate("See"); }
				else
				{
					A_GargDashCheck();
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Charge:
			IMPX A 10
			{
				A_DynamicMusic();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			IMPX B 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				// A_ImpMsAttack; Emulation
				SetDamage(((0 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(random(22,23),true,self)))));
				A_SkullAttack(12 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(randompick(11,11,11,12),true,self)));
			}
			IMPX CBAB 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
			}
			IMPX A 0 A_GargDashCheck2();
			Goto Charge+2;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,12,48);
			IMPX GGGG 3;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Crash:
			IMPX I 7 A_ImpExplode();
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			IMPX H 5;
			IMPX G 4;
			goto See;
	}
}
class HereticImpLeaderNew : HereticImpNew // replaces HereticImpLeader
{
	default
	{
		Tag "NitroGargoyle";
		Health 80;
		Painchance 150;
		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Gargoyle Leader";
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 75;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 256;
		Species "Gargoyle";
		MissileChanceMult 1.0; //-MISSILEMORE;
		+DONTHARMSPECIES;
		AttackSound "himp/leaderattack";
		Translation "141:141=144:144", "145:160=145:153", "248:254=248:251", "66:94=66:80", "95:110=95:103";
	}
	
	states
	{
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			Stop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			IMPX D 0 A_DynamicMusic();
			IMPX DE 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBallNew", 16, random[ImpMsAttack2](5,12), "himp/leaderattack");
			}
			goto See;
	}
}
class HereticImpBallNew : KCProjectile // replaces HereticImpBall 
{
	default
	{
		Tag "Gargoyle Fireball";
		Radius 8;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (1 * random(1,8));
		DamageType "Fire";
		Projectile;
		SeeSound "himp/leaderattack";
		DeathSound "misc/fireballsmall";
		+SPAWNSOUNDSOURCE;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX10 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX10 DEFG 5 Bright;
			Stop;
	}
}
class PlagueImp : HereticImpLeaderNew
{
	default
	{
		Tag "Plague Gargoyle";
		Health 120;
		Scale 1;
		Painchance 160;
		Painchance "Fist", 240; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
		Obituary "%o was poisoned by a plague gargoyle";
		HitObituary "%o was ripped up by a plague gargoyle";
		Translation "145:168=225:240", "255:248=0:0";
	}

	States
	{
		Spawn:
			IMPX A 0 NoDelay;
			IMPX ABCB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			IMPX A 0;
			IMPX AABBCCBB 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](6,14), "himp/attack", "himp/attack");
			}
			goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			IMPX D 0
			{
				int theta;
				A_CheckIfTargetDead("See");
				user_shotsfired = 0;
				if (health <= user_HPLowRange) { theta = (80 - (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(1.0,true,self))); }
																	else { theta = (240 - (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.3334,true,self))); }

				if (random(1,256) <= theta)
				{
					user_shotsfiredmax = 1;
					return resolvestate("MissileSingle"); 
				}
				else 
				{ 
					user_shotsfiredmax = randompick(3,4,5,6) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(frandompick(5.625,11.25,16.875,22.5),true,self));
					return resolvestate("MissileMulti"); 
				}
				return resolvestate(null);
			}
		MissileSingle:
			IMPX DE 6
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				A_FaceTarget();
			}
			IMPX F 6 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }

				if (random(1,256) <= 32) { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-0.6,0.6), frandom(-0.06,0.06)); }
														else { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-6.0,6.0), frandom(-0.6,0.6)); }
			}
			goto See;
		MissileMulti:
			IMPX DE 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }

				A_FaceTarget();
			}
			IMPX F 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }

				if (random(1,256) <= 32) { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-0.96,0.96), frandom(-0.096,0.096)); }
														else { A_SpawnProjectile("PlagueShot", 16, 0, frandom(-9.6,9.6), frandom(-0.96,0.96)); }
			}
			IMPX F 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				A_CheckIfTargetDead("See");
				return resolvestate(null);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			goto See;	
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GG 3;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			IMPX G 3;
			IMPX G 3 A_FloatPain(0,8,64);
			IMPX GGGG 3;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			IMPX G 4 A_ImpDeath();
			IMPX H 5;
			Wait;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			IMPX S 5 A_ImpXDeath1();
			IMPX TU 5;
			IMPX V 5 A_Gravity();
			IMPX W 5;
			Wait;
		Ice:
			IMPX G 5 A_GenericFreezeDeath();
			IMPX G 1 A_FreezeDeathChunks();
			Wait;
		Crash:
			IMPX I 0 
			{
				bNOGRAVITY = false;
				A_SpawnItemEx("HereticImpChunk1", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
				A_SpawnItemEx("HereticImpChunk2", 0, 0, 0, random(-4,4), random(-4,4), 9, 0, SXF_TRANSFERTRANSLATION + SXF_NOCHECKPOSITION, 0);
			}
			IMPX I 7;
			IMPX J 7 A_Scream();
			IMPX K 7;
			IMPX L -1;
			Stop;
		XCrash:
			IMPX X 7;
			IMPX Y 7;
			IMPX Z -1;
			Stop;
		Raise:
			IMPX L 0;
			IMPX L 0 A_RemoveChildren();
			IMPX LKJIHG 6;
			goto See;
	}
}
class PlagueShot : KCEffectProjectile
{
	default
	{
		Tag "Plague Shot";
		DamageFunction (3*random(3,5));
		Radius 8;
		Height 16;
		Speed 16;
		PROJECTILE;
		+THRUGHOST; // Plague Gargoyle Poisonball
		DamageType "Poison";
		scale 0.5;
		SeeSound "himp/leaderattack";
		DeathSound "monster/plaugeBall";
	}

	States
	{
		Spawn:
			FVUL AAABBB 1 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(3);
					/*
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
					*/
				}
			}
		Death2:
			FVUL CDEF 4 Bright;
			Stop;
	}
}
class WatcherImp : HereticImpNew 
{
	default
	{
		Tag "Watcher Gargoyle";
		Health 120;
		Radius 16;
		Height 36;
		Mass 50;
		Speed 15;
		scale 1.2;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+SPAWNFLOAT;
		+DONTOVERLAP;
		MissileChanceMult 0.5; //+MISSILEMORE;
		SeeSound "himp/sight";
		AttackSound "himp/attack";
		PainSound "himp/pain";
		DeathSound "himp/death";
		ActiveSound "himp/active";
		Obituary "%o was burnt by a Watcher Gargoyle.";
		HitObituary "%o was slashed by a Watcher Gargoyle.";
		DamageFactor "Fire", 0.5;
		PainChance 50;
		Painchance "Fire", 25; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		+DONTHARMSPECIES;
		Species "Gargoyle";
	}
	
	States
	{
		Spawn:
			WATC A 0 NoDelay;
			WATC ABCB 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			WATC A 0;
			WATC AABBCCBB 3
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			TNT1 A 0 A_DynamicMusic();
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ImpMeAttack](7,14), "himp/attack");
			}
			goto See;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC D 0
			{
				user_firevolleys = 0;
				user_firevolleymax = random(2,3);
				if (random(1,16) == 1) { user_firevolleymax *= random(3,4); }
			}
			WATC D 0 BRIGHT A_Jump(85,"Beastball");
		MissileLoop:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC DE 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC F 4 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBall2", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			WATC [\ 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			WATC ] 4 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("HereticImpBall2", 14, 14, "himp/leaderattack");
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC ] 0 BRIGHT
			{
				user_firevolleys += 1;
				if (user_firevolleys >= user_firevolleymax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Beastball:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			WATC DE 6 BRIGHT
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WATC F 6 BRIGHT 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("BeastBall2", 14, random[BeastAttack](1,8)*3, "beast/attack");
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GG 3;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			WATC G 3;
			WATC G 3 A_FloatPain(0,6,96);
			WATC GGGG 3;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			WATC G 4 A_ImpDeath();
			WATC H 5;
			Wait;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			WATC S 5 A_ImpXDeath1();
			WATC TU 5;
			WATC V 5 A_Gravity();
			WATC W 5;
			Wait;
		Crash:
			WATC I 7 A_ImpExplode();
			WATC J 7 A_Scream();
			WATC K 7;
			WATC L -1;
			Stop;
		XCrash:
			WATC X 7;
			WATC Y 7;
			WATC Z -1;
			Stop;
		Ice:
			WATC G 5 A_GenericFreezeDeath();
			WATC G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WATC H 5;
			WATC G 4;
			goto See;
	}
}
class HereticImpBall2 : HereticImpBallNew
{
	default
	{
		Tag "Gargoyle Fireball";
	}
	
	States
	{
		Spawn:
			HIB1 ABC 6 Bright;
			Loop;
		Death:
			HIB1 DEFG 5 Bright;
			Stop;
	}
}
class Beastball2 : BeastBallNew
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,0,0,0,0,SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			HIB2 DEFGH 4;
			Stop;
	}
}
class MummyNew : KCCreature // replaces Mummy
{
	default
	{
		Tag "Golem";
		Health 80;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	states
	{
		Spawn:
			MUMM A 0 NoDelay;
			MUMM AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMM A 0;
			MUMM ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MUMM H 4;
			MUMM H 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			MUMM H 4;
			MUMM H 4 A_KCPain();
			MUMM HH 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			MUMM H 4;
			MUMM H 4 A_KCPain();
			MUMM HHHH 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMM H 5 A_GenericFreezeDeath();
			MUMM H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class MummyGhostNew : MummyNew // replaces MummyGhost
{
	default
	{
		Tag "Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 128;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 1.5;
		Painchance "Ice", 192;
	}
}
class MummyLeaderNew : KCCreature // replaces MummyLeader
{
	default
	{
		Tag "NitroGolem";
		Health 100;
		Radius 22;
		Height 62;
		Mass 75;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
		Species "Golem";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		DeathSound "mummy/death";
		ActiveSound "mummy/active";
		Obituary "$OB_MUMMYLEADER";
		HitObituary "%o was smashed by a golem.";
		DropItem "GoldWandAmmo", 84, 3;
		DropItem "GoldWandHefty", 8, 15;
	}
	
	
	states
	{
		Spawn:
			MUMA A 0 NoDelay;
			MUMA AB 10 A_Look();
			goto Spawn+1;
		See:
			MUMA A 0;
			MUMA ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			MUMM E 0 A_DynamicMusic();
			MUMM E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			MUMM F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[MummyAttack](1,8)*2, "mummy/attack2", "mummy/attack");
			}
			MUMM G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			MUMA X 0 A_DynamicMusic();
			MUMA X 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA X 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			MUMA Y 5 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				A_CustomComboAttack("MummyFX1", 32, random[MummyAttack2](1,8)*2, "mummy/attack2");
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MUMA H 4;
			MUMA H 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			MUMA H 4;
			MUMA H 4 A_KCPain();
			MUMA HH 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			MUMA H 4;
			MUMA H 4 A_KCPain();
			MUMA HHHH 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MUMM I 5;
			MUMM J 5 A_Scream();
			MUMM K 5 A_SpawnItemEx("MummySoul", 0, 0, 10, 0, 0, 1);
			MUMM L 5;
			MUMM M 5 A_NoBlocking();
			MUMM NO 5; 
			MUMM P -1;
			Stop;
		Ice:
			MUMA H 5 A_GenericFreezeDeath();
			MUMA H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			MUMM O 5;
			MUMM NMLKJI 5;
			Goto See;
	}
}
class MummyLeaderGhostNew : MummyLeaderNew // replaces MummyLeaderGhost
{
	default
	{
		Tag "NitroGolem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 64;
		DamageFactor "Fire", 1.0;
		Painchance "Fire", 64;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 128;
	}
}
class MummyFX1New : KCProjectile // replaces MummyFX1 
{
	default
	{
		Tag "Screamer Fireskull";
		Radius 8;
		Height 14;
		Speed 9;
		FastSpeed 18;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		RenderStyle "Add";
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			FX15 A 5 Bright A_StartSound("mummy/head");
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			FX15 C 5 Bright;
			FX15 B 5 Bright A_SeekerMissile(10, 20);
			Loop;
		Death:
			FX15 DEFG 5 Bright;
			Stop;
	}
}
class IceGolem : KCCreature
{
	int user_HalfMaxHP;
	int user_regenchance;
	int user_regenchanceextra;
	default
	{
		Tag "Ice Golem";
		Health 450;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 56; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.925;
		RadiusDamageFactor 0.578125;
		DamageFactor "Explosion", 0.578125;
		DamageFactor "Fire", 1.8;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		HitObituary "%o was bludgeoned by an ice golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 32; }
				else if (health <= user_HPLowRange) { user_regenchance = 8; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 4; }
				else if (health <= user_MaxHP) { user_regenchance = 2; }
				if (kc_monsterlevelenabledflags)
				{
					user_regenchanceextra = user_regenchance / 4;
					user_regenchanceextra = (user_regenchanceextra * CountInv("MonsterLevel")) / 22.5;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart"); }
				return resolvestate(null);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			IGLM E 0 A_DynamicMusic();
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM E 0 A_DynamicMusic();
			IGLM H 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_KCHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM L 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class IceGolemGhost : IceGolem
{
	default
	{
		Tag "Ice Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}
class FrostGolem : IceGolem
{
	int user_randvar1;
	default
	{
		Tag "Frost Golem";
		Health 540;
		Radius 26; // 22;
		Height 75; // 62;
		Mass 900;
		Speed 16;
		Painchance 32;
		Painchance "Fire", 44; // Fire attacks have a +80% chance of stunning an enemy
		Painchance "Ice", 0; // Ice can't stun Ice Golems
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.85;
		DamageFactor "Explosive", 0.53125;
		RadiusDamageFactor 0.53125;
		DamageFactor "Fire", 1.4;
		DamageFactor "Ice", 0.0;
		Monster;
		+FLOORCLIP;
		+NOBLOOD;
		+DONTHARMSPECIES;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 1.2;
		SeeSound "mummy/sight";
		AttackSound "mummy/attack1";
		PainSound "mummy/pain";
		ActiveSound "mummy/active";
		Obituary "%o was iced over by an frost golem";
		HitObituary "%o was bludgeoned by an frost golem";
		Species "Golem";
	}
	
	States
	{
		Spawn:
			IGLM A 0 NoDelay;
			IGLM AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			IGLM ABCD 5
			{
				user_HalfMaxHP = user_MaxHP / 2;
				if (health <= user_HPCritRange) { user_regenchance = 40; }
				else if (health <= user_HPLowRange) { user_regenchance = 10; }
				else if (health <= user_HalfMaxHP) { user_regenchance = 5; }
				else if (health <= user_MaxHP) { user_regenchance = random(2,3); }
				if (kc_monsterlevelenabledflags)
				{
					user_regenchanceextra = user_regenchance * 6 / 20;
					user_regenchanceextra = (user_regenchanceextra * CountInv("MonsterLevel")) / 18;

					user_regenchance += user_regenchanceextra;
					//A_LogInt(user_regenchance);
					//A_LogInt(user_regenchanceextra);
				}

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
				

				if (random(1,256) <= user_regenchance && health < user_MaxHP) { return resolvestate("RegenerateStart");  }
				return resolvestate(null);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			IGLM E 0 A_DynamicMusic();
			IGLM E 0 A_Jump(128, "Melee2");
			IGLM E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Melee2:
			IGLM E 0 A_DynamicMusic();
			IGLM H 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			IGLM I 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(Random(15,27)*3, "mummy/attack2", "mummy/attack");
			}
			IGLM J 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			IGLM E 0 A_DynamicMusic();
			IGLM K 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			IGLM K 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				user_randvar1 = random(3,9) * 2;
				A_StartSound("IceGuyAttack");
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, ((user_randvar1*4)/2), 0, 1); }
				A_SpawnProjectile("IceGuyFX3New", 48, user_randvar1, 0, 1);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, 0, 0, 1); }
				A_SpawnProjectile("IceGuyFX3New", 48, -user_randvar1, 0, 1);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("IceGuyFX3New", 48, ((-user_randvar1*4)/2), 0, 1); }
			}
			IGLM K 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		RegenerateStart:
			IGLM K 10
			{
				user_regencyclemax = 10;
				A_StartSound("misc/freeze",CHAN_WEAPON);
				bCANTSEEK = true;
				bNOPAIN = true;
				bDONTTHRUST = true;
				A_GiveInventory("IceGolemArmor",1);
			}
		Regenerate:
			IGLM K 0 
			{ 
				if (health < user_MaxHP) 
				{ 
					A_KCHealThing((user_MaxHP/random(18,22)),user_MaxHP);
					//A_Print("23r2");
					user_regencycles += 1; 
				} 
				else 
				{ 
					return resolvestate("RegenerateEnd"); 
				} 
				return resolvestate(null); 
			}
			IGLM KKKKKKKKKK 1 A_SpawnItemEx("IceGolemParticleA", Random(24, 32), 0, 4, 0, 0, (Random(20, 35)*0.1), Random(0, 360), 128);
		RegenerateCheck:
			IGLM K 0
			{
				if (user_regencycles < user_regencyclemax) { return resolvestate("Regenerate"); }
				if (health < user_MaxHP)
				{
					if (random(1,8) == 1) { user_regencycles = 0; return resolvestate("Regenerate"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		RegenerateEnd:
			IGLM K 0
			{
				user_regencycles = 0;
				user_regencyclemax = 0;
				bCANTSEEK = false;
				bNOPAIN = false;
				bDONTTHRUST = false;
				A_SetInventory("IceGolemArmor",0);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM LL 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM LLLL 4;
			Goto See;
		Pain.Fire:
			#### # 0 A_TimeFreezeCheckPain();
			IGLM L 4;
			IGLM L 4 A_KCPain();
			IGLM L 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			IGLM L 12;
			IGLM L 0 A_SetTranslucent(1.0, 0);
			IGLM L 1 A_IceGuyDie();
			Stop;
	}
}
class FrostGolemGhost : FrostGolem
{
	default
	{
		Tag "Frost Golem (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.32;
		DamageFactor "Eldritch", 0.4;
	}
}
class IceGuyFX3New : KCEffectProjectile
{
	default
	{
		Tag "Spiked Ice Ball";
		DamageFunction (3 * random(1,8));
		Speed 14;
		Radius 8;
		Height 10;
		DamageType "Ice";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "IceGuyMissileExplode";
	}

	States
	{
		Spawn:
			ICPR ABC 3 Bright 
			{
				A_SpawnItemEx("IceFXPuff", 0, 0, 2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(70,105),401);
					}
				}
			}
		Death2:
			ICPR D 4 Bright;
			ICPR E 4 Bright A_IceGuyMissileExplode("IceGuyFX4New",16,-0.15);
			ICPR FG 4 Bright;
			ICPR H 3 Bright;
			Stop;
	}
}
class IceGuyFX4New : KCEffectProjectile
{
	default
	{
		Tag "Spiked Ice Shard";
		DamageFunction (random(2,3) * random(1,8));
		Speed 10;
		Radius 4;
		Height 4;
		DamageType "Ice";
		Gravity 0.125;
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+STRIFEDAMAGE;
	}
	
	States
	{
		Spawn:
			ICPR NOP 3 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(32);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			TNT1 A 0 Bright;
			Stop;
	}
}
class IceGolemArmor : PowerProtection
{
	default
	{
		damageFactor "normal", 0.01;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}
class IceGolemParticleA : KCBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+Missile;
		+NoBlockMap;
		+NoGravity;
		+DontSplash;
		+NoClip;
		RenderStyle "Add";
		Scale 0.0275;
	}
	
	States
	{
		Spawn:
			IGLP A 0 A_SpawnItemEx("IceGolemParticleTrail", -(Vel.X*1.2), -(Vel.Y*1.2), (Vel.Z*-1.2), (Vel.X*0.8), (Vel.Y*0.8), (Vel.Z*0.8), -Angle, 138);
			IGLP A 1 A_FadeOut(0.065);
			Loop;
	}
}
class IceGolemParticleTrail : IceGolemParticleA
{
	States
	{
		Spawn:
			IGLP A 1 A_FadeOut(0.075);
			Loop;
	}
}
class KnightNew : KCCreature // replaces Knight
{
	default
	{
		Tag "Undead Warrior";
		Health 200;
		Radius 24;
		Height 78;
		Mass 150;
		Speed 12;
		MeleeRange 68;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
		MeleeRange 68;
		Monster;
		+FLOORCLIP;
		SeeSound "hknight/sight";
		AttackSound "hknight/attack";
		PainSound "hknight/pain";
		DeathSound "hknight/death";
		ActiveSound "hknight/active";
		Obituary "$OB_BONEKNIGHT";
		HitObituary "$OB_BONEKNIGHTHIT";
		DropItem "CrossbowAmmo", 84, 5;
		DropItem "CrossbowHefty", 8, 25;
	}
	
	States
	{
		Spawn:
			KNIG A 0 NoDelay;
			KNIG AB 10 A_Look();
			goto Spawn+1;
		See:
			KNIG A 0;
			KNIG ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			KNIG E 0 A_DynamicMusic();
			KNIG E 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KNIG F 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KNIG G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				if (bSHADOW || random(1,256) < 40)
				{
					A_CustomComboAttack("RedAxeNew", 36, random[KnightAttack](1, 8) * 10, "hknight/melee");
				}
				else
				{
					A_CustomComboAttack("KnightAxeNew", 36, random[KnightAttack](1, 8) * 3, "hknight/melee");
				}
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			KNIG H 3;
			KNIG H 3 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			KNIG H 3;
			KNIG H 3 A_KCPain();
			KNIG HH 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			KNIG H 3;
			KNIG H 3 A_KCPain();
			KNIG HHHH 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			KNIG I 6;
			KNIG J 6 A_Scream();
			KNIG K 6;
			KNIG L 6 A_NoBlocking();
			KNIG MN 6;
			KNIG O -1;
			Stop;
		Ice:
			KNIG H 5 A_GenericFreezeDeath();
			KNIG H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			KNIG N 6;
			KNIG MLKJI 6;
			Goto See;
	}
}
class KnightGhostNew : KnightNew // replaces KnightGhost
{
	default
	{
		Tag "Undead Warrior (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		Painchance 100;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 150;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 25;
	}
}
class KnightAxeNew : KCEffectProjectile // replaces KnightAxe 
{
	default
	{
		Tag "Green Axe";
		DamageFunction (2 * random(1,8));
		DamageType "Magic";
		Radius 10;
		Height 8;
		Speed 9;
		FastSpeed 18;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+THRUGHOST; // Knight Axe [Green]
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			SPAX A 3 Bright
			{
				A_StartSound("hknight/axewhoosh");
			}
			SPAX BC 3 Bright;
			Loop;
		Death:
			SPAX DDEEFF 3 Bright;
			Stop;
	}
}
class RedAxeNew : KnightAxeNew // replaces RedAxe 
{
	default
	{
		Tag "Bloody Axe";
		DamageFunction (7 * random(1,8));
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			RAXE AA 2 Bright;
			RAXE A 1 Bright 
			{
				A_DripBlood();
			}
			RAXE BB 2 Bright;
			RAXE B 1 Bright 
			{
				A_DripBlood();
			}
			Loop;
		Death:
			RAXE CDE 6 Bright;
			Stop;
	}
}
class DeathKnight : KCCreature 
{ 
	default
	{
		Tag "Death Knight";
		Health 1100;
		Radius 24;
		Height 72;
		Mass 700;
		Speed 10;
		MeleeDamage 10;
		MeleeRange 80;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Holy", 35; // Holy attacks have a +75% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Holy", 1.75;
		MONSTER;
		+FLOORCLIP;
		+NOTARGET;
		+NORADIUSDMG;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+BOSS;
		+DEFLECT;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		Obituary "%o got thought %g could kill a Death Knight.";
		HitObituary "A Death Knight hacked %o into pieces.";
		MeleeSound "monster/dknhit";
		SeeSound "monster/dknsit";
		PainSound "monster/dknpai";
		DeathSound "monster/dkndth";
		ActiveSound "monster/dknact";
		Species "UndeadWarrior";
	}
	
	States 
	{
		Spawn: 
			DKNT A 0 NoDelay;
			DKNT AB 10 A_Look();
			goto Spawn+1;
		See:
			DKNT A 0;
			DKNT A 0 A_Jump(51,"SeeShielded");
			DKNT AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_DeathKnightShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		SeeShielded:
			DKNT P 0;
			DKNT PPQQRRSS 3 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DKNT S 0
			{
				if (random(1,100) >= 20) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			DKNT E 0 // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/dknswg");
			}
			DKNT G 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(10*random(1,8), "monster/dknhit");
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			DKNT E 0 A_Jump(88,"Missile1");
			DKNT E 0 A_Jump(88,"Missile2");
			DKNT E 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT E 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DKNT F 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("monster/kntswg");
			}
			DKNT G 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_SpawnProjectile("DKDart",32,0,-3,0);
				A_SpawnProjectile("DKDart",32,0,-1,0);
				A_SpawnProjectile("DKDart",32,0,1,0);
				A_SpawnProjectile("DKDart",32,0,3,0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("DKDart",32,0,-5,0);
					A_SpawnProjectile("DKDart",32,0,5,0);
				}
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
				{
					A_SpawnProjectile("DKDart",32,0,-7,0);
					A_SpawnProjectile("DKDart",32,0,7,0);
				}
			}
			DKNT A 0 A_Jump(64,"Missile2");
			Goto See;
		Missile1:
			DKNT T 1 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
	
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 4; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1Phase2"); }
				return resolvestate(null);
			}
			Loop;
		Missile1Phase2:
			DKNT U 1 Bright
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile1Phase3:
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;
				if (user_defendtimer == 2) 
				{
					A_SpawnProjectile("FHeadShot",44,-4,-12,0);
					A_SpawnProjectile("FHeadShot",44,-4,12,0);
				}
				
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 3; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("Missile1End"); }
				return resolvestate(null);
			}
			Loop;
		Missile1End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
			}
			DKNT U 0 A_Jump(64,"Missile2");
			Goto See;
		Missile2:
			DKNT T 0 Bright // A_SetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
			}
		Missile2Phase1: // 6 times
			DKNT T 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();

				user_defendtimer += 1;

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					return resolvestate("Missile2Phase2"); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2Phase2: // 6 times
			DKNT U 1 Bright 
			{
				A_DeathKnightShieldOn();
				A_FaceTarget();
	
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("DKbolt",44,-4,0,0); 
				}

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = 2; }
				else { user_defendtimermax = 3; }
				if (user_defendtimer >= user_defendtimermax) 
				{
					user_defendtimer = 0; 
					user_defendcycles += 1;
					
					if (user_defendcycles >= 6) { return resolvestate("Missile2End"); } else { return resolvestate("Missile2Phase1"); }
					return resolvestate(null); 
				}
				return resolvestate(null);
			}
			Loop;
		Missile2End:
			DKNT U 0 Bright // A_UnSetReflectiveInvulnerable();
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DKNT H 2;
			DKNT H 2 A_KCPain();
			goto PainShield;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DKNT H 2;
			DKNT H 2 A_KCPain();
			DKNT HH 2;
			goto PainShield;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DKNT H 2;
			DKNT H 2 A_KCPain();
			DKNT HHHH 2;
			goto PainShield;

		PainShield:
			#### # 0 A_TimeFreezeCheckPain();
			DKNT T 1 // A_SetReflectiveInvulnerable
			{
				A_DeathKnightShieldOn();
				user_defendtimer += 1;

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(17,18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(16,17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,4) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_DeathKnightShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 7) { return resolvestate("PainShieldEnd"); }
				return resolvestate(null);
			}
			Loop;
		PainShieldEnd:
			DKNT T 0 // A_UnSetReflectiveInvulnerable()
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();

				if (random(1,16) == 1) { return resolvestate("SeeShielded"); }
				return resolvestate(null);
			}
			DKNT H 1
			{
				A_DeathKnightShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DKNT I 0 Bright A_SpawnProjectile("DKSword",44,32,-90,0);
			DKNT I 8 Bright 
			{
				if (random(1,4) == 1) { A_SpawnProjectile("EvilWarriorShield",44,-32,90,0); }
				else { A_SpawnProjectile("DKShield",44,-32,90,0); }
			}
			DKNT J 8 Bright A_Scream(); 
			DKNT K 8 Bright;
			DKNT L 8 Bright A_NoBlocking();
			DKNT M 8 Bright;
			DKNT N 8 Bright;
			DKNT O -1;
			Stop;
		Ice:
			DKNT H 5 A_GenericFreezeDeath();
			DKNT H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DKNT NMLKJI 8 Bright;
			Goto See;
	}
}
class DeathKnightGhost : DeathKnight
{
	default
	{
		Tag "Death Knight (Ghost)";
		+SHADOW;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.4;
		+DONTHARMSPECIES;
		Species "UndeadWarrior";
	}
}
class DKDart : KCProjectile
{
	default
	{
		Tag "Sword Dart";
		DamageFunction (5 * random(1,8));
		Radius 3;
		Height 12;
		Speed 25;
		ExplosionDamage 64;
		ExplosionRadius 64;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		+THRUGHOST;
		Seesound "monster/dkndrt";
		DeathSound "weapons/firex2";
	}
	
	States
	{
		Spawn:
			DKAT ABC 3 Bright;
			Loop;
		Death:
			DKAT D 0 Bright A_SetTranslucent(0.85,1);
			DKAT D 3 Bright;
			DKAT E 3 Bright A_Explode(64,64);
			DKAT FG 3 Bright;
			DKAT H 3 Bright 
			{
				A_SpawnProjectile("DKFire",0,0,0,2);
				A_SpawnProjectile("DKFire",0,0,45,2);
				A_SpawnProjectile("DKFire",0,0,90,2);
				A_SpawnProjectile("DKFire",0,0,135,2);
				A_SpawnProjectile("DKFire",0,0,180,2);
				A_SpawnProjectile("DKFire",0,0,225,2);
				A_SpawnProjectile("DKFire",0,0,270,2);
				A_SpawnProjectile("DKFire",0,0,315,2);
			}
			DKAT IJKLM 3 Bright;
			Stop;
	}
}
class FHeadShot : KCProjectile
{
	default
	{
		Tag "Shield Firehead";
		DamageFunction (10 * random(1,8));
		Radius 12;
		Height 12;
		Speed 15;
		RenderStyle "Add";
		ALPHA 1.00;
		PROJECTILE;
		DamageType "Fire";
		+SEEKERMISSILE;
		+THRUGHOST; // Death Knight Head Fireball
		Seesound "monster/dknmsl";
		DeathSound "weapons/boom1";
	}
	
	States
	{
		Spawn:
			FHED ABCD 3 Bright 
			{
				A_SeekerMissile(5,15);
			}
			Loop;
		Death:
			RIP1 DEFGH 5 Bright;
			Stop;
	}
}
class DKbolt : KCProjectile
{
	default
	{
		Tag "Shield Firewave";
		DamageFunction (8 * random(1,8));
		Radius 8;
		Height 8;
		Speed 15;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.80;
		DamageType "Fire";
		+THRUGHOST;
		SeeSound "Weapons/boltfi";
		DeathSound "weapons/firex4";
	}
	
	States
	{
		Spawn:
			BOLT A 1 Bright 
			{
				A_BishopMissileWeave();
				A_SpawnItem("RedPuff",0,0);
			}
			Loop;
		Death:
			HBAL EFHI 2 Bright;
			Stop;
	}
}
class DKSword : KCProjectile // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		Gravity 0.125;
	}
	
	States
	{
		Spawn:
			SWRD KLMNOPQ 3 BRIGHT;
			goto Death;
		Death:
			SWRD RS 4 BRIGHT;
			SWRD T 4 BRIGHT;
			SWRD U 4;
			SWRD T 4 BRIGHT;
			SWRD U 8;
			SWRD T 4 BRIGHT;
			SWRD U 16;
			SWRD T 4 BRIGHT;
			SWRD U -1;
	}
}
class DKShield : KCProjectile // Death piece
{
	default
	{
		Radius 8;
		Height 8;
		Speed 1;
		PROJECTILE;
		RenderStyle "Normal";
		-NOGRAVITY;
		Gravity 0.125;
	}
	
	States
	{
		Spawn:
			SHLD ABCDEFGHI 3;
			goto Death;
		Death:
			SHLD H -1;
			Stop;
	}
}
class DKFire : KCProjectile
{
	default
	{
		Tag "Death Knight Flame";
		DamageFunction (0);
		ExplosionDamage 4;
		ExplosionRadius 8;
		Radius 2;
		Height 6;
		Speed 4;
		RenderStyle "Add";
		ALPHA 0.95;
		PROJECTILE;
		+THRUGHOST;
		DeathSound "weapons/scorch";
	}
	States
	{
		Spawn:
			DKAT NOPQRSTNOPQRSTNOPQRSTUVW 3 Bright 
			{
				A_Explode(4,8);
			}
			Stop;
	}
}
class RedPuff : KCProjectile
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.85;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			RPUF ABCDE 3 Bright;
			Stop;
	}
}
class WizardNew : KCCreature // replaces Wizard
{
	default
	{
		Tag "Disciple of D'Sparil";
		Health 180;
		Radius 16;
		Height 68;
		Mass 100;
		Speed 12;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 112;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 48;
		DamageFactor "Zap", 0.625;
		Painchance "Zap", 40;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		SeeSound "wizard/sight";
		AttackSound "wizard/attack";
		PainSound "wizard/pain";
		DeathSound "wizard/death";
		ActiveSound "wizard/active";
		Obituary "$OB_WIZARD";
		HitObituary "$OB_WIZARDHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiTomeOfPower", 4, 1;
		Obituary "%o was cursed by a Disciple of D'Sparil.";
		HitObituary "%o was scratched by a Disciple of D'Sparil.";
	}
	
	States
	{
		Spawn:
			WZRD A 0 NoDelay;
			WZRD AB 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD A 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			WZRD B 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			WZRD N 0 A_DynamicMusic();
			WZRD N 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD O 6
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WZRD P 12 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(55,56),2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(44,45),2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(33,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(11,12),2,true,self)) { A_SetTics(11); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(1,5)*8, "wizard/melee", "none", "Melee", true);
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			WZRD C 0 A_DynamicMusic();
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk1();
			}
			WZRD C 4
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(66,67,67),2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,33,34),2,true,self)) { A_SetTics(3); }
				A_WizAtk2();
			}
			WZRD D 12
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(55,56),2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(44,45),2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(33,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(11,12),2,true,self)) { A_SetTics(11); }

				A_WizAtk3("WizardFX1New", 5*random(1,8));
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EE 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			WZRD E 3 A_GhostOff();
			WZRD E 3 A_FloatPain(0,8,64);
			WZRD EEEE 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			WZRD F 6 A_GhostOff();
			WZRD G 6 A_Scream();
			WZRD HI 6;
			WZRD J 6 A_NoBlocking();
			WZRD KL 6;
			WZRD M -1 A_SetFloorClip();
			Stop;
		Ice:
			WZRD Q 5 A_GenericFreezeDeath();
			WZRD Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WZRD M 6;
			WZRD LKJIHGF 6;
			Goto See;
	}
}
class WizardFX1New : KCProjectile // replaces WizardFX1 
{
	default
	{
		Tag "Wizard Shot";
		DamageType "Magic"; 
		Radius 10;
		Height 6;
		Speed 18;
		FastSpeed 24;
		DamageFunction (3 * random(1,8));
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/magichit";
	}
	
	States
	{
		Spawn:
			FX11 AAABBB 2 Bright;
			Loop;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
class GreaterDisciple : KCCreature
{ 
	default
	{
		Tag "Greater Disciple";
		Health 300;
		PainChance 140;
		Painchance "Fist", 210; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Speed 8;
		Scale 0.90;
		Radius 20;
		Height 56;
		Mass 320;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+FLOAT;
		+NOGRAVITY;
		Obituary "%o was smote by a Greater Discple.";
		SeeSound "monster/dissit";
		PainSound "monster/dispai";
		DeathSound "monster/disdth";
		ActiveSound "monster/disact";
	}
	
	States 
	{ 
		Spawn: 
			DISC A 0 NoDelay;
			DISC AB 10 A_Look(); 
			goto Spawn+1;
		See: 
			DISC AAABBB 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DISC A 0
			{
				A_GDTeleport("Blur");
			}
			Loop;
		Blur:
			DISC A 1
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_StartSound("monster/blur");
				A_KCChase("Melee","Missile",CHF_FASTCHASE);
			}
			DISC AAABBBBAAAABBBB 1
			{
				A_SpawnItemEx("DSFX3",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERALPHA);
				A_KCChase("Melee","Missile",CHF_FASTCHASE);
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			DISC A 0 A_DynamicMusic();
			DISC A 1 A_Jump(192,"Missile2");
		MissileBlur:
			DISC A 1
			{
				A_FaceTarget();
				A_SkullAttack();
				A_StartSound("monster/blur");
			}
			DISC AAAAAAAAAAA 1 
			{
				A_FaceTarget();
				A_SkullAttack();
				A_SpawnItemEx("DSFX3",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERALPHA);
			}
			Goto See;
		Missile2:
			DISC C 0 Bright A_Jump(128,"Missile3");
			DISC C 1 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat1");
			}
			DISC CC 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC D 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot1",36,0,-4,0);
				A_SpawnProjectile("DiscipleShot1",36,0,4,0);
				A_SpawnProjectile("DiscipleShot1",36,0,-8,0);
				A_SpawnProjectile("DiscipleShot1",36,0,8,0);
				A_SpawnProjectile("DiscipleShot1",36,0,0,0);
			}
			DISC D 0 Bright A_Jump(64,"Missile3");
			Goto See;
		Missile3:
			DISC E 1 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			DISC E 1 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			DISC E 1 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(0); }
				A_StartSound("monster/disat2");
			}
			DISC EE 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DISC F 8 Bright 
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(7); }

				A_SpawnProjectile("DiscipleShot2",36,0,0,0);
			}
			Goto See;
		Pain: 
			#### # 0 A_TimeFreezeCheckPain();
			DISC G 2;
			DISC G 2 A_KCPain(); 
			Goto See; 
		Pain.Fist: 
			#### # 0 A_TimeFreezeCheckPain();
			DISC G 2;
			DISC G 2 A_KCPain(); 
			DISC GG 2;
			Goto See; 
		Pain.Kick: 
			#### # 0 A_TimeFreezeCheckPain();
			DISC G 2;
			DISC G 2 A_KCPain(); 
			DISC GGGG 2;
			Goto See; 

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DISC H 8 Bright A_Scream();
			DISC I 5 Bright;
			DISC J 5 Bright;
			DISC K 5 Bright A_NoBlocking();
			DISC LMN 4 Bright;
			DISC O -1;
			Stop;
		Raise: 
			DISC O 5;
			DISC NMLKJIH 5;
			Goto See; 
		XDeath:
			goto Death;
		Ice:
			DISC G 5 A_GenericFreezeDeath();
			DISC G 1 A_FreezeDeathChunks();
			wait;
	} 
}
class DSFX3 : KCAfterimageZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 0.90;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			NULL A 3;
			DISC A 3 A_FadeOut(basealpha*0.10);
			goto Spawn+1;
	}
}
class DiscipleShot1 : KCProjectile
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		DeathSound "monster/disht1";
	}
	
	States
	{
		Spawn:
			CFX2 ABCD 2 Bright 
			{
				A_SpawnProjectile("DSFX1",0,0,0,0);
			}
			Loop;
		Death:
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}
class DiscipleShot2 : KCProjectile
{
	default
	{
		Tag "Disciple Shot";
		DamageFunction (6 * random(1,8));
		Radius 8;
		Height 16;
		Speed 15;
		RenderStyle "Add";
		ALPHA 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		DeathSound "monster/disht2";
	}
	
	States
	{
		Spawn:
			CFX3 AB 3 Bright 
			{
				A_SpawnProjectile("DSFX2",0,0,0,0);
				A_SeekerMissile(5,8);
			}
			Loop;
		Death:
			CFX3 CDEFG 3 Bright;
			Stop;
	}
}
class DSFX1 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX2 EFGHI 3 Bright;
			Stop;
	}
}
class DSFX2 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			CFX3 HIJK 3 Bright;
			Stop;
	}
}
class ApprenticeSheenMode : PowerProtection
{
	default
	{
		damageFactor "normal", 0.25;
		radiusdamageFactor 0.25;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}
class HereticApprenticeNew : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "TCOTD:A Monsters/Raven Style"
		Tag "Apprentice of D'Sparil";
		Health 500;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.8;
		RadiusDamageFactor 0.8;
		DamageFactor "Explosive", 0.8;
		DamageFactor "Magic", 0.8;
		DamageFactor "Zap", 0.8;
		MONSTER;
		+FLOORCLIP;
		+NOGRAVITY;
		+FLOAT;
		SeeSound "wizard2/sight";
		PainSound "wizard2/pain";
		DeathSound "wizard2/death";
		ActiveSound "wizard2/active";
		OBITUARY "%o was spooked by an Apprentice of D'Sparil";
	}

	states
	{
		Spawn:
			APDP A 0 NoDelay;
			APDP AB 10 A_Look();
			goto Spawn+1;
		See:
			APDP A 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP AABB 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 2 A_SetTranslucent(frandom(0.34,0.67),0);
			APDP C 2 A_SetTranslucent(1.0,0);
			APDP C 0 A_Jump(128,"Missile2");
			APDP C 0 A_Jump(64,"Missile3");
			APDP D 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			Goto See;
		Missile2:
			APDP CCCCCCCCC 1
			{
				A_SetTranslucent(alpha-0.1,0);
				A_FaceTarget(); 
			}
			APDP D 1 // A_SetInvulnerable
			{
				bNOPAIN = true;
				A_SetInventory("ApprenticeSheenMode",1);
				A_SetTranslucent(0.1,0);
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_KCWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_KCWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_KCWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_KCWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP CCCC 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha+0.08,0);
				A_FaceTarget(); 
			}
			APDP D 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("FireBlast",30,-10,-4);
				A_SpawnProjectile("FireBlast",30,0,0);
				A_SpawnProjectile("FireBlast",30,10,4);
			}
			APDP CCCC 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); }
				A_SetTranslucent(alpha-0.08,0);
				A_FaceTarget();
			}
			APDP CCCCCCCCCCCCCCCC 1
			{
				A_KCWander(0,1,3,1,1);
				A_FaceTarget();
			}
			APDP BABABABAB 1
			{
				A_SetTranslucent(alpha+0.1,0);
				A_FaceTarget(); 
			}
			APDP A 1 // A_UnsetInvulnerable
			{
				A_FaceTarget();
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1.0,0);
			}
			Goto See;
		Missile3:
			APDP D 4
			{
				A_FaceTarget();
				A_StartSound("wizard/attack");

				A_SpawnProjectile("SuperFireBlast",15,0,0);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_KCPain();
			APDP EE 2;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 2;
			APDP E 2 A_KCPain();
			APDP EEEE 2;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			APDP E 0 // A_UnsetInvulnerable
			{
				bNOPAIN = false;
				A_SetInventory("ApprenticeSheenMode",0);
				A_SetTranslucent(1,0);
			}
			APDP E 4;
			APDP F 4;
			APDP G 3 A_Scream();
			APDP H 3 A_SpawnProjectile("AoDGhost",8,0,0);
			APDP I 3 A_Fall();
			APDP JKL 2;
			APDP M -1;
			Stop;
		Raise:
			APDP M 8;
			APDP L 8;
			APDP KJI 6;
			Goto See;
		XDeath:
			goto Death;
		Ice:
			APDP E 5 A_GenericFreezeDeath();
			APDP E 1 A_FreezeDeathChunks();
			wait;
	}
}
class FireBlast : KCProjectile
{
	default
	{
		Tag "Apprentice FireBlast";
		DamageFunction (3 * random(1,4));
		Speed 25;
		Scale 0.75;
		PROJECTILE;
		+STRIFEDAMAGE;
		+NOGRAVITY;
		DEATHSOUND "fireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT;
			Loop;
    Death:
			PROJ D 4 BRIGHT 
			{
				A_Explode(8,64,0);
			}
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}
class SuperFireBlast : FireBlast
{
	default
	{
		Tag "Apprentice Super FireBlast";
		DamageFunction (24 * random(1,4));
		Speed 16;
		Scale 1.5;
		DEATHSOUND "superfireblast/explode";
	}
	
	states
	{
		Spawn:
			PROJ AABBCC 2 BRIGHT
			{
			}
			Loop;
    Death:
			PROJ D 4 BRIGHT A_Explode(256,128,0);
			PROJ EFGH 4 BRIGHT;
			PROJ I 4 BRIGHT A_FadeOut(0.50);
			Stop;
	}
}
class AoDGhost : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Projectile;
		RenderStyle "Translucent";
		Alpha 0.75;
		+NoClip;
		SeeSound "AoD/Ghost";
	}
	States
	{
		Spawn:
		Death:
			AODG ABCDEF 5 Bright;
			AODG G 5 Bright A_Fadeout();
			Stop;
	}
}
class Banshee : KCCreature
{
	default
	{
		Tag "Abyssal Banshee";
		Health 720;
		Radius 12; // 15
		Height 48; // 60
		Mass 515;
		Speed 15;
		Scale 0.8;
		PainChance 100;
		Painchance "Fire", 50; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		+FLOAT;
		+NOGRAVITY;
		+DONTOVERLAP;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		SeeSound "Banshee/Sight";
		PainSound "Banshee/Pain";
		DeathSound "Banshee/Death";
		ActiveSound "Banshee/Active";
		MeleeSound "Banshee/Raise";
		MONSTER;
		Obituary "%o Heard The Banshee's Wail";
		DropItem "BlasterAmmo", 42, 10;
		DropItem "BlasterHefty", 4, 50;
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "BlasterAmmo", 128, 10;
		DropItem "BlasterHefty", 13, 50;
		DropItem "ArtiTomeOfPower", 8, 1;    
	}
	
	States
	{
		Spawn:
			BANS A 0 NoDelay;
			BANS A 1 A_FloatLook(12);
			goto Spawn+1;
		See:
			TNT1 A 0 A_UnSetInvulnerable();
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_TakeInventory("BansheeMissile5Token",24);
				A_TakeInventory("BansheePainToken",2);

				A_KCChase(null,"Missile", CHF_RESURRECT,1,3,1,1);
			}
			BANS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }

				A_KCChase("Melee","Missile", CHF_RESURRECT,1,3,1,1);
				A_SpawnItem("BansheeTrail",0,0);
			}
			BANS A 0 A_Jump(2,"BansheeTeleport");
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			BANS A 0 A_Jump(2,"Missile3");
			BANS A 0 A_Jump(50,"Missile4");
			BANS A 0 A_Jump(256,"Missile2", "Melee", "Missile1", "Missile5", "Missile6");
			Goto See;
		Missile1:
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS B 0 
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				int MapsFinished;
				if (globalvars) MapsFinished = globalvars.MapsFinished;
				
				if (random(1,256) <= 176) 
				{
					if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) 
					{
						if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) { A_PainAttack("ForgottenOne"); }
						else { A_DualPainAttack("LostSoulAnnoying"); }
					}
					else 
					{
						A_DualPainAttack("LostSoulNew"); 
					}
				}
				else
				{
					if (random(1,256) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) 
					{
						if (random(1,384) <= A_GetEvolveChance(player,MiscItem,MapsFinished)) { A_DualPainAttack("ForgottenOne"); }
						else { A_DualPainAttack("LostSoulAnnoying"); }
					}
					else 
					{
						A_DualPainAttack("LostSoulNew"); 
					}
				}
			}
			Goto See;
		Missile2:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire", 50, 0, -8);
				A_SpawnProjectile("BansheeFire", 50, 0,  0);
				A_SpawnProjectile("BansheeFire", 50, 0,  8);
			}
			Goto See;
		Missile3:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2 
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS B 0 A_Jump(256,"BansheeTeleport");
			Goto See;
		Missile4:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire3");
			}
			Goto See;
		Missile5:  
			BANS B 0 A_FaceTarget();
		Missile5Loop:
			BANS BCD 1
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
			}
			BANS D 0 
			{
				A_SpawnProjectile("BansheeFire4");

				A_GiveInventory("BansheeMissile5Token",1);
				if (CountInv("BansheeMissile5Token") >= 30) { return resolvestate("See"); }
				return resolvestate(null);
			}
			BANS D 1 A_MonsterRefire(40,"See");
			Loop;
		Missile6:  
			BANS B 0 A_FaceTarget();
			BANS BCD 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BANS D 4
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				A_SpawnProjectile("BansheeFire5", 50, 0,-160);
				A_SpawnProjectile("BansheeFire5", 50, 0,-128);
				A_SpawnProjectile("BansheeFire5", 50, 0,-96 );
				A_SpawnProjectile("BansheeFire5", 50, 0,-64 );
				A_SpawnProjectile("BansheeFire5", 50, 0,-32 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 0  );
				A_SpawnProjectile("BansheeFire5", 50, 0, 32 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 64 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 96 );
				A_SpawnProjectile("BansheeFire5", 50, 0, 128);
				A_SpawnProjectile("BansheeFire5", 50, 0, 160);
			}
			Goto See;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			BANS B 0 A_FaceTarget();
			BANS BCD 1;
			BANS D 4
			{
				A_SpawnProjectile("BansheeFire2", 50, 0,-160);
				A_SpawnProjectile("BansheeFire2", 50, 0,-128);
				A_SpawnProjectile("BansheeFire2", 50, 0,-96 );
				A_SpawnProjectile("BansheeFire2", 50, 0,-64 );
				A_SpawnProjectile("BansheeFire2", 50, 0,-32 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 0  );
				A_SpawnProjectile("BansheeFire2", 50, 0, 32 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 64 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 96 );
				A_SpawnProjectile("BansheeFire2", 50, 0, 128);
				A_SpawnProjectile("BansheeFire2", 50, 0, 160);
			}
			Goto See;
		BansheeTeleport:
			BANS A 0 A_SetInvulnerable();
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCChase(null,null,CHF_FASTCHASE,1,3,1,1);
			BANS A 1 A_SetTranslucent(0.10);
			BANS A 1 A_SetTranslucent(0.20);
			BANS A 1 A_SetTranslucent(0.30);
			BANS A 1 A_SetTranslucent(0.40);
			BANS A 1 A_SetTranslucent(0.50);
			BANS A 1 A_SetTranslucent(0.60);
			BANS A 1 A_SetTranslucent(0.70);
			BANS A 1 A_SetTranslucent(0.80);
			BANS A 1 A_SetTranslucent(0.90);
			BANS A 1 A_SetTranslucent(1.0);
			BANS A 0 A_UnSetInvulnerable();
			Goto See;    

		Heal:
			BANS B 8 BRIGHT;
			BANS C 8 BRIGHT
			{
				A_BanshHealProj();
			}
			BANS D 8 BRIGHT;
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS A 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			BANS A 5 A_GiveInventory("BansheePainToken",5);
			BANS A 5 A_FloatPain(0,6,96);
			BANS AA 5;
			BANS A 5 A_JumpIfInventory("BansheePainToken",25,"Missile4");
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BANS G 2 A_Scream();
			BANS H 2 A_NoBlocking();
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS I 2 A_SpawnProjectile("SpawnFire", 0, 0, 0);
			BANS IJKLMNOPQR 2;
			BANS R -1;
			Stop;
	}
}
class BansheePainToken : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeFire3Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeMissile5Token : Ammo
{
	default
	{
		Inventory.MaxAmount 50;
	}
}
class BansheeFire : KCEffectProjectile
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Radius 13;
		Height 8;
		Speed 15;
		Projectile;
		+RANDOMIZE;
		+RIPPER;
		+DEHEXPLOSION;
		+ROCKETTRAIL;
		SeeSound "Banshee/ASpawn";
		DeathSound "Banshee/ADeath";
		Obituary "%o Heard The Banshee's Wail.";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}
class BansheeFire2 : BansheeFire
{
	default
	{
		DamageFunction (2 * random(1,8));
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
			}
			BANB AA 2;
			Loop;
	}
}
class BansheeFire3 : BansheeFire
{
	default
	{
		Tag "Banshee Megablast";
		DamageFunction (100 * random(1,8));
		Radius 24;
		Height 24;
		-RIPPER;
		+NOGRAVITY;
		+SPAWNCEILING;
		+SEEKERMISSILE;
		Scale 3.0;
		Decal "Scorch";
	}
	
	States
	{
		Spawn:
			BANB A 1 NoDelay BRIGHT A_SeekerMissile (50,50);
			BANB A 1 BRIGHT 
			{
				A_SpawnItem("BansheeFireTrail",0,0);
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			BAL1 CDE 3 bright;
			Stop;
	}
}
class BansheeFire4 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 25;
		-RIPPER;
	}
	
	States
	{
		Spawn:
			BANF ABCDEFGH 3 bright;
			Stop;
		Death:
			BANF H 3 bright;
			Stop;
	}
}
class BansheeFire5 : BansheeFire
{
	default
	{
		Tag "Banshee Firewave";
		DamageFunction (2 * random(1,8));
		Speed 20;
		+SEEKERMISSILE;
		+FLOORHUGGER;
	}
	
	States
	{
		Spawn:
			BAFT A 1 BRIGHT 
			{
				A_SeekerMissile(50,50);
			}
			BAFT A 2 
			{
				A_SpawnItem("BansheeFireTrail2",0,0);
			}
			BAFT A 1 BRIGHT
			{
				A_GiveInventory("BansheeFire3Token",1);
				if (CountInv("BansheeFire3Token") >= 30) {return resolvestate("Death"); }
				return resolvestate(null);
			}
			Goto Spawn;
		Death:
			BAFT BCDEFGH 3 bright;
			Stop;
	}
}
class BansheeTrail : KCProjectile
{
	default
	{
		Radius 20;
		Height 56;
		VSpeed 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		ALPHA 0.90;
		scale 0.80;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
		Idle:
			BANS A 3 
			{
				A_SetScale(scale.x-0.06,scale.y-0.06);
				A_FadeOut(0.09);
			}
			Loop;
	}
}
class BansheeFireTrail : KCProjectile
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BANF ABCDEFGH 3 Bright A_FadeOut(0.10);
			Stop;
	}
}
class BansheeFireTrail2 : KCProjectile
{
	default
	{
		Radius 20;
		Height 56;
		Speed 0;
		PROJECTILE;
		RenderStyle "Translucent";
		Scale 0.50;
		ALPHA 0.90;
	}
	
	States
	{
		Spawn:
			TNT1 A 3;
			BAFT ABCDEFG 3 Bright A_FadeOut(0.10);
			Stop;
	}
}
class IronLichNew : KCCreature // replaces IronLich
{
	default
	{
		Tag "Iron Lich";
		Health 700;
		Radius 40;
		Height 72;
		Mass 325;
		Speed 6;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 8;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 64;
		Monster;
		+NOBLOOD;
		+DONTMORPH;
		+DONTSQUASH;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "ironlich/attack";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "$OB_IRONLICH";
		HitObituary "$OB_IRONLICHHIT";
		DropItem "BlasterAmmo", 84, 10;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 10 A_Look();
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			LICH A 0 A_DynamicMusic(); 
			LICH A 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			LICH B 20 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }

				if (kc_monsterlevelenabledflags) A_LichAttack(5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(30,true,self)), 1 + A_CheckMonsterLevelDiv(45,true,self), 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
																		else A_LichAttack(5, 1, 6 * random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			LICH A 4;
			LICH A 4 A_KCPain();
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			LICH A 4;
			LICH A 4 A_KCPain();
			LICH AA 4;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			LICH A 4;
			LICH A 4 A_KCPain();
			LICH AAAA 4;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			LICH C 7;
			LICH D 7 A_Scream();
			LICH EF 7;
			LICH G 7 A_NoBlocking();
			LICH H 7;
			LICH I -1 A_BossDeath();
			Stop;
		Ice:
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}
class HeadFX1New : KCEffectProjectile // replaces HeadFX1 
{
	default
	{
		Tag "Ice Sphere";
		DamageFunction (1 * random(1,8));
		Radius 12;
		Height 6;
		Speed 13;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Icon Lich Ice Ball
		DamageType "Ice";
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 AAABBBCCC 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(12);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(105,175),401);
					}
				}
			}
		Death2:
			FX05 D 5 Bright A_LichIceImpact("HeadFX2New", 8, -0.6);
			FX05 EFG 5 Bright;
			Stop;
	}
}
class HeadFX2New : KCEffectProjectile // replaces HeadFX2 
{
	default
	{
		Tag "Ice Shard";
		DamageFunction (3 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 6;
		Speed 8;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "misc/icehit";
	}
	
	States
	{
		Spawn:
			FX05 HHHIIIJJJ 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			FX05 DEFG 5 Bright;
			Stop;
	}
}
class HeadFX3New : KCEffectProjectile // replaces HeadFX3 
{ 
	default
	{
		Tag "Fire Pillar";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Radius 14;
		Height 12;
		Speed 10;
		FastSpeed 18;
		Projectile;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		RenderStyle "Add";
		DeathSound "misc/fireballbig";
	}
	
	States
	{
		Spawn:
			FX06 A 2 Bright;
			FX06 A 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 B 2 Bright;
			FX06 B 2 Bright
			{
				A_LichFireGrow();
			}
			FX06 C 2 Bright;
			FX06 C 2 Bright
			{
				A_LichFireGrow();
			}
			Loop;
		NoGrow:
			FX06 AA 2 Bright;
			FX06 A 1 Bright;
			FX06 BB 2 Bright;
			FX06 B 1 Bright;
			FX06 CC 2 Bright;
			FX06 C 1 Bright;
			Loop;
		Death:
			FX06 DEFG 5 Bright;
			Stop;
	}
}
class KCWhirlwind : KCProjectile
{
	default
	{
		Accuracy 8;
		DamageType "Wind";
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int randVal;
		Accuracy = clamp(Accuracy, 1, Accuracy);
		int whirltimer = level.time & (Accuracy-1);
		int whirldmg = 3 * randompick(1,1,1,1,1,1,1,1,2,2,2,3);

		if (!target.bDontThrust)
		{
			target.angle += Random2[WhirlwindDamage]() * (360 / 4096.);
			target.Vel.X += Random2[WhirlwindDamage]() / 64.;
			target.Vel.Y += Random2[WhirlwindDamage]() / 64.;
		}

		if ((level.time & 16) && !target.bBoss && !target.bDontThrust)
		{
			randVal = min(160, random[WhirlwindSeek]());
			target.Vel.Z += randVal / 32.;
			target.Vel.Z = clamp(target.Vel.Z, target.Vel.Z, 12);
		}

		if (whirltimer == 0)
		{
			target.DamageMobj (null, target, whirldmg, 'Wind');
		}
		return -1;
	}

	void A_WhirlwindSeek()
	{
		health -= 3;
		if (health < 0)
		{
			Vel = (0,0,0);
			SetStateLabel("Death");
			bMissile = false;
			return;
		}
		if ((threshold -= 3) < 0)
		{
			threshold = 58 + (random[WhirlwindSeek]() & 31);
			A_StartSound("ironlich/attack3", CHAN_BODY);
		}
		if (tracer && tracer.bShadow)
		{
			return;
		}
		A_SeekerMissile(10, 30);
	}
}
class WhirlwindNew : KCWhirlwind // replaces Whirlwind 
{
	default
	{
		Tag "Whirlwind";
		DamageFunction (1 * random(1,8));
		DamageType "Wind";
		Radius 16;
		Height 74;
		Speed 10;
		Accuracy 8; // Sets how long [tics] to wait between hits when the tornado is touching a target
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEMCROSS;
		+SEEKERMISSILE;
		+EXPLOCOUNT;
		+STEPMISSILE;
		RenderStyle "Translucent";
		DefThreshold 60;
		Threshold 50;
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			FX07 DEFG 3;
		Idle:
			FX07 ABC 3 
			{
				A_WhirlwindSeek();
			}
			Loop;
		Death:
			FX07 GFED 4;
			Stop;
	}
}
class IceLich : KCCreature
{
	default
	{
		Tag "Ice Lich";
		health 700;
		painchance 16;
		Painchance "Ice", 0; // Ice can't stun Ice Liches
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Ice", 0;
		DamageFactor "Fire", 2;
		speed 6;
		radius 40;
		height 72;
		mass 500;
		MONSTER;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		MissileChanceMult 0.5; //+MISSILEMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTSQUASH;
		+NOICEDEATH;
		+DONTSPLASH;
		+BOSSDEATH;
		seesound "ironlich/sight";
		attacksound "";
		painsound "ironlich/pain";
		deathsound "freeze/shatter";
		activesound "ironlich/active";
		obituary "%o was frozen by an Ice Lich";
	}

	states
	{
		Spawn:
			ILCH A 0 NoDelay;
			ILCH A 10 A_Look();
			goto Spawn+1;
		See:
			ILCH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
				A_SpawnItemEx("IceGuyWisp1", random(-20,20), random(-20,20), random(50,70), 0, 0, 0, 32, 128);
			}
			ILCH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			ILCH B 0 A_DynamicMusic(); 
			ILCH B 0 bright A_JumpIfCloser(300, "Breath");
			ILCH B 20 bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_FaceTarget();
				A_StartSound("IceGuyAttack", CHAN_AUTO);

				A_SpawnProjectile("IceGuyFX3New", 44, 10, 0, 1);
				A_SpawnProjectile("IceGuyFX3New", 44, -10, 0, 1);
			}
			goto See;
		Breath:
			ILCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
			}
		BreathLoop: // 5 times
			ILCH B 0 bright 
			{
				A_StartSound("FrostBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			ILCH BBB 2 bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("IceBreath", 20, 0, frandom(-10.0,10.0), CMF_CHECKTARGETDEAD);
			}
			ILCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ILCH A 0 A_KCPain();
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			ILCH A 3 A_Scream();
			ILCH A 1 A_IceGuyDie();
			Stop;
	}
}
class IceBreath : KCEffectProjectile
{
	default
	{
		Tag "Icy Breath";
		DamageFunction (5 * random(1,8));
		radius 12;
		height 8;
		speed 8;
		alpha 0.2;
		projectile;
		ProjectileKickBack 0;
		+NODAMAGETHRUST;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		+BLOODLESSIMPACT;
		DamageType "Ice";
		RenderStyle "Add";
	}
	states
	{
		Spawn:
			IBRT ABABABABABABABABABAB 2 bright;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			IBRT AB 2 bright;
			Stop;
	}
}
class Goldlich : IronlichNew
{
	default
	{
		Tag "Gold Lich";
		Mass 2000;
		Speed 10;
		Health 1400;
		Painchance 8;
		Painchance "Fist", 12; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 20; // Kick attacks have a +150% chance of stunning an enemy
		SeeSound "goldlich/sight";
		PainSound "goldlich/pain";
		DeathSound "goldlich/death";
		ActiveSound "goldlich/active";
		Translation "0:17=112:121", "18:35=137:144", "36:42=116:121", "43:51=137:144", "52:58=114:121", "59:65=137:144";
		Obituary "%o was annihilated by the goldlich's power.";
		Species "GoldLich";
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}
	
	States
	{
		Spawn:
			LICH A 0 NoDelay;
			LICH A 1 A_Look();
			LICH A 3 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			goto Spawn+1;
		See:
			LICH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			LICH A 0 A_DynamicMusic(); 
			LICH A 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			LICH B 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);

				A_LichAttack(5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self)), 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(15,true,self)), 8*random(1,8), "HeadFX1New", "HeadFX3New", "WhirlwindNew");
			}
			LICH BBB 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				A_FaceTarget();
			}
			goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			LICH A 0 A_DynamicMusic(); 
			LICH A 1 A_FaceTarget();
			LICH A 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 0
			{
				A_FaceTarget();
				if (random(1,256) <= 85 && GetClassName() == "Goldlich") { return resolvestate("Missile2"); }
				if (random(1,256) <= 128) { return resolvestate("Missile3"); }
				if (random(1,256) <= 255) { return resolvestate("Missile4"); }
				return resolvestate(null);
			}
			goto See;
		Missile2:
			LICH BBBBBBBB 1 A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			TNT1 AAAAAAAAAAAAAAAA 0 A_KCWander(0,1,3,1,1);
			TNT1 A 0 
			{
				A_SpawnItemEx("TeleportFog");
				A_UnsetSolid();
				A_SpawnItemEx("FakeGoldlich", 0,0,0, 0,0,0, 0, SXF_TRANSFERTRANSLATION);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_KCWander(0,1,3,1,1);
			TNT1 A 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_SetSolid();
			}
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			goto See;
		Missile3:
			LICH B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("goldlich/attack2");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				for (user_barragecounter = 0; user_barragecounter < 12; user_barragecounter++)
				{
					A_SpawnProjectile("GoldLichBounce",32,0,user_barragecounter*30);
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			LICH B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
			goto See;
		Missile4:
			LICH B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("goldlich/attack1");

				user_shotsfired = 0;
				user_shotsfiredmax = 4 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
				if (random(1,2) == 1)
				{
					A_SpawnProjectile("GoldLichFire");
				}
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
			}
			LICH B 1 A_FaceTarget();
		Missile4Loop: // 4 times
			LICH B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("GoldLichFire");
				A_SpawnItemEx("GoldLichGlitter", random(-32,32), random(-32,32), random(8,104),0,0,0, 0,0, 0);
				user_shotsfired += 1;
			}
			LICH B 1 
			{
				A_FaceTarget();
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("Missile4End"); }
				return resolvestate(null);
			}
			Loop;
		Missile4End:
			LICH B 0 
			{
				A_SpawnProjectile("GoldLichFire");
			}
			goto See;

		Death:
			LICH CC 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 1 A_Scream();
			LICH D 3 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH D 4 A_SpawnItemEx("GoldLichGlitter", random(-36,36), random(-36,36), random(8,104),0,0,0, 0,0, 0);
			LICH EE 4 A_SpawnItemEx("GoldLichGlitter", random(-40,40), random(-40,40), random(0,112),0,0,0, 0,0, 0);
			LICH FF 4 A_SpawnItemEx("GoldLichGlitter", random(-44,44), random(-44,44), random(0,96),0,0,0, 0,0, 0);
			LICH G 0 A_NoBlocking();
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH G 4 A_SpawnItemEx("GoldLichGlitter", random(-52,52), random(-52,52), random(0,80),0,0,0, 0,0, 0);
			LICH HH 4 A_SpawnItemEx("GoldLichGlitter", random(-56,56), random(-56,56), random(0,64),0,0,0, 0,0, 0);
			LICH I 4 A_SpawnItemEx("GoldLichGlitter", random(-64,64), random(-64,64), random(0,48),0,0,0, 0,0, 0);
			LICH I -1 A_BossDeath();
			Stop;
		Ice:
			LICH A 5 A_GenericFreezeDeath();
			LICH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			LICH H 7;
			LICH GFEDC 7;
			goto See;
	}
}
class GoldLichMiniExplodes : KCBaseZSC
{
	default
	{
		+DONTSPLASH;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			FXA1 DEF 3 BRIGHT;
			Stop;
	}
}
class GoldLichGlitter : KCBaseZSC
{
	default
	{
		+NOGRAVITY;
	}
	States
	{
		Spawn:
			GGLT ABCDE 4 BRIGHT;
			Stop;
	}
}
class FakeGoldLich : GoldLich
{
	default
	{
		Tag "Gold Lich";
		DropItem "BlasterHefty", 255, 50;
		Mass 250;
		Health 175;
		Species "GoldLich";
	}
}
class GoldLichBounce : KCProjectile
{
	default
	{
		Tag "Gold Lich Bouncer";
		DamageFunction (1 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		BounceType "Doom";
		BounceCount 2;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+BOUNCEONACTORS;
		+CANBOUNCEWATER;
	}
	
	States
	{
		Spawn:
			FXA1 AABBCC 2 BRIGHT;
			Loop;
		Death:
			FXA1 A 0 A_StartSound("goldlich/attack2Blast");
			FXA1 A 0 BRIGHT A_Stop();
			FXA1 A 0 BRIGHT A_Explode(64,160,0);
			FXA1 GGGGGHHHHHIIIII 1 BRIGHT A_SpawnItemEx("GoldLichMiniExplodes", random(-32,32), random(-32,32), random(-32,32),0,0,0, 0,0, 0);
			Stop;
	}
}
class GoldLichFire : KCProjectile
{
	int user_tracks;
	default
	{
		Tag "Gold Lich Fire";
		DamageFunction (5 * random(1,8));
		Radius 14;
		Height 12;
		Speed 15;
		FastSpeed 24;
		Projectile;
		+NOGRAVITY;
		+WINDTHRUST  ;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+SEEKERMISSILE;
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			FX06 A 0 { user_tracks = 5; }
		Weave:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_Weave(3, 0, 4.0, 0.0);
			}
			TNT1 A 0 A_Jump(128, "Track");
			Loop;
		Track:
			TNT1 A 0 A_StartSound("goldlich/attack1");
			TNT1 A 0 A_Jump(user_tracks <= 0, "Track");
			TNT1 A 0 { user_tracks - 1; }
			FX06 AAAABBBBCCCC 1 BRIGHT
			{
				A_SeekerMissile(360, 1);
			}
			TNT1 A 0 A_Jump(128, "Weave");
			Loop;
		Death:
			FX06 DEFG 5 BRIGHT;
			Stop;
	}
}
class BloodLich : KCCreature
{
	default
	{
		Tag "Blood Lich";
		Health 2100;
		Radius 40;
		Height 72;
		Mass 2100;
		Speed 10;
		PainChance 16;
		Painchance "Fire", 8; // Fire attacks have a -50% chance of stunning an enemy
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 24; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		MONSTER;
		+NOGRAVITY;
		+NOTARGET;
		+NOFEAR;
		+SPAWNCEILING;
		+FLOAT;
		MissileChanceMult 0.0625;
		//+MISSILEEVENMORE;
		//+MISSILEMORE;
		+DONTBLAST;
		+DONTMORPH;
		+DONTRIP;
		+DONTSPLASH;
		+BOSS;
		+BOSSDEATH;
		SeeSound "ironlich/sight";
		AttackSound "";
		PainSound "ironlich/pain";
		DeathSound "ironlich/death";
		ActiveSound "ironlich/active";
		Obituary "%o was reduced to a pile of ash by a Blood Lich.";
		DropItem "BlasterAmmo", 21, 50;
		DropItem "BlasterAmmo", 2, 50;
		DropItem "BlasterAmmo", 84, 50;
		DropItem "BlasterAmmo", 8, 50;
		DropItem "BlasterHefty", 21, 50;
		DropItem "BlasterHefty", 2, 50;
		DropItem "BlasterHefty", 84, 50;
		DropItem "BlasterHefty", 8, 50;
		DropItem "ArtiEgg", 51, 0;
		DropItem "ArtiEgg", 51, 0;
	}

	States
	{
		Spawn:
			BLCH A 0 NoDelay;
			BLCH A 10 A_Look();
			goto Spawn+1;
		See:
			BLCH A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			BLCH B 0 A_DynamicMusic(); 
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 0 Bright A_Jump(96,"Curse");
			BLCH B 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("MageStaffFire", CHAN_AUTO);

				A_SpawnProjectile("BloodLichFireball", 54, 10, -2, 1);
				A_SpawnProjectile("BloodLichFireball", 54, -10, 2, 1);
			}
			goto See;
		Breath:
			BLCH B 0 bright 
			{
				user_shotsfired = 0;
				user_shotsfiredmax = 5 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self));
			}
		BreathLoop: // 5
			BLCH B 0 Bright
			{
				A_StartSound("FlameBreath", CHAN_AUTO);
				A_FaceTarget();
			}
			BLCH BBB 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("FireBreath", 20, 0, frandom(-3.0,3.0), CMF_CHECKTARGETDEAD);
			}
			BLCH B 0 
			{
				A_FaceTarget();
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Curse:
			BLCH B 0 Bright A_JumpIfCloser(300, "Breath");
			BLCH B 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_SpawnProjectile("CurseSpell", 20, 0, 0, 1);
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BLCH A 0 A_KCPain();
			goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BLCH C 7 
			{
				if (random(1,256) <= 160) { A_PainDie("HereticImpLeader"); }
			}
			BLCH D 7 A_Scream();
			BLCH EF 7;
			BLCH G 7 A_NoBlocking();
			BLCH H 7;
			BLCH I -1 A_BossDeath();
			Stop;
		Ice:
			BLCH A 5 A_GenericFreezeDeath();
			BLCH A 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BLCH H 7;
			BLCH GFEDC 7;
			goto See;
	}
}
class FireBreath : KCProjectile
{
	default
	{
		Tag "Blood Firebreath";
		DamageFunction (3 * random(1,8));
		Radius 12;
		Height 8;
		Speed 12;
		Alpha 0.2;
		PROJECTILE;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		+BLOODLESSIMPACT;
		DamageType "Fire";
		RenderStyle "Add";
	}
	
	States
	{
    Spawn:
			FRBS EFGEFGEFGEFGEFGEFG 3;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class BloodLichFireball : KCProjectile
{
	default
	{
		Tag "Blood Fireball";
		DamageFunction (4 * random(1,8));
		Speed 17;
		Height 8;
		PROJECTILE;
		+EXTREMEDEATH;
		DamageType "Fire";
		DeathSound "MageStaffExplode";
	}
	
	States
	{
		Spawn:
			MSP4 ABCD 2 Bright
			{
			}
			Loop;
		Death:
			MSP4 E 4 Bright A_SetTranslucent(1,1);
			MSP4 F 5 Bright A_Explode(80,192,0);
			MSP4 GH 5 Bright;
			MSP4 I 4 Bright;
			Stop;
	}
}
class CurseSpell : KCEffectProjectile
{
	default
	{
		Tag "Curse Sphere";
		PROJECTILE;
		+SEEKERMISSILE;
		+BLOODLESSIMPACT;
		RenderStyle "Add";
		DamageFunction (0);
		DamageType "Dark";
		Speed 15;
		Radius 10;
		Height 6;
	}
	
	void A_Effect(int basechance, int actualroll, int inflicttics, int sndchannel)
	{
		actor player = players[0].mo;
		A_StatusEffectChecker(basechance);
		if (random(1,user_ailmentmaxchance) <= actualroll && user_canafflict)
		{
			user_random = random(1,12);
			if (user_random >= 1 && user_random <= 4)
			{
				A_InflictWeaken(random(630,1050),sndchannel);
			}
			if (user_random >= 5 && user_random <= 8)
			{
				A_InflictHalve(random(630,1050),sndchannel);
			}
			if (user_random >= 9 && user_random <= 12)
			{
				A_InflictSlow(random(315,525),sndchannel);
			}
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			CURS A 0 A_StartSound("CurseActive", CHAN_AUTO, CHANF_DEFAULT, 1, ATTN_NORM);
			CURS ABCDEF 3 Bright A_SeekerMissile(50,50,2);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_Effect(4,2,random(630,1050),401);
				}
			}
		Death2:
			TNT1 A 0 A_StopSound(CHAN_AUTO);
			CURS GHIJKL 3 Bright;
			Stop;
	}
}
class ClinkNew : KCCreature // replaces Clink
{
	default
	{
		Tag "Sabreclaw";
		Health 150;
		Radius 20;
		Height 64;
		Mass 75;
		Speed 14;
		MeleeRange 52;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 28;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 43;
		Monster;
		+NOBLOOD;
		+FLOORCLIP;
		SeeSound "clink/sight";
		AttackSound "clink/attack";
		PainSound "clink/pain";
		DeathSound "clink/death";
		ActiveSound "clink/active";
		Obituary "$OB_CLINK";
		DropItem "SkullRodAmmo", 84, 20;
		DropItem "SkullRodHefty", 8, 100;
	}
	
	States
	{
		Spawn:
			CLNK A 0 NoDelay;
			CLNK AB 10 A_Look();
			Loop;
		See:
			CLNK ABCD 3
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self))
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
				else
				{
					A_KCChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			CLNK E 0 A_DynamicMusic();
			CLNK E 0
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) 
				{
					if (random(1,256) <= 154) { return resolvestate("AxeMissile"); } else { return resolvestate("LungeAttack"); } 
					return resolvestate("See");
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) 
				{
					if (random(1,256) <= 85) { return resolvestate("AxeMissile"); } else { return resolvestate("LungeAttack"); } 
					return resolvestate("See"); 
				}
				return resolvestate("See");
			}
			Goto See;

		AxeMissile:
			#### # 0 A_TimeFreezeCheckMissile();
			CLNK EF 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("ClinkAxe", 30, random[ClinkAttack](3,9), "clink/attack");
			}
			Goto See;

		LungeAttack:
			CLNK A 0 A_JumpIfCloser(208,1);
			Goto AxeMissile;
			CLNK A 0 A_Jump(64, "AxeMissile");
			CLNK P 0 A_DynamicMusic();
			CLNK P 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CLNK P 0
			{
				A_SetInventory("ClinkLungeAttackStatus",1);
				A_FaceTarget();
			}
			CLNK Q 1 ThrustThingZ(0,40,0,1);
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK E 0 A_FaceTarget();
			CLNK Q 0 A_Recoil(-10);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQQ 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK Q 0 A_SpawnItemEx("SabreclawGhostTrail",0,0,0,0,0,0,0,128,0);
			CLNK QQQP 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK P 0 A_SpawnItemEx("SabreclawGhostTrail2",0,0,0,0,0,0,0,128,0);
			CLNK PPPP 1 A_JumpIfCloser(71, "MeleeStrike");
			CLNK P 0 A_SpawnItemEx("SabreclawGhostTrail2",0,0,0,0,0,0,0,128,0);
			CLNK P 1 A_JumpIfCloser(71, "MeleeStrike");
			Goto See;
		MeleeStrike:
			CLNK G 0 A_DynamicMusic();
			CLNK G 0 A_FaceTarget();
			CLNK G 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_SetInventory("ClinkLungeAttackStatus",0);
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(6,18), "clink/attack", "clink/attack", "Melee", 1);
			}
			Goto See;

		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
			}
			CLNK E 0 A_DynamicMusic();
			CLNK E 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK F 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CLNK G 7 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[ClinkAttack](3,9), "clink/attack", "clink/attack");
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_KCPain();
			CLNK HH 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			CLNK H 3 A_SetInventory("ClinkLungeAttackStatus",0);
			CLNK H 3 A_KCPain();
			CLNK HHHH 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CLNK IJ 6
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
			}
			CLNK K 5 A_Scream();
			CLNK L 5 A_NoBlocking();
			CLNK MN 5;
			CLNK O -1;
			Stop;
		Ice:
			CLNK H 5 A_GenericFreezeDeath();
			CLNK H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CLNK N 5;
			CLNK MLKJI 5;
			Goto See;
	}
}
class ClinkAxe : KCProjectile
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(2,2,2,2,2,2,3,3,3,4) * random(1,8));
		Radius 10;
		Height 8;
		Speed 25;
		FastSpeed 30;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // Sabreclaw/Clink Spectral Axe
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.6;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX A 3 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 3 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}
class SabreclawGhostTrail : KCBaseZSC
{
	default
	{
		Radius 16;
		Height 56;
		Speed 1;
		DamageFunction (0);
		RenderStyle "Translucent";
		Alpha 0.7;
		PROJECTILE;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
			CLNK Q 0;
			CLNK Q 1 A_FadeOut(0.10);
			goto Spawn+1;
	}
}
class SabreclawGhostTrail2 : KCBaseZSC
{
	default
	{
		Radius 16;
		Height 56;
		Speed 1;
		DamageFunction (0);
		RenderStyle "Translucent";
		Alpha 0.7;
		PROJECTILE;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
			CLNK P 0;
			CLNK P 1 A_FadeOut(0.10);
			goto Spawn+1;
	}
}
class ClinkLungeAttackStatus : PowerProtection 
{
	default
	{
		DamageFactor "Melee", 1.5;
		DamageFactor "Fist", 1.5;
		DamageFactor "Kick", 1.5;
		DamageFactor "Chainsaw", 1.5;
		DamageFactor "Stomp", 1.5;
		DamageFactor "Trample", 1.5;
		DamageFactor "Bonk", 1.5;
		DamageFactor "Chop", 1.5;
		DamageFactor "Suck", 1.5;
		inventory.icon "";
	}
}
class DarkClink : KCCreature //Recolour by Bouncy, new (edited) sprites by Phobus, Decorate by Phobus, Edited by Bouncy
{
	default
	{
		Tag "SabreBlade";
		Health 550;
		Radius 30;
		Height 64;
		Mass 600;
		Speed 16;
		Painchance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 12;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 12;

		DamageFactor "CherryBomb", 0.625;
		Painchance "CherryBomb", 20;
		DamageFactor "Bonk", 1.0;
		Painchance "Bonk", 32;
		DamageFactor "Cricket", 2.0;
		Painchance "Cricket", 64;
		DamageFactor "Lead", 0.25;
		Painchance "Lead", 8;
		DamageFactor "Chop", 4.0;
		Painchance "Chop", 128;
		DamageFactor "Breakfast", 2.0;
		Painchance "Breakfast", 64;
		DamageFactor "Suck", 0.5;
		Painchance "Suck", 16;
		DamageFactor "Zap", 1.5;
		Painchance "Zap", 48;
		DamageFactor "Dust", 3.0;
		Painchance "Dust", 72;
		DamageFactor "BRocket", 1.0;
		Painchance "BRocket", 48;
		DamageFactor "Popper", 0.125;
		Painchance "Popper", 4;
		DamageFactor "Spinner", 1.334;
		Painchance "Spinner", 64;
		DamageFactor "Beats", 0.25;
		Painchance "Beats", 8;

		RadiusDamageFactor 0.625;
		DamageFactor "Explosive", 0.625;

		DamageFactor "Holy", 1.50;
		Painchance "Holy", 60;
		DamageFactor "Thunder", 0.25;
		Painchance "Thunder", 12;
		MONSTER;
		SeeSound "clink/sight";
		DeathSound "clink/death";
		PainSound "clink/pain";
		ActiveSound "clink/active";
		MeleeSound "clink/attack";
		MeleeDamage 5;
		Bloodcolor "33 33 33";
		Renderstyle "Normal";
		Alpha 1.0;
		HitObituary "%o was decapitated by a Sabreblade.";
		Obituary "%o was zapped by a Sabreblade.";
		DropItem "SkullRodAmmo", 252, 20;
		DropItem "SkullRodAmmo", 252, 20;
		DropItem "SkullRodHefty", 24, 100;
		DropItem "SkullRodHefty", 24, 100;
	}
	
	States
	{
		Spawn:
			DCLK A 0 NoDelay;
			DCLK AB 10 A_Look();
			Loop;
		See:
			DCLK ABCD 3
			{
				A_SetInventory("ClinkLungeAttackStatus",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					user_fastchasetimer = 0; 
				}
				else
				{
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 A_DynamicMusic();
			DCLK E 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DCLK F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DCLK G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(5*random(1,10), "clink/attack", "clink/attack");
			}
			Goto See;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			DCLK EF 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			DCLK G 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				A_CustomComboAttack("ClinkAxe2", 30, 5*random(1,10), "clink/attack");
			}
			Goto See;

		ExtraMissile:
			#### # 0 A_TimeFreezeCheckMissile();
			DCLK P 8 
			{
				A_FaceTarget();
			}
			DCLK Q 8 
			{
				A_FaceTarget();
				A_SpawnProjectile("DarkClinkBall",45,12,0,0);
				A_SpawnProjectile("DarkClinkBall",32,-18,0,0);
			}
			DCLK R 8 
			{
				A_FaceTarget();
				A_SpawnProjectile("DarkClinkBall",32,-12,0,0);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DCLK H 5;
			DCLK H 5 A_KCPain(1,random(18,22),8,0,0,55);
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DCLK H 5;
			DCLK H 5 A_KCPain(1,random(18,22),8,0,0,110);
			DCLK HH 5;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DCLK H 5;
			DCLK H 5 A_KCPain(1,random(18,22),8,0,0,165);
			DCLK HHHH 5;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DCLK I 5;
			DCLK J 5 A_Scream();
			DCLK K 5;
			DCLK L 5 A_NoBlocking();
			DCLK MN 5;
			DCLK O -1 A_Die();
			Stop;
		Ice:
			DCLK H 5 A_GenericFreezeDeath();
			DCLK H 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DCLK ONMLKJI 5;
			Goto See;
	}
}
class DarkClinkBall : KCProjectile
{
	default
	{
		Tag "SabreBlade Ball";
		Height 16;
		Radius 8;
		Speed 18;
		Damage 3;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.7;
		Decal "DoomImpScorch";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	States
	{
		Spawn:
			CLBL AABBCCDD 2 Bright;
			Loop;
		Death:
			CLBL EFG 5 Bright;
			Stop;
	}
}
class ClinkAxe2 : ClinkAxe
{
	default
	{
		Tag "Silver Axe";
		DamageFunction (randompick(4,4,4,4,4,4,5,5,5,6) * random(1,8));
		Radius 10;
		Height 8;
		Speed 20;
		FastSpeed 24;
		Projectile;
		+NODAMAGETHRUST;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+THRUGHOST; // SabreBlade/DarkClink Spectral Axe 2
		+WINDTHRUST;
		RenderStyle "Add";
		Scale 0.8;
		DeathSound "hknight/hit";
	}
	
	States
	{
		Spawn:
			CLAX ABC 2 Bright;
			CLAX A 2 Bright 
			{
				A_StartSound("hknight/axewhoosh");
			}
			CLAX BC 2 Bright;
			Loop;
		Death:
			CLAX DEF 6 Bright;
			Stop;
	}
}
class BeastNew : KCCreature // replaces Beast
{
	default
	{
		Tag "Were-Dragon";
		Health 220;
		Radius 32;
		Height 74;
		Mass 200;
		Speed 14;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.125;
		Painchance "Fire", 13;
		DamageFactor "Ice", 4.0;
		Painchance "Ice", 256;
		Monster;
		+FLOORCLIP;
		SeeSound "beast/sight";
		AttackSound "beast/attack";
		PainSound "beast/pain";
		DeathSound "beast/death";
		ActiveSound "beast/active";
		Obituary "$OB_BEAST";
		DropItem "CrossbowAmmo", 84, 10;
		DropItem "CrossbowHefty", 8, 50;
	}
	
	States
	{
		Spawn:
			BEAS A 0 NoDelay;
			BEAS AB 10 A_Look();
			goto Spawn+1;
		See:
			BEAS ABCDEF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			BEAS H 0 A_DynamicMusic(); 
			BEAS H 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			BEAS I 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
				
				A_CustomComboAttack("BeastBallNew", 32, random[BeastAttack](1,8)*3, "beast/attack");
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BEAS G 3;
			BEAS G 3 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			BEAS G 3;
			BEAS G 3 A_KCPain();
			BEAS GG 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			BEAS G 3;
			BEAS G 3 A_KCPain();
			BEAS GGGG 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BEAS R 6;
			BEAS S 6 A_Scream();
			BEAS TUV 6;
			BEAS W 6 A_NoBlocking();
			BEAS XY 6;
			BEAS Z -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			BEAS J 5;
			BEAS K 6 A_Scream();
			BEAS L 5;
			BEAS M 6;
			BEAS N 5;
			BEAS O 6 A_NoBlocking();
			BEAS P 5;
			BEAS Q -1;
			Stop;
		Ice:
			BEAS G 5 A_GenericFreezeDeath();
			BEAS G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BEAS P 5;
			BEAS O 6;
			BEAS N 5;
			BEAS M 6;
			BEAS L 5;
			BEAS K 6;
			BEAS J 5;
			Goto See;
	}
}
class BeastBallNew : KCProjectile // replaces BeastBall 
{
	default
	{
		Tag "Gargoyle Fireblast";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 9;
		Height 8;
		Speed 12;
		FastSpeed 20;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOBLOCKMAP;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "beast/attack";
		DeathSound "misc/fireballhit";
	}
	
	States
	{
		Spawn:
			FRB1 AABBCC 2 
			{
				A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625,random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
			}
			Loop;
		Death:
			FRB1 DEFGH 4;
			Stop;
	}
}
class ShadowBeast : KCCreature
{
	default
	{
		Tag "Shadow Beast";
		Obituary "%o was killed by a shadow beast.";
		Bloodcolor "70 AC 00";
		Health 750; // 500
		Radius 40;
		Height 80;
		Mass 1250; // 500
		Speed 12;
		PainChance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		SEESOUND "shadowbeast/sight";
		PAINSOUND "shadowbeast/pain";
		DEATHSOUND "shadowbeast/death";
		ACTIVESOUND "shadowbeast/active";
		Alpha 1.0;
		RenderStyle "Translucent";
		MONSTER;
		+FloorClip;
	}
	
	states
	{
		Spawn:
			BDEM AB 10 A_Look();
			Loop;
		See:
			TNT1 A 0 A_JumpIfHealthLower((user_MaxHP / 2), "Run");
			BDEM ABCDEF 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); bAVOIDMELEE = true; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); bAVOIDMELEE = true; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Run:
			TNT1 A 0 A_StartSound("shadowbeast/sight");
			BDEM AABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_KCChase(null,null,0,1,3,1,1);
			}
			TNT1 A 0 A_Jump(252, "Missile");
			Goto See;

		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_JumpIfHealthLower ((user_MaxHP / 2), "Missile2");
			TNT1 A 0 A_Jump(90, "Missile1b");
		
		Missile1a:
			BDEM H 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 0);
				A_SpawnProjectile("ShadowBeastBall1", 56, 0, 8);
			}
			Goto See;
		Missile1b:
			BDEM H 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -16);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, -8);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 0);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 8);
			}
			BDEM I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 16);
			}
			BDEM I 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
		
				A_SpawnProjectile("ShadowBeastBall2", 56, 0, 32);
			}
			Goto See;

		Missile2:
			TNT1 A 0 A_Jump(90, "Missile2b");
		Missile2a:
			BDEM H 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BDEM IIIIIIIIIIIII 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("ShadowBeastBallFire", 56, 0, random(-8,8));
			}
			Goto See;
		Missile2b:
			BDEM H 16 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(78,79,79,79),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(67,68),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(56,56,56,57),2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(15); }
				A_FaceTarget();
			}
			BDEM I 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 64);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 56);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 48);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 40);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 32);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 24);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 16);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, -8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 8);
				A_SpawnProjectile("ShadowBeastBall3", 56, 0, 0);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(2,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(8,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			BDEM GG 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 A_Jump((16 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(16,true,self))), "Spread");
			BDEM G 2;
			BDEM G 4 A_KCPain();
			BDEM GGGG 4;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BDEM R 8;
			BDEM S 8 A_Scream();
			BDEM TUVWX 6;
			BDEM Y 6 A_NoBlocking();
			BDEM Z -1;
			Stop;
		Raise:
			BDEM Y 6;
			BDEM XWVUT 6;
			BDEM SR 8;
			Goto See;

		Spread:
			TNT1 A 0 
			{
				A_SpawnItemEx("ShadowBeastSpread", 0, 0, 0, 0, 0, 0, 0, 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);
				A_SpawnItemEx("ShadowBeastSparkle", random(0,16), random(0,16), random(16,48), 0, 0, 0, random(0,359), 128);

				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				A_SpawnItemEx("ShadowBeastCreature", 0, 0, random(16,48), random(0,8), random(0,8), random(0,8), random(0,359), 0);
				
				A_SetTranslucent(0.0);
			}
			Goto Wander;
		Wander:
			TNT1 A 0 
			{
				A_UnSetShootable();
				bNOPAIN = true;
			}
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				A_KCWander(0,1,3,1,1);
			}
			BDEM ABCDEF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FadeIn(0.1667,FTF_CLAMP);
				if (random(1,6) == 1) { A_KCWander(0,1,3,1,1); } else { A_KCChase(null,null,0,1,3,1,1); }
			}
			TNT1 A 0 
			{
				A_SetShootable();
				bNOPAIN = false;
			}
			Goto See;
	}
}
class ShadowBeastSpread : KCBaseZSC
{
	default
	{
		Tag "Shadow Beast Shot";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spread");
			BDEM JKLMNOP 8;
			BDEM Q 70;
			BDEM QQQQQQQQQQ 1 A_FadeOut(0.1);
			Stop;
	}
}
class ShadowBeastCreature : KCSpawnedItem
{
	default
	{
		Tag "Shadow Beast Spirit";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 16;
		MONSTER;
		-SOLID;
		-SHOOTABLE;
		-COUNTKILL;
		+FLOAT;
		+NOGRAVITY;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_StartSound("shadowbeast/spiritsit");
			Goto See;
		See:
			TNT1 A 0 A_Jump(60, 5);
			TNT1 A 0 A_Jump(60, 15);
			TNT1 A 0 A_Jump(60, 25);
			TNT1 A 0 A_Jump(60, 35);
			TNT1 A 0 A_Jump(60, 45);
			BDSP ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB 2 A_Chase();
			Goto Death; 
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			BDSP AB 2 A_CustomMeleeAttack((5 * random(1,8)), "none", "none", "Magic");
			Goto See;
		Death:
			TNT1 A 0 A_StartSound("shadowbeast/spiritdth");
			BDSP EFGHIJ 5;
			Stop;
	}
}
class ShadowBeastSparkle : KCProjectile
{   
	default
	{
		Alpha 1.0;
		RenderStyle "Add";
		Radius 1;
		Height 1;
		Damage 0;
		Speed 0;
		PROJECTILE;
		Scale 1.0;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(128,2);
			BDP1 GHI 5;
			Stop;
	}
}
class ShadowBeastBallFire : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (1 * random(1,8)); // 2
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		+RIPPER;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1death";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			BDP2 DEFGH 5 Bright;
			Goto Death;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			TNT1 A 0;
			Stop;
	}
}
class ShadowBeastBall1 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0  ;
		RenderStyle "Add";
		Speed 15;
		Radius 10;
		Height 6;
		DamageFunction (5 * random(1,8));
		DamageType "PoisonElemental"; // Poison
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "shadowbeast/pr1sight";
		DeathSound "shadowbeast/pr1death";
	}
	
	States
	{
		Spawn:
			BDP2 ABC 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(70,105)); // Poison for 2-3 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			BDP2 DE 4 Bright;
			BDP2 FGH 3 Bright;
			Stop;
	}
}
class ShadowBeastBall2 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (2 * random(1,8));
		Speed 16;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DE 1 A_BishopMissileWeave();
			Loop;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class ShadowBeastBall3 : KCEffectProjectile
{
	default
	{
		Tag "Shadow Beast Ballfire";
		Alpha 1.0;
		Scale 1.4;
		RenderStyle "Add";
		Radius 8;
		Height 6;
		DamageFunction (10 * random(1,8));
		Speed 20;
		PROJECTILE;
		+Randomize;
		SeeSound "shadowbeast/pr2sight";
		DeathSound "shadowbeast/pr2death";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			BDP1 DEDEDEDED 2 A_BishopMissileWeave();
			BDP1 ED 2 A_BishopMissileWeave();
			TNT1 A 0 A_FadeOut(0.20);
			Goto Spawn+9;
		Death:
			BDP1 FGHI 3;
			Stop;
	}
}
class MaulotaurBase : KCCreature
{
 const MAULATORTICS = 25 * TICRATE;
 const MNTR_CHARGE_SPEED =13.;
 const MINOTAUR_LOOK_DIST = 16*54.;
	
	void MinotaurSlam (Actor target)
	{
		double ang = AngleTo(target);
		double thrust = 16 + random[MinotaurSlam]() / 64.;
		target.VelFromAngle(ang, thrust);
		int damage = random[MinotaurSlam](1, 8) * (bSummonedMonster? 4 : 6);
		int newdam = target.DamageMobj (null, null, damage, 'Melee');
		target.TraceBleedAngle (newdam > 0 ? newdam : damage, ang, 0.);
		if (target.player)
		{
			target.reactiontime = random[MinotaurSlam](14, 21);
		}
	}

	override void Tick ()
	{
		Super.Tick ();
		
		// The unfriendly Minotaur (Heretic's) is invulnerable while charging
		if (!bSummonedMonster)
		{
			bInvulnerable = bSkullFly;
		}
	}

	override bool Slam (Actor thing)
	{
		// Slamming minotaurs shouldn't move non-creatures
		if (!thing.bIsMonster && !thing.player)
		{
			return false;
		}
		return Super.Slam (thing);
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		damage = Super.DoSpecialDamage (target, damage, damagetype);
		if (damage != -1 && bSkullFly)
		{
			// Slam only when in charge mode
			MinotaurSlam (target);
			return -1;
		}
		return damage;
	}

	void A_MinotaurAtk1(int atkdamage = 4, int squishamount = -16)
	{
		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/melee", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
	}

	void A_MinotaurDecide()
	{
		bool friendly = bSummonedMonster;

		if (!target)
		{
			return;
		}
		if (!friendly)
		{
			A_StartSound("minotaur/sight", CHAN_WEAPON);
		}
		double dist = Distance2D(target);
		if (target.pos.z + target.height > pos.z
			&& target.pos.z + target.height < pos.z + height
			&& dist < (friendly ? 16*64. : 8*64.)
			&& dist > 1*64.
			&& random[MinotaurDecide]() < 150)
		{
			// Charge attack
			// Don't call the state function right away
			SetStateLabel("Charge", true);
			bSkullFly = true;
			if (!friendly)
			{
				// Heretic's Minotaur is invulnerable during charge attack
				// bInvulnerable = true;
				A_SetInventory("MaulotaurChargeDefense",1);
				bNoPain = true;
				bNoBlood = true;
			}
			A_FaceTarget ();
			VelFromAngle(MNTR_CHARGE_SPEED);
			special1 = TICRATE/2; // Charge duration
		}
		else if (target.pos.z == target.floorz
				&& dist < 9*64.
				&& random[MinotaurDecide]() < (friendly ? 100 : 220))
		{
			// Floor fire attack
			SetStateLabel("Hammer");
			special2 = 0;
		}
		else
		{
			// Swing attack
			A_FaceTarget ();
			// Don't need to call P_SetMobjState because the current state
			// falls through to the swing attack
		}
	}
	
	void A_MinotaurCharge()
	{
		if (target == null)
		{
			return;
		}
		if (special1 > 0)
		{
			Class<Actor> type;

			if (gameinfo.gametype == GAME_Heretic)
			{
				type = "PhoenixPuff";
			}
			else
			{
				type = "PunchPuff";
			}
			Actor puff = Spawn (type, Pos, ALLOW_REPLACE);
			if (puff != null) puff.Vel.Z = 2;
			special1--;
		}
		else
		{
			bSkullFly = false;
			bInvulnerable = false;
			A_SetInventory("MaulotaurChargeDefense",0);
			bNoPain = false;
			bNoBlood = false;
			SetState (SeeState);
		}
	}

	void A_MinotaurAtk2(string missiletype = "MinotaurFX1", int meleedamage = 5, int friendlymeleedamage = 3)
	{
		bool friendly = bSummonedMonster;

		int actualmeleedmg = meleedamage;
		if (friendly == 1) actualmeleedmg = friendlymeleedamage;
		string actualmissile = missiletype;
		
		if (target == null)
		{
			return;
		}
		A_StartSound("minotaur/attack2", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = actualmeleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		double z = pos.z + 40;
		Class<Actor> fx = actualmissile;
		Actor mo = SpawnMissileZ (z, target, fx);
		if (mo != null)
		{
			//S_Sound (mo, CHAN_WEAPON, "minotaur/attack2", 1, ATTN_NORM);
			double vz = mo.Vel.Z;
			double ang = mo.angle;
			SpawnMissileAngleZ (z, fx, ang-(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang-(45./16), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./16), vz);
		}
	}

	void A_MinotaurAtk3(int atkdamage = 4, int squishamount = -16, string missiletype = "MinotaurFX2New")
	{
		string attacktype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/attack3", CHAN_VOICE);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
		else
		{
			if (Floorclip > 0 && compat_minotaur)
			{
				// only play the sound. 
				A_StartSound("minotaur/fx2hit", CHAN_WEAPON);
			}
			else
			{
				Actor mo = SpawnMissile (target, attacktype);
				if (mo != null)
				{
					mo.A_StartSound("minotaur/attack1", CHAN_WEAPON);
				}
			}
		}
		if (random[MinotaurAtk3]() < 192 && special2 == 0)
		{
			SetStateLabel ("HammerLoop");
			special2 = 1;
		}
	}

	void A_MinotaurDeath()
	{
		if (Wads.CheckNumForName ("MNTRF1", Wads.ns_sprites) < 0 &&
			Wads.CheckNumForName ("MNTRF0", Wads.ns_sprites) < 0)
			SetStateLabel("FadeOut");
	}

	void A_MinotaurRoam()
	{
		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		let mf = MinotaurFriend(self);
		if (mf)
		{
			if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
			{
				DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
				return;
			}
		}

		if (random[MinotaurRoam]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (random[MinotaurRoam]() < 6)
		{
			//Choose new direction
			movedir = random[MinotaurRoam]() % 8;
			FaceMovementDirection ();
		}
		if (!MonsterMove())
		{
			// Turn
			if (random[MinotaurRoam]() & 1)
				movedir = (movedir + 1) % 8;
			else
				movedir = (movedir + 7) % 8;
			FaceMovementDirection ();
		}
	}

	void A_MinotaurLook()
	{
		if (!(self is "MinotaurFriend"))
		{
			A_Look();
			return;
		}

		Actor mo = null;
		PlayerInfo player;
		double dist;
		Actor master = tracer;

		target = null;
		if (deathmatch)					// Quick search for players
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				player = players[i];
				mo = player.mo;
				if (mo == master) continue;
				if (mo.health <= 0) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				target = mo;
				break;
			}
		}

		if (!target)				// Near player monster search
		{
			if (master && (master.health > 0) && (master.player))
				mo = master.RoughMonsterSearch(20);
			else
				mo = RoughMonsterSearch(20);
			target = mo;
		}

		if (!target)				// Normal monster search
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");

			while ((mo = Actor(it.Next())) != null)
			{
				if (!mo.bIsMonster) continue;
				if (mo.health <= 0) continue;
				if (!mo.bShootable) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				if (mo == master || mo == self) continue;
				if (mo.bSummonedMonster && mo.tracer == master) continue;
				target = mo;
				break;			// Found actor to attack
			}
		}

		if (target)
		{
			SetState (SeeState, true);
		}
		else
		{
			SetStateLabel ("Roam", true);
		}
	}

	void A_MinotaurChase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0, int value6 = 0)
	{
		let mf = MinotaurFriend(self);
		if (!mf)
		{
			A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5,value6);
			return;
		}

		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
		{
			DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
			return;
		}

		if (random[MinotaurChase]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (!target || (target.health <= 0) || !target.bShootable)
		{
			// look for a new target
			SetIdle();
			return;
		}

		FaceMovementDirection ();
		reactiontime = 0;

		// Melee attack
		if (MeleeState && CheckMeleeRange ())
		{
			if (AttackSound)
			{
				A_StartSound(AttackSound, CHAN_WEAPON);
			}
			SetState (MeleeState);
			return;
		}

		// Missile attack
		if (MissileState && CheckMissileRange())
		{
			SetState (MissileState);
			return;
		}

		// chase towards target
		if (!MonsterMove ())
		{
			NewChaseDir ();
			FaceMovementDirection ();
		}

		// Active sound
		if (random[MinotaurChase]() < 6)
		{
			PlayActiveSound ();
		}
	}
}
class MaulotaurNew : MaulotaurBase // replaces Minotaur
{
	default
	{
		Tag "Maulotaur";
		Health 3000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOTARGET;
		+BOSSDEATH;
		+AVOIDMELEE;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "PhoenixRodAmmo", 168, 2;
		DropItem "PhoenixRodHefty", 17, 10;
		DropItem "PhoenixRodAmmo", 84, 2;
		DropItem "PhoenixRodHefty", 8, 10;
		DropItem "PhoenixRodAmmo", 42, 2;
		DropItem "PhoenixRodHefty", 4, 10;
		DropItem "PhoenixRodAmmo", 21, 2;
		DropItem "PhoenixRodHefty", 2, 10;
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
			MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR ABCD 5 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			#### # 0 A_TimeFreezeCheckMelee();
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(22.5,true,self)));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MNTR F 6 A_MinotaurDeath();
			MNTR G 5;
			MNTR H 6 A_Scream();
			MNTR I 5;
			MNTR J 6;
			MNTR K 5;
			MNTR L 6;
			MNTR M 5 A_NoBlocking();
			MNTR N 6;
			MNTR O 5;
			MNTR P 6;
			MNTR Q 5;
			MNTR R 6;
			MNTR S 5;
			MNTR T -1 A_BossDeath();
			Stop;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			MNTR E 5 A_GenericFreezeDeath();
			MNTR E 1 A_FreezeDeathChunks();
			wait;
		Raise:
			MNTR S 5;
			MNTR R 6;
			MNTR Q 5;
			MNTR P 6;
			MNTR O 5;
			MNTR N 6;
			MNTR M 5;
			MNTR L 6;
			MNTR K 5;
			MNTR J 6;
			MNTR I 5;
			MNTR H 6;
			MNTR G 5;
			MNTR F 6;
			goto See;
	}
}
class MinotaurFX1New : KCEffectProjectile // replaces MinotaurFX1 
{
	default
	{
		Tag "'taur Fire";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 26;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX12 AAABBB 2 Bright;
			Loop;
		Death:
			FX12 CDEFGH 5 Bright;
			Stop;
	}
}
class MinotaurFX2New : MinotaurFX1New // replaces MinotaurFX2 
{
	default
	{
		Tag "'taur Firesnake";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 5;
		Height 12;
		Speed 14;
		FastSpeed 20;
		+FLOORHUGGER;
		ExplosionDamage 24;
		DeathSound "minotaur/fx2hit";
	}

	States
	{
		Spawn:
			FX13 A 2 Bright 
			{
				A_MntrFloorFire("MinotaurFX3New");
			}
			Loop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(24,64);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class MinotaurFX3New : MinotaurFX2New // replaces MinotaurFX3 
{
	default
	{
		Tag "'taur Firesnake";
		DamageType "Fire";
		Radius 8;
		Height 16;
		Speed 0;
		DeathSound "minotaur/fx3hit";
		ExplosionDamage 128;
	}
	
	States
	{
		Spawn:
			FX13 DDCC 2 Bright;
			FX13 BB 2 Bright;
			FX13 B 1 Bright;
			FX13 CC 2 Bright;
			FX13 C 1 Bright;
			FX13 DD 2 Bright;
			FX13 D 1 Bright;
			FX13 EE 2 Bright;
			FX13 E 1 Bright;
			FX13 FFGGHH 2 Bright;
			Stop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(128,128);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class SnakeNew : KCCreature // replaces Snake
{
	double user_varience;
	default
	{
		Tag "Ophidian";
		Health 280;
		Radius 22;
		Height 70;
		Speed 10;
		Painchance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 42;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 60;
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Obituary "$OB_SNAKE";
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodAmmo", 84;
		DropItem "PhoenixRodHefty", 8;
		DropItem "PhoenixRodHefty", 8;
		Species "Ophidian";
	}
	
	States
	{
		Spawn:
			SNKE A 0 NoDelay;
			SNKE AB 10 A_Look();
			goto Spawn+1;
		See:
			SNKE A 0;
			SNKE ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			SNKE FF 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE FFF 4
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjANew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SpawnProjectile("SnakeProjANew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			SNKE FFF 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SNKE F 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }

				if (A_JumpIfCloser(256,null)) { user_varience = 1.0; }
				else if (A_JumpIfCloser(512,null)) { user_varience = 2.0; }
				else if (A_JumpIfCloser(1024,null)) { user_varience = 3.0; }
				else if (A_JumpIfCloser(2048,null)) { user_varience = 4.0; }
				else { user_varience = 5.0; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				A_SpawnProjectile("SnakeProjBNew", 32, 0, 0, CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("SnakeProjBNew", 32, 0, frandom(user_varience,-user_varience), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(user_varience,-user_varience)); }
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SNKE E 3;
			SNKE E 3 A_KCPain();
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SNKE E 3;
			SNKE E 3 A_KCPain();
			SNKE EE 3;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SNKE E 3;
			SNKE E 3 A_KCPain();
			SNKE EEEE 3;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SNKE G 5;
			SNKE H 5 A_Scream();
			SNKE IJKL 5;
			SNKE M 5 A_NoBlocking();
			SNKE NO 5;
			SNKE P -1;
			Stop;
		Ice:
			SNKE E 5 A_GenericFreezeDeath();
			SNKE E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			SNKE P 5;
			SNKE ONMLKJIHG 5;
			goto See;
	}
}
class SnakeProjANew : KCProjectile // replaces SnakeProjA 
{
	default
	{
		Tag "Lil' Iceball";
		DamageFunction (1 * random(1,8));
		DamageType "Ice";
		Radius 12;
		Height 8;
		Speed 14;
		FastSpeed 20;
		Projectile;
		-NOBLOCKMAP;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+WINDTHRUST;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "snake/attack";
		DeathSound "misc/magicsmall";
	}
	
	States
	{
		Spawn:
			SNFX AABBCCDD 2 Bright;
			Loop;
		Death:
			SNFX EF 5 Bright;
			SNFX G 4 Bright;
			SNFX HI 3 Bright;
			Stop;
	}
}
class SnakeProjBNew : SnakeProjANew // replaces SnakeProjB 
{
	default
	{
		Tag "Lil' Fireball";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		DeathSound "misc/magichit";
		+NOBLOCKMAP;
		-WINDTHRUST;
	}
	
	States
	{
		Spawn:
			SNFX JJJKKK 2 Bright;
			Loop;
		Death:
			SNFX LM 5 Bright;
			SNFX N 4 Bright;
			SNFX O 3 Bright;
			Stop;
	}
}
class HellGuard : KCCreature
{
	default
	{
		//$Category Monsters
		Tag "Abyssal Guard";
		Health 420; // 300
		Radius 24;
		Height 64;
		Speed 12; // 8
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Mass 750; // 500
		MONSTER;
		+FLOORCLIP;
		SeeSound "hellguard/sight";
		PainSound "hellguard/pain";
		DeathSound "hellguard/death";
		ActiveSound "hellguard/idle";
		Obituary "%o was fried to cinders by an abyssal guard.";
		MeleeDamage 12; // 8
		Species "Ophidian";
		+DONTHARMSPECIES;
		DropItem "PhoenixRodAmmo", 132, 5;
		DropItem "PhoenixRodHefty", 13, 25;
		DropItem "PhoenixRodAmmo", 44, 5;
		DropItem "PhoenixRodHefty", 4, 25;
		DropItem "PhoenixRodAmmo", 15, 5;
		DropItem "PhoenixRodHefty", 2, 25;
	}
	
	void A_HGShot()
	{
		if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0));
		if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
		if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SpawnProjectile("HellGuardBall", 28, -8, (frandom(-4.0,4.0)*2.0), CMF_OFFSETPITCH|CMF_BADPITCH|CMF_CHECKTARGETDEAD, frandom(-3.0,3.0)); }
	}
	
	States
	{
		Spawn:
			HLGD A 0 NoDelay;
			HLGD AB 10 A_Look();
			goto Spawn+1;
		See:
			TNT1 A 0;
			HLGD AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HLGD E 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_FaceTarget(); } else { A_SetTics(0); }
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) 
				{
					A_SetTics(2); 
					A_HGShot();
				}
				else 
				{
					A_SetTics(0); 
				}
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			HLGD E 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			HLGD F 4 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }

				A_HGShot();
			}
			goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HLGD G 2;
			HLGD G 2 A_KCPain();
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			HLGD G 2;
			HLGD G 2 A_KCPain();
			HLGD GG 2;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			HLGD G 2;
			HLGD G 2 A_KCPain();
			HLGD GGGG 2;
			goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HLGD H 6;
			HLGD I 6 A_Scream();
			HLGD J 6;
			HLGD K 6 A_Fall();
			HLGD L 6;
			HLGD M 6;
			HLGD N -1;
			Stop;
		Ice:
			HLGD G 5 A_GenericFreezeDeath();
			HLGD G 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HLGD O 8;
			HLGD NMLKJI 8;
			goto See;
	}
}
class HellGuardBall : KCProjectile
{
	default
	{
		Tag "Abyssal Sphere";
		DamageFunction (6 * random(1,8));
		Radius 13;
		Height 8;
		Speed 12;
		PROJECTILE;
		RenderStyle "Add";
		ALPHA 0.67;
		SeeSound "hellguard/shot";
		DeathSound "hellguard/shothit";
		Decal "PlasmaScorchLower";
	}
	
	States
	{
		Spawn:
			HGFB A 0 Bright NoDelay 
			{
				A_ScaleVelocity(frandom(0.875,1.125));
			}
		Idle:
			HGFB ABCD 2 Bright;
			Loop;
		Death:
			HGFB EFGH 4 Bright;
			Stop;
	}
}
class Serpathor : KCCreature
{
	default
	{
		//$Category Monsters
		Tag "Serpathor";
		Health 650;
		Radius 20;
		Height 64;
		ProjectilePassHeight 92;
		Speed 12; // 10
		PainChance 48;
		Painchance "Fist", 72; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 120; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Fire", 12;
		DamageFactor "Fire", 0.25;
		Mass 900; // 500
		Reactiontime 8;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		MissileChanceMult 0.5; //+MISSILEMORE;
		AttackSound "snake/attack";
		SeeSound "snake/sight";
		PainSound "snake/pain";
		DeathSound "snake/death";
		ActiveSound "snake/active";
		Species "Ophidian";
		+DONTHARMSPECIES;
		Obituary "%o was stoned by a Serpathor.";
		DropItem "PhoenixRodAmmo", 84, 5;
		DropItem "PhoenixRod", 28, 1;
	}
	
	States
	{
		Spawn:
			SBTC A 0 NoDelay;
			SBTC AB 10 A_Look();
			goto Spawn+1;
		See:
			SBTC AABBCCDD 2 
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(1); } 

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
				else
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) 
				{ 
					if (random(1,8) == 1) { user_shotsfiredmax = 3; } else { user_shotsfiredmax = 2; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 2; } else { user_shotsfiredmax = 1; }
				}

				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
					user_fastchasetimer = 0; 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SBTC E 0 A_DynamicMusic();
			SBTC E 0 A_Jump(128,"MedusaBlast");
			SBTC E 0 A_StartSound("snake/sight", CHAN_VOICE);
			SBTC EE 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
		MissileFire:
			SBTC E 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				
				A_SpawnProjectile("SerpathorPhoenixFX1", 32, 0, 0, CMF_CHECKTARGETDEAD);
			}
			SBTC EE 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			SBTC E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,8) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			Loop; //goto See;
		MedusaBlast:
			SBTC AF 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			SBTC G 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_StartSound("weapons/blastershoot");
				A_SpawnProjectile("MedusaBeam", 64, 8);
				A_SpawnProjectile("MedusaBeam", 64, -8);
			}
			SBTC F 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto Missile+2;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,75);
			goto See;
		Pain.Fire:
			#### # 0 A_TimeFreezeCheckPain();
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,150);
			SBTC HH 3;
			goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SBTC H 3;
			SBTC H 3 A_KCPain(1,random(18,22),8,0,0,225);
			SBTC HHHH 3;
			goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SBTC I 5 A_Scream();
			SBTC JKLM 5;
			SBTC N 5 A_NoBlocking();
			SBTC OPQR 5;
			SBTC R -1;
			Stop;

		Ice:
			SBTC H 5 A_GenericFreezeDeath();
			SBTC H 1 A_FreezeDeathChunks();
			Wait;

		Raise:
			SBTC RQPONMLKJI 5;
			goto See;
	}
}
class PhoenixFX1Base : KCProjectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		DamageType "Fire";
		Projectile;
		+THRUGHOST
		+SPECIALFIREDAMAGE
		SeeSound "weapons/phoenixshoot";
		DeathSound "weapons/phoenixhit";
		Obituary "$OB_MPPHOENIXROD";
	}

	States
	{
		Spawn:
			FX04 A 4 BRIGHT A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 6 BRIGHT A_Explode();
			FX08 BC 5 BRIGHT;
			FX08 DEFGH 4 BRIGHT;
			Stop;
	}
	
	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilUnmountedNew s2; 
		s2 = DSparilUnmountedNew(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				RandCall = 96;

				if (random[HornRodFX2]() <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}

	//----------------------------------------------------------------------------
	//
	// PROC A_PhoenixPuff
	//
	//----------------------------------------------------------------------------

	void A_PhoenixPuff(string missiletype = "PhoenixPuff", double anglediff = 90.0, double puffspeed = 1.3)
	{
		//[RH] Heretic never sets the target for seeking
		//P_SeekerMissile (self, 5, 10);
		Actor puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle + anglediff, puffspeed);
		}

		puff = Spawn(missiletype, Pos, ALLOW_REPLACE);
		if (puff != null)
		{
			puff.Vel.XY = AngleToVector(Angle - anglediff, puffspeed);
		}
	}
}
class SerpathorPhoenixFX1 : PhoenixFX1Base
{
	default
	{
		Tag "Phoenix Shot";
		DamageFunction (10 * random(1,8)); // 5
		Speed 20; // 18
	}
	
	States
	{
		Idle:
			FX04 A 4 Bright A_PhoenixPuff();
			Loop;
		Death:
			FX08 A 3 Bright A_Explode((64+random(-12,12)),128,0);
			FX08 BC 5 Bright;
			FX08 DEFGH 4 Bright;
			Stop;
	}
}
class Medusabeam : KCEffectFastProjectile
{
	default
	{
		Tag "Serpathor Eye Beam";
		Speed 125; // 100
		Radius 4;
		Height 4;
		DamageFunction (1*random(1,8));
		MissileType "MBSpark";
		Scale 0.25;
		Decal "CrossbowScorch2";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						user_random = random(1,5);
						if (user_random <= 1) { A_InflictSlow(random(140,280),401); }
						if (user_random == 2) { A_InflictSlow(random(210,350),401); }
						if (user_random == 3) { A_InflictSlow(random(210,350),401); }
						if (user_random == 4) { A_InflictSlow(random(210,350),401); }
						if (user_random >= 5) { A_InflictSlow(random(280,420),401); }
					}
				}
			}
		Death2:
			FX16 GHIJKL 2 bright;
			Stop;
	}
}
class DSparilBase : KCUniqueBoss
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (kc_monsterlevelenabledflags) extrasteps = (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(8,true,self));
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New")
	{
		string projtype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (kcdebug_showactormoveinfo) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (kc_monsterlevelenabledflags) extrasteps = (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(3,true,self));
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(90,true,self));
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(90,true,self));
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype2 = "Sorcerer2FX2New")
	{
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}
}
class DSparilMountedNew : DSparilBase // replaces Sorcerer1
{
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Health 6000; //24000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Painchance 56;
		Painchance "Fist", 84; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 140; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		meleerange 82;
		Monster;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+DONTGIB;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparilserpent/sight";
		AttackSound "dsparilserpent/attack";
		PainSound "dsparilserpent/pain";
		DeathSound "dsparilserpent/death";
		ActiveSound "dsparilserpent/active";
		Obituary "$OB_DSPARIL1";
		HitObituary "$OB_DSPARIL1HIT";
	}
	
	States
	{
		Spawn:
			SRCR A 0 NoDelay;
			SRCR AB 10 A_Look();
			goto Spawn+1;
		See:
			SRCR A 0;
			SRCR ABCD 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				A_Sor1Chase();
			}
			Loop;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_Srcr1Attack(8 * random(1,8), "SorcererFX1New");
			}
			Goto See;
		Missile2:
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_Srcr1Attack(8*random(1,8), "SorcererFX1New");
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SRCR Q 6 A_Sor1Pain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SRCR Q 6 A_Sor1Pain();
			SRCR Q 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SRCR Q 6 A_Sor1Pain();
			SRCR QQ 6;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SRCR E 7;
			SRCR F 7 A_Scream();
			SRCR G 7;
			SRCR HIJK 6;
			SRCR L 25 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 20 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 12;
			SRCR P -1 A_SorcererRise();
			Stop;
		Ice:
			goto Death;
	}
}
class SorcererFX1New : KCProjectile // replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}
class DSparilUnmountedNew : DSparilBase // replaces Sorcerer2
{
	int user_chaseteleportchance;
	int user_chaseteleportchance2;
	int lulwat;
	int lultimer1, lultimer1max;
	default
	{
		Tag "\c[gold]D'Sparil";
		Health 14000; // 56000;
		Radius 16;
		Height 70;
		Mass 300;
		Speed 14;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		MeleeRange 92;
		Monster;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+FULLVOLACTIVE;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparil/sight";
		AttackSound "dsparil/attack";
		PainSound "dsparil/pain";
		ActiveSound "dsparil/active";
		Obituary "$OB_DSPARIL2";
		HitObituary "$OB_DSPARIL2HIT";
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	States
	{
		Spawn:
			SOR2 A 0 NoDelay;
			SOR2 MN 10 A_Look();
			goto Spawn+1;
		See:
			SOR2 A 0;
			SOR2 MNOP 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }

				user_chaseteleportchance = 512;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(240,2,true,self)) { user_chaseteleportchance = 256; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(210,2,true,self)) { user_chaseteleportchance = 288; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { user_chaseteleportchance = 320; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { user_chaseteleportchance = 352; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { user_chaseteleportchance = 384; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_chaseteleportchance = 416; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_chaseteleportchance = 448; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_chaseteleportchance = 480; }
				
				user_chaseteleportchance2 = 1;
				if (health <= user_HPCritRange) { user_chaseteleportchance2 = 8; }
				else if (health <= user_HPLowRange) { user_chaseteleportchance2 = 4; }
				else if (health <= (user_MaxHP/2)) { user_chaseteleportchance2 = 2; }
				else { user_chaseteleportchance2 = 1; }
				if (random(1,user_chaseteleportchance) <= user_chaseteleportchance2)
				{
					DSparilTeleport();
				}
				else
				{
					A_Sor2Chase(); 
				}
			}
			Loop;
		Rise:
			SOR2 A 0;
			SOR2 A 0;
			SOR2 AB 4;
			SOR2 C 4 A_StartSound("dsparil/rise", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SOR2 DEF 4;
			SOR2 G 12 A_StartSound("dsparil/sight", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 Q 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 QQ 3;
			Goto See;
		Missile:
			#### # 0 A_TimeFreezeCheckMissile();
			SOR2 R 0 A_DynamicMusic();
			SOR2 R 9 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(8); }
				A_Srcr2Decide();
			}
			SOR2 S 9 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(8); }
				A_FaceTarget();
			}
			SOR2 T 20 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(70,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(10,2,true,self)) { A_SetTics(19); }
				A_Srcr2Attack(20*random(1,8),"Sorcerer2FX1New","Sorcerer2FX2New");
			}
			Goto See;
		Teleport:
			TNT1 A 0; // makes sure D'Sparil is as stealth as possible when proceeding to teleport if flagged as stealth
			SOR2 LKJIHG 6;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SDTH A 8 A_Sor2DthInit();
			SDTH B 8;
			SDTH C 8 A_StartSound("dsparil/scream", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
		DeathLoop:
			SDTH DE 7;
			SDTH F 7 A_Sor2DthLoop();
			SDTH G 6 A_StartSound("dsparil/explode", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH H 6;
			SDTH I 18;
			SDTH J 6 A_NoBlocking();
			SDTH K 6 A_StartSound("dsparil/bones", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH LMN 6;
			SDTH O -1 A_BossDeath();
			Stop;
		Ice:
			goto Death;
	}
}
class Sorcerer2FX1New : KCProjectile // replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2New : KCProjectile // replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
