// Heretic
class PodNew : KCCreature { } // Filler for later implementation
class ChickenNew : KCCreature { } // Filler for later implementation
class HereticImpNew : KCCreature { } // Filler for later implementation
class HereticImpLeaderNew : KCCreature { } // Filler for later implementation
class PlagueImp : KCCreature { } // Filler for later implementation
class WatcherImp : KCCreature { } // Filler for later implementation
class MummyNew : KCCreature { } // Filler for later implementation
class MummyGhostNew : KCCreature { } // Filler for later implementation
class MummyLeaderNew : KCCreature { } // Filler for later implementation
class MummyLeaderGhostNew : KCCreature { } // Filler for later implementation
class IceGolem : KCCreature { } // Filler for later implementation
class IceGolemGhost : KCCreature { } // Filler for later implementation
class FrostGolem : KCCreature { } // Filler for later implementation
class FrostGolemGhost : KCCreature { } // Filler for later implementation
class KnightNew : KCCreature { } // Filler for later implementation
class KnightGhostNew : KCCreature { } // Filler for later implementation
class DeathKnight : KCCreature { } // Filler for later implementation
class DeathKnightGhost : KCCreature { } // Filler for later implementation
class WizardNew : KCCreature { } // Filler for later implementation
class GreaterDisciple : KCCreature { } // Filler for later implementation
class HereticApprenticeNew : KCCreature { } // Filler for later implementation
class Banshee : KCCreature { } // Filler for later implementation
class IronlichNew : KCCreature { } // Filler for later implementation
class IceLich : KCCreature { } // Filler for later implementation
class GoldLich : KCCreature { } // Filler for later implementation
class FakeGoldLich : KCCreature { } // Filler for later implementation
class BloodLich : KCCreature { } // Filler for later implementation
class ClinkNew : KCCreature { } // Filler for later implementation
class DarkClink : KCCreature { } // Filler for later implementation
class BeastNew : KCCreature { } // Filler for later implementation
class ShadowBeast : KCCreature { } // Filler for later implementation
class MaulotaurBase : KCCreature
{
 const MAULATORTICS = 25 * TICRATE;
 const MNTR_CHARGE_SPEED =13.;
 const MINOTAUR_LOOK_DIST = 16*54.;
	
	void MinotaurSlam (Actor target)
	{
		double ang = AngleTo(target);
		double thrust = 16 + random[MinotaurSlam]() / 64.;
		target.VelFromAngle(ang, thrust);
		int damage = random[MinotaurSlam](1, 8) * (bSummonedMonster? 4 : 6);
		int newdam = target.DamageMobj (null, null, damage, 'Melee');
		target.TraceBleedAngle (newdam > 0 ? newdam : damage, ang, 0.);
		if (target.player)
		{
			target.reactiontime = random[MinotaurSlam](14, 21);
		}
	}

	override void Tick ()
	{
		Super.Tick ();
		
		// The unfriendly Minotaur (Heretic's) is invulnerable while charging
		if (!bSummonedMonster)
		{
			bInvulnerable = bSkullFly;
		}
	}

	override bool Slam (Actor thing)
	{
		// Slamming minotaurs shouldn't move non-creatures
		if (!thing.bIsMonster && !thing.player)
		{
			return false;
		}
		return Super.Slam (thing);
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		damage = Super.DoSpecialDamage (target, damage, damagetype);
		if (damage != -1 && bSkullFly)
		{
			// Slam only when in charge mode
			MinotaurSlam (target);
			return -1;
		}
		return damage;
	}

	void A_MinotaurAtk1(int atkdamage = 4, int squishamount = -16)
	{
		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/melee", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
	}

	void A_MinotaurDecide()
	{
		bool friendly = bSummonedMonster;

		if (!target)
		{
			return;
		}
		if (!friendly)
		{
			A_StartSound("minotaur/sight", CHAN_WEAPON);
		}
		double dist = Distance2D(target);
		if (target.pos.z + target.height > pos.z
			&& target.pos.z + target.height < pos.z + height
			&& dist < (friendly ? 16*64. : 8*64.)
			&& dist > 1*64.
			&& random[MinotaurDecide]() < 150)
		{
			// Charge attack
			// Don't call the state function right away
			SetStateLabel("Charge", true);
			bSkullFly = true;
			if (!friendly)
			{
				// Heretic's Minotaur is invulnerable during charge attack
				// bInvulnerable = true;
				A_SetInventory("MaulotaurChargeDefense",1);
				bNoPain = true;
				bNoBlood = true;
			}
			A_FaceTarget ();
			VelFromAngle(MNTR_CHARGE_SPEED);
			special1 = TICRATE/2; // Charge duration
		}
		else if (target.pos.z == target.floorz
				&& dist < 9*64.
				&& random[MinotaurDecide]() < (friendly ? 100 : 220))
		{
			// Floor fire attack
			SetStateLabel("Hammer");
			special2 = 0;
		}
		else
		{
			// Swing attack
			A_FaceTarget ();
			// Don't need to call P_SetMobjState because the current state
			// falls through to the swing attack
		}
	}
	
	void A_MinotaurCharge()
	{
		if (target == null)
		{
			return;
		}
		if (special1 > 0)
		{
			Class<Actor> type;

			if (gameinfo.gametype == GAME_Heretic)
			{
				type = "PhoenixPuff";
			}
			else
			{
				type = "PunchPuff";
			}
			Actor puff = Spawn (type, Pos, ALLOW_REPLACE);
			if (puff != null) puff.Vel.Z = 2;
			special1--;
		}
		else
		{
			bSkullFly = false;
			bInvulnerable = false;
			A_SetInventory("MaulotaurChargeDefense",0);
			bNoPain = false;
			bNoBlood = false;
			SetState (SeeState);
		}
	}

	void A_MinotaurAtk2(string missiletype = "MinotaurFX1", int meleedamage = 5, int friendlymeleedamage = 3)
	{
		bool friendly = bSummonedMonster;

		int actualmeleedmg = meleedamage;
		if (friendly == 1) actualmeleedmg = friendlymeleedamage;
		string actualmissile = missiletype;
		
		if (target == null)
		{
			return;
		}
		A_StartSound("minotaur/attack2", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = actualmeleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		double z = pos.z + 40;
		Class<Actor> fx = actualmissile;
		Actor mo = SpawnMissileZ (z, target, fx);
		if (mo != null)
		{
			//S_Sound (mo, CHAN_WEAPON, "minotaur/attack2", 1, ATTN_NORM);
			double vz = mo.Vel.Z;
			double ang = mo.angle;
			SpawnMissileAngleZ (z, fx, ang-(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang-(45./16), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./16), vz);
		}
	}

	void A_MinotaurAtk3(int atkdamage = 4, int squishamount = -16, string missiletype = "MinotaurFX2New")
	{
		string attacktype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/attack3", CHAN_VOICE);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
		else
		{
			if (Floorclip > 0 && compat_minotaur)
			{
				// only play the sound. 
				A_StartSound("minotaur/fx2hit", CHAN_WEAPON);
			}
			else
			{
				Actor mo = SpawnMissile (target, attacktype);
				if (mo != null)
				{
					mo.A_StartSound("minotaur/attack1", CHAN_WEAPON);
				}
			}
		}
		if (random[MinotaurAtk3]() < 192 && special2 == 0)
		{
			SetStateLabel ("HammerLoop");
			special2 = 1;
		}
	}

	void A_MinotaurDeath()
	{
		if (Wads.CheckNumForName ("MNTRF1", Wads.ns_sprites) < 0 &&
			Wads.CheckNumForName ("MNTRF0", Wads.ns_sprites) < 0)
			SetStateLabel("FadeOut");
	}

	void A_MinotaurRoam()
	{
		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		let mf = MinotaurFriend(self);
		if (mf)
		{
			if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
			{
				DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
				return;
			}
		}

		if (random[MinotaurRoam]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (random[MinotaurRoam]() < 6)
		{
			//Choose new direction
			movedir = random[MinotaurRoam]() % 8;
			FaceMovementDirection ();
		}
		if (!MonsterMove())
		{
			// Turn
			if (random[MinotaurRoam]() & 1)
				movedir = (movedir + 1) % 8;
			else
				movedir = (movedir + 7) % 8;
			FaceMovementDirection ();
		}
	}

	void A_MinotaurLook()
	{
		if (!(self is "MinotaurFriend"))
		{
			A_Look();
			return;
		}

		Actor mo = null;
		PlayerInfo player;
		double dist;
		Actor master = tracer;

		target = null;
		if (deathmatch)					// Quick search for players
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				player = players[i];
				mo = player.mo;
				if (mo == master) continue;
				if (mo.health <= 0) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				target = mo;
				break;
			}
		}

		if (!target)				// Near player monster search
		{
			if (master && (master.health > 0) && (master.player))
				mo = master.RoughMonsterSearch(20);
			else
				mo = RoughMonsterSearch(20);
			target = mo;
		}

		if (!target)				// Normal monster search
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");

			while ((mo = Actor(it.Next())) != null)
			{
				if (!mo.bIsMonster) continue;
				if (mo.health <= 0) continue;
				if (!mo.bShootable) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				if (mo == master || mo == self) continue;
				if (mo.bSummonedMonster && mo.tracer == master) continue;
				target = mo;
				break;			// Found actor to attack
			}
		}

		if (target)
		{
			SetState (SeeState, true);
		}
		else
		{
			SetStateLabel ("Roam", true);
		}
	}

	void A_MinotaurChase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0, int value6 = 0)
	{
		let mf = MinotaurFriend(self);
		if (!mf)
		{
			A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5,value6);
			return;
		}

		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
		{
			DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
			return;
		}

		if (random[MinotaurChase]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (!target || (target.health <= 0) || !target.bShootable)
		{
			// look for a new target
			SetIdle();
			return;
		}

		FaceMovementDirection ();
		reactiontime = 0;

		// Melee attack
		if (MeleeState && CheckMeleeRange ())
		{
			if (AttackSound)
			{
				A_StartSound(AttackSound, CHAN_WEAPON);
			}
			SetState (MeleeState);
			return;
		}

		// Missile attack
		if (MissileState && CheckMissileRange())
		{
			SetState (MissileState);
			return;
		}

		// chase towards target
		if (!MonsterMove ())
		{
			NewChaseDir ();
			FaceMovementDirection ();
		}

		// Active sound
		if (random[MinotaurChase]() < 6)
		{
			PlayActiveSound ();
		}
	}
}
class MaulotaurNew : MaulotaurBase // replaces Minotaur
{
	default
	{
		Tag "Maulotaur";
		Health 3000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOTARGET;
		+BOSSDEATH;
		+AVOIDMELEE;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "PhoenixRodAmmo", 168, 2;
		DropItem "PhoenixRodHefty", 17, 10;
		DropItem "PhoenixRodAmmo", 84, 2;
		DropItem "PhoenixRodHefty", 8, 10;
		DropItem "PhoenixRodAmmo", 42, 2;
		DropItem "PhoenixRodHefty", 4, 10;
		DropItem "PhoenixRodAmmo", 21, 2;
		DropItem "PhoenixRodHefty", 2, 10;
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
			MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR ABCD 5 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / 22.5));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			MNTR F 6 A_MinotaurDeath();
			MNTR G 5;
			MNTR H 6 A_Scream();
			MNTR I 5;
			MNTR J 6;
			MNTR K 5;
			MNTR L 6;
			MNTR M 5 A_NoBlocking();
			MNTR N 6;
			MNTR O 5;
			MNTR P 6;
			MNTR Q 5;
			MNTR R 6;
			MNTR S 5;
			MNTR T -1 A_BossDeath();
			Stop;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			MNTR E 5 A_GenericFreezeDeath();
			MNTR E 1 A_FreezeDeathChunks();
			wait;
		Raise:
			MNTR S 5;
			MNTR R 6;
			MNTR Q 5;
			MNTR P 6;
			MNTR O 5;
			MNTR N 6;
			MNTR M 5;
			MNTR L 6;
			MNTR K 5;
			MNTR J 6;
			MNTR I 5;
			MNTR H 6;
			MNTR G 5;
			MNTR F 6;
			goto See;
	}
}
class MinotaurFX1New : KCEffectProjectile replaces MinotaurFX1 
{
	default
	{
		Tag "'taur Fire";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 26;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX12 AAABBB 2 Bright;
			Loop;
		Death:
			FX12 CDEFGH 5 Bright;
			Stop;
	}
}
class MinotaurFX2New : MinotaurFX1New replaces MinotaurFX2 
{
	default
	{
		Tag "'taur Firesnake";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 5;
		Height 12;
		Speed 14;
		FastSpeed 20;
		+FLOORHUGGER;
		ExplosionDamage 24;
		DeathSound "minotaur/fx2hit";
	}

	States
	{
		Spawn:
			FX13 A 2 Bright 
			{
				A_MntrFloorFire("MinotaurFX3New");
			}
			Loop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(24,64);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class MinotaurFX3New : MinotaurFX2New replaces MinotaurFX3 
{
	default
	{
		Tag "'taur Firesnake";
		DamageType "Fire";
		Radius 8;
		Height 16;
		Speed 0;
		DeathSound "minotaur/fx3hit";
		ExplosionDamage 128;
	}
	
	States
	{
		Spawn:
			FX13 DDCC 2 Bright;
			FX13 BB 2 Bright;
			FX13 B 1 Bright;
			FX13 CC 2 Bright;
			FX13 C 1 Bright;
			FX13 DD 2 Bright;
			FX13 D 1 Bright;
			FX13 EE 2 Bright;
			FX13 E 1 Bright;
			FX13 FFGGHH 2 Bright;
			Stop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(128,128);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class SnakeNew : KCCreature { } // Filler for later implementation
class HellGuard : KCCreature { } // Filler for later implementation
class Serpathor : KCCreature { } // Filler for later implementation
class DSparilBase : KCUniqueBoss
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 8;
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New")
	{
		string projtype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (dydudebug_showactormoveinfo) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 3;
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (CountInv("MonsterLevel") / 90);
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (CountInv("MonsterLevel") / 90);
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype2 = "Sorcerer2FX2New")
	{
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}
}
class DSparilMountedNew : DSparilBase replaces Sorcerer1
{
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Health 6000; //24000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Painchance 56;
		Painchance "Fist", 84; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 140; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		meleerange 82;
		Monster;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+DONTGIB;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparilserpent/sight";
		AttackSound "dsparilserpent/attack";
		PainSound "dsparilserpent/pain";
		DeathSound "dsparilserpent/death";
		ActiveSound "dsparilserpent/active";
		Obituary "$OB_DSPARIL1";
		HitObituary "$OB_DSPARIL1HIT";
	}
	
	States
	{
		Spawn:
			SRCR A 0 NoDelay;
			SRCR AB 10 A_Look();
			goto Spawn+1;
		See:
			SRCR A 0;
			SRCR ABCD 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				A_Sor1Chase();
			}
			Loop;
		Missile:
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8 * random(1,8), "SorcererFX1New");
			}
			Goto See;
		Missile2:
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8*random(1,8), "SorcererFX1New");
			}
			Goto See;
		Pain:
			SRCR Q 6 A_Sor1Pain();
			Goto See;
		Pain.Fist:
			SRCR Q 6 A_Sor1Pain();
			SRCR Q 6;
			Goto See;
		Pain.Kick:
			SRCR Q 6 A_Sor1Pain();
			SRCR QQ 6;
			Goto See;
		Death:
			SRCR E 7;
			SRCR F 7 A_Scream();
			SRCR G 7;
			SRCR HIJK 6;
			SRCR L 25 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 20 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 12;
			SRCR P -1 A_SorcererRise();
			Stop;
		Ice:
			goto Death;
	}
}
class SorcererFX1New : KCProjectile replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}
class DSparilUnmountedNew : DSparilBase replaces Sorcerer2
{
	int user_chaseteleportchance;
	int user_chaseteleportchance2;
	int lulwat;
	int lultimer1, lultimer1max;
	default
	{
		Tag "\c[gold]D'Sparil";
		Health 14000; // 56000;
		Radius 16;
		Height 70;
		Mass 300;
		Speed 14;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		MeleeRange 92;
		Monster;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+FULLVOLACTIVE;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparil/sight";
		AttackSound "dsparil/attack";
		PainSound "dsparil/pain";
		ActiveSound "dsparil/active";
		Obituary "$OB_DSPARIL2";
		HitObituary "$OB_DSPARIL2HIT";
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	States
	{
		Spawn:
			SOR2 A 0 NoDelay;
			SOR2 MN 10 A_Look();
			goto Spawn+1;
		See:
			SOR2 A 0;
			SOR2 MNOP 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }

				user_chaseteleportchance = 512;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { user_chaseteleportchance = 256; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 210) { user_chaseteleportchance = 288; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { user_chaseteleportchance = 320; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { user_chaseteleportchance = 352; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_chaseteleportchance = 384; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_chaseteleportchance = 416; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_chaseteleportchance = 448; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_chaseteleportchance = 480; }
				
				user_chaseteleportchance2 = 1;
				if (health <= user_HPCritRange) { user_chaseteleportchance2 = 8; }
				else if (health <= user_HPLowRange) { user_chaseteleportchance2 = 4; }
				else if (health <= (user_MaxHP/2)) { user_chaseteleportchance2 = 2; }
				else { user_chaseteleportchance2 = 1; }
				if (random(1,user_chaseteleportchance) <= user_chaseteleportchance2)
				{
					DSparilTeleport();
				}
				else
				{
					A_Sor2Chase(); 
				}
			}
			Loop;
		Rise:
			SOR2 A 0;
			SOR2 A 0;
			SOR2 AB 4;
			SOR2 C 4 A_StartSound("dsparil/rise", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SOR2 DEF 4;
			SOR2 G 12 A_StartSound("dsparil/sight", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			Goto See;
		Pain:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			Goto See;
		Pain.Fist:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 Q 3;
			Goto See;
		Pain.Kick:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 QQ 3;
			Goto See;
		Missile:
			SOR2 R 0 A_DynamicMusic();
			SOR2 R 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_Srcr2Decide();
			}
			SOR2 S 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_FaceTarget();
			}
			SOR2 T 20 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }
				A_Srcr2Attack(20*random(1,8),"Sorcerer2FX1New","Sorcerer2FX2New");
			}
			Goto See;
		Teleport:
			TNT1 A 0; // makes sure D'Sparil is as stealth as possible when proceeding to teleport if flagged as stealth
			SOR2 LKJIHG 6;
			Goto See;
		Death:
			SDTH A 8 A_Sor2DthInit();
			SDTH B 8;
			SDTH C 8 A_StartSound("dsparil/scream", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
		DeathLoop:
			SDTH DE 7;
			SDTH F 7 A_Sor2DthLoop();
			SDTH G 6 A_StartSound("dsparil/explode", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH H 6;
			SDTH I 18;
			SDTH J 6 A_NoBlocking();
			SDTH K 6 A_StartSound("dsparil/bones", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH LMN 6;
			SDTH O -1 A_BossDeath();
			Stop;
		Ice:
			goto Death;
	}
}
class Sorcerer2FX1New : KCProjectile replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2New : KCProjectile replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
