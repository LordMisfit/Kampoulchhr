class PlayerStatItem : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	int ClassCheck;
	int itemtimer;
	int ClassicDoomType;
	int buttons;
	int TrueGameSkill;
	int CanTalkUnderwater;
	int PlayerLevel, TruePlayerLevel;
	
	double timefreeze1duration;
	double timefreeze1cooldown;
	double timefreeze2duration;
	double timefreeze2cooldown;
	double timefreeze3duration;
	double timefreeze3cooldown;
	double timefreeze1durationbase;
	double timefreeze2durationbase;
	double timefreeze3durationbase;
	double timefreeze1durationratio;
	double timefreeze2durationratio;
	double timefreeze3durationratio;
	double timefreeze1cooldownratio;
	double timefreeze2cooldownratio;
	double timefreeze3cooldownratio;

	double timefreezedurationinc1;
	double timefreezedurationinc2;

	int timefreeze1timesused;
	int timefreeze2timesused;
	int timefreeze3timesused;
	
	int timestopstate;
	int timestopactivetics;
	int timestopactivemaxtics;
	int timestopcooldowntics;
	int timestopcooldownmaxtics;
	
	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}
	
	string ReturnKeyBind1(string keybindget)
	{
		string LegendStr = "";
		string UserKeyString;
		Array<String> UserKeys;
		
		UserKeys.Clear();
		UserKeyString = UIKeybinds.getKeyboard(keybindget);
		if (UserKeyString != "")
		{
			UserKeyString.Split(UserKeys,", ");
			if (UserKeys[0] == "Space") UserKeys[0] = "SBar";
			if (UserKeys[0] == "CapsLock") UserKeys[0] = "CapsL";
			LegendStr.AppendFormat("%s", UserKeys[0]);
		}
		else 
		{
			LegendStr.AppendFormat("\c[red]unb\c-");
		}
		return LegendStr;
	}
	
	override void DoEffect()
	{
		let playeractor = KCPlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a non-Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect();
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			// Load in Globalvars [Start]
			let globalvars = KCGlobalVariables.Get();
			if (globalvars)
			{
				// Initalization Stuff
				InitStuff();
				
				// Check if player can breath/talk underwater
				CanTalkUnderwater = 0;
				if (owner.waterlevel < 3) 
				{
					CanTalkUnderwater = 1;
				}
				else
				{
					if (owner.CountInv("PowerIronFeet") || 
							owner.CountInv("PowerMask"))
					{
						CanTalkUnderwater = 2;
					}
					else
					{
						if (random(1,32) <= random(1,4)) CanTalkUnderwater = 1;
					}
				}
				if (kcdebug_airmeter) Console.Printf("CanTalkUnderwater %d", CanTalkUnderwater);

				// Mode Check
				ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
				if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom
				if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
				if (kcdebug_miscitemdebug) Console.Printf("%d", ClassicDoomType);
				buttons = owner.GetPlayerInput(INPUT_BUTTONS);
				TrueGameSkill = skill;
				
				// Time Freeze Trackers
				TimeFreezeStuff();
				
				//*************************************
				//*************************************
				//*************************************
				// End Stuff
				EndStuff();
			}
			super.DoEffect();
		}
	}
	
	void InitStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (ClassCheck <= 1)
		{
			// Defensive [default]
			timefreeze1duration = 10.0;
			timefreeze1durationbase = 10.0;
			timefreeze1cooldown = 45.0;
			timefreeze1cooldownratio = 1.0;
			// Offensive
			timefreeze2duration = 10.0;
			timefreeze2durationbase = 10.0;
			timefreeze2cooldown = 45.0;
			timefreeze2cooldownratio = 1.0;
			// Neutral
			timefreeze3duration = 20.0;
			timefreeze3durationbase = 20.0;
			timefreeze3cooldown = 22.5;
			timefreeze3cooldownratio = 1.0;
			
			timefreezedurationinc1 = 0.05;
			timefreezedurationinc2 = 0.1;
		}
	}
	
	void TimeFreezeStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		int TickTimer;

		// Defensive [default]
		timefreeze1duration = 10.0 + (timefreezedurationinc1 * timefreeze1timesused);
		timefreeze1cooldown = 45.0 * timefreeze1cooldownratio;
		// Offensive
		timefreeze2duration = 10.0 + (timefreezedurationinc1 * timefreeze2timesused);
		timefreeze2cooldown = 45.0 * timefreeze2cooldownratio;
		// Neutral
		timefreeze3duration = 20.0 + (timefreezedurationinc2 * timefreeze3timesused);
		timefreeze3cooldown = 22.5 * timefreeze3cooldownratio;
		
		if (timefreeze1durationbase > 0.00)
		{
			timefreeze1durationratio = (timefreeze1duration * 1.0) / (timefreeze1durationbase * 1.0);
			if (timefreeze1durationratio > 0.00) 
			{
				timefreeze1cooldownratio = 1.0 / (timefreeze1durationratio * 1.0);
			}
			if (kcdebug_timefreezechecks) Console.Printf("timefreeze1durationratio: %.8f, timefreeze1cooldownratio: %.8f", timefreeze1durationratio, timefreeze1cooldownratio);
		}
		if (timestopstate)
		{
			if (timestopactivetics > 0)
			{
				double tickvol = 1.00;
				if (timestopactivemaxtics > 0) tickvol = double(tickvol * (timestopactivetics * 1.0) / (timestopactivemaxtics * 1.0));
				owner.A_SetInventory("KCTimeFreezer",1);
				TickTimer = timestopactivetics % 35;
				if (TickTimer == 0)
				{
					owner.A_StopSound(218); 
					owner.A_StartSound("TimeStopTick",218,CHANF_DEFAULT,(frandom(0.40,0.60) * tickvol),ATTN_NONE); 
				}
				if (timestopactivetics == 65) 
				{
					owner.A_StopSound(217); 
					owner.A_StartSound("TimeFreezeOut4",217,CHANF_DEFAULT,0.875,ATTN_NONE); 
				}
				timestopactivetics--;
				if (kcdebug_timefreezechecks) Console.Printf("tickvol: %.8f", tickvol);
			}
			else
			if (timestopactivetics == 0) 
			{
				timestopstate = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				if (timestopcooldowntics <= 0)
				{
					timestopcooldowntics = int(timefreeze1cooldown * TICRATE);
					timestopcooldownmaxtics = int(timefreeze1cooldown * TICRATE);
					if (timestopcooldowntics == 0) timefreeze1timesused++;
				}
			}
			else
			if (timestopactivetics < 0)
			{
				timestopactivetics = 0;
				timestopstate = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				if (timestopcooldowntics <= 0)
				{
					timestopcooldowntics = int(timefreeze1cooldown * TICRATE);
					timestopcooldownmaxtics = int(timefreeze1cooldown * TICRATE);
					if (timestopcooldowntics == 0) timefreeze1timesused++;
				}
			}
		}
		else
		{
			owner.A_SetInventory("KCTimeFreezer",0);
			if (timestopcooldowntics > 0) timestopcooldowntics--;
			else if (timestopcooldowntics < 0) timestopcooldowntics = 0;
		}
		if (kcdebug_timefreezechecks) Console.Printf("timefreeze1timesused: %d, \c[green]timestopstate: %d, \c[lightblue]timestopactivetics: %d / %d, \c[orange]timestopcooldowntics: %d / %d, \c[gold]timefreeze1duration: %.2f, \c[gold]timefreeze1cooldown: %.2f", timefreeze1timesused, timestopstate, timestopactivetics, timestopactivemaxtics, timestopcooldowntics, timestopcooldownmaxtics, timefreeze1duration, timefreeze1cooldown);
	}
	
	void EndStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		ClassCheck++;
		itemtimer++;
	}
}