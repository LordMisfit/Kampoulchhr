class PlayerStatItem : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	double TimeArmorEnergyTics;
	double TimeArmorEnergyMaxTics;
	int TimeArmorRelicsOwned;
	int TimeArmorRelicsUsedBits;
	string nm, nn, no, np;
	
	int oldhealthratio;
	int NumOfAfasDrops;
	int NumOfLegendMeds, MedCurrLvl, LegMedCap;
	int ClassCheck;
	int itemtimer;
	int ClassicDoomType;
	int buttons;
	int TrueGameSkill;
	int CanTalkUnderwater;
	int PlayerLevel, TruePlayerLevel, ActualLevel;
	int PlayerATK, TruePlayerATK;
	int PlayerDEF, TruePlayerDEF;
	int PlayerSPD, TruePlayerSPD;
	int PlayerLUCK, TruePlayerLUCK, TempLUCK;
	int PrevATK, PrevDEF, PrevSPD, PrevLUCK;
	int HPMaxGain, MassGain;
	int SurvivalRate;
	int CurrentHealth;
	int MaxHealthTrue;
	int MaxHealthTrueRF;
	int HealthLevelAdd;
	int HealthNoRPGAdd;
	double HealthNoRPGAdd2;
	int HealthBonusAdd;
	int MaxHealthLimit;
	int TotalMass, BaseMass, PreBuffMass;
	int MassLevelAdd;
	int MassNoRPGAdd;
	double MassNoRPGAdd2;
	int MassBonusAdd;

	int LevelCap;
	int StaminaLevel;
	int AccuracyLevel;
	int Experience;
	Array<int> LevelExpRequirement;
	int InitEXPTables;
	
	double timefreeze1duration;
	double timefreeze1cooldown;
	double timefreeze2duration;
	double timefreeze2cooldown;
	double timefreeze3duration;
	double timefreeze3cooldown;
	double timefreeze1durationbase;
	double timefreeze2durationbase;
	double timefreeze3durationbase;
	double timefreeze1durationratio;
	double timefreeze2durationratio;
	double timefreeze3durationratio;
	double timefreeze1cooldownratio;
	double timefreeze2cooldownratio;
	double timefreeze3cooldownratio;

	double timefreeze1cooldownratio2;

	double timefreezedurationinc1;
	double timefreezedurationinc2;

	int timefreeze1timesused;
	int timefreeze2timesused;
	int timefreeze3timesused;
	
	int timestopstate;
	int timestoptype;
	int timestopactivetics;
	int timestopactivemaxtics;
	int timestopcooldowntics;
	int timestopcooldownmaxtics;
	
	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}
	
	string ReturnKeyBind1(string keybindget)
	{
		string LegendStr = "";
		string UserKeyString;
		Array<String> UserKeys;
		
		UserKeys.Clear();
		UserKeyString = UIKeybinds.getKeyboard(keybindget);
		if (UserKeyString != "")
		{
			UserKeyString.Split(UserKeys,", ");
			if (UserKeys[0] == "Space") UserKeys[0] = "SBar";
			if (UserKeys[0] == "CapsLock") UserKeys[0] = "CapsL";
			LegendStr.AppendFormat("%s", UserKeys[0]);
		}
		else 
		{
			LegendStr.AppendFormat("\c[red]unb\c-");
		}
		return LegendStr;
	}
	
	override void DoEffect()
	{
		let playeractor = KCPlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a non-Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect();
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			// Load in Globalvars [Start]
			let globalvars = KCGlobalVariables.Get();
			if (globalvars)
			{
				// Initalization Stuff
				InitStuff();
				
				// Check if player can breath/talk underwater
				CanTalkUnderwater = 0;
				if (owner.waterlevel < 3) 
				{
					CanTalkUnderwater = 1;
				}
				else
				{
					if (owner.CountInv("PowerIronFeet") || 
							owner.CountInv("PowerMask"))
					{
						CanTalkUnderwater = 2;
					}
					else
					{
						if (random(1,32) <= random(1,4)) CanTalkUnderwater = 1;
					}
				}
				if (kcdebug_airmeter) Console.Printf("CanTalkUnderwater %d", CanTalkUnderwater);

				// Mode Check
				ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
				if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom
				if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
				if (kcdebug_miscitemdebug) Console.Printf("%d", ClassicDoomType);
				buttons = owner.GetPlayerInput(INPUT_BUTTONS);
				TrueGameSkill = skill;
				
				// Init Level Table
				if (itemtimer <= 2)
				{
					LevelCap = 1000;
					LevelExpRequirement.Resize((LevelCap+1));
					
					// EXP Tables
					if (InitEXPTables == 0)
					{
						double ExpValue;
						int BaseEXPRequirement = 16; // clamp(exex_baseexprequirement, 250, 11200);
						BaseEXPRequirement *= (0.875 + (TrueGameSkill * 0.0625));

						double BaseExtra = 1; // clamp(exex_baseexpextra, 0, 100);
						double BaseAccel1 = 6; // clamp(exex_baseexpaccel1, 0, 100);
						double BaseAccel2 = 0.0384; // clamp(exex_baseexpaccel2, 0.0, 5.0);
						double BaseMulti1 = 48; // clamp(exex_expmulti1, 1, 1024);
						double BaseMulti2 = 50; // clamp(exex_expmulti2, 1, 10000);
						
						double BaseMulti3 = 1.0;
						int baseval;
						int addval;
						double mulval;
						int preval = 0;
						
						double BaseMulti3b = 2.0;
						double BaseMulti4 = 1.0;
						double BaseMulti5 = 0.01;

						// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
						for (int CuLv = 0; CuLv < (LevelCap+1); CuLv++)
						{
							if (CuLv >= 0 && CuLv <= 31) BaseMulti4 = 1.0;
							if (CuLv >= 32 && CuLv <= 56) BaseMulti4 = 1.334;
							if (CuLv >= 57 && CuLv <= 80) BaseMulti4 = 1.667;
							if (CuLv >= 81 && CuLv <= 100) BaseMulti4 = 2;
							if (CuLv >= 101 && CuLv <= 109) BaseMulti4 = 4;
							if (CuLv >= 110 && CuLv <= 118) BaseMulti4 = 6;
							if (CuLv >= 119 && CuLv <= 127) BaseMulti4 = 8;
							if (CuLv >= 128 && CuLv <= 136) BaseMulti4 = 10;
							if (CuLv >= 137 && CuLv <= 145) BaseMulti4 = 12;
							if (CuLv >= 146 && CuLv <= 154) BaseMulti4 = 14;
							if (CuLv >= 155 && CuLv <= 163) BaseMulti4 = 16;
							if (CuLv >= 164 && CuLv <= 172) BaseMulti4 = 18;
							if (CuLv >= 173 && CuLv <= 181) BaseMulti4 = 20;
							if (CuLv >= 182 && CuLv <= 190) BaseMulti4 = 22;
							if (CuLv >= 191 && CuLv <= 199) BaseMulti4 = 24;
							if (CuLv >= 200 && CuLv <= 219) BaseMulti4 = 26;
							if (CuLv >= 220 && CuLv <= 239) BaseMulti4 = 28;
							if (CuLv >= 240 && CuLv <= 259) BaseMulti4 = 30;
							if (CuLv >= 260 && CuLv <= 279) BaseMulti4 = 32;
							if (CuLv >= 280 && CuLv <= 299) BaseMulti4 = 34;
							if (CuLv >= 300 && CuLv <= 319) BaseMulti4 = 36;
							if (CuLv >= 320 && CuLv <= 339) BaseMulti4 = 38;
							if (CuLv >= 340 && CuLv <= 359) BaseMulti4 = 40;
							if (CuLv >= 360 && CuLv <= 379) BaseMulti4 = 42;
							if (CuLv >= 380 && CuLv <= 399) BaseMulti4 = 44;
							if (CuLv >= 400 && CuLv <= 439) BaseMulti4 = 46;
							if (CuLv >= 440 && CuLv <= 479) BaseMulti4 = 50;
							if (CuLv >= 480 && CuLv <= 519) BaseMulti4 = 52;
							if (CuLv >= 520 && CuLv <= 559) BaseMulti4 = 54;
							if (CuLv >= 560 && CuLv <= 599) BaseMulti4 = 56;
							if (CuLv >= 600 && CuLv <= 639) BaseMulti4 = 58;
							if (CuLv >= 640 && CuLv <= 679) BaseMulti4 = 60;
							if (CuLv >= 680 && CuLv <= 719) BaseMulti4 = 62;
							if (CuLv >= 720 && CuLv <= 759) BaseMulti4 = 64;
							if (CuLv >= 760 && CuLv <= 799) BaseMulti4 = 66;
							if (CuLv >= 800 && CuLv <= 849) BaseMulti4 = 68;
							if (CuLv >= 850 && CuLv <= 899) BaseMulti4 = 70;
							if (CuLv >= 900 && CuLv <= 949) BaseMulti4 = 72;
							if (CuLv >= 950 && CuLv <= 999) BaseMulti4 = 74;
							if (CuLv >= 100) BaseMulti4 = 75;
							
							BaseMulti3 = (BaseMulti4 + (CuLv * ((BaseMulti4 * BaseMulti5) * BaseMulti3b)));
							
							baseval = BaseEXPRequirement * (((CuLv * BaseExtra) + 1));
							baseval *= (1.00 + ((CuLv + 1) * 0.000625));
							
							mulval = (((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2);
							addval = (((BaseEXPRequirement * (CuLv * BaseAccel2)) * BaseMulti3) * ((BaseMulti4) * 1.5));
							ExpValue = baseval;
							if (kcdebug_exptables) Console.Printf("ExpValue: %d (%d)", ExpValue, baseval);
							ExpValue *= mulval;
							if (kcdebug_exptables) Console.Printf("(*) ExpValue: %d (%.8f)", ExpValue, mulval);
							ExpValue += addval;
							if (kcdebug_exptables) Console.Printf("(+) ExpValue: %d (%d)", ExpValue, addval);
							
							if (CuLv > 0) 
							{
								preval = LevelExpRequirement[(CuLv-1)];
							}
							LevelExpRequirement[CuLv] = ExpValue;
							if (kcdebug_exptables) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d \cz(prev: \cy%d)\cz, Multi: %.8f, baseval: %d, mulval: %.8f, addval: %d, diff: %d\c-", CuLv, ExpValue, preval, BaseMulti3, baseval, mulval, addval, (ExpValue-preval));
						}
						if (kcdebug_exptables) Console.Printf("BaseEXPRequirement: %4f, BaseExtra: %4f / 100, BaseAccel1: %4f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2);

						InitEXPTables++;
					}
				}
				
				//***************
				//* Leveling Up *
				//***************
				LevelUpExpStuff();
				
				// Time Seraph Armor Trackers
				TimeSeraphArmorStuff();

				// Time Freeze Trackers
				TimeFreezeStuff();
				
				//*************************************
				//*************************************
				//*************************************
				// End Stuff
				EndStuff();
			}
			super.DoEffect();
		}
	}
	
	void InitStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (ClassCheck <= 1)
		{
			// Defensive [default]
			timefreeze1duration = 10.0;
			timefreeze1durationbase = 10.0;
			timefreeze1cooldown = 45.0;
			timefreeze1cooldownratio = 1.0;
			// Offensive
			timefreeze2duration = 10.0;
			timefreeze2durationbase = 10.0;
			timefreeze2cooldown = 45.0;
			timefreeze2cooldownratio = 1.0;
			// Neutral
			timefreeze3duration = 20.0;
			timefreeze3durationbase = 20.0;
			timefreeze3cooldown = 22.5;
			timefreeze3cooldownratio = 1.0;
			
			timefreezedurationinc1 = 0.05;
			timefreezedurationinc2 = 0.1;
		}
	}
	
	void LevelUpProcess(int type)
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);

		int levelmodulo, levelbonustype;
		levelmodulo = PlayerLevel % 20;
		if (levelmodulo == 0) levelbonustype = 0;
		else if (levelmodulo == 4) levelbonustype = 1;
		else if (levelmodulo == 5) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 8) levelbonustype = 1;
		else if (levelmodulo == 10) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 12) levelbonustype = 1;
		else if (levelmodulo == 15) levelbonustype = randompick(2,2,2,2,2,1);
		else if (levelmodulo == 16) levelbonustype = 1;
		else levelbonustype = 2;
		if (kcdebug_levelupdisplays) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);
		
		double RandomizedStatChance, RandomizedStatChance2;
		RandomizedStatChance = 1.00000000; // 192;
		if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
		{
			RandomizedStatChance -= (0.1 * random[statitem](4,8)); // 112 to 152
		}
		else
		if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
		{
			RandomizedStatChance -= (0.02 * random[statitem](4,8)); // 160 to 176
		}
		else
		if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20
		{
			RandomizedStatChance -= (0.004 * random[statitem](4,8));
		}
		double RNDSCSubtractor1 = 0;
		double RNDSCSubtractor2 = 0;
		RNDSCSubtractor1 = (PlayerLevel * 0.32);
		RNDSCSubtractor1 = clamp(RNDSCSubtractor1, 0.00000, 0.33334);
		if (PlayerLevel > 100)
		{
			RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
			RNDSCSubtractor2 = clamp(RNDSCSubtractor2, 0.00000, 0.33334);
		}
		if (kcdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor1\c-: %.8f, \cxRNDSCSubtractor2\c-: %.8f", RNDSCSubtractor1, RNDSCSubtractor2);

		double RNDSCSubtractor = 0;
		RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
		RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
		RandomizedStatChance -= RNDSCSubtractor;
		if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
		if (kcdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor\c-: %.8f, \cxRandomizedStatChance\c-: %.8f", RNDSCSubtractor, RandomizedStatChance);

		RandomizedStatChance2 = 1.00000000;
		if (PlayerLevel >= 25) RandomizedStatChance2 -= 0.041666667; // 23
		if (PlayerLevel >= 50) RandomizedStatChance2 -= 0.041666667; // 22
		if (PlayerLevel >= 75) RandomizedStatChance2 -= 0.041666667; // 21
		if (PlayerLevel >= 100) RandomizedStatChance2 -= 0.041666667; // 20
		if (PlayerLevel >= 125) RandomizedStatChance2 -= 0.083333334; // 18
		if (PlayerLevel >= 150) RandomizedStatChance2 -= 0.083333334; // 16
		if (PlayerLevel >= 175) RandomizedStatChance2 -= 0.083333334; // 14
		if (kcdebug_levelupdisplays) Console.Printf("\cyStat Chance 1\c-: %.8f, \cxStat Chance 2\c-: %.8f", RandomizedStatChance, RandomizedStatChance2);
		
		//********************************
		//*Random Levelups to Stat Values*
		//********************************
		int SeedIncreaseAmt;
		double LvlSkillMulti;
		double RollValue;
		double BaseChance1;
		double BaseChance2;
		int LvlStatMulti = 1;
		// Luck Boost [1]
		BaseChance1 = (0.2 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;
		// Luck Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLuck += LvlSkillMulti;

		// Speed Boost [1]
		BaseChance1 = (0.125 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		
		// Attack Boost [1]
		BaseChance1 = (0.25 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		
		// Defense Boost [1]
		BaseChance1 = (0.1875 + (NumOfAfasDrops * 0.0125)) * (1.0 + (NumOfAfasDrops * 0.0625));
		BaseChance2 = 0.083333334 * (1.0 + (NumOfAfasDrops * 0.025));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [2]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.003125)) * (1.0 + (NumOfAfasDrops * 0.03125));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.0125));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [3]
		BaseChance1 *= (0.2 + (NumOfAfasDrops * 0.00078125)) * (1.0 + (NumOfAfasDrops * 0.015625));
		BaseChance2 *= 0.825 * (1.0 + (NumOfAfasDrops * 0.00625));
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;

		// Health/HP Boost
		CurrentHealth = owner.player.mo.health;
		HPMaxGain = 0;
		
		if (PlayerLevel >= 151 && PlayerLevel <= 200)				HPMaxGain += floor(PlayerLevel * frandompick(0.0525,0.06));
		else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick(0.045,0.0525));
		else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick(0.0375,0.045));
		else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick(0.03,0.0375));
		
		HPMaxGain += 													randompick(0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3);
		if (levelbonustype == 0) HPMaxGain += randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3);
		if (levelbonustype == 1) HPMaxGain += randompick(0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3);
		if (levelbonustype == 2) HPMaxGain += randompick(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2);
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			HPMaxGain += randompick(1,1,2,2,3);
			HPMaxGain += (MaxHealthTrue / (216 - (NumOfAfasDrops * 8)));
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			HPMaxGain += randompick(0,1,1,2,2);
			HPMaxGain += (MaxHealthTrue / (270 - (NumOfAfasDrops * 6.4)));
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			HPMaxGain += randompick(0,0,1,1,2);
			HPMaxGain += (MaxHealthTrue / (324 - (NumOfAfasDrops * 3.2)));
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			HPMaxGain += randompick(0,0,0,1,1);
			HPMaxGain += (MaxHealthTrue / (378 - (NumOfAfasDrops * 3.2)));
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			HPMaxGain += randompick(0,0,0,0,1);
			HPMaxGain += (MaxHealthTrue / (432 - (NumOfAfasDrops * 1.6)));
		}
		if (HPMaxGain < 1) HPMaxGain = 1;
		owner.player.mo.health += HPMaxGain;
		HealthLevelAdd += HPMaxGain;
		if (type == 1) 
		{
			HealthNoRPGAdd += HPMaxGain;
			if (!exex_expenabled)
			{
				if (skill <= 0) HPMaxGain *= (4.0 + (NumOfAfasDrops * 0.08));
				if (skill == 1) HPMaxGain *= (3.5 + (NumOfAfasDrops * 0.07));
				if (skill == 2) HPMaxGain *= (3.0 + (NumOfAfasDrops * 0.06));
				if (skill == 3) HPMaxGain *= (2.5 + (NumOfAfasDrops * 0.05));
				if (skill >= 4) HPMaxGain *= (2.0 + (NumOfAfasDrops * 0.04));
			}
		}
		//if (!owner.CountInv("SilentLevelUp")) A_StatIncHud(HPMaxGain,0);
		if (kcdebug_levelupdisplays) Console.Printf("HPMaxGain: %d", HPMaxGain);
		
		// Mass/Balance
		double BaseMass = 1.0;
		let playerset = KCPlayerPawn(owner);
		if (playerset) BaseMass = playerset.originalmass;
		MassGain = 0;

		if (PlayerLevel >= 151 && PlayerLevel <= 200)				MassGain += floor(PlayerLevel * frandompick(0.0525,0.06));
		else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MassGain += floor(PlayerLevel * frandompick(0.045,0.0525));
		else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MassGain += floor(PlayerLevel * frandompick(0.0375,0.045));
		else if (PlayerLevel <= 50)													MassGain += floor(PlayerLevel * frandompick(0.03,0.0375));

		MassGain += 													randompick(0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2);
		if (levelbonustype == 0) MassGain += randompick(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
		if (levelbonustype == 1) MassGain += randompick(0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2);
		if (levelbonustype == 2) MassGain += randompick(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1);
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			MassGain += randompick(0,0,0,0,0,1,1,2,2,3);
			MassGain += (BaseMass / (324 - (NumOfAfasDrops * 16)));
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			MassGain += randompick(0,0,0,0,0,0,1,1,2,2);
			MassGain += (BaseMass / (405 - (NumOfAfasDrops * 12.8)));
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			MassGain += randompick(0,0,0,0,0,0,0,1,1,2);
			MassGain += (BaseMass / (486 - (NumOfAfasDrops * 9.6)));
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			MassGain += randompick(0,0,0,0,0,0,0,0,1,1);
			MassGain += (BaseMass / (557 - (NumOfAfasDrops * 6.4)));
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			MassGain += randompick(0,0,0,0,0,0,0,0,0,1);
			MassGain += (BaseMass / (648 - (NumOfAfasDrops * 3.2)));
		}
		MassLevelAdd += MassGain;
		if (type == 1) 
		{
			MassNoRPGAdd += MassGain;
			if (!exex_expenabled)
			{
				if (skill <= 0) MassGain *= (2.0 + (NumOfAfasDrops * 0.04));
				if (skill == 1) MassGain *= (1.75 + (NumOfAfasDrops * 0.045));
				if (skill == 2) MassGain *= (1.5 + (NumOfAfasDrops * 0.03));
				if (skill == 3) MassGain *= (1.25 + (NumOfAfasDrops * 0.025));
				if (skill >= 4) MassGain *= (1.0 + (NumOfAfasDrops * 0.02));
			}
		}
		
		if (!owner.CountInv("SilentLevelUp")) owner.A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(0.6,0.75),ATTN_NORM,frandom(1.25,1.5));
	}

	
	void LevelUpExpStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		Experience = owner.CountInv("ExpPts");
		owner.A_SetInventory("ExpPtsLeft",(LevelExpRequirement[(PlayerLevel)]-Experience));
		owner.A_SetInventory("ExpPtsNeeded",LevelExpRequirement[(PlayerLevel)]);
		PlayerLevel = owner.CountInv("PlayerLevel");
		PlayerATK = owner.CountInv("PlayerATK");
		PlayerDEF = owner.CountInv("PlayerDEF");
		PlayerSPD = owner.CountInv("PlayerSPD");
		PlayerLuck = owner.CountInv("PlayerLuck");

		int levelmodulo, levelbonustype;
		int leveluptimes = 0;
		int leveluptimesmax = LevelCap - PlayerLevel;
		int StatIncrease;
		PrevATK = PlayerATK;
		PrevDEF = PlayerDEF;
		PrevSPD = PlayerSPD;
		for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
		{
			if (kcdebug_levelup) Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
			if (Experience >= LevelExpRequirement[PlayerLevel])
			{
				if (PlayerLevel < LevelCap)
				{
					PlayerLevel += 1;
					
					LevelUpProcess(0);
					
					owner.A_SetInventory("PlayerLevel",PlayerLevel);
					owner.A_SetInventory("PlayerATK",PlayerATK);
					owner.A_SetInventory("PlayerDEF",PlayerDEF);
					owner.A_SetInventory("PlayerSPD",PlayerSPD);
					owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
					if (!owner.CountInv("SilentLevelUp"))
					{
						string LevelUpMsg = "";
						LevelUpMsg.AppendFormat("\c[Green]Congradulations, you've reached Level %d \c[brick][+%d HP]", PlayerLevel, HPMaxGain);
						if (exex_extraatkdefspd)
						{
							if ((PlayerATK > PrevATK) || (PlayerDEF > PrevDEF) || (PlayerSPD > PrevSPD)) LevelUpMsg.AppendFormat("\n\n");
							if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased Even More than Normal!");
							if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased Even More than Normal!");
							if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased Even More than Normal!");
						}
						owner.A_Print(LevelUpMsg);
						owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
					}
				}
			}
		}
		if (exex_expenabled) 
		{
			TruePlayerLevel = PlayerLevel;
			TruePlayerATK = PlayerATK;
			TruePlayerDEF = PlayerDEF;
			TruePlayerSPD = PlayerSPD;
		}
		else
		{
			TruePlayerLevel = 0;
			TruePlayerATK = 0;
			TruePlayerDEF = 0;
			TruePlayerSPD = 0;
		}

		int oldhealth = owner.health;
		if (owner.CountInv("NormalHealth")) oldhealthratio = 0;
		if (owner.CountInv("DecentHealth")) oldhealthratio = 1;
		if (owner.CountInv("LowHealth")) oldhealthratio = 2;
		if (owner.CountInv("CriticalHealth")) oldhealthratio = 3;
		
		PrevATK = PlayerATK;
		PrevDEF = PlayerDEF;
		PrevSPD = PlayerSPD;
		leveluptimes = 0;
		leveluptimesmax = NumOfLegendMeds - MedCurrLvl;
	}

	void TimeSeraphArmorStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		double regenamt;
		double drainamt;
		
		TimeArmorEnergyMaxTics = 0;
		TimeArmorRelicsOwned = 0;
		owner.A_SetInventory("TSArtifactsInUse",0);
		TimeArmorRelicsUsedBits = 0;
		if (owner.CountInv("TimeSeraphPocketWatch")) 
		{
			TimeArmorRelicsOwned++;
		}
		if (owner.CountInv("TimeSeraphBangle"))
		{
			TimeArmorRelicsOwned++;
		}
		if (owner.CountInv("TimeSeraphCharm") > 0)
		{
			TimeArmorRelicsOwned++;
			
			TimeArmorEnergyMaxTics = ((3600 * TimeArmorRelicsOwned) * TICRATE);
			
			if (TimeArmorEnergyTics > 0)
			{
				nm = "TSArmorTier1";
				nn = "TSArmorTier2";
				no = "TimeSeraphVisor";
				drainamt = 0;
				if (owner.CountInv(nn)) 
				{
					drainamt += 40;
					TimeArmorRelicsUsedBits += 3;
				}
				else
				if (owner.CountInv(nm)) 
				{
					drainamt += 10;
					TimeArmorRelicsUsedBits += 1;
				}
				if (owner.CountInv(no)) 
				{
					TimeArmorRelicsUsedBits += 4;
					drainamt += 2;
				}
				if (TimeArmorRelicsUsedBits > 0) owner.A_SetInventory("TSArtifactsInUse",1);
				TimeArmorEnergyTics -= drainamt;
				if (TimeArmorEnergyTics <= 0.0000) 
				{
					if (owner.CountInv(nm)) owner.A_SetInventory(nm,0);
					if (owner.CountInv(nn)) owner.A_SetInventory(nn,0);
					if (owner.CountInv(no)) owner.A_SetInventory(no,0);
					TimeArmorEnergyTics = 0;
				}
			}

			if (TimeArmorEnergyTics < TimeArmorEnergyMaxTics)
			{
				regenamt = (8.0 + (PlayerLevel * 0.000625));
				regenamt *= TimeArmorRelicsOwned;
				nm = "KCTimeFreezer1";
				nn = "KCTimeFreezer2";
				no = "KCTimeFreezer3";
				if (owner.CountInv(nm) || owner.CountInv(nn) || owner.CountInv(no)) 
				{
					if (TimeArmorRelicsOwned == 1) regenamt *= 0.25;
					if (TimeArmorRelicsOwned == 2) regenamt *= 0.275;
					if (TimeArmorRelicsOwned >= 3) regenamt *= 0.325;
				}
				TimeArmorEnergyTics += regenamt;
			}
			
			if (TimeArmorEnergyTics > TimeArmorEnergyMaxTics) TimeArmorEnergyTics = TimeArmorEnergyMaxTics;
		}
		else
		{
			TimeArmorEnergyTics = 0;
		}
		if (kcdebug_timeserapharmor && TimeArmorRelicsOwned) Console.Printf("TimeArmorRelicsOwned: %d, TimeArmorEnergyTics: %.4f / %.4f, \c[sapphire]regenamt: %.4f\c-, \c[red]drainamt: %.4f\c-", TimeArmorRelicsOwned, TimeArmorEnergyTics, TimeArmorEnergyMaxTics, regenamt, drainamt);
	}

	void TimeFreezeStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		int TickTimer;

		// Defensive [default]
		timefreeze1duration = 10.0 + (timefreezedurationinc1 * timefreeze1timesused);
		timefreeze1cooldown = 45.0 * timefreeze1cooldownratio;
		// Offensive
		timefreeze2duration = 10.0 + (timefreezedurationinc1 * timefreeze2timesused);
		timefreeze2cooldown = 45.0 * timefreeze2cooldownratio;
		// Neutral
		timefreeze3duration = 20.0 + (timefreezedurationinc2 * timefreeze3timesused);
		timefreeze3cooldown = 22.5 * timefreeze3cooldownratio;
		
		if (timefreeze1durationbase > 0.00)
		{
			timefreeze1durationratio = (timefreeze1duration * 1.0) / (timefreeze1durationbase * 1.0);
			if (timefreeze1durationratio > 0.00) 
			{
				timefreeze1cooldownratio = 1.0 / (timefreeze1durationratio * 1.0);
			}
			if (kcdebug_timefreezechecks) Console.Printf("timefreeze1durationratio: %.8f, timefreeze1cooldownratio: %.8f", timefreeze1durationratio, timefreeze1cooldownratio);
		}
		
		if (timestopstate)
		{
			if (timestopactivetics > 0)
			{
				double tickvol = 1.00;
				if (timestopactivemaxtics > 0) tickvol = double(tickvol * (timestopactivetics * 1.0) / (timestopactivemaxtics * 1.0));
				owner.A_SetInventory("KCTimeFreezer1",1);
				owner.A_SetInventory("KCTimeCooldown",0);
				TickTimer = timestopactivetics % 35;
				if (TickTimer == 0)
				{
					owner.A_StopSound(218); 
					owner.A_StartSound("TimeStopTick",218,CHANF_DEFAULT,(frandom(0.40,0.60) * tickvol),ATTN_NONE); 
				}
				if (timestopactivetics == 65) 
				{
					owner.A_StopSound(217); 
					owner.A_StartSound("TimeFreezeOut4",217,CHANF_DEFAULT,0.875,ATTN_NONE); 
				}
				timestopactivetics--;
				timefreeze1cooldownratio2 = 1.0 - ((timestopactivetics * 1.0) / (timestopactivemaxtics * 1.0));
				if (kcdebug_timefreezechecks) Console.Printf("tickvol: %.8f, timefreeze1cooldownratio2: %.8f", tickvol, timefreeze1cooldownratio2);
			}
			else
			if (timestopactivetics == 0) 
			{
				timestopstate = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				owner.A_SetInventory("KCTimeFreezer1",0);
				owner.A_SetInventory("KCTimeFreezer2",0);
				owner.A_SetInventory("KCTimeFreezer3",0);
				if (timestopcooldowntics <= 0)
				{
					timestopcooldowntics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					timestopcooldownmaxtics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					if (timestopcooldowntics == 0) timefreeze1timesused += 5;
					owner.A_SetInventory("KCTimeCooldown",1);
					timefreeze1cooldownratio2 = 0.0;
				}
			}
			else
			if (timestopactivetics < 0)
			{
				timestopactivetics = 0;
				timestopstate = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				owner.A_SetInventory("KCTimeFreezer1",0);
				owner.A_SetInventory("KCTimeFreezer2",0);
				owner.A_SetInventory("KCTimeFreezer3",0);
				if (timestopcooldowntics <= 0)
				{
					timestopcooldowntics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					timestopcooldownmaxtics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					if (timestopcooldowntics == 0) timefreeze1timesused += 5;
					owner.A_SetInventory("KCTimeCooldown",1);
					timefreeze1cooldownratio2 = 0.0;
				}
			}
		}
		else
		{
			owner.A_SetInventory("KCTimeFreezer",0);
			owner.A_SetInventory("KCTimeFreezer1",0);
			owner.A_SetInventory("KCTimeFreezer2",0);
			owner.A_SetInventory("KCTimeFreezer3",0);
			if (timestopcooldowntics > 0) 
			{
				owner.A_SetInventory("KCTimeCooldown",1);
				timestopcooldowntics--;
				if (timestopcooldowntics == 0) 
				{
					owner.A_SetInventory("KCTimeCooldown",0);
					owner.A_StartSound("TimeFreezeCooldown",219,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
					owner.A_SetBlend("252540",0.667,random(random(22,23),27));
				}
			}
			else 
			if (timestopcooldowntics <= 0) 
			{
				owner.A_SetInventory("KCTimeCooldown",0);
				timestopcooldowntics = 0;
			}
		}
		if (kcdebug_timefreezechecks) Console.Printf("timefreeze1timesused: %d, \c[green]timestopstate: %d, \c[lightblue]timestopactivetics: %d / %d, \c[orange]timestopcooldowntics: %d / %d, \c[gold]timefreeze1duration: %.2f, \c[gold]timefreeze1cooldown: %.2f", timefreeze1timesused, timestopstate, timestopactivetics, timestopactivemaxtics, timestopcooldowntics, timestopcooldownmaxtics, timefreeze1duration, timefreeze1cooldown);
	}
	
	void EndStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		ClassCheck++;
		itemtimer++;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (kcdebug_actordmgdisplays) Console.Printf("    (\czPlayerStatItem input [STEP 5 (\cwsuper.DamageMobj\cz)]\c-: \cydmg = %d\c-)", damage);
			
			double TSAFactor = 1.0;
			if (TimeArmorRelicsUsedBits & 4) TSAFactor *= 1.1667;
			
			double TOTALFactor = 1.0
												 * TSAFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			double TOTALFactor = 1.0;
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			
			if (playeractor && newdamage <= 0) 
			{
				playeractor.A_CheckNeverBleed(1, newdamage, playeractor.DmgFlags);
				if (playeractor.DmgFlags & DMG_INFLICTOR_IS_PUFF && playeractor.DmgInflictor)
				{
					playeractor.DmgInflictor.bPUFFONACTORS = true;
				}
			}
		}
	}
	
	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		Speed = 1.00;
		return Speed; 
	}
}