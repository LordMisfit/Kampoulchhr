class PlayerStatItem : Inventory
{
	mixin HUDRecovery;
	mixin TimerCheck;
	
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	
	int heiwaoutfit;
	// 0 - Default
	// 1 - TSArmor Tier 1
	// 2 - TSArmor Tier 2
	// 3 - ??????
	// 4 - ??????
	
	array<int> titemadd;
	
	int tfaftimgbasefade;
	int tfaftimgbasefade2;
	
	int hamonrippletier;
	int nagareflowtier;
	int moonlightcovergirlACT;
	
	bool hastomeofetdark;
	array<int> hascirclesofpower;
	// 1 = 3-Way
	// 2 = 5-Way
	// 3 = 7-Way
	// 4 = 9-Way (new to KC/etc as a usable Circle of Power)
	// 5 = 11-Way (new to KC/etc)
	// 6 = 13-Way (new to KC/etc)
	array<int> hasalignmentrunes;
	// -1 = Tzs[c]hest/(B'th'ya) [Wings/Existence; White/(Yellow)] (new to KC/etc)
	// 0 = Mantorok [Black Heart/Decay; Purple]
	// 1 = Chattur'gha [Claw/Body; Red]
	// 2 = Ulyaoth [Veil/Soul; Blue]
	// 3 = Xel'lotath [Sigil/Mind; Green]
	array<int> hasactionrunes;
	// 1 = Bankorok [Protect]
	// 2 = Tier [Summon]
	// 3 = Narokath [Absorb]
	// 4 = Nethlek [Dispel]
	// 5 = Antorbok [Protect]
	array<int> hastargetrunes;
	// 1 = Magormor [Item]
	// 2 = Redgormor [Area]
	// 3 = Santak [Creature]
	// 4 = Tirtak [Time/Dimension] (new to KC)
	array<int> haspowerrunes;
	// 1 = Pargon [Increase/Magnify Power]
	// 2 = Silgon [Decrease/Surpress Power] (new to KC)
	array<double> toedspellcosts_3way;
	array<double> toedspellcosts_5way;
	array<double> toedspellcosts_7way;
	array<double> toedspellcosts_9way;
	array<double> toedspellcosts_11way;
	array<double> toedspellcosts_13way;
	// 1 = Fortify Item (Protect & Item)* - "This incantation allows a protective shield to be given to an inanimate object in order to protect it from the wrath of opposing attacks."
	// 2 = Damage Field (Protect & Area) - "This incantation exerts a force of mystical power within the confines of its runes. Nothing may enter till it is dispelled."
	// 3 = Bind (Protect & Creature) - "This Magick enables the caster to bind a creature with Magick forcing it to ally with them."
	// 4 = Shield (Protect & Self) - "From all manner of Magick will you be protected when encased in this geas. The alignments can help but never hinder, for within well-conjured Magick comes greater protection."
	// 5 = SpaceTime Booster (Protect & Time/Dimension)* - "This Magick will prevent the abilities of other beings allowing dimensional or time-based manipulation from affecting the immediate area around yourself, though will allow the user to still utilize similar abilities if they possess any. Stronger levels increase this Magick's area of effect."
	// 6 = Duplicate Item (Summon & Item)* - "This Magick can create a perfect copy or duplicate of any existing inanimate object as long as the origin item does not possess any inherit magickal or otherwise mystical energy. This can be used for the sake of creating sustenance, extra ammunition or other such things for the user." 
	// 7 = Magick Pool (Summon & Area) - "This Magick transfers the innate magickal energy of the environment to the self. The limitless power of the Ancients will be at your disposal for the duration of the Magick. Once the Magick has waned, you will be bereft of spiritual power, until it naturally seeps back into your being."
	// 8a = Summon Trapper (Summon & Creature) [3 point] - "Evoking this Magick brings into existence a creature known as the 'Trapper'. Trappers possess the unique ability to transcend most forms of space and time, and to relocate objects and creatures to their own plane."
	// 8b = Summon Zombie (Summon & Creature) [5 point] - "This conjuration summons a shambling corpse from the Planes of Eternal Darkness, where the dead, and all manner of fell things, dwell. This Magick should not be undertaken lightly, for its toll on the psyche of mortalkind is normally not pleasant. To see with the eyes of the dead is to become them..."
	// 8c = Summon Horror (Summon & Creature) [7 point] - "The bestial fury of the 'Horror' is unleashed by this Magick. The Horror's abilities are yours - enemies may be crushed or rent apart, wracked by Magick. This spell should not be undertaken lightly, for its toll on the psyche of mortalkind is high."
	// 8d = Summon Guardian (Summon & Creature)* [9 point] - [Currently Unknown Effect]
	// 8e = Summon Greater Guardian (Summon & Creature)* [11 point] - [Currently Unknown Effect]
	// 8f = Summon [Ancient/Eternal] (Summon & Creature)* [13 point] - [Currently Unknown Effect]
	// 9 = Summon Doppelganger (Summon & Self)* - "This deft-defying Magick conjures a phantom copy of the caster into the living planes. The 'doppelganger' will act on its own accord and attack their 'original's' enemies and assist their allies... for a scant amount of time before dissipating back into nothingness."
	// 10 = HastenFlasher Aura (Summon & Time/Dimension)* - "With this powerful and costly incantation, you will greatly accelerate both your physical, mental and metaphysical speed in the heat of perilous situations."
	// 11 = Matter Healing (Absorb & Item)* - "With this incantation, you will absorb the essence of lesser items to convert them into power (aka health/soul energy/mind-energy). Greater items cannot be affected by this without more power placed into the Magick. Some items should also only be absorbed in desperate situations, for even strong and powerful weapons, armors and items alike can permanently be destroyed by this Magick. Enchanted items also grant more power to their caster, but have a risk of causing energy imbalances as well that can throw the user off balance for a time."
	// 12 = Reveal[/Become] Invisible (Absorb & Area) - "With this enchantment the invisible is rendered visible. Use it wisely, for some things are invisible for a reason, and mortalkind not meant to see them."
	// 13 = Eldritch Fusion (Absorb & Creature)* - "This risky Magick allows the user to fuse aspects of a summoned being's mana and soul to themself for a short period, altering their own abilities. Care must be given to which creatures one tries to fuse to themselves, as their own natures can risk overtaking the user's own impulses while the effect lingers."
	// 14 = Recovery (Absorb & Self) - "This spell enables the transfer of magickal power from the environment to the self. Restoration of the body, spirit and mind is this spell's purpose."
	// 15 = StopTime ShowGoer (Absorb & Time/Dimension)* - "This Magick draws away the flow of time itself around a small area centered around one target of the user's, locking them away in time for a short time. This will render them entirely immune to physical damage, though mystical and magickal ravages will still affect them to varying degrees."
	// 16 = Disenchant Item (Dispel & Item)* - "That which is whole, shall be broken. That which is sharpened, will become dull. Thus is the nature of the Disenchant Item Magick. Any remnant magicks from the dispelled item will be absorbed to the caster to replenish their soul."
	// 17 = Disenchant Magick (Dispel & Area) - "For every Magick there is a counter. That which is protected, is protected no more. That which is bound, is unbound. Be warned that a more powerful Magick than this will endure its ravages."
	// 18a = Disperse Trapper (Dispel & Creature)* [3 point] - "For this spell, one can prematurely dispel a summoned trapper from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 18b = Disperse Zombie (Dispel & Creature)* [5 point] - "For this spell, one can prematurely dispel a summoned zombie from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 18c = Disperse Horror (Dispel & Creature)* [7 point] - "For this spell, one can prematurely dispel a summoned horror from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 18d = Disperse Guardian (Dispel & Creature)* [9 point] - "For this spell, one can prematurely dispel a summoned guardian from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 18e = Disperse Greater Guardian (Dispel & Creature)* [11 point] - "For this spell, one can prematurely dispel a summoned grand guardian from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 18f = Disperse Ancient (Dispel & Creature)* [13 point] - "For this spell, one can prematurely dispel a summoned ancient from the physical planes to recover extra strength and to prevent potential loss of control over the creature as well."
	// 19 = Disperse Doppelganger (Dispel & Self)* - "For this spell, one can prematurely dispel a summoned doppelganger from the physical planes to recover extra strength, vitality, mind and energy for the soul."
	// 20 = SlowenSludger Field (Dispel & Time/Dimension)* - "With this incantation, one can greatly diminish the physical, mental and metaphysical speed of anything that enters this field of Magick."
	// 21 = Enchant Item (Project & Item) - "That which is broken, shall be fixed. That which is dull, will be sharp. Thus is the nature of the Enchant Item Magick." [2 min duration]
	// 22 = Magickal Attack (Project & Area) - "This incantation saturates an area with aligned magickal energy, inflicting massive damage to all enemies within its influence. This Magick will affect both large and small - for even the greatest of enemies are made of many small parts."
	// 23a = Reinforce Trapper (Project & Creature) [3 point]* - "This Magick accelerates and improves the offensive and defensive aspects of the summoned trapper, the mind, body and soul amongst them, if only temporarily." (1 min duration)
	// 23b = Reinforce Zombie (Project & Creature) [5 point]* - "This Magick accelerates and improves the offensive and defensive aspects of the summoned zombie, the mind, body and soul amongst them, if only temporarily." (1.5 min duration)
	// 23c = Reinforce Horror (Project & Creature) [7 point]* -  "This Magick accelerates and improves the offensive and defensive aspects of the summoned horror, the mind, body and soul amongst them, if only temporarily." (2.0 min duration)
	// 23d = Reinforce Guardian (Project & Creature) [9 point]* -  "This Magick accelerates and improves the offensive and defensive aspects of the summoned guardian, the mind, body and soul amongst them, if only temporarily." (2.75 min duration)
	// 23e = Reinforce Greater Guardian (Project & Creature) [11 point]* -  "This Magick accelerates and improves the offensive and defensive aspects of the summoned grand guardian, the mind, body and soul amongst them, if only temporarily." (3.5 min duration)
	// 23f = Reinforce Ancient (Project & Creature) [13 point]* -  "This Magick accelerates and improves the offensive and defensive aspects of the summoned ancient, the mind, body and soul amongst them, if only temporarily." (4 min duration)
	// 24 = Reinforce Self (Project & Self)* - "This Magick accelerates and improves the offensive and defensive aspects of the caster's body itself, the mind, body and soul amongst them, if only temporarily." (1 min duration)
	// 25 = SelfBane Permanence (Project & Time/Dimension)* - "This magick allows the user to lock their timeline in place entirely for a short time. This renders them physically, mentally and psychologically 'immortal' and undying, though their power is locked at this state and cannot be further boosted, or diminished, during the effect."
	
	double CC_TAO_Kills;
	
	int LMPieBerserkGrabbed;
	int LMPieBerserkCooldown;
	
	int ArmorGrabTimer;
	int fighttimermod;
	bool heiwavhardmodifier;
	double spbkpkarmorbonus, spbkpkmedibigbonus;
	double tracerheight;
	int darmortype, darmortype2, truearmortype;
	int IsMorphed, WasMorphed, WasMorphProj;
	int MorphTimer;
	int EvasionRate;
	double SPDEvadeCheck;
	int drowndebufflevel, drowndebufftimer;
	bool drowndebuginit;
	int drowndebuffmaxtimer, drownmaxtimermod;
	
	int playeractiontimer;
	int playeractiontimerfrag;
	int randmusroll;
	int DynMusSetUsed;
	int DynMusCalmTimer;
	int DynMusFightTimer;
	bool DynMusActCall;
	int DynMusChangeChance;
	int snglen;
	
	int tfcooldown;
	bool MercyInvulnOn;
	bool MercyInvulnOnSiel;
	int MercyInvulnTimer;
	int MercyInvulnMod;
	bool sielsgraceactive;
	int sielsgraceactivations;
	int sielsgracetrueactivations;
	int sielsgracecooldown;
	int sielsgraceluckcooldown;
	int sielsgracecooldownbase;
	
	int TSArtifactSpawnCooldown;
	int TSArtifactSpawnWarmUp;
	
	int BaseFlatDefValue, BaseFlatDefValueCrush, BaseFlatDefValueDmgFlr, BaseFlatDefValueHUD;
	int ArmorDefValue, ArmorDefValueCrush, ArmorDefValueDmgFlr, ArmorDefValueHUD;
	
	int CritChance;
	int CritRoll;
	int MortalBlowCritBoostTimer;
	
	int glockclipsize1, glockclipsize2;
	int actualjumpheight;
	double actualjumpheight2;
	int TrueJumpHeight;
	
	int CharacterClass;
	bool cankick;
	
	int whistlecooldown;
	int landdmgbonus;
	
	int nummaps;
	int ArmorTier;
	int armsav;
	int armtier;
	
	int CompatPackMode;
	int PlayerWaterLevel;
	int EWShieldKills;
	int HellWarriorMaxCharge;
	int HellWarriorShieldLevel;

	int MaxDashIncTimer, MaxDashIncAmt;
	int MaxHPIncTimer, MaxHPIncAmt;
	int HPDmgHUDTimer, APDmgHUDTimer, TSADmgHUDTimer;
	int HPRecHUDTimer, APRecHUDTimer, TSARecHUDTimer;
	int HPDmgHUDAmt, APDmgHUDAmt, TSADmgHUDAmt;
	int HPRecHUDAmt, APRecHUDAmt, TSARecHUDAmt;
	int EXPGainHUDTimer, EXPGainHUDAmt;
	int EXPGainHUDTimerMax;
	int EXPGainHUDCooldownTimer;
	int KillComboCount;
	
	int HPHUDShakeTime, APHUDShakeTime, TSAHUDShakeTime;
	int HPHUDPulseTime, APHUDPulseTime, TSAHUDPulseTime;
	
	int HPHUDShakeType, APHUDShakeType, TSAHUDShakeType;
	int HPHUDPulseType, APHUDPulseType, TSAHUDPulseType;
	int HPHUDPulseTimeP, APHUDPulseTimeP, TSAHUDPulseTimeP;
	
	Double DashDir, DashSpeed, DashVSpeed, DashPitch;
	Int DashTics, DashCharge, AirTics, DashCost, DashCooldown, MaxDashCooldown;
	double MercyFlickerAlpha;
	int InvisPulseTimer;
	Bool DJump, Waiting;
	string dashgruntsound;
	int dashgruntchance;
	int dashtype;
	int airdashtype;
	Int DashMaxCharge, MaxDashes, MaxDashTics;

	actor weapon;
	string nm, nn, no, np, nq, nr;
	int sttabs;
	int genticsHUD;
	double ArmorEnc;
	double ArmorEncL;
	double LVLfactArmr;
	double ATKfactArmr;

	double LVLfactWeap;
	double ATKfactWeap;
	
	int oldhealthratio;
	int NumOfLegendMeds, MedCurrLvl, LegMedCap;
	int ClassCheck;
	int itemtimer;
	int buttons;
	int oldbuttons;
	int FreezePlayer;
	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int ArmorResistance;
	int ClassicDoomType;
	int ModType;
	int OneLinerTimerCool;
	int OneLinerCooldown;
	int CanTalkUnderwater;
	int PlayerLevel, TruePlayerLevel, ActualLevel;
	int PlayerATK, TruePlayerATK;
	int PlayerDEF, TruePlayerDEF;
	int PlayerSPD, TruePlayerSPD;
	int PlayerVIT, TruePlayerVIT;
	int PlayerIQ, TruePlayerIQ;
	int PlayerGUTS, TruePlayerGUTS;
	int PlayerLUCK, TruePlayerLUCK, TempLUCK;
	int PrevATK, PrevDEF, PrevSPD, PrevVIT, PrevGUTS, PrevLUCK;
	int BaseDashChargeMax;
	int ExtraDashCharge;
	
	double BaseRegenMulti;
	double atkfct, deffct, spdfct, jmpfct, suvfct, mssfct, evdfct;

	int HPMaxGain, PPMaxGain, MPMaxGain, MassGain; 
	int VitHPMaxGain, IQPPMaxGain, SensesMPMaxGain;
	int SurvivalRate;

	int spbkpkmaxhealthcarry;

	int PrevHealthRatio;
	int HealthRatio;
	int CurrentHealth;
	int BaseStartMaxHealth;
	int BaseStartMaxPP;
	int BaseStartMaxMP;

	double ArmorHealthFactor;
	int MaxHealthTrue;
	int MaxHealthTrueRF;
	int HealthLevelAdd;
	int HealthNoRPGAdd;
	double HealthNoRPGAdd2;
	int HealthBonusAdd;
	double VitalityPieces;
	int VitalityCurrHPBoosts;
	int VitalityCurrHPBoosts2;
	int MaxHealthLimit;
	
	double IQPieces;
	int IQCurrPPBoosts;
	int IQCurrPPBoosts2;
	int CurrentPsychicPoints;
	int MaxPsychicPoints;
	int MaxPsychicPointsRF;
	int PPLevelAdd;
	int PPNoRPGAdd;
	double PPNoRPGAdd2;
	int PPBonusAdd;
	int MaxPPLimit;
	
	double SensesPieces;
	int SensesCurrMPBoosts;
	int SensesCurrMPBoosts2;
	int CurrentMagicPoints;
	int MaxMagicPoints;
	int MaxMagicPointsRF;
	int MPLevelAdd;
	int MPNoRPGAdd;
	double MPNoRPGAdd2;
	int MPBonusAdd;
	int MaxMPLimit;

	int HellcoreOverheatLevel;
	double HellcoreCooldownSpeed;
	int HellcoreCooldownTimer;
	int HellcoreCoolRatio;

	int TotalMass, BaseMass, PreBuffMass, TotalNonTSAMass;
	int MassLevelAdd;
	int MassNoRPGAdd;
	double MassNoRPGAdd2;
	int MassBonusAdd;
	int AirLevelAdd;
	int AirNoRPGAdd;
	int AirNoRPGAdd2;
	int AirBonusAdd;

	int LevelCap;
	int StaminaLevel;
	int AccuracyLevel;
	int Experience;
	Array<int> LevelExpRequirement;
	Array<int> SpeakOfMonster;
	int E1M8BaronSight;
	int InitEXPTables;
	
	int totalkillsgame;
	int totalmaxkills;
	int totalitemsgame;
	int totalmaxitems;
	int totalsecretsgame;
	int totalmaxsecrets;
	int totalcompleted;
	int totalallkills;
	int totalallitems;
	int totalallsecrets;
	
	int HPRegenBoostTimer;
	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPDegenTimer;
	int HPRegenTimerMax;
	int HPDegenTimerMax;
	bool berserked;

	int PPRegenBoostTimer;
	int PPRegenBonPenTimer;
	int PPRegenTimer;
	int PPDegenTimer;
	int PPRegenTimerMax;
	int PPDegenTimerMax;

	int MPRegenBoostTimer;
	int MPRegenBonPenTimer;
	int MPRegenTimer;
	int MPDegenTimer;
	int MPRegenTimerMax;
	int MPDegenTimerMax;

	double timefreezegenduration;

	double timefreeze1duration;
	double timefreeze1cooldown;
	double timefreeze2duration;
	double timefreeze2cooldown;
	double timefreeze3duration;
	double timefreeze3cooldown;
	double timefreeze1durationbase;
	double timefreeze2durationbase;
	double timefreeze3durationbase;
	double timefreeze1durationratio;
	double timefreeze2durationratio;
	double timefreeze3durationratio;
	double timefreeze1cooldownratio;
	double timefreeze2cooldownratio;
	double timefreeze3cooldownratio;
	double timefreeze1cooldownratio2;
	double timefreeze2cooldownratio2;
	double timefreeze3cooldownratio2;
	double timefreezedurationinc1;
	double timefreezedurationinc2;

	int timefreeze1timesused;
	int timefreeze2timesused;
	int timefreeze3timesused;

	int timefreeze2levellearned;
	int timefreeze3levellearned;
	
	int timestopstate;
	int timestoptype; // 1 = Defensive, 2 = Offensive, 3 = Neutral 
	int timestopactivetics;
	int timestopactivemaxtics;
	int timestopcooldown1tics;
	int timestopcooldown1maxtics;
	int timestopcooldown2tics;
	int timestopcooldown2maxtics;
	int timestopcooldown3tics;
	int timestopcooldown3maxtics;
	
	int timeusemulti;
	
	double TimeArmorChargeSoundInc;
	double TimeArmorEnergyTics;
	double TimeArmorEnergyMaxTics;
	int TimeArmorRelicsOwned;
	int TimeArmorRelicsUsedBits;
	int TimeArmorRelicsOwnedBits;
	double TSARegenAmt;
	double TSADrainAmt;
	
	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
		+Inventory.UNCLEARABLE;
	}
	
	double A_GetKnifeSpd()
	{
		double output = kc_knifespdlvlint; // 20;
		double oldoutput = output;
		if (output <= 1.0) output = 1.0;
		if (kcdebug_meleeinformation) Console.Printf("output: %.8f [%.8f]", output, oldoutput);
		return output;
	}
	
	bool A_CheckForHeiwa()
	{
		bool result = false;
		if (owner.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(owner)) result = true;
		return result;
	}
	
	void A_SielsGraceLuckCooldown(int base)
	{
		sielsgraceluckcooldown = ((base * TICRATE) * frandompick(0.9,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.1));
		sielsgraceluckcooldown *= (1.0 + ((sielsgraceactivations) * frandompick(0.1,0.15,0.15,0.15,0.15,0.15,0.2)));
		if (sielsgraceluckcooldown > sielsgracecooldownbase) sielsgraceluckcooldown = sielsgracecooldownbase;
		A_SetInventory("sielsgraceluckcooldown",sielsgraceluckcooldown);
	}
	
	void A_SielsGraceCooldown(int type)
	{
		sielsgracecooldown = sielsgracecooldownbase;
		double levelbasis = 0.20;
				 if (TruePlayerLevel <= 5) levelbasis = 0.20;
		else if (TruePlayerLevel >= 6 && TruePlayerLevel <= 20) levelbasis = 0.375;
		else if (TruePlayerLevel >= 21 && TruePlayerLevel <= 50) levelbasis = 0.625;
		else if (TruePlayerLevel >= 51 && TruePlayerLevel <= 100) levelbasis = 1.125;
		else if (TruePlayerLevel >= 101 && TruePlayerLevel <= 200) levelbasis = 1.75;
		else if (TruePlayerLevel >= 201 && TruePlayerLevel <= 500) levelbasis = 2.5;
		else if (TruePlayerLevel >= 501) levelbasis = 4.875;
		sielsgracecooldown *= (1.0 + ((TruePlayerLevel) * levelbasis));

		double activationbasis = 0.015625;
				 if (TruePlayerLevel <= 5) activationbasis = 0.015625;
		else if (TruePlayerLevel >= 6 && TruePlayerLevel <= 20) activationbasis = 0.03125;
		else if (TruePlayerLevel >= 21 && TruePlayerLevel <= 50) activationbasis = 0.0625;
		else if (TruePlayerLevel >= 51 && TruePlayerLevel <= 100) activationbasis = 0.125;
		else if (TruePlayerLevel >= 101 && TruePlayerLevel <= 200) activationbasis = 0.25;
		else if (TruePlayerLevel >= 201 && TruePlayerLevel <= 500) activationbasis = 0.5;
		else if (TruePlayerLevel >= 501) activationbasis = 0.9375;
		sielsgracecooldown *= (1.0 + ((sielsgraceactivations) * activationbasis));
		
		if (owner && owner.CountInv("KCPowerKampoul")) sielsgracecooldown *= 0.25;
		if (type >= 1) sielsgracecooldown *= 0.25;
		A_SetInventory("sielsgracecooldown",sielsgracecooldown);

		//Console.Printf("sielsgracecooldown: %d, sielsgraceluckcooldown: %d, levelbasis: %.8f, activationbasis: %.8f", sielsgracecooldown, sielsgraceluckcooldown, levelbasis, activationbasis);
	}
	
	string ReturnKeyBind1(string keybindget)
	{
		string LegendStr = "";
		string UserKeyString;
		Array<String> UserKeys;
		
		UserKeys.Clear();
		UserKeyString = UIKeybinds.getKeyboard(keybindget);
		if (UserKeyString != "")
		{
			UserKeyString.Split(UserKeys,", ");
			if (UserKeys[0] == "Space") UserKeys[0] = "SBar";
			if (UserKeys[0] == "CapsLock") UserKeys[0] = "CapsL";
			LegendStr.AppendFormat("%s", UserKeys[0]);
		}
		else 
		{
			LegendStr.AppendFormat("\c[red]unb\c-");
		}
		return LegendStr;
	}
	
	bool A_CheckTimeFreeze()
	{
		bool check = false;
		string nm, nn, no;
		nm = "KCTimeFreezer1";
		nn = "KCTimeFreezer2";
		no = "KCTimeFreezer3";
		if (owner)
		{
			if (owner.CountInv(nm) || 
					owner.CountInv(nn) || 
					owner.CountInv(no)) 
			{
				check = true;
			}
		}
		return check;
	}
	
	void ExtraneousSpawns()
	{
		if (owner)
		{
			if (level.GetChecksum() == 'd5f64e02679a81b82006af34a6a8eac3') // plutonia.wad map32
			{
				actor mo;
				if (level.maptime == 0) mo = Spawn("RandomModPack", (832,1600,0), NO_REPLACE);
				if (level.maptime == 1) mo = Spawn("RandomModPack", (2336,-1440,0), NO_REPLACE);
				if (level.maptime == 2) mo = Spawn("RandomModPack", (1760,-864,0), NO_REPLACE);
				if (level.maptime == 3) mo = Spawn("RandomModPack", (-352,112,0), NO_REPLACE);
				if (level.maptime == 4) mo = Spawn("RandomModPack", (-2016,672,0), NO_REPLACE);
			}
		}
	}
	
	override void DoEffect()
	{
		let playeractor = KCPlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a non-Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect();
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			// Load in Globalvars [Start]
			let globalvars = KCGlobalVariables.Get();
			if (globalvars)
			{
				titemadd.Resize(3);
				// Initalization Stuff
				InitStuff();
				
				// Extraneous Spawns
				ExtraneousSpawns();
				
				timeusemulti = random(2,3); // random(1,1,1,1,1,1,1,2);
				
				if (owner.CountInv("PowerStrength") || 
						owner.CountInv("KCPowerStrength")) 
				{
					berserked = true;
				}
				else 
				{
					berserked = false;
				}
				
				LVLfactArmr = 0.02;
				if (TrueGameSkill <= SKILL_VERY_EASY) LVLfactArmr = 0.04;
				if (TrueGameSkill == SKILL_EASY) LVLfactArmr = 0.035;
				if (TrueGameSkill == SKILL_NORMAL) LVLfactArmr = 0.03;
				if (TrueGameSkill == SKILL_HARD) LVLfactArmr = 0.025;
				if (TrueGameSkill >= SKILL_VERY_HARD) LVLfactArmr = 0.02;
				if (A_CheckForHeiwa()) LVLfactArmr *= 0.5;
													else LVLfactArmr *= 0.25;
				if (owner.waterlevel >= 3) LVLfactArmr *= 0.75;
				else if (owner.waterlevel == 2) LVLfactArmr *= 0.91667;
				else if (owner.waterlevel == 1) LVLfactArmr *= 0.975;
				
				ATKfactArmr = 0.02;
				if (TrueGameSkill <= SKILL_VERY_EASY) ATKfactArmr = 0.08;
				if (TrueGameSkill == SKILL_EASY) ATKfactArmr = 0.07;
				if (TrueGameSkill == SKILL_NORMAL) ATKfactArmr = 0.06;
				if (TrueGameSkill == SKILL_HARD) ATKfactArmr = 0.05;
				if (TrueGameSkill >= SKILL_VERY_HARD) ATKfactArmr = 0.04;
				if (A_CheckForHeiwa()) ATKfactArmr *= 0.375;
													else ATKfactArmr *= 0.25;
				if (owner.waterlevel >= 3) ATKfactArmr *= 0.75;
				else if (owner.waterlevel == 2) ATKfactArmr *= 0.91667;
				else if (owner.waterlevel == 1) ATKfactArmr *= 0.975;
				
				LVLfactWeap = 0.02;
				if (TrueGameSkill <= SKILL_VERY_EASY) LVLfactWeap = 0.04;
				if (TrueGameSkill == SKILL_EASY) LVLfactWeap = 0.035;
				if (TrueGameSkill == SKILL_NORMAL) LVLfactWeap = 0.03;
				if (TrueGameSkill == SKILL_HARD) LVLfactWeap = 0.025;
				if (TrueGameSkill >= SKILL_VERY_HARD) LVLfactWeap = 0.02;
				if (A_CheckForHeiwa()) LVLfactWeap *= 0.5;
													else LVLfactWeap *= 0.25;
				if (owner.waterlevel >= 3) LVLfactWeap *= 0.75;
				else if (owner.waterlevel == 2) LVLfactWeap *= 0.91667;
				else if (owner.waterlevel == 1) LVLfactWeap *= 0.975;
				
				ATKfactWeap = 0.02;
				if (TrueGameSkill <= SKILL_VERY_EASY) ATKfactWeap = 0.08;
				if (TrueGameSkill == SKILL_EASY) ATKfactWeap = 0.07;
				if (TrueGameSkill == SKILL_NORMAL) ATKfactWeap = 0.06;
				if (TrueGameSkill == SKILL_HARD) ATKfactWeap = 0.05;
				if (TrueGameSkill >= SKILL_VERY_HARD) ATKfactWeap = 0.04;
				if (A_CheckForHeiwa()) ATKfactWeap *= 0.375;
													else ATKfactWeap *= 0.25;
				if (owner.waterlevel >= 3) ATKfactWeap *= 0.75;
				else if (owner.waterlevel == 2) ATKfactWeap *= 0.91667;
				else if (owner.waterlevel == 1) ATKfactWeap *= 0.975;
				
				spbkpkmaxhealthcarry = MaxHealthTrue;
				if (TrueGameSkill <= SKILL_VERY_EASY) spbkpkmaxhealthcarry = MaxHealthTrue * (1.375);
				if (TrueGameSkill == SKILL_EASY) spbkpkmaxhealthcarry = MaxHealthTrue * (1.1875);
				if (TrueGameSkill == SKILL_HARD) spbkpkmaxhealthcarry = MaxHealthTrue * (0.8125);
				if (TrueGameSkill >= SKILL_VERY_HARD) spbkpkmaxhealthcarry = MaxHealthTrue * (0.625);
				if (owner.CountInv("BackPackTier1"))
				{
					if (owner.CountInv("BackPackTier2")) spbkpkmaxhealthcarry *= 1.75;
																					else spbkpkmaxhealthcarry *= 1.25;
				}
				if (TrueGameSkill <= SKILL_VERY_EASY)
				{
					spbkpkarmorbonus = 0.16;
					spbkpkmedibigbonus = 0.40;
				}
				if (TrueGameSkill == SKILL_EASY)
				{
					spbkpkarmorbonus = 0.13;
					spbkpkmedibigbonus = 0.325;
				}
				if (TrueGameSkill == SKILL_NORMAL)
				{
					spbkpkarmorbonus = 0.10;
					spbkpkmedibigbonus = 0.25;
				}
				if (TrueGameSkill == SKILL_HARD)
				{
					spbkpkarmorbonus = 0.07;
					spbkpkmedibigbonus = 0.175;
				}
				if (TrueGameSkill >= SKILL_VERY_HARD)
				{
					spbkpkarmorbonus = 0.04;
					spbkpkmedibigbonus = 0.10;
				}
				double fact = ((owner.CountInv("SpecialBackpackBonus") - 1) * spbkpkmedibigbonus);
				spbkpkmaxhealthcarry *= (1.0 + fact);
				let medbag = MediBag(owner.FindInventory("MediBag",false));
				if (A_CheckForHeiwa())
				{
					if (owner.CountInv("SpecialBackpackBonus"))
					{
						if (!medbag) 
						{
							owner.A_GiveInventory("Medibag",spbkpkmaxhealthcarry);
							let medbag2 = MediBag(owner.FindInventory("MediBag",false));
							if (medbag2) 
							{
								medbag2.Amount = medbag2.MaxAmount = medbag2.InterHubAmount = spbkpkmaxhealthcarry;
							}
							/*
							int tempval = CountInv("TimeSeraphBangle");
							let tsb = TimeSeraphBangle(owner.FindInventory("TimeSeraphBangle",false));
							if (tsb) tsb.Destroy();
							owner.A_SetInventory("TimeSeraphBangle",1);
							if (tempval <= 0) owner.A_SetInventory("TimeSeraphBangle",0);
							
							tempval = CountInv("TimeSeraphPocketWatch");
							let tspw = TimeSeraphPocketWatch(owner.FindInventory("TimeSeraphPocketWatch",false));
							if (tspw) tspw.Destroy();
							owner.A_SetInventory("TimeSeraphPocketWatch",1);
							if (tempval <= 0) owner.A_SetInventory("TimeSeraphPocketWatch",0);

							tempval = CountInv("TimeSeraphCharm");
							let tsc = TimeSeraphCharm(owner.FindInventory("TimeSeraphCharm",false));
							if (tsc) tsc.Destroy();
							owner.A_SetInventory("TimeSeraphCharm",1);
							if (tempval <= 0) owner.A_SetInventory("TimeSeraphCharm",0);
							*/
						}
					}
					else if (medbag) medbag.Destroy();
				}
				else if (medbag) medbag.Destroy();
				
				if (!fighttimermod) fighttimermod = randompick(4,8,8,16,16,16,16,16);
				
				// Mode Check
				ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
				if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom
				if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
				if (kcdebug_miscitemdebug) Console.Printf("%d", ClassicDoomType);
				buttons = owner.GetPlayerInput(INPUT_BUTTONS);
				TrueGameSkill = skill;
				
				// Check Heiwa's Weapons
				if (A_CheckForHeiwa()) 
				{
					string nm;
					nm = "FistMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "ChainsawMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "PistolMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "ShotgunMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "SuperShotgunMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "ChaingunMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "RocketLauncherMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "PlasmaRifleMarine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
					nm = "BFG9000Marine"; if (owner.CountInv(nm)) { owner.SetInventory(nm,0); }
				}
				
				if (itemtimer <= 2)
				{
					if (itemtimer <= 1)
					{
						timefreeze2levellearned = random(18,25); // random(36,50);
						timefreeze3levellearned = random(30,random(42,43)); // random(42,62);
						if (timefreeze3levellearned < timefreeze2levellearned) timefreeze3levellearned = timefreeze2levellearned;
					}
					
					if (itemtimer >= 1)
					{
						owner.A_SetInventory("TimeSeraphBangle",1);
						owner.A_SetInventory("TimeSeraphBangle",0);
						titemadd[2] = 1;
						owner.A_SetInventory("TimeSeraphPocketWatch",1);
						owner.A_SetInventory("TimeSeraphPocketWatch",0);
						titemadd[1] = 1;
						owner.A_SetInventory("TimeSeraphCharm",1);
						owner.A_SetInventory("TimeSeraphCharm",0);
						titemadd[0] = 1;
					}
					
					// Init Level Table
					LevelCap = 1000;
					LevelExpRequirement.Resize((LevelCap+1));
					
					// EXP Tables
					if (InitEXPTables == 0)
					{
						double ExpValue;
						int BaseEXPRequirement = 128; // clamp(kc_baseexprequirement, 250, 11200);
						BaseEXPRequirement *= (0.875 + (TrueGameSkill * 0.0625));

						double BaseExtra = 1; // clamp(kc_baseexpextra, 0, 100);
						double BaseAccel1 = 6; // clamp(kc_baseexpaccel1, 0, 100);
						double BaseAccel2 = 0.0384; // clamp(kc_baseexpaccel2, 0.0, 5.0);
						double BaseMulti1 = 48; // clamp(kc_expmulti1, 1, 1024);
						double BaseMulti2 = 50; // clamp(kc_expmulti2, 1, 10000);
						
						double BaseMulti3 = 1.0;
						int baseval;
						int addval;
						double mulval;
						int preval = 0;
						
						double BaseMulti3b = 2.0;
						double BaseMulti4 = 1.0;
						double BaseMulti5 = 0.01;

						// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
						for (int CuLv = 0; CuLv < (LevelCap+1); CuLv++)
						{
							if (CuLv >= 0 && CuLv <= 31) BaseMulti4 = 1.0;
							if (CuLv >= 32 && CuLv <= 56) BaseMulti4 = 1.334;
							if (CuLv >= 57 && CuLv <= 80) BaseMulti4 = 1.667;
							if (CuLv >= 81 && CuLv <= 100) BaseMulti4 = 2;
							if (CuLv >= 101 && CuLv <= 109) BaseMulti4 = 4;
							if (CuLv >= 110 && CuLv <= 118) BaseMulti4 = 6;
							if (CuLv >= 119 && CuLv <= 127) BaseMulti4 = 8;
							if (CuLv >= 128 && CuLv <= 136) BaseMulti4 = 10;
							if (CuLv >= 137 && CuLv <= 145) BaseMulti4 = 12;
							if (CuLv >= 146 && CuLv <= 154) BaseMulti4 = 14;
							if (CuLv >= 155 && CuLv <= 163) BaseMulti4 = 16;
							if (CuLv >= 164 && CuLv <= 172) BaseMulti4 = 18;
							if (CuLv >= 173 && CuLv <= 181) BaseMulti4 = 20;
							if (CuLv >= 182 && CuLv <= 190) BaseMulti4 = 22;
							if (CuLv >= 191 && CuLv <= 199) BaseMulti4 = 24;
							if (CuLv >= 200 && CuLv <= 219) BaseMulti4 = 26;
							if (CuLv >= 220 && CuLv <= 239) BaseMulti4 = 28;
							if (CuLv >= 240 && CuLv <= 259) BaseMulti4 = 30;
							if (CuLv >= 260 && CuLv <= 279) BaseMulti4 = 32;
							if (CuLv >= 280 && CuLv <= 299) BaseMulti4 = 34;
							if (CuLv >= 300 && CuLv <= 319) BaseMulti4 = 36;
							if (CuLv >= 320 && CuLv <= 339) BaseMulti4 = 38;
							if (CuLv >= 340 && CuLv <= 359) BaseMulti4 = 40;
							if (CuLv >= 360 && CuLv <= 379) BaseMulti4 = 42;
							if (CuLv >= 380 && CuLv <= 399) BaseMulti4 = 44;
							if (CuLv >= 400 && CuLv <= 439) BaseMulti4 = 46;
							if (CuLv >= 440 && CuLv <= 479) BaseMulti4 = 50;
							if (CuLv >= 480 && CuLv <= 519) BaseMulti4 = 52;
							if (CuLv >= 520 && CuLv <= 559) BaseMulti4 = 54;
							if (CuLv >= 560 && CuLv <= 599) BaseMulti4 = 56;
							if (CuLv >= 600 && CuLv <= 639) BaseMulti4 = 58;
							if (CuLv >= 640 && CuLv <= 679) BaseMulti4 = 60;
							if (CuLv >= 680 && CuLv <= 719) BaseMulti4 = 62;
							if (CuLv >= 720 && CuLv <= 759) BaseMulti4 = 64;
							if (CuLv >= 760 && CuLv <= 799) BaseMulti4 = 66;
							if (CuLv >= 800 && CuLv <= 849) BaseMulti4 = 68;
							if (CuLv >= 850 && CuLv <= 899) BaseMulti4 = 70;
							if (CuLv >= 900 && CuLv <= 949) BaseMulti4 = 72;
							if (CuLv >= 950 && CuLv <= 999) BaseMulti4 = 74;
							if (CuLv >= 1000) BaseMulti4 = 75;
							
							BaseMulti3 = (BaseMulti4 + (CuLv * ((BaseMulti4 * BaseMulti5) * BaseMulti3b)));
							
							baseval = BaseEXPRequirement * (((CuLv * BaseExtra) + 1));
							baseval *= (1.00 + ((CuLv + 1) * 0.000625));
							
							mulval = (((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2);
							addval = (((BaseEXPRequirement * (CuLv * BaseAccel2)) * BaseMulti3) * ((BaseMulti4) * 1.5));
							ExpValue = baseval;
							if (kcdebug_exptables) Console.Printf("ExpValue: %d (%d)", ExpValue, baseval);
							ExpValue *= mulval;
							if (kcdebug_exptables) Console.Printf("(*) ExpValue: %d (%.8f)", ExpValue, mulval);
							ExpValue += addval;
							if (kcdebug_exptables) Console.Printf("(+) ExpValue: %d (%d)", ExpValue, addval);
							
							if (CuLv > 0) 
							{
								preval = LevelExpRequirement[(CuLv-1)];
							}
							LevelExpRequirement[CuLv] = ExpValue;
							if (kcdebug_exptables) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d \cz(prev: \cy%d)\cz, Multi: %.8f, baseval: %d, mulval: %.8f, addval: %d, diff: %d\c-", CuLv, ExpValue, preval, BaseMulti3, baseval, mulval, addval, (ExpValue-preval));
						}
						if (kcdebug_exptables) Console.Printf("BaseEXPRequirement: %4f, BaseExtra: %4f / 100, BaseAccel1: %4f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2);

						InitEXPTables++;
					}
				}
				
				// Initial Stats Setup
				if (ClassCheck <= 6)
				{
					if (ClassCheck <= 0) 
					{
						PlayerLevel = 0;
						MaxHealthTrue = 100;
						MaxPsychicPoints = 10;
						MaxMagicPoints = 10;
						PlayerATK = 2;
						PlayerDEF = 2;
						PlayerSPD = 2;
						PlayerVIT = 0;
						PlayerIQ = 0;
						PlayerGUTS = 0;
						PlayerLUCK = 2;

						atkfct = deffct = spdfct = jmpfct = suvfct = mssfct = evdfct = 1.00;
						double variance = 0.10;
						if (A_CheckForHeiwa())
						{
							heiwavhardmodifier = false;
							if (TrueGameSkill == SKILL_VERY_EASY)
							{
								MaxHealthTrue = 45;
								MaxPsychicPoints = 15;
								MaxMagicPoints = 15;
								variance = 0.05;
							}
							if (TrueGameSkill == SKILL_EASY)
							{
								MaxHealthTrue = 45; 
								MaxPsychicPoints = 15;
								MaxMagicPoints = 15;
								variance = 0.075;
							}
							if (TrueGameSkill == SKILL_NORMAL)
							{
								MaxHealthTrue = 30; 
								MaxPsychicPoints = 10;
								MaxMagicPoints = 10;
								variance = 0.10;
							}
							if (TrueGameSkill == SKILL_HARD)
							{
								MaxHealthTrue = 30; 
								MaxPsychicPoints = 10;
								MaxMagicPoints = 10;
								variance = 0.125;
							}
							if (TrueGameSkill == SKILL_VERY_HARD)
							{
								heiwavhardmodifier = GetCVar("kcheiwa_vhardmodifier");
								MaxHealthTrue = 30;
								MaxPsychicPoints = 10;
								MaxMagicPoints = 10;
								variance = 0.15;
								if (heiwavhardmodifier) 
								{
									MaxHealthTrue = 15;
									MaxPsychicPoints = 5;
									MaxMagicPoints = 5;
									variance = 0.30;
								}
							}
						}
						CurrentPsychicPoints = MaxPsychicPoints;
						CurrentMagicPoints = MaxMagicPoints;
						if (heiwavhardmodifier) 
						{
							PlayerLUCK *= 2.5;
							TempLUCK = PlayerLUCK;
							atkfct += frandom[statitem](-(variance*0.125),(variance*1.875));
							deffct += frandom[statitem](-(variance*1.875),(variance*0.125));
							spdfct += frandom[statitem](-(variance*0.125),(variance*1.875));
							jmpfct += frandom[statitem](-(variance*0.125),(variance*1.875));
							suvfct += frandom[statitem](-(variance*0.125),(variance*1.875));
							mssfct += frandom[statitem](-(variance*0.125),(variance*1.875));
							evdfct += frandom[statitem](-(variance*0.125),(variance*1.875));
						}
						else
						{
							TempLUCK = PlayerLUCK;
							atkfct += frandom[statitem](-variance,variance);
							deffct += frandom[statitem](-variance,variance);
							spdfct += frandom[statitem](-variance,variance);
							jmpfct += frandom[statitem](-variance,variance);
							suvfct += frandom[statitem](-variance,variance);
							mssfct += frandom[statitem](-variance,variance);
							evdfct += frandom[statitem](-variance,variance);
						}
						if (kcdebug_startupinfo) Console.Printf("atkfct: %.8f, deffct: %.8f, spdfct: %.8f, jmpfct: %.8f, suvfct: %.8f, Luck: %d", atkfct, deffct, spdfct, jmpfct, suvfct, PlayerLUCK);
						
						
						if (MaxHealthTrue < 1) MaxHealthTrue = 1;
						HealthLevelAdd = 0;
						HealthNoRPGAdd = 0;
						HealthNoRPGAdd2 = 0;
						PPLevelAdd = 0;
						PPNoRPGAdd = 0;
						PPNoRPGAdd2 = 0;
						MPLevelAdd = 0;
						MPNoRPGAdd = 0;
						MPNoRPGAdd2 = 0;
						owner.player.health = owner.player.mo.health = CurrentHealth = MaxHealthTrue;
						owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
						owner.A_SetInventory("PlayerMaxPP",MaxPsychicPoints);
						owner.A_SetInventory("PlayerMaxMP",MaxMagicPoints);
						owner.A_SetInventory("PlayerATK",PlayerATK);
						owner.A_SetInventory("PlayerDEF",PlayerDEF);
						owner.A_SetInventory("PlayerSPD",PlayerSPD);
						owner.A_SetInventory("PlayerGUTS",PlayerGUTS);
						owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
						BaseStartMaxHealth = MaxHealthTrue; // Sets the original Max Health as at the start of a game [for various checks, including Sigil damage]
						BaseStartMaxPP = MaxPsychicPoints;
						BaseStartMaxMP = MaxMagicPoints;
						if (kcdebug_startupinfo) Console.Printf("MaxHP: %d", MaxHealthTrue);
					}
					
					// Inventory/Weapon Force-Start Options
					if (A_CheckForHeiwa())
					{
						timefreeze1timesused = kcheiwa_timefreeze1times;
						if (kcheiwa_startspbkpk) owner.A_SetInventory("SpecialBackpackBonus",kcheiwa_startspbkpk);
						if (kcheiwa_startcharm) owner.A_SetInventory("TimeSeraphCharm",1);
						if (kcheiwa_startwatch) owner.A_SetInventory("TimeSeraphPocketWatch",1);
						if (kcheiwa_startbangle) owner.A_SetInventory("TimeSeraphBangle",1);
						if (kcheiwa_startknife) owner.A_SetInventory("KnifeHeiwa",1);
						if (kcheiwa_startglock) owner.A_SetInventory("Glock21",1);
						if (kcheiwa_startblaster) 
						{
							if (kcheiwa_startblaster == 1 || kcheiwa_startblaster >= 4) owner.A_SetInventory("BlasterPistol",1);
							if (kcheiwa_startblaster == 2 || kcheiwa_startblaster >= 5) owner.A_SetInventory("DualBlasterPistols",1);
							if (kcheiwa_startblaster >= 3) owner.A_SetInventory("BlasterPistolUpgrade",1);
						}
						if (kcheiwa_startriotgun) 
						{
							if (kcheiwa_startriotgun == 1 || kcheiwa_startriotgun == 3) owner.A_SetInventory("RiotGun",1);
							if (kcheiwa_startriotgun >= 2) owner.A_SetInventory("RiotGunUpgrade",1);
						}
						if (kcheiwa_starttommygun) 
						{
							if (kcheiwa_starttommygun == 1 || kcheiwa_starttommygun >= 4) owner.A_SetInventory("TommyGun",1);
							if (kcheiwa_starttommygun == 2 || kcheiwa_starttommygun >= 5) owner.A_SetInventory("DualTommyGuns",1);
							if (kcheiwa_starttommygun >= 3) owner.A_SetInventory("TommyGunUpgrade",1);
						}
						if (kcheiwa_startblastrifle) 
						{
							if (kcheiwa_startblastrifle == 1 || kcheiwa_startblastrifle == 3) owner.A_SetInventory("BlasterRifle",1);
							if (kcheiwa_startblastrifle >= 2) owner.A_SetInventory("BlasterRifleUpgrade",1);
						}
						if (kcheiwa_startdevastator) 
						{
							if (kcheiwa_startdevastator == 1 || kcheiwa_startdevastator >= 4) owner.A_SetInventory("Devastator",1);
							if (kcheiwa_startdevastator == 2 || kcheiwa_startdevastator >= 5) owner.A_SetInventory("DualDevastators",1);
							if (kcheiwa_startdevastator >= 3) owner.A_SetInventory("DevastatorUpgrade",1);
						}
						if (kcheiwa_startdeviation) owner.A_SetInventory("Deviation",1);
						if (kcheiwa_starttesla) 
						{
							if (kcheiwa_starttesla >= 1) owner.A_SetInventory("TeslaCannon",1);
							if (kcheiwa_starttesla >= 2) owner.A_SetInventory("DualTeslaCannons",1);
						}
						if (kcheiwa_startincinerator) owner.A_SetInventory("Incinerator",1);
						if (kcheiwa_startbhgen) owner.A_SetInventory("BHGen",1);
						if (kcheiwa_startcalamityblade) 
						{
							if (kcheiwa_startcalamityblade == 1 || kcheiwa_startcalamityblade == 3) owner.A_SetInventory("CalamityBlade",1);
							if (kcheiwa_startcalamityblade >= 2) owner.A_SetInventory("CalamityBladeUpgrade",1);
						}
						if (kcheiwa_starttransloc) owner.A_SetInventory("Translocator",1);
						if (kcheiwa_startsawthrower) owner.A_SetInventory("SawThrower",1);
						if (kcheiwa_startimpaler) owner.A_SetInventory("ImpalerXBow",1);
					}
					else
					{
						if (kcdoomg_startglock) owner.A_SetInventory("Glock21",1);
						if (kcdoomg_starttommygun) 
						{
							if (kcdoomg_starttommygun >= 1) owner.A_SetInventory("TommyGun",1);
							if (kcdoomg_starttommygun >= 2) owner.A_SetInventory("DualTommyGuns",1);
						}
						if (kcdoomg_startdevastator) 
						{
							if (kcdoomg_startdevastator >= 1) owner.A_SetInventory("Devastator",1);
							if (kcdoomg_startdevastator >= 2) owner.A_SetInventory("DualDevastators",1);
						}
						if (kcdoomg_starttesla) 
						{
							if (kcdoomg_starttesla >= 1) owner.A_SetInventory("TeslaCannon",1);
							if (kcdoomg_starttesla >= 2) owner.A_SetInventory("DualTeslaCannons",1);
						}
						if (kcdoomg_startbhgen) owner.A_SetInventory("BHGen",1);
						if (kcdoomg_starttransloc) owner.A_SetInventory("Translocator",1);
						if (kcdoomg_startsawthrower) owner.A_SetInventory("SawThrower",1);
						if (kcdoomg_startimpaler) owner.A_SetInventory("ImpalerXBow",1);
					}
				}
				if (kc_expgains) 
				{
					TruePlayerLevel = PlayerLevel;
					TruePlayerATK = PlayerATK;
					TruePlayerDEF = PlayerDEF;
					TruePlayerSPD = PlayerSPD;
					TruePlayerGUTS = PlayerGUTS;
				}
				else
				{
					TruePlayerLevel = 0;
					TruePlayerATK = 0;
					TruePlayerDEF = 0;
					TruePlayerSPD = 0;
					TruePlayerGUTS = 0;
				}
				
				// Misc
				tfaftimgbasefade = 10;

				int tfaftimgbasefadeext;
				tfaftimgbasefadeext += (TruePlayerLevel * 0.2);
				tfaftimgbasefadeext += (timefreeze1timesused * 0.025);
				tfaftimgbasefadeext += (timefreeze2timesused * 0.05);
				tfaftimgbasefadeext += (timefreeze3timesused * 0.025);
				tfaftimgbasefadeext *= frandompick(0.167,0.167,0.167,0.167,0.167,0.167,0.167,0.167,0.167,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.334,0.5);
				tfaftimgbasefade += tfaftimgbasefadeext;
				tfaftimgbasefade *= frandom(1.0,1.4);
				tfaftimgbasefade2 = ((tfaftimgbasefade * 2) + random(-1,1));
				if (kcdebug_timefreezeafterimage) Console.Printf("\c[HeiwaDeluge]tfaftimgbasefade: %d, tfaftimgbasefade2: %d", tfaftimgbasefade, tfaftimgbasefade2);
				
				weapon = owner.player.ReadyWeapon;
				
				PlayerWaterLevel = owner.waterlevel;
				// Check if player can breath/talk underwater
				CanTalkUnderwater = 0;
				if (owner.waterlevel < 3) 
				{
					CanTalkUnderwater = 1;
				}
				else
				{
					if (owner.CountInv("PowerIronFeet") || 
							owner.CountInv("PowerIronFeet2") || 
							owner.CountInv("PowerNoDrown") || 
							owner.CountInv("PowerMask"))
					{
						CanTalkUnderwater = 2;
					}
					else
					{
						if (random[statitem](1,32) <= random[statitem](1,4)) CanTalkUnderwater = 1;
					}
				}
				if (kcdebug_airmeter) Console.Printf("CanTalkUnderwater %d", CanTalkUnderwater);
				DashTics = owner.CountInv("DashTics");
				
				//********
				//* Luck *
				//********
				LuckChecks();
				
				//*************************************
				//* [Poison/Damage/Bonus]Count Capper *
				//*************************************
				CountCapper();
				
				//***************
				//* Leveling Up *
				//***************
				LevelUpExpStuff();
				
				//********************************
				//* Armor Tier Give/Max Settings *
				//********************************
				ArmorTierStuff();
				
				//****************************
				//* Health/Max Health Checks *
				//****************************
				MaxHealthStuff();
				
				//*********************
				//* Cooldown Handling *
				//*********************
				CoolDownHandling();
				
				//*******************
				//* Misc HUD Timers *
				//*******************
				HUDStuff();
				
				//******************
				//* HP Regen/Degen *
				//******************
				HPRegenStuff();
				
				//***********
				//* Evasion *
				//***********
				EvasionStuff();
				
				//**************************
				//* Survival Rate [Buddha] *
				//**************************
				SurvivalStuff();
				
				//**************************
				//* Crit Rate Calculations *
				//**************************
				CritRateCalc();
				
				//********
				//* Mass *
				//********
				MassStuff();
				
				//*********
				//* JumpZ *
				//*********
				JumpStuff();
				
				//*************************
				//* Mercy Invulnerability *
				//*************************
				MercyInvulnStuff();
				
				// Sleep Check
				if (owner.CountInv("FallenAsleep"))
				{
					owner.player.cheats |= CF_FROZEN; // Turns on Freezing
					owner.player.cheats |= CF_TOTALLYFROZEN; // Turns on Total Freezing
				}
				else
				{
					owner.player.cheats &= ~CF_FROZEN; // Turns off Total Freezing
					owner.player.cheats &= ~CF_TOTALLYFROZEN; // Turns off Total Freezing
				}

				//**************************************************
				//* RenderStyle Stuff [Dashing, Invisibility, etc] *
				//**************************************************
				RenderStyleStuff();
				
				//***************************
				//* Inventory/Weapon Limits *
				//***************************
				InventoryWeaponLimits();
				
				//************
				//* Counters *
				//************
				GameStatTracker();
				
				//**********************
				//* Weapon Check Stuff *
				//**********************
				WeaponCheck();
				
				//*********************
				//* Flat Defense Calc *
				//*********************
				FlatDefenseCalc();
				
				//******************************
				//* Time Seraph Armor Trackers *
				//******************************
				TimeSeraphArmorStuff();
				
				//************************
				//* Time Freeze Trackers *
				//************************
				TimeFreezeStuff();
				
				//*************
				//* Time Slow *
				//*************
				if (kcdebug_timeslowinterval)
				{
					if (level.time % (kcdebug_timeslowinterval + 1)) owner.A_SetInventory("DebugTimeFreezer",1);
					else owner.A_SetInventory("DebugTimeFreezer",0);
				}
				else
				{
					if (owner.CountInv("DebugTimeFreezer")) owner.A_SetInventory("DebugTimeFreezer",0);
				}
				
				//*************************************
				//*Blacken Screen if Blinded or Asleep*
				//*************************************
				if (playeractor)
				{
					if (owner.CountInv("IsBlinded")) owner.A_SetBlend("00 00 00", 0.975, 25); // Constant Run
					if (owner.CountInv("FallenAsleep")) owner.A_SetBlend("00 00 00", 0.9875, 25); // Constant Run
				}
				
				//***************
				//* Land Damage *
				//***************
				LandDamageStuff();
				
				//*******************
				//* Set Max HP Item *
				//*******************
				owner.player.health = owner.player.mo.health = CurrentHealth;
				owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
				owner.A_SetInventory("PlayerMaxPP",MaxPsychicPoints);
				owner.A_SetInventory("PlayerMaxMP",MaxMagicPoints);
				
				tracerheight = (owner.height * 0.5);
				
				//*************************************
				//*************************************
				//*************************************
				// End Stuff
				EndStuff();
			}
			super.DoEffect();
		}
	}
	
	int A_CheckActualLevel(int type = 0)
	{
		int Level = 0;
		if (kc_expgains) 
		{
			if (type == 0) Level = PlayerLevel;
			if (type >= 1) Level = TruePlayerLevel;
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_CheckActualLevel - PlayerStatItem)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	void ArmorTierStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		name armorclasstype = "KCArmor";
		name armorclasstype2 = "ArmorBonusSilent";
		int currentarmoramt = Owner.CountInv(armorclasstype);
		
		armtier = playeractor.armortier;
	}
	
	void MaxHealthStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		HPRegenTimerMax = 3500; // - ((StaminaLevel * 5) * 35);
		HPDegenTimerMax = 3500; // + ((StaminaLevel * 5) * 17.5);
		PPRegenTimerMax = 700;
		PPDegenTimerMax = 700;
		MPRegenTimerMax = 700;
		MPDegenTimerMax = 700;
		CurrentHealth = owner.player.mo.health;
		double temp1 = ((CurrentHealth * 1.0) / (MaxHealthTrue * 1.0));
		ArmorHealthFactor = 1.00 / temp1;
		if (ArmorHealthFactor <= 3.3334) ArmorHealthFactor = 3.3334;
		if (ArmorHealthFactor >= 1.0000) 
		{
			ArmorHealthFactor = 1.0000;
			if (HealthRatio < 625)
			{
				ArmorHealthFactor = 1.1;
				if (HealthRatio < 167)
				{
					ArmorHealthFactor = 1.225;
					if (HealthRatio < 21)
					{
						ArmorHealthFactor = 1.5;
					}
				}
			}
		}
		//Console.Printf("ArmorHealthFactor: %.8f, temp1: %.8f", ArmorHealthFactor, temp1);
		
		int HealthBonusAdd2 = HealthBonusAdd;
		int HealthLevelAdd2 = HealthLevelAdd;
		int VitalityPiecesAdd = floor(int(VitalityPieces));
		HealthNoRPGAdd2 = 0;
		if (!kc_expgains)
		{
			if (skill <= 0) HealthBonusAdd2 *= 4.0;
			if (skill == 1) HealthBonusAdd2 *= 3.5;
			if (skill == 2) HealthBonusAdd2 *= 3.0;
			if (skill == 3) HealthBonusAdd2 *= 2.5;
			if (skill >= 4) HealthBonusAdd2 *= 2.0;
			HealthLevelAdd2 = 0;
			if (skill <= 0) HealthLevelAdd2 = (HealthNoRPGADD * 4.0);
			if (skill == 1) HealthLevelAdd2 = (HealthNoRPGADD * 3.5);
			if (skill == 2) HealthLevelAdd2 = (HealthNoRPGADD * 3.0);
			if (skill == 3) HealthLevelAdd2 = (HealthNoRPGADD * 2.5);
			if (skill >= 4) HealthLevelAdd2 = (HealthNoRPGADD * 2.0);
		}
		MaxHealthTrue = (BaseStartMaxHealth + int(HealthNoRPGAdd2) + HealthLevelAdd2 + HealthBonusAdd2);
		// Forces the game to immediately add 15 HP to player's current when a Vitality boosted level up occurs, so your HP difference is still consistant :V
		if (A_CheckForHeiwa()) 
		{
			MaxHealthTrue += int(VitalityPiecesAdd * 15);
			while (VitalityCurrHPBoosts < VitalityPiecesAdd)
			{
				CurrentHealth += 15;
				owner.player.health += 15;
				owner.player.mo.health += 15;
				VitalityCurrHPBoosts++;
			}
			
			if (kcdebug_maxhealthcalc) Console.Printf("\c[gold](MaxHealthStuff())\c- \c[green]MaxHealthTrue: %d\c-, BaseStartMaxHealth: %d, HealthNoRPGAdd2: %d (HealthNoRPGAdd: %d), HealthLevelAdd2: %d (HealthLevelAdd: %d), VitalityPiecesAdd: (%d * 15) (%.8f), VitalityCurrHPBoosts: %d, HealthBonusAdd2: %d (HealthBonusAdd: %d), \c[orange]HPRegenTimerMax: %d, HPDegenTimerMax: %d", MaxHealthTrue, BaseStartMaxHealth, int(HealthNoRPGAdd2), int(HealthNoRPGAdd), HealthLevelAdd2, HealthLevelAdd, VitalityPiecesAdd, VitalityPieces, VitalityCurrHPBoosts, HealthBonusAdd2, HealthBonusAdd, HPRegenTimerMax, HPDegenTimerMax);

			int PPBonusAdd2 = PPBonusAdd;
			int PPLevelAdd2 = PPLevelAdd;
			int IQPiecesAdd = floor(int(IQPieces));
			PPNoRPGAdd2 = 0;
			if (!kc_expgains)
			{
				if (skill <= 0) PPBonusAdd2 *= 4.0;
				if (skill == 1) PPBonusAdd2 *= 3.5;
				if (skill == 2) PPBonusAdd2 *= 3.0;
				if (skill == 3) PPBonusAdd2 *= 2.5;
				if (skill >= 4) PPBonusAdd2 *= 2.0;
				PPLevelAdd2 = 0;
				if (skill <= 0) PPLevelAdd2 = (PPNoRPGAdd * 4.0);
				if (skill == 1) PPLevelAdd2 = (PPNoRPGAdd * 3.5);
				if (skill == 2) PPLevelAdd2 = (PPNoRPGAdd * 3.0);
				if (skill == 3) PPLevelAdd2 = (PPNoRPGAdd * 2.5);
				if (skill >= 4) PPLevelAdd2 = (PPNoRPGAdd * 2.0);
			}
			MaxPsychicPoints = (BaseStartMaxPP + int(PPNoRPGAdd2) + PPLevelAdd2 + PPBonusAdd2);
			MaxPsychicPoints += int(IQPiecesAdd * 5);
			while (IQCurrPPBoosts < IQPiecesAdd)
			{
				CurrentPsychicPoints += 5;
				IQCurrPPBoosts++;
			}
			if (kcdebug_maxhealthcalc) Console.Printf("\c[gold](MaxHealthStuff())\c- \c[purple]MaxPsychicPoints: %d\c-, BaseStartMaxPP: %d, PPNoRPGAdd2: %d (PPNoRPGAdd: %d), PPLevelAdd2: %d (PPLevelAdd: %d), IQPiecesAdd: (%d * 5) (%.8f), IQCurrPPBoosts: %d, PPBonusAdd2: %d (PPBonusAdd: %d)", MaxPsychicPoints, BaseStartMaxPP, int(PPNoRPGAdd2), int(PPNoRPGAdd), PPLevelAdd2, PPLevelAdd, IQPiecesAdd, IQPieces, IQCurrPPBoosts, PPBonusAdd2, PPBonusAdd);


			int MPBonusAdd2 = MPBonusAdd;
			int MPLevelAdd2 = MPLevelAdd;
			int SensesPiecesAdd = floor(int(SensesPieces));
			MPNoRPGAdd2 = 0;
			if (!kc_expgains)
			{
				if (skill <= 0) MPBonusAdd2 *= 4.0;
				if (skill == 1) MPBonusAdd2 *= 3.5;
				if (skill == 2) MPBonusAdd2 *= 3.0;
				if (skill == 3) MPBonusAdd2 *= 2.5;
				if (skill >= 4) MPBonusAdd2 *= 2.0;
				MPLevelAdd2 = 0;
				if (skill <= 0) MPLevelAdd2 = (MPNoRPGAdd * 4.0);
				if (skill == 1) MPLevelAdd2 = (MPNoRPGAdd * 3.5);
				if (skill == 2) MPLevelAdd2 = (MPNoRPGAdd * 3.0);
				if (skill == 3) MPLevelAdd2 = (MPNoRPGAdd * 2.5);
				if (skill >= 4) MPLevelAdd2 = (MPNoRPGAdd * 2.0);
			}
			MaxMagicPoints = (BaseStartMaxMP + int(MPNoRPGAdd2) + MPLevelAdd2 + MPBonusAdd2);
			MaxMagicPoints += int(SensesPiecesAdd * 5);
			while (SensesCurrMPBoosts < SensesPiecesAdd)
			{
				CurrentMagicPoints += 5;
				SensesCurrMPBoosts++;
			}
			if (kcdebug_maxhealthcalc) Console.Printf("\c[gold](MaxHealthStuff())\c- \c[blue]MaxMagicPoints: %d\c-, BaseStartMaxMP: %d, MPNoRPGAdd2: %d (MPNoRPGAdd: %d), MPLevelAdd2: %d (MPLevelAdd: %d), SensesPiecesAdd: (%d * 5) (%.8f), SensesCurrMPBoosts: %d, MPBonusAdd2: %d (MPBonusAdd: %d)", MaxMagicPoints, BaseStartMaxMP, int(mPNoRPGAdd2), int(mPNoRPGAdd), MPLevelAdd2, MPLevelAdd, SensesPiecesAdd, SensesPieces, SensesCurrMPBoosts, MPBonusAdd2, MPBonusAdd);
		}
		else
		{
			if (kcdebug_maxhealthcalc) Console.Printf("\c[gold](MaxHealthStuff())\c- \c[green]MaxHealthTrue: %d\c-, BaseStartMaxHealth: %d, HealthNoRPGAdd2: %d (HealthNoRPGAdd: %d), HealthLevelAdd2: %d (HealthLevelAdd: %d), HealthBonusAdd2: %d (HealthBonusAdd: %d), \c[orange]HPRegenTimerMax: %d, HPDegenTimerMax: %d", MaxHealthTrue, BaseStartMaxHealth, int(HealthNoRPGAdd2), int(HealthNoRPGAdd), HealthLevelAdd2, HealthLevelAdd, HealthBonusAdd2, HealthBonusAdd, HPRegenTimerMax, HPDegenTimerMax);
		}
	}
	
	void CoolDownHandling()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		if (!A_CheckNoTimer() && A_CheckForHeiwa())
		{
			sielsgracecooldown = owner.CountInv("sielsgracecooldown");
			sielsgraceluckcooldown = owner.CountInv("sielsgraceluckcooldown");
			sielsgraceactivations = owner.CountInv("sielsgraceactivations");
			sielsgracetrueactivations = owner.CountInv("sielsgracetrueactivations");
			if (owner.health > 0 && 
					sielsgracecooldown && 
					sielsgraceactivations < 4)
			{
				sielsgraceactive = 0;
				sielsgracecooldown--;
				if (owner && owner.CountInv("KCPowerKampoul")) sielsgracecooldown -= randompick(3,4,4,4,4,5);
				owner.A_SetInventory("sielsgracecooldown",sielsgracecooldown);
				if (sielsgracecooldown <= 0) 
				{
					sielsgracecooldown = 0;
					if (!sielsgraceactive && sielsgraceactivations < 4) 
					{
						sielsgraceactive = 1;
						double fadetime = int(TICRATE*frandom(0.4167,0.5834));
						owner.A_SetBlend("87 68 99",0.000, fadetime, "87 68 99",0.25);
						owner.A_StopSound(1280);
						owner.A_StopSound(1281);
						owner.A_StopSound(1282);
						owner.A_StopSound(1283);
						owner.A_StopSound(1284);
						owner.A_StartSound("sielsgracea",1280,CHANF_DEFAULT,0.25,ATTN_NORM,1.0);
					}
				}
				if (kcdebug_survivalrate) Console.Printf("sielsgracecooldown: %d", sielsgracecooldown);
			}
			else
			if (sielsgracecooldown <= 0) 
			{
				sielsgracecooldown = 0;
				owner.A_SetInventory("sielsgracecooldown",sielsgracecooldown);
				if (!sielsgraceactive && sielsgraceactivations < 4) 
				{
					sielsgraceactive = 1;
					double fadetime = int(TICRATE*frandom(0.4167,0.5834));
					owner.A_SetBlend("87 68 99",0.000, fadetime, "87 68 99",0.25);
				}
			}
			if (owner.health > 0 &&
					sielsgraceluckcooldown)
			{
				if ((owner.CountInv("KCPowerKampoul") && 
						 timestopactivetics > 0 &&
						 random(1,4) <= 3)) { }
				else 
				{
					sielsgraceluckcooldown--;
				}
				owner.A_SetInventory("sielsgraceluckcooldown",sielsgraceluckcooldown);
			}
			if (sielsgraceactive)
			{
				sielsgracecooldown = 0;
				if (kcdebug_survivalrate) Console.Printf("sielsgraceactive: %d", sielsgraceactive);
			}
			owner.A_SetInventory("sielsgraceactivations",sielsgraceactivations);
			owner.A_SetInventory("sielsgracetrueactivations",sielsgracetrueactivations);
			
			if (owner.health > 0)
			{
				if (tfcooldown > 0) tfcooldown--;
				if (whistlecooldown > 0) whistlecooldown--;
				if (OneLinerCooldown > 0) OneLinerCooldown--;
				if (OneLinerTimerCool > 0) OneLinerTimerCool--;
				if (TSArtifactSpawnCooldown > 0) 
				{
					if (TSArtifactSpawnWarmUp > 0) TSArtifactSpawnWarmUp = 0;
					TSArtifactSpawnCooldown--;
				}
				else
				{
					if (TSArtifactSpawnCooldown < 0) TSArtifactSpawnCooldown = 0;
					TSArtifactSpawnWarmUp++;
				}
				if (kcdebug_onelinertimers) Console.Printf("OneLinerCooldown: %d, OneLinerTimerCool: %d", OneLinerCooldown, OneLinerTimerCool);
			}
			
			if (drowndebufflevel > 0)
			{
				owner.A_SetInventory("DrownDebuffBase",1);
				if (kcdebug_airmeter) Console.Printf("drowndebufflevel: %d, drowndebufftimer: %d", drowndebufflevel ,drowndebufftimer);
				if (owner.CountInv("AirMeter") > 0)
				{
					if (drowndebuginit)
					{
						drowndebuffmaxtimer = drowndebufftimer;
						drownmaxtimermod = (drowndebuffmaxtimer / drowndebufflevel);
						drowndebuginit = false;
					}
					if (drowndebufftimer) 
					{
						drowndebufftimer--;
						if (drowndebufftimer % drownmaxtimermod == 1)
						{
							drowndebufflevel--;
							if (drowndebufflevel <= 0) 
							{
								drowndebufflevel = 0;
								drowndebufftimer = 0;
								owner.A_SetInventory("DrownDebuffBase",0);
							}
						}
					}
					else 
					{
						drowndebufflevel = 0;
						owner.A_SetInventory("DrownDebuffBase",0);
					}
				}
			}
			else
			{
				drowndebufftimer = 0;
				owner.A_SetInventory("DrownDebuffBase",0);
			}
				
			if (LMPieBerserkGrabbed > 0)
			{
				if (LMPieBerserkCooldown > 0) 
				{
					LMPieBerserkCooldown--;
				}
				else
				{
					LMPieBerserkGrabbed = 0;
					LMPieBerserkCooldown = 0;
				}
			}
			
			if (kcdebug_misccooldowntimers)
			{
				Console.Printf("\c[HeiwaDeluge]sielsgracecooldown: %d\c-, whistlecooldown: %d, OneLinerCooldown: %d, OneLinerTimerCool: %d, \c[HeiwaDeluge]TSArtifactSpawnCooldown: %d\c-, \c[gold]LMPieBerserkCooldown: %d\c-, drowndebufftimer: %d", 
												sielsgracecooldown, 
												whistlecooldown,
												OneLinerCooldown,
												OneLinerTimerCool, 
												TSArtifactSpawnCooldown,
												LMPieBerserkCooldown,
												drowndebufftimer);
			}
		}
	}
	
	void HUDStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		
		if (!A_CheckNoTimer())
		{
			if (ArmorGrabTimer > 0) ArmorGrabTimer--;
			
			if (HPDmgHUDTimer > 0) HPDmgHUDTimer--;
			else
			{
				HPHUDShakeType = 0;
				HPDmgHUDAmt = 0;
			}
			if (APDmgHUDTimer > 0) APDmgHUDTimer--;
			else
			{
				APHUDShakeType = 0;
				APDmgHUDAmt = 0;
			}
			if (TSADmgHUDTimer > 0) TSADmgHUDTimer--;
			else
			{
				TSAHUDShakeType = 0;
				TSADmgHUDAmt = 0;
			}
			if (HPRecHUDTimer > 0) HPRecHUDTimer--; 
			else 
			{
				HPRecHUDAmt = 0;
				HPHUDPulseType = 0;
				HPHUDPulseTimeP = 0;
			}
			if (APRecHUDTimer > 0) APRecHUDTimer--; 
			else
			{
				APRecHUDAmt = 0;
				APHUDPulseType = 0;
				APHUDPulseTimeP = 0;
			}
			if (TSARecHUDTimer > 0) TSARecHUDTimer--; 
			else
			{
				TSARecHUDAmt = 0;
				TSAHUDPulseType = 0;
				TSAHUDPulseTimeP = 0;
			}
			if (EXPGainHUDCooldownTimer > 0)
			{
				int decrementmod = 1;
				if (TruePlayerLevel >= 50) decrementmod = random(1,randompick(1,1,1,1,1,1,1,2));
				if (TruePlayerLevel >= 100) decrementmod = random(1,randompick(1,1,1,1,1,1,2,2));
				if (TruePlayerLevel >= 150) decrementmod = random(1,randompick(1,1,1,1,1,2,2,2));
				if (TruePlayerLevel >= 200) decrementmod = random(1,randompick(1,1,1,1,2,2,2,2));
				if (TruePlayerLevel >= 250) decrementmod = random(1,randompick(1,1,1,2,2,2,2,2));
				if (TruePlayerLevel >= 300) decrementmod = random(1,randompick(1,1,2,2,2,2,2,2));
				if (TruePlayerLevel >= 350) decrementmod = random(1,randompick(1,2,2,2,2,2,2,2));
				if (TruePlayerLevel >= 400) decrementmod = random(1,randompick(2,2,2,2,2,2,2,2));
				if (TruePlayerLevel >= 450) decrementmod = random(1,randompick(2,2,2,2,2,2,2,3));
				if (TruePlayerLevel >= 500) decrementmod = random(1,randompick(2,2,2,2,2,2,3,3));
				
				if (A_CheckTimeFreeze())
				{
					nm = "KCTimeFreezer1";
					nn = "KCTimeFreezer2";
					no = "KCTimeFreezer3";
					if (owner.CountInv(nm)) decrementmod *= 10;
					if (owner.CountInv(nn)) decrementmod *= 20;
					if (owner.CountInv(no)) decrementmod *= 40; 
				}
				
				if (level.time % decrementmod == 0) 
				{
					EXPGainHUDCooldownTimer--;
				}
				if (EXPGainHUDCooldownTimer >= 525) EXPGainHUDCooldownTimer = 525;
				if (kcdebug_misccooldowntimers) Console.Printf("decrementmod: %d, EXPGainHUDCooldownTimer: %d, EXPGainHUDTimer: %d", decrementmod, EXPGainHUDCooldownTimer, EXPGainHUDTimer);
			}
			else
			{
				EXPGainHUDCooldownTimer = 0;
				if (EXPGainHUDTimer > 0)
				{
					int decrementmod = 1;
					if (TruePlayerLevel >= 20) decrementmod = random(1,randompick(1,1,1,1,1,1,1,2));
					if (TruePlayerLevel >= 40) decrementmod = random(1,randompick(1,1,1,1,1,1,2,2));
					if (TruePlayerLevel >= 60) decrementmod = random(1,randompick(1,1,1,1,1,2,2,2));
					if (TruePlayerLevel >= 80) decrementmod = random(1,randompick(1,1,1,1,2,2,2,2));
					if (TruePlayerLevel >= 100) decrementmod = random(1,randompick(1,1,1,2,2,2,2,2));
					if (TruePlayerLevel >= 120) decrementmod = random(1,randompick(1,1,2,2,2,2,2,2));
					if (TruePlayerLevel >= 140) decrementmod = random(1,randompick(1,2,2,2,2,2,2,2));
					if (TruePlayerLevel >= 160) decrementmod = random(1,randompick(2,2,2,2,2,2,2,2));
					if (TruePlayerLevel >= 180) decrementmod = random(1,randompick(2,2,2,2,2,2,2,3));
					if (TruePlayerLevel >= 200) decrementmod = random(1,randompick(2,2,2,2,2,2,3,3));
					if (A_CheckTimeFreeze())
					{
						nm = "KCTimeFreezer1";
						nn = "KCTimeFreezer2";
						no = "KCTimeFreezer3";
						if (owner.CountInv(nm)) decrementmod *= 25;
						if (owner.CountInv(nn)) decrementmod *= 50;
						if (owner.CountInv(no)) decrementmod *= 100; 
					}
					
					if (level.time % decrementmod == 0) 
					{
						EXPGainHUDTimer--;
					}
					if (kcdebug_misccooldowntimers) Console.Printf("decrementmod: %d, EXPGainHUDTimer: %d", decrementmod, EXPGainHUDTimer);
				}
				else
				{
					EXPGainHUDAmt = 0;
					if (EXPGainHUDTimerMax != 1) EXPGainHUDTimerMax = 1;
					if (EXPGainHUDCooldownTimer) EXPGainHUDCooldownTimer = 0;
					if (KillComboCount) KillComboCount = 0;
				}
			}
			if (MaxHPIncTimer > 0) MaxHPIncTimer--; else MaxHPIncAmt = 0;
			if (MaxDashIncTimer > 0) MaxDashIncTimer--; else MaxDashIncAmt = 0;
			if (HPHUDShakeTime > 0) HPHUDShakeTime--;
			if (APHUDShakeTime > 0) APHUDShakeTime--;
			if (TSAHUDShakeTime > 0) TSAHUDShakeTime--;
			
			if (kcdebug_misccooldowntimers)
			{
				Console.Printf("HPDmgHUDTimer: %d, APDmgHUDTimer: %d, TSADmgHUDTimer: %d, HPRecHUDTimer: %d, APRecHUDTimer: %d, TSARecHUDTimer: %d, EXPGainHUDTimer: %d, MaxHPIncTimer: %d, MaxDashIncTimer: %d, HPHUDShakeTime: %d, APHUDShakeTime: %d, TSAHUDShakeTime: %d", 
												HPDmgHUDTimer, 
												APDmgHUDTimer,
												TSADmgHUDTimer,
												HPRecHUDTimer, 
												APRecHUDTimer,
												TSARecHUDTimer,
												EXPGainHUDTimer,
												MaxHPIncTimer,
												MaxDashIncTimer,
												HPHUDShakeTime,
												APHUDShakeTime,
												TSAHUDShakeTime);
			}
		}
	}
	
	//
	void HPRegenStuff()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		double timestopgphase; 
		if (timestopactivemaxtics) timestopgphase = double(timefreezegenduration / timestopactivemaxtics);
		double timestopbaseboost;
		double boostf = 1.125;
		double boostphase = 0.25;
		double boostphase2 = 1.00;

		if (weapon is "EvilWarriorShield")
		{
		}
		else
		{
			if (owner.CountInv("EWShieldIdleMode") > 0) owner.SetInventory("EWShieldIdleMode",0);
			if (owner.CountInv("EWShieldDefendMode") > 0) owner.SetInventory("EWShieldDefendMode",0);
			if (owner.CountInv("EWShieldDefendModeExtra") > 0) owner.SetInventory("EWShieldDefendModeExtra",0);
			if (owner.CountInv("HWShieldBlockHold") > 0) owner.SetInventory("HWShieldBlockHold",0);
		}

		if (CurrentHealth <= 0) Owner.A_SetInventory("PlayerIsDead", 1); 
		else
		if (CurrentHealth > 0)
		{
			Owner.A_SetInventory("PlayerIsDead", 0);
			if (kcdebug_hpregen) Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);
			
			//****************************************
			//*Get Health Ratio & Health Level Checks*
			//****************************************
			int TempMaxHealthTrue = MaxHealthTrue;
			if (playeractor && TempMaxHealthTrue > 0)
			{
				HealthRatio = (CurrentHealth * 1000) / TempMaxHealthTrue;
				HealthRatio = clamp(HealthRatio, 0, 3000);
				
				if (HealthRatio != PrevHealthRatio)
				{
					if (HealthRatio > 1500)
					{
						if (HealthRatio > 2250)
						{
							if (HealthRatio > 2875)
							{
								Owner.A_SetInventory("OverFullHealth3", 1);
								Owner.A_SetInventory("OverFullHealth2", 0);
								Owner.A_SetInventory("OverFullHealth1", 0);
							}
							else
							{
								Owner.A_SetInventory("OverFullHealth3", 0);
								Owner.A_SetInventory("OverFullHealth2", 1);
								Owner.A_SetInventory("OverFullHealth1", 0);
							}
						}
						else
						{
							Owner.A_SetInventory("OverFullHealth3", 0);
							Owner.A_SetInventory("OverFullHealth2", 0);
							Owner.A_SetInventory("OverFullHealth1", 1);
						}
						Owner.A_SetInventory("NormalHealth", 1);
						Owner.A_SetInventory("DecentHealth", 0);
						Owner.A_SetInventory("LowHealth", 0);
						Owner.A_SetInventory("CriticalHealth", 0);
					}
					else
					{
						Owner.A_SetInventory("OverFullHealth3", 0);
						Owner.A_SetInventory("OverFullHealth2", 0);
						Owner.A_SetInventory("OverFullHealth1", 0);
						if (HealthRatio < 625)
						{
							if (HealthRatio < 167)
							{
								if (HealthRatio < 21)
								{
									Owner.A_SetInventory("NormalHealth", 0);
									Owner.A_SetInventory("DecentHealth", 0);
									Owner.A_SetInventory("LowHealth", 0);
									Owner.A_SetInventory("CriticalHealth", 1);
								}
								else 
								{
									Owner.A_SetInventory("NormalHealth", 0);
									Owner.A_SetInventory("DecentHealth", 0);
									Owner.A_SetInventory("LowHealth", 1);
									Owner.A_SetInventory("CriticalHealth", 0);
								}
							}
							else 
							{
								Owner.A_SetInventory("NormalHealth", 0);
								Owner.A_SetInventory("DecentHealth", 1);
								Owner.A_SetInventory("LowHealth", 0);
								Owner.A_SetInventory("CriticalHealth", 0);
							}
						}
						else
						{
							Owner.A_SetInventory("NormalHealth", 1);
							Owner.A_SetInventory("DecentHealth", 0);
							Owner.A_SetInventory("LowHealth", 0);
							Owner.A_SetInventory("CriticalHealth", 0);
						}
					}
					if (CurrentHealth >= TempMaxHealthTrue) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
					
					PrevHealthRatio = HealthRatio;
				}
			}
			
			if (!A_CheckNoTimer())
			{
				if (!owner.CountInv("IsUnconscious"))
				{
					//
				}
				
				double ssainverse = 1.0;
				double ssainverseadd = 0.0;
				if (owner.CountInv("TimeSeraphCharm")) 
				{
					ssainverseadd += 0.5;
					if (owner.CountInv("TSArmorTier1")) ssainverseadd += 0.5;

					if (owner.CountInv("TimeSeraphPocketWatch")) 
					{
						ssainverseadd += 2.0;
						if (owner.CountInv("TSArmorTier3Plus")) ssainverseadd += frandompick(7.5,10,10,10,10,10,12.5);
						else if (owner.CountInv("TSArmorTier2")) ssainverseadd += 2.5;
					}
					if (owner.CountInv("TimeSeraphBangle")) 
					{
						ssainverseadd += 0.125;
						if (owner.CountInv("KCPowerTorchBangle")) ssainverseadd += 0.125;
					}
					
					double ssain1 = 1.5;
					double ssain2 = 2.0;
					double ssain3 = 2.5;
					double ssain4 = 3.0;
					double ssain5 = 3.5;
					double ssain6 = 4.0;
					double ssain7 = 4.5;
					ssainverseadd *= frandompick(ssain1,
																			 ssain2,ssain2,ssain2,ssain2,
																			 ssain3,ssain3,ssain3,ssain3,ssain3,ssain3,ssain3,ssain3,
																			 ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,ssain4,
																			 ssain5,ssain5,ssain5,ssain5,ssain5,ssain5,ssain5,ssain5,
																			 ssain6,ssain6,ssain6,ssain6,
																			 ssain7);
					ssainverse += ssainverseadd;
					if (kcdebug_hpregen) Console.Printf("ssainverse: %.8f, ssainverseadd: %.8f", ssainverse, ssainverseadd);
				}

				// HP Regeneration
				BaseRegenMulti = 1.0;
				if (!owner.CountInv("NoRegeneration"))
				{
					if (CurrentHealth < MaxHealthTrue)
					{
						if (kc_hpwillregen)
						{
							int inc = 20;
							if (A_CheckForHeiwa()) 
							{
								inc += ((TruePlayerLevel * 0.04375) + (TruePlayerDEF * 0.00625));
							}
							else
							{
								inc += ((TruePlayerLevel * 0.05) + (TruePlayerDEF * 0.05));
							}
							int temp1 = floor(VitalityPieces * 0.1);
							int temp2 = floor(VitalityPieces * 0.2);
							int temp3 = floor(VitalityPieces * 0.4);
							int temp4 = floor(VitalityPieces * 0.8);
							int temp5 = floor(VitalityPieces * 1.6);
							if (berserked) inc += randompick(temp1,temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5,temp5);
												else inc += randompick(temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5);
							
							double NewRegMul = 1.0;
							if (sielsgracetrueactivations > 0)
							{
								double basemult = 0.5;
								NewRegMul *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
								if (NewRegMul >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewRegMul = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
								if (NewRegMul <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewRegMul = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
								inc *= NewRegMul;
							}
							
							if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0)
							{
								inc *= 0.1;
								if (inc < 1 && random(1,16) <= 15) inc = 1;
							}
							
							BaseRegenMulti = inc;
							if (HPRegenBoostTimer > 0) 
							{
								if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0)
								{
									if (inc <= 0) inc = 1;
									inc *= 20;
								}
								else inc *= 2.5;
							}
							if (HPRegenBoostTimer < 0) 
							{
								inc *= 0.4;
							}
							if (kcdebug_hpregen) Console.Printf("HPRegenBoostTimer [Regen]: %d, inc: %d", HPRegenBoostTimer, inc);
							
							double ssa = 1.00;
							ssa *= ssainverse;
							inc *= ssa;
							if (kcdebug_hpregen) Console.Printf("ssa [Regen]: %.8f", ssa);
							
							if ((weapon is "FistMarine" || 
									 weapon is "FistHeiwa") && 
									owner.CountInv("FistPlayerBlockItem")) 
							{
								if (weapon is "FistHeiwa")
								{
									double fistboost = 1.00;
									if (owner.CountInv("FistPlayerBlock")) fistboost = 1.25;
									if (owner.CountInv("FistPlayerBlock2")) fistboost = 1.5;
									if (owner.CountInv("FistPlayerBlock3")) fistboost = 2.0;
									if (owner.CountInv("FistPlayerBlock4")) fistboost = 3.0;
									
									if (TruePlayerLevel >= 120) fistboost *= 1.5;
									else if (TruePlayerLevel >= 90) fistboost *= 1.375;
									else if (TruePlayerLevel >= 60) fistboost *= 1.25;
									else if (TruePlayerLevel >= 30) fistboost *= 1.125;
									
									inc = ceil(inc * (frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * fistboost);
								}
								else
								{
									if (owner.CountInv("FistPlayerBlock")) inc = ceil(inc * frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)); 
									if (owner.CountInv("FistPlayerBlock2")) inc = ceil(inc * (frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.125); 
									if (owner.CountInv("FistPlayerBlock3")) inc = ceil(inc * (frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.25); 
									if (owner.CountInv("FistPlayerBlock4")) inc = ceil(inc * (frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * 1.5); 
								}
							}
							if (kcdebug_hpregen) Console.Printf("post weapon: inc: %d", inc);

							if (owner.CountInv("KCPowerInvuln") || owner.CountInv("PowerInvulnerable")) inc *= 20;
							if (owner.CountInv("KCPowerKampoul")) inc *= frandom(32,48);
							if (kcdebug_hpregen) Console.Printf("post powerup inc: %d, tic: %d", inc, gametic);
							
							if (owner.CountInv("PowerHaste")) inc = floor(inc * 1.25);
							if (owner.CountInv("PowerSlow")) inc = floor(inc * 0.8);
							if (owner.CountInv("PoisonCount")) inc = floor(inc * (random[statitem](2,6) * 0.125));
							if (owner.CountInv("FallenAsleep")) inc = floor(inc * 5); // Sleep = 5x Regen Speed
							
							if (timestoptype > 0)
							{
								boostf = 1.125;
								boostphase = 0.25;
								boostphase2 = 1.00;
								if (boostphase > 0.00 && boostphase2 >= 1.00) boostphase2 /= boostphase;
								if (kcdebug_hpregen) Console.Printf("timestopgphase: %.4f", timestopgphase);
								if (A_CheckForHeiwa())
								{
									if (timestoptype == 1) 
									{
										timestopbaseboost = (25 + (timefreeze1timesused * 0.25)); // Defensive
										if (timestopbaseboost > 100) timestopbaseboost = 100;
									}
									if (timestoptype == 2) 
									{
										timestopbaseboost = (4 + (timefreeze2timesused * 0.04)); // Offensive
										if (timestopbaseboost > 16) timestopbaseboost = 16;
									}
									if (timestoptype == 3) 
									{
										timestopbaseboost = (10 + (timefreeze3timesused * 0.10)); // Neutral
										if (timestopbaseboost > 40) timestopbaseboost = 40;
									}
								}
								else
								{
									if (timestoptype == 1) 
									{
										timestopbaseboost = (25 + (timefreeze1timesused * 0.0125)); // Defensive
										if (timestopbaseboost > 50) timestopbaseboost = 50;
									}
									if (timestoptype == 2) 
									{
										timestopbaseboost = (4 + (timefreeze2timesused * 0.002)); // Offensive
										if (timestopbaseboost > 8) timestopbaseboost = 8;
									}
									if (timestoptype == 3) 
									{
										timestopbaseboost = (10 + (timefreeze3timesused * 0.005)); // Neutral
										if (timestopbaseboost > 20) timestopbaseboost = 20;
									}
								}
								timestopbaseboost *= 0.5;
								inc *= timestopbaseboost;
								if (kcdebug_hpregen) Console.Printf("post timestoptype [%d] - inc: %d, timestopbaseboost: %.8f, tic: %d", timestoptype, inc, timestopbaseboost, gametic);
								for (int ti; ti < boostphase2; ti++)
								{
									if (timestopgphase >= ((ti+1) * boostphase)) inc *= boostf;
									if (kcdebug_hpregen) Console.Printf("boost: %.4f, inc: %d, tic: %d", ((ti+1) * boostphase), inc, gametic);
								}
								if (kcdebug_hpregen) Console.Printf("time stop final - inc: %d, tic: %d", inc, gametic);
							}
							
							if (berserked) 
							{
								if (A_CheckForHeiwa()) inc = floor(inc * frandom[statitem](2.5,4.0));
																	else inc = floor(inc * frandom[statitem](1.5,2.0));
							}
							
							if (owner.CountInv("FallenAsleep")) FreezePlayer++;
							if (FreezePlayer <= 0)
							{
								if (!timestoptype)
								{
									if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
									if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
									if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
									if (owner.player.jumpTics < 0) inc = floor(inc * 0.4);
									if (owner.player.jumpTics > 0) inc = floor(inc * 0.7);
									if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = floor(inc * 1.8);
								}
								else
								{
									if (timestoptype <= 0) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = floor(inc * frandom(4.2,5.0));
									if (timestoptype == 1) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = floor(inc * 1.8);
									if (timestoptype >= 2) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = floor(inc * frandom(1.16,1.2));
								}
							}
							
							if (kc_healthregendegentype >= 1)
							{
								if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 4);
								else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 1.80);
								else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.20);
								else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.05);
							}
							else
							{
								if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 10);
								else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
								else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
								else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
							}
							if (A_CheckForHeiwa()) 
							{
								double RegenLevelBase = 25;
								double incfactor;
								if (TrueGameSkill <= SKILL_VERY_EASY) RegenLevelBase = 12.5;
								if (TrueGameSkill == SKILL_EASY) RegenLevelBase = 18.75;
								if (TrueGameSkill == SKILL_NORMAL) RegenLevelBase = 25;
								if (TrueGameSkill == SKILL_HARD) RegenLevelBase = 31.25;
								if (TrueGameSkill >= SKILL_VERY_HARD) RegenLevelBase = 37.5;
								if (heiwavhardmodifier) RegenLevelBase *= 1.5;
								if (heiwavhardmodifier)
								{
									incfactor = (1.00 + (TruePlayerLevel * double(5.00 / RegenLevelBase)));
									if (incfactor >= 6.00) incfactor = 6.00;
								}
								else
								{
									incfactor = (1.00 + (TruePlayerLevel * double(3.00 / RegenLevelBase)));
									if (incfactor >= 4.00) incfactor = 4.00;
								}
								inc *= incfactor;
								if (kcdebug_hpregen) Console.Printf("Heiwa [Regen - Level Bonus]: %.8f, inc: %d", incfactor, inc);
							}
							
							if (BaseRegenMulti) BaseRegenMulti = (inc / BaseRegenMulti);
							if (kcdebug_hpregen) Console.Printf("BaseRegenMulti [Regen]: %.8f", BaseRegenMulti);
							if (inc < 0) inc = 0;
							HPRegenTimer += inc;
							genticsHUD = inc;
							
							while (HPRegenTimer > HPRegenTimerMax)
							{
								HPRegenTimer -= HPRegenTimerMax;
								if (HPRegenTimer < 0) HPRegenTimer = 0;
								
								if (CurrentHealth < MaxHealthTrue)
								{
									int rec = randompick[statitem](1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
									int temp1 = floor(VitalityPieces * 0.05);
									int temp2 = floor(VitalityPieces * 0.1);
									int temp3 = floor(VitalityPieces * 0.2);
									int temp4 = floor(VitalityPieces * 0.4);
									int temp5 = floor(VitalityPieces * 0.8);
									rec += randompick(temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5);
									if (berserked) 
									{
										rec = randompick[statitem](1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.8) / 100;
										rec += randompick(temp1,temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5,temp5);
										if (A_CheckForHeiwa() && random(1,4) <= 1)
										{
											if (random(1,4) <= 1) rec *= 2.5;
																			 else rec *= 1.75;
										}
									}
									if (rec < 1) rec = 1;

									if (rec && kchud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
									CurrentHealth += rec;
									if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (HPRegenTimer < 0) HPRegenTimer = 0;
							if (kcdebug_hpregen) Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
						}
						else
						{
							HPRegenTimer = 0;
						}
					}
					else
					if (CurrentHealth > MaxHealthTrue)
					{
						if (kc_hpwilldegen)
						{
							int inc = 20;
							if (A_CheckForHeiwa()) 
							{
								inc -= ((TruePlayerLevel * 0.046875) + (TruePlayerDEF * 0.003125));
							}
							else
							{
								inc -= ((TruePlayerLevel * 0.025) + (TruePlayerDEF * 0.025));
							}
							int temp1 = floor(VitalityPieces * 0.05);
							int temp2 = floor(VitalityPieces * 0.1);
							int temp3 = floor(VitalityPieces * 0.2);
							int temp4 = floor(VitalityPieces * 0.4);
							int temp5 = floor(VitalityPieces * 0.8);
							if (berserked) inc -= randompick(temp1,temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5,temp5);
												else inc -= randompick(temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5);
							
							double NewRegMul = 1.0;
							if (sielsgracetrueactivations > 0)
							{
								double basemult = 0.5;
								NewRegMul *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
								if (NewRegMul <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewRegMul = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
								if (NewRegMul >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewRegMul = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
								inc *= NewRegMul;
							}
							
							if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0) 
							{
								inc *= 0.1;
								if (inc < 1 && random(1,16) <= 15) inc = 1;
							}
							
							BaseRegenMulti = inc;
							if (HPRegenBoostTimer > 0) inc *= 0.4;
							if (HPRegenBoostTimer < 0) 
							{
								if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0)
								{
									if (inc <= 0) inc = 1;
									inc *= 20;
								}
								else inc *= 2.5;
							}
							if (kcdebug_hpregen) Console.Printf("HPRegenBoostTimer [Degen]: %d, inc: %d", HPRegenBoostTimer, inc);
							
							
							double ssa = 1.00;
							ssa /= ssainverse;
							inc *= ssa;
							if (kcdebug_hpregen) Console.Printf("ssa [Degen]: %.8f", ssa);
							
							if ((weapon is "FistMarine" || 
									 weapon is "FistHeiwa") && 
									Owner.CountInv("FistPlayerBlockItem")) 
							{
								if (weapon is "FistHeiwa")
								{
									double fistboost = 1.00;
									if (owner.CountInv("FistPlayerBlock")) fistboost = (1.0 / 1.25);
									if (owner.CountInv("FistPlayerBlock2")) fistboost = (1.0 / 1.5);
									if (owner.CountInv("FistPlayerBlock3")) fistboost = (1.0 / 2.0);
									if (owner.CountInv("FistPlayerBlock4")) fistboost = (1.0 / 3.0);
									
									if (TruePlayerLevel >= 120) fistboost *= (1.0 / 1.5);
									else if (TruePlayerLevel >= 90) fistboost *= (1.0 / 1.375);
									else if (TruePlayerLevel >= 60) fistboost *= (1.0 / 1.25);
									else if (TruePlayerLevel >= 30) fistboost *= (1.0 / 1.125);
									
									inc = ceil(inc * (frandompick[statitem](1.2,1.3,1.3,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.7,1.7,1.8)) * fistboost);
								}
								else
								{
									if (owner.CountInv("FistPlayerBlock")) inc = ceil(inc * frandompick[statitem](0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556));
									if (owner.CountInv("FistPlayerBlock2")) inc = ceil(inc * (frandompick[statitem](0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.8888888888888889); 
									if (owner.CountInv("FistPlayerBlock3")) inc = ceil(inc * (frandompick[statitem](0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.8); 
									if (owner.CountInv("FistPlayerBlock4")) inc = ceil(inc * (frandompick[statitem](0.8334,0.7693,0.7693,0.7143,0.7143,0.7143,0.6667,0.6667,0.6667,0.6667,0.625,0.625,0.625,0.5882,0.5882,0.5556)) * 0.6666666666666667); 
								}
							}
							if (owner.CountInv("KCPowerInvuln") || owner.CountInv("PowerInvulnerable")) inc *= 0.05;
							if (owner.CountInv("KCPowerKampoul")) inc *= (1.0 / frandom(32,48));
							
							if (owner.CountInv("PowerHaste")) inc = ceil(inc * 1.25);
							if (owner.CountInv("PowerSlow")) inc = ceil(inc * 0.8);
							if (owner.CountInv("PoisonCount")) inc = ceil((inc * 8) / (random[statitem](2,6) * 0.125));
							if (owner.CountInv("FallenAsleep")) inc = ceil(inc * 0.2); // Sleep = x0.2 degen speed
							
							if (timestoptype > 0)
							{
								double boostf = double(1.0 / 1.125);
								double boostphase = 0.25;
								double boostphase2 = 1.00;
								if (boostphase > 0.00 && boostphase2 >= 1.00) boostphase2 /= boostphase;
								if (kcdebug_hpregen) Console.Printf("timestopgphase: %.4f", timestopgphase);
								if (A_CheckForHeiwa())
								{
									if (timestoptype == 1) timestopbaseboost = (0.04 - (timefreeze1timesused * 0.0004)); // Defensive
									if (timestoptype == 2) timestopbaseboost = (0.25 - (timefreeze2timesused * 0.0025)); // Offensive
									if (timestoptype == 3) timestopbaseboost = (0.10 - (timefreeze3timesused * 0.0010)); // Neutral
								}
								else
								{
									if (timestoptype == 1) timestopbaseboost = (0.04 - (timefreeze1timesused * 0.00002)); // Defensive
									if (timestoptype == 2) timestopbaseboost = (0.25 - (timefreeze2timesused * 0.000125)); // Offensive
									if (timestoptype == 3) timestopbaseboost = (0.10 - (timefreeze3timesused * 0.00005)); // Neutral
								}
								if (timestopbaseboost < 0.001) timestopbaseboost = 0.001;
								inc *= timestopbaseboost;
								for (int ti; ti < boostphase2; ti++)
								{
									if (timestopgphase >= ((ti+1) * boostphase)) inc *= boostf;
									if (kcdebug_hpregen) Console.Printf("boost: %.4f, tic: %d", ((ti+1) * boostphase), gametic);
								}
							}
							
							
							if (berserked) 
							{
								if (A_CheckForHeiwa()) inc = ceil(inc * frandom[statitem](0.25,0.4));
																	else inc = ceil(inc * frandom[statitem](0.5,0.667));
							}
							
							if (owner.CountInv("FallenAsleep")) FreezePlayer++;
							if (FreezePlayer <= 0)
							{
								if (!timestoptype)
								{
									if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = ceil(inc * 2.5);
									if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = ceil(inc * 2.0);
									if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = ceil(inc * 1.666666666666667);
									if (owner.player.jumpTics < 0) inc = ceil(inc * 2.5);
									if (owner.player.jumpTics > 0) inc = ceil(inc * 1.75);
									if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = ceil(inc * 0.5555555555555556);
								}
								else
								{
									if (timestoptype <= 0) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = ceil(inc * (1.0 / frandom(4.2,5.0)));
									if (timestoptype == 1) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = ceil(inc * (1.0 / 1.8));
									if (timestoptype >= 2) if (buttons & BT_CROUCH && owner.player.crouchfactor < 1.00 && level.IsCrouchingAllowed() && owner.player.jumpTics == 0) inc = ceil(inc * (1.0 / frandom(1.16,1.2)));
								}
							}
							
							if (kc_healthregendegentype >= 1)
							{
								if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = ceil(inc * 1.5);
								else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = ceil(inc * 1.4375);
								else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = ceil(inc * 1.375);
								else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = ceil(inc * 1.3125);
								else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = ceil(inc * 1.25);
								else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = ceil(inc * 1.1875);
								else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = ceil(inc * 1.125);
								else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = ceil(inc * 1.0625);
								else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = ceil(inc * 1.0);
							}
							else
							{
								if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = ceil(inc * 2.0);
								else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = ceil(inc * 1.875);
								else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = ceil(inc * 1.75);
								else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = ceil(inc * 1.625);
								else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = ceil(inc * 1.5);
								else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = ceil(inc * 1.375);
								else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = ceil(inc * 1.25);
								else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = ceil(inc * 1.125);
								else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = ceil(inc * 1.0);
							}
							if (A_CheckForHeiwa()) 
							{
								double DegenLevelBase = 25;
								double incfactor;
								if (TrueGameSkill <= SKILL_VERY_EASY) DegenLevelBase = 12.5;
								if (TrueGameSkill == SKILL_EASY) DegenLevelBase = 18.75;
								if (TrueGameSkill == SKILL_NORMAL) DegenLevelBase = 25;
								if (TrueGameSkill == SKILL_HARD) DegenLevelBase = 31.25;
								if (TrueGameSkill >= SKILL_VERY_HARD) DegenLevelBase = 37.5;
								if (heiwavhardmodifier) DegenLevelBase *= 0.67;
								incfactor = (1.00 - (TruePlayerLevel * double(1.00 / DegenLevelBase)));
								if (incfactor <= 0.00) incfactor = 0.00;
								inc *= incfactor;
								if (kcdebug_hpregen) Console.Printf("Heiwa [Degen - Level Penalty]: %.8f, inc: %d", incfactor, inc);
							}
							
							if (BaseRegenMulti) BaseRegenMulti = (inc / BaseRegenMulti);
							if (kcdebug_hpregen) Console.Printf("BaseDegenMulti [Degen]: %.8f", BaseRegenMulti);
							if (inc < 0) inc = 0;
							HPDegenTimer += inc;
							genticsHUD = inc;
							while (HPDegenTimer > HPDegenTimerMax)
							{
								HPDegenTimer -= HPDegenTimerMax;
								if (HPDegenTimer < 0) HPDegenTimer = 0;
								
								if (CurrentHealth > MaxHealthTrue)
								{
									int loss = randompick[statitem](1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.4) / 100;
									if (berserked) 
									{
										loss = randompick[statitem](1,1,1,1,1,1,1,1,1,2) * (MaxHealthTrue * 0.2) / 100;
										if (A_CheckForHeiwa() && random(1,4) <= 1)
										{
											if (random(1,4) <= 1) loss *= 0.4;
																			 else loss *= 0.5714285714285714;
										}
									}
									if (loss < 1) loss = 1;
									
									//if (loss && kchud_showhpapdmgrecregen > 1) A_LossHUD(loss, 0, false);
									CurrentHealth -= loss;
									if (CurrentHealth <= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
									owner.player.health = owner.player.mo.health = CurrentHealth;
								}
							}
							if (HPDegenTimer < 0) HPDegenTimer = 0;
							if (kcdebug_hpregen) Console.Printf("DegenTimer: %d / %d  (inc: %d)", HPDegenTimer, HPDegenTimerMax, inc);
						}
						else
						{
							HPDegenTimer = 0;
						}
					}
					else
					{
						HPRegenTimer = 0;
						HPDegenTimer = 0;
						if (kcdebug_hpregen) Console.Printf("Regen/Degen Neutral");
					}
					
					if (owner.health > 0 && 
							HPRegenBoostTimer > 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1)
							{
								if (level.time % 25) HPRegenBoostTimer--;
							}
							else
							if (timestoptype == 2)
							{
								if (level.time % 4) HPRegenBoostTimer--;
							}
							else
							if (timestoptype == 3)
							{
								if (level.time % 10) HPRegenBoostTimer--;
							}
						}
						else
						{
							HPRegenBoostTimer--;
						}
					}
					if (HPRegenBoostTimer < 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1) HPRegenBoostTimer += 25;
							if (timestoptype == 2) HPRegenBoostTimer += 4;
							if (timestoptype == 3) HPRegenBoostTimer += 10;
						}
						else HPRegenBoostTimer++;
						if (HPRegenBoostTimer > 0) HPRegenBoostTimer = 0;
					}
					if (kcdebug_hpregen && HPRegenBoostTimer) Console.Printf("HPRegenBoostTimer: %d", HPRegenBoostTimer);
				}
				else
				{
					BaseRegenMulti = 0.0;
				}
				
				// PP Regen/Degen
				if (CurrentPsychicPoints < MaxPsychicPoints)
				{
					int inc = 20;

					BaseRegenMulti = inc;
					if (PPRegenBoostTimer > 0) inc *= 2.5;
					if (PPRegenBoostTimer < 0) inc *= 0.4;
					if (kcdebug_ppregen) Console.Printf("PPRegenBoostTimer [Regen]: %d, inc: %d", PPRegenBoostTimer, inc);
					
					if (timestoptype > 0)
					{
						boostf = 1.125;
						boostphase = 0.25;
						boostphase2 = 1.00;
						if (boostphase > 0.00 && boostphase2 >= 1.00) boostphase2 /= boostphase;
						if (kcdebug_ppregen) Console.Printf("timestopgphase: %.4f", timestopgphase);
						if (A_CheckForHeiwa())
						{
							if (timestoptype == 1) 
							{
								timestopbaseboost = (6.25 + (timefreeze1timesused * 0.0625)); // Defensive
								if (timestopbaseboost > 25) timestopbaseboost = 25;
							}
							if (timestoptype == 2) 
							{
								timestopbaseboost = (1 + (timefreeze2timesused * 0.01)); // Offensive
								if (timestopbaseboost > 4) timestopbaseboost = 4;
							}
							if (timestoptype == 3) 
							{
								timestopbaseboost = (2.5 + (timefreeze3timesused * 0.025)); // Neutral
								if (timestopbaseboost > 10) timestopbaseboost = 10;
							}
						}
						else
						{
							if (timestoptype == 1) 
							{
								timestopbaseboost = (6.25 + (timefreeze1timesused * 0.003125)); // Defensive
								if (timestopbaseboost > 12.5) timestopbaseboost = 12.5;
							}
							if (timestoptype == 2) 
							{
								timestopbaseboost = (1 + (timefreeze2timesused * 0.0005)); // Offensive
								if (timestopbaseboost > 2) timestopbaseboost = 2;
							}
							if (timestoptype == 3) 
							{
								timestopbaseboost = (2.5 + (timefreeze3timesused * 0.00125)); // Neutral
								if (timestopbaseboost > 5) timestopbaseboost = 5;
							}
						}
						timestopbaseboost *= 0.5;
						inc *= timestopbaseboost;
						if (kcdebug_ppregen) Console.Printf("post timestoptype [%d] - inc: %d, timestopbaseboost: %.8f, tic: %d", timestoptype, inc, timestopbaseboost, gametic);
						for (int ti; ti < boostphase2; ti++)
						{
							if (timestopgphase >= ((ti+1) * boostphase)) inc *= boostf;
							if (kcdebug_ppregen) Console.Printf("boost: %.4f, inc: %d, tic: %d", ((ti+1) * boostphase), inc, gametic);
						}
						if (kcdebug_ppregen) Console.Printf("time stop final - inc: %d, tic: %d", inc, gametic);
					}
					
					if (owner.CountInv("FallenAsleep")) inc *= 5;
					
					if (inc < 0) inc = 0;
					//genticsHUD = inc;
					PPRegenTimer += inc;
					while (PPRegenTimer > PPRegenTimerMax)
					{
						PPRegenTimer -= PPRegenTimerMax;
						if (PPRegenTimer < 0) PPRegenTimer = 0;
						
						if (CurrentPsychicPoints < MaxPsychicPoints)
						{
							int rec = randompick[statitem](1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxPsychicPoints * 0.4) / 100;
							int temp1 = floor(IQPieces * 0.05);
							int temp2 = floor(IQPieces * 0.1);
							int temp3 = floor(IQPieces * 0.2);
							int temp4 = floor(IQPieces * 0.4);
							int temp5 = floor(IQPieces * 0.8);
							rec += randompick(temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5);
							if (rec < 1) rec = 1;

							//if (rec && kchud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
							CurrentPsychicPoints += rec;
							if (CurrentPsychicPoints >= MaxPsychicPoints) CurrentPsychicPoints = MaxPsychicPoints;
						}
					}
					if (PPRegenTimer < 0) PPRegenTimer = 0;

					if (owner.health > 0 && 
							PPRegenBoostTimer > 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1)
							{
								if (level.time % 6) PPRegenBoostTimer--;
							}
							else
							if (timestoptype == 2)
							{
								if (level.time % 1) PPRegenBoostTimer--;
							}
							else
							if (timestoptype == 3)
							{
								if (level.time % 2) PPRegenBoostTimer--;
							}
						}
						else
						{
							PPRegenBoostTimer--;
						}
					}
					if (PPRegenBoostTimer < 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1) PPRegenBoostTimer += 6;
							if (timestoptype == 2) PPRegenBoostTimer += 1;
							if (timestoptype == 3) PPRegenBoostTimer += 2;
						}
						else PPRegenBoostTimer++;
						if (PPRegenBoostTimer > 0) PPRegenBoostTimer = 0;
					}
					if (kcdebug_ppregen && PPRegenBoostTimer) Console.Printf("PPRegenBoostTimer: %d", PPRegenBoostTimer);
				}
				
				// Magic Regen/Degen
				if (CurrentMagicPoints < MaxMagicPoints)
				{
					int inc = 20;

					BaseRegenMulti = inc;
					if (MPRegenBoostTimer > 0) inc *= 2.5;
					if (MPRegenBoostTimer < 0) inc *= 0.4;
					if (kcdebug_mpregen) Console.Printf("MPRegenBoostTimer [Regen]: %d, inc: %d", MPRegenBoostTimer, inc);
					
					if (timestoptype > 0)
					{
						boostf = 1.125;
						boostphase = 0.25;
						boostphase2 = 1.00;
						if (boostphase > 0.00 && boostphase2 >= 1.00) boostphase2 /= boostphase;
						if (kcdebug_mpregen) Console.Printf("timestopgphase: %.4f", timestopgphase);
						if (A_CheckForHeiwa())
						{
							if (timestoptype == 1) 
							{
								timestopbaseboost = (6.25 + (timefreeze1timesused * 0.0625)); // Defensive
								if (timestopbaseboost > 25) timestopbaseboost = 25;
							}
							if (timestoptype == 2) 
							{
								timestopbaseboost = (1 + (timefreeze2timesused * 0.01)); // Offensive
								if (timestopbaseboost > 4) timestopbaseboost = 4;
							}
							if (timestoptype == 3) 
							{
								timestopbaseboost = (2.5 + (timefreeze3timesused * 0.025)); // Neutral
								if (timestopbaseboost > 10) timestopbaseboost = 10;
							}
						}
						else
						{
							if (timestoptype == 1) 
							{
								timestopbaseboost = (6.25 + (timefreeze1timesused * 0.003125)); // Defensive
								if (timestopbaseboost > 12.5) timestopbaseboost = 12.5;
							}
							if (timestoptype == 2) 
							{
								timestopbaseboost = (1 + (timefreeze2timesused * 0.0005)); // Offensive
								if (timestopbaseboost > 2) timestopbaseboost = 2;
							}
							if (timestoptype == 3) 
							{
								timestopbaseboost = (2.5 + (timefreeze3timesused * 0.00125)); // Neutral
								if (timestopbaseboost > 5) timestopbaseboost = 5;
							}
						}
						timestopbaseboost *= 0.5;
						inc *= timestopbaseboost;
						if (kcdebug_mpregen) Console.Printf("post timestoptype [%d] - inc: %d, timestopbaseboost: %.8f, tic: %d", timestoptype, inc, timestopbaseboost, gametic);
						for (int ti; ti < boostphase2; ti++)
						{
							if (timestopgphase >= ((ti+1) * boostphase)) inc *= boostf;
							if (kcdebug_mpregen) Console.Printf("boost: %.4f, inc: %d, tic: %d", ((ti+1) * boostphase), inc, gametic);
						}
						if (kcdebug_mpregen) Console.Printf("time stop final - inc: %d, tic: %d", inc, gametic);
					}
					
					if (owner.CountInv("FallenAsleep")) inc *= 5;
					
					if (inc < 0) inc = 0;
					//genticsHUD = inc;
					MPRegenTimer += inc;
					
					while (MPRegenTimer > MPRegenTimerMax)
					{
						MPRegenTimer -= MPRegenTimerMax;
						if (MPRegenTimer < 0) MPRegenTimer = 0;
						
						if (CurrentMagicPoints < MaxMagicPoints)
						{
							int rec = randompick[statitem](1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2) * (MaxMagicPoints * 0.4) / 100;
							int temp1 = floor(SensesPieces * 0.05);
							int temp2 = floor(SensesPieces * 0.1);
							int temp3 = floor(SensesPieces * 0.2);
							int temp4 = floor(SensesPieces * 0.4);
							int temp5 = floor(SensesPieces * 0.8);
							rec += randompick(temp1,temp2,temp2,temp2,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp3,temp4,temp4,temp4,temp5);
							if (rec < 1) rec = 1;

							//if (rec && kchud_showhpapdmgrecregen) A_RecoverHUD(rec, 0, false);
							CurrentMagicPoints += rec;
							if (CurrentMagicPoints >= MaxMagicPoints) CurrentMagicPoints = MaxMagicPoints;
						}
					}
					if (MPRegenTimer < 0) MPRegenTimer = 0;

					if (owner.health > 0 && 
							MPRegenBoostTimer > 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1)
							{
								if (level.time % 6) MPRegenBoostTimer--;
							}
							else
							if (timestoptype == 2)
							{
								if (level.time % 1) MPRegenBoostTimer--;
							}
							else
							if (timestoptype == 3)
							{
								if (level.time % 2) MPRegenBoostTimer--;
							}
						}
						else
						{
							MPRegenBoostTimer--;
						}
					}
					if (MPRegenBoostTimer < 0) 
					{
						if (timestoptype > 0)
						{
							if (timestoptype == 1) MPRegenBoostTimer += 6;
							if (timestoptype == 2) MPRegenBoostTimer += 1;
							if (timestoptype == 3) MPRegenBoostTimer += 2;
						}
						else MPRegenBoostTimer++;
						if (MPRegenBoostTimer > 0) MPRegenBoostTimer = 0;
					}
					if (kcdebug_mpregen && MPRegenBoostTimer) Console.Printf("MPRegenBoostTimer: %d", MPRegenBoostTimer);
				}
			}
			
		}
	}
	
	
	void EvasionStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (!A_CheckNoTimer())
		{
			//***********
			//* Evasion *
			//***********
			int SkillFactor, PerkFactor;
			int EvadeRateCap = 7500;
			if (A_CheckForHeiwa()) EvadeRateCap = 9375;
			EvasionRate = 0;
			SPDEvadeCheck = 5.75; // Base
			if (A_CheckForHeiwa()) SPDEvadeCheck = 17.25;
			
			int BaseEVA = SPDEvadeCheck;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0a - SPD Evade Check (base)]: %.4f\c-", SPDEvadeCheck);
			
			// Luck
			double mult = (BaseEVA * 0.025);
			double LUKEvaAlt = 0.0 + (PlayerLUCK * frandompick[statitem](0,0,0,0,0,0,0,0,0,0,0,(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.25),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*0.5),(mult*1),(mult*1),(mult*1),(mult*2)));
			SPDEvadeCheck += LUKEvaAlt;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0b - SPD Evade Check (luck check)]: %.4f\c-", SPDEvadeCheck);
			
			// Food
			double FoodEvaAlt = 0.0;
			if (owner.CountInv("PowerLMPieBuff")) FoodEvaAlt += (BaseEVA * 0.16);
			SPDEvadeCheck += FoodEvaAlt;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0d - SPD Evade Check (food check)]: %.4f (%.4f)\c-", SPDEvadeCheck, FoodEvaAlt);

			// Weapon
			weapon = owner.player.ReadyWeapon;
			double WeapEvaAlt = 0.0;
			nm = "ImpalerXBow"; 
			if (weapon is nm) 
			{
				double temp = (-0.09375 + (TruePlayerLevel * 0.00375));
				if (temp > 0.09375) temp = 0.09375; // Mitigated @ Level 25, INVERSED @ Level 50+
				WeapEvaAlt += (BaseEVA * temp);
			}
			nm = "DualImpalerXBow"; 
			if (weapon is nm) 
			{
				double temp = (-0.1875 + (TruePlayerLevel * 0.0075));
				if (temp > 0.1875) temp = 0.1875; // Mitigated @ Level 25, INVERSED @ Level 50+
				WeapEvaAlt += (BaseEVA * temp);
			}
			SPDEvadeCheck += WeapEvaAlt;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0c - SPD Evade Check (weapon check)]: %.4f\c-", SPDEvadeCheck);
			
			// Berserk
			double BersEvaAlt = 0.0;
			if (berserked)
			{
				if (skill <= 0) BersEvaAlt += (BaseEVA * 0.1875);
				if (skill == 1) BersEvaAlt += (BaseEVA * 0.15625);
				if (skill == 2) BersEvaAlt += (BaseEVA * 0.125);
				if (skill == 3) BersEvaAlt += (BaseEVA * 0.09375);
				if (skill >= 4) BersEvaAlt += (BaseEVA * 0.0625);
			}
			SPDEvadeCheck += BersEvaAlt;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0d - SPD Evade Check (berserk check)]: %.4f\c-", SPDEvadeCheck);
			
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 0x - SPD Evade Check]: %.4f\c-", SPDEvadeCheck);
			
			if (kc_expgains) EvasionRate = (((TruePlayerLevel + 1) * SPDEvadeCheck) + ((TruePlayerSPD + 1) * SPDEvadeCheck)) * 0.5;
									else EvasionRate = SPDEvadeCheck;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 1 - Base (Agl/Evade, Lvl/Evade)]: %d\c-", EvasionRate);
			
			if (Owner.CountInv("PowerHaste")) EvasionRate *= 2.5;
			if (Owner.CountInv("PowerSlow")) EvasionRate *= 0.4;
			
			double NewEvdFct = evdfct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewEvdFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewEvdFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewEvdFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewEvdFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewEvdFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
			}
			EvasionRate *= NewEvdFct;
			if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate [STEP 1x - Base (NewEvdFct)]: %.4f\c-, NewEvdFct: %.8f", EvasionRate, NewEvdFct);
			
			if (IsMorphed == 1) // Rat Form gives up to +75% evasion chance
			{
				PerkFactor = 7500;
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 2 - Rat Morph Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
		
				PerkFactor = 7500;
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 2a - Rat Morph Check (Cap)]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (Owner.CountInv("PowerInvisibility") || 
					Owner.CountInv("KCPowerInvisibility") || 
					Owner.CountInv("PowerGhost"))
			{
				PerkFactor = 3334;
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 3 - Invisibility Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
				
				PerkFactor = 3334;
				SkillFactor = (10000 - EvadeRateCap) * PerkFactor / 10000;
				EvadeRateCap += SkillFactor;
				if (kcdebug_showevadestuff) Console.Printf("    \cwEvasion Rate % [STEP 3a - Invisibility Check (Cap)]: %d,\c- Added: %d, PerkFactor: %d", EvadeRateCap, SkillFactor, PerkFactor);
			}
			
			if (EvadeRateCap >= 10000) EvadeRateCap = 10000;
			if (EvasionRate >= EvadeRateCap) EvasionRate = EvadeRateCap;
			if (owner.CountInv("KCPowerKampoul")) 
			{
				PerkFactor = 5000;
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
			}
			
			if (tfcooldown > 0)
			{
				PerkFactor = randompick(1875,3750,3750,3750,7500,7500,7500,7500,7500,7500,7500,7500,7500,7500,7500,8750,8750,9375);
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
			}
			
			int EvasionRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
			if (EvasionRNGVal <= EvasionRate) 
			{
				if (owner.CountInv("EvadeAnAttack") <= 0) owner.A_SetInventory("EvadeAnAttack",1); 
				if (kcdebug_showevadestuff) Console.Printf("    \cdEvasion % Roll / Rate (Cap): %d / %d (%d)", EvasionRNGVal, EvasionRate, EvadeRateCap);
			}
			else 
			{ 
				if (owner.CountInv("EvadeAnAttack") >= 1) owner.A_SetInventory("EvadeAnAttack",0); 
				if (kcdebug_showevadestuff) Console.Printf("    \cgEvasion % Roll / Rate (Cap): %d / %d (%d)", EvasionRNGVal, EvasionRate, EvadeRateCap);
			}
		}
	}
	
	void SurvivalStuff()
	{
		int PerkFactor = 0;
		name armorclasstype = "KCArmor";
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		int SurviveRateCap = 7500;
		if (A_CheckForHeiwa()) SurviveRateCap = 9375;
		weapon = owner.player.ReadyWeapon;
		
		if (!A_CheckNoTimer())
		{
			double NewSuvFct = suvfct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewSuvFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewSuvFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewSuvFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewSuvFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewSuvFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
			}
			if (kcdebug_survivalrate) Console.Printf("SurvivalRate [NewSuvFct]: %.8f (%.8f)", NewSuvFct, suvfct);

			SurvivalRate = 100 * suvfct; // out of 10000 [100 = 1%]
			if (A_CheckForHeiwa()) SurvivalRate = 25 * suvfct;
			if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Base]: %d", SurvivalRate);
			
			if (A_CheckForHeiwa()) SurvivalRate += (TruePlayerLevel * 6.5625); // +0.065625% per level
												else SurvivalRate += (TruePlayerLevel * 3.75); // +0.0375% per level
			if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Level]: %d", SurvivalRate);
			if (PlayerGUTS)
			{
				if (A_CheckForHeiwa()) SurvivalRate += (PlayerGUTS * 7.125); // +0.07125% per Luck Point
													else SurvivalRate += (PlayerGUTS * 7.5); // +0.075% per Luck Point
				if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Guts]: %d", SurvivalRate);
			}
			if (PlayerLUCK) 
			{
				if (A_CheckForHeiwa()) SurvivalRate += (PlayerLUCK * 1.1875); // +0.011875% per Luck Point
													else SurvivalRate += (PlayerLUCK * 1.25); // +0.0125% per Luck Point
				if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Luck]: %d", SurvivalRate);
			}
			
			PerkFactor = 0;

			if (berserked) SurvivalRate += 500;
			if (Owner.CountInv("PowerGuard")) SurvivalRate += ((10000 - SurvivalRate) * 0.125);
			if (Owner.CountInv("PowerWeaken")) SurvivalRate -= ((10000 - SurvivalRate) * 0.125);
			if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Buffs]: %d", SurvivalRate);
			
			int buddhatype = 0;
			if (A_CheckForHeiwa())
			{
				if (owner.CountInv("TSArmorTier3Plus"))
				{
					int temp = random(9687,9688);
					SurvivalRate += temp;
					SurviveRateCap += temp;
				}
				else
				if (owner.CountInv("TSArmorTier2"))
				{
					SurvivalRate += 7500;
					SurviveRateCap += 7500;
				}
				else
				if (owner.CountInv("TSArmorTier1"))
				{
					SurvivalRate += 3750;
					SurviveRateCap += 3750;
				}
			}
			else
			{
				if (owner.CountInv("TSArmorTier3Plus"))
				{
					int temp = randompick(6666,6666,6667);
					SurvivalRate += temp;
					SurviveRateCap += temp;
				}
				else
				if (owner.CountInv("TSArmorTier2"))
				{
					SurvivalRate += 2500;
					SurviveRateCap += 2500;
				}
				else
				if (owner.CountInv("TSArmorTier1"))
				{
					SurvivalRate += 1250;
					SurviveRateCap += 1250;
				}
			}
			if (kcdebug_survivalrate) Console.Printf("SurvivalRate [TSA]: %d", SurvivalRate);
			
			if (KillComboCount)
			{
				double based = 10;
				if (KillComboCount >= 2) based = 15;
				if (KillComboCount >= 4) based = 20;
				if (KillComboCount >= 6) based = 25;
				if (KillComboCount >= 11) based = 30;
				if (KillComboCount >= 16) based = 35;
				if (KillComboCount >= 21) based = 40;
				if (KillComboCount >= 29) based = 45;
				if (KillComboCount >= 36) based = 50;
				if (KillComboCount >= 44) based = 55;
				if (KillComboCount >= 52) based = 60;
				if (KillComboCount >= 61) based = 65;
				if (KillComboCount >= 74) based = 70;
				if (KillComboCount >= 87) based = 75;
				if (KillComboCount >= 101) based = 80;
				if (KillComboCount >= 126) based = 85;
				if (KillComboCount >= 151) based = 90;
				if (KillComboCount >= 176) based = 95;
				if (KillComboCount >= 201) based = 100;
				if (KillComboCount >= 231) based = 105;
				if (KillComboCount >= 261) based = 110;
				if (KillComboCount >= 291) based = 115;
				if (KillComboCount >= 321) based = 120;
				if (KillComboCount >= 351) based = 125;
				if (KillComboCount >= 386) based = 130;
				if (KillComboCount >= 421) based = 135;
				if (KillComboCount >= 456) based = 140;
				if (KillComboCount >= 491) based = 145;
				if (KillComboCount >= 526) based = 150;
				if (A_CheckForHeiwa()) based *= 0.25;
													else based *= 0.0625;
				int flat = (KillComboCount * based);
				if (flat >= 9875) flat = 9875;
				SurviveRateCap += flat;
				SurvivalRate += flat;
				if (SurviveRateCap > 9875) SurviveRateCap = 9875;
				if (SurvivalRate > 9875) SurvivalRate = 9875;
				if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Kill Combo]: %d (SurviveRateCap: %d), flat: %d, based: %.4f, KillComboCount: %d", SurvivalRate, SurviveRateCap, flat, based, KillComboCount);
			}

			if (Owner.CountInv("FistPlayerBlockItem"))
			{
				if (Owner.CountInv("FistPlayerBlock4"))
				{ 
					if (A_CheckForHeiwa())
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.625,0.625,0.625,0.625,0.875));
						if (random(1,8) <= 1) SurviveRateCap += 3000;
														 else SurviveRateCap += 1875; // 1500
					}
					else
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.5,0.5,0.5,0.5,0.75));
						SurviveRateCap += 2250;
					}
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (4)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock3"))
				{ 
					if (A_CheckForHeiwa())
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.5,0.5,0.5,0.5,0.6875));
						if (random(1,16) <= 1) SurviveRateCap += 2000;
															else SurviveRateCap += 1250; // 1000
					}
					else
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.375,0.375,0.375,0.375,0.5625));
						SurviveRateCap += 1500;
					}
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (3)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock2"))
				{ 
					if (A_CheckForHeiwa())
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.375,0.375,0.375,0.375,0.5));
						if (random(1,24) <= 1) SurviveRateCap += randompick(1333,1333,1334);
															else SurviveRateCap += randompick(833,833,834); // 666.7
					}
					else
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.25,0.25,0.25,0.25,0.375));
						SurviveRateCap += 1000;
					}
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (2)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("FistPlayerBlock"))
				{
					if (A_CheckForHeiwa())
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.25,0.25,0.25,0.25,0.3125));
						if (random(1,32) <= 1) SurviveRateCap += randompick(666,667,667);
															else SurviveRateCap += randompick(416,417,416); // 333.4
					}
					else
					{
						SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.125,0.125,0.125,0.125,0.1875));
						SurviveRateCap += 500;
					}
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Handed Guard (1)]: %d", SurvivalRate);
				}
			}
			
			if (Owner.CountInv("KnifePlayerSwingItem"))
			{
				if (Owner.CountInv("KnifePlayerSwing4"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.3125,0.3125,0.3125,0.3125,0.4375));
					if (random(1,8) <= 1) SurviveRateCap += 1500;
													 else SurviveRateCap += random(937,938); // 1500
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Knife Swing (4)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("KnifePlayerSwing3"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.25,0.25,0.25,0.25,0.34375));
					if (random(1,16) <= 1) SurviveRateCap += 1000;
														else SurviveRateCap += 625; // 1000
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Knife Swingd (3)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("KnifePlayerSwing2"))
				{ 
					SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.1875,0.1875,0.1875,0.1875,0.25));
					if (random(1,24) <= 1) SurviveRateCap += randompick(666,667,667);
														else SurviveRateCap += randompick(416,417,417); // 666.7
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Knife Swing (2)]: %d", SurvivalRate);
				}
				else if (Owner.CountInv("KnifePlayerSwing"))
				{
					SurvivalRate += ((10000 - SurvivalRate) * frandompick[statitem](0.125,0.125,0.125,0.125,0.15625));
					if (random(1,32) <= 1) SurviveRateCap += randompick(333,333,334);
														else SurviveRateCap += randompick(208,208,209); // 333.4
					if (kcdebug_survivalrate) Console.Printf("SurvivalRate [Final w/o Knife Swing (1)]: %d", SurvivalRate);
				}
			}
			
			if (SurviveRateCap >= 10000) SurviveRateCap = 10000;
			if (SurvivalRate > SurviveRateCap) SurvivalRate = SurviveRateCap;
			if (kcdebug_survivecheat && SurvivalRate <= 9995) SurvivalRate = 9995;
			if (owner.CountInv("KCPowerKampoul") && SurvivalRate <= 9999) SurvivalRate = 9999;
			if (A_CheckForHeiwa())
			{
				if (A_CheckTimeFreeze()) SurvivalRate = 20000;
			}
			if (owner.CountInv("GiveTempMortalSurvive")) SurvivalRate = 20000;
			if (owner.cursector.Flags & 512) { } // E1M8-Style End Level Sector Special Won't Try to trigger Buddha effects
			else
			{
				int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
				if (SurviveRNGVal <= SurvivalRate)
				{
					owner.player.cheats |= CF_BUDDHA;
				}
				else
				{
					owner.player.cheats &= ~CF_BUDDHA;
					if (A_CheckForHeiwa() && sielsgraceactive > 0) 
					{
						if (sielsgraceactivations < 4) owner.player.cheats |= CF_BUDDHA;
					}
				}
	
				if (kcdebug_survivalrate)
				{
					if (A_CheckForHeiwa() && sielsgraceactive > 0)
					{
						Console.Printf("    \cdSurvival Rate [Siel's Grace Active: %d (used: %d)] \cx[cheatbits: %d]", sielsgraceactive, sielsgraceactivations, owner.player.cheats);
					}
					else
					{
						if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																					else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
					}
				}
			}
		}
	}
	
	void CritRateCalc()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);

		owner.A_SetInventory("DealCriticalHit",0);
		CritChance = 128;
		if (A_CheckForHeiwa()) CritChance = 160;
		if (kc_expgains) 
		{
			CritChance = (128 - (ActualLevel * frandompick[statitem](0.03125,0.03125,0.03125,0.03125,0.0625,0.0625,0.0625,0.0625,0.09375,0.09375,0.09375,0.09375,0.125,0.125,0.125,0.125,0.15625,0.1875,0.21875,0.25)));
			if (A_CheckForHeiwa()) CritChance = (192 - (ActualLevel * frandompick[statitem](0.075,0.075,0.075,0.075,0.15,0.15,0.15,0.15,0.225,0.225,0.225,0.225,0.3,0.3,0.3,0.3,0.375,0.375,0.525,0.6)));
		}
		if (A_CheckForHeiwa()) 
		{
			if (CritChance <= 32) CritChance = 32;
		}
		else 
		{
			if (CritChance <= 64) CritChance = 64;
		}
		if (PlayerGUTS > 0) 
		{
			if (A_CheckForHeiwa()) CritChance *= (1.0 - double(PlayerGUTS / 256.0));
												else CritChance *= (1.0 - double(PlayerGUTS / 384.0));
		}
		if (owner.CountInv("PowerDouble")) CritChance *= 0.75;
		if (owner.CountInv("PowerHalve")) CritChance *= 1.3334;
		if (owner.CountInv("PlayerDashing")) 
		{
			if (A_CheckForHeiwa()) CritChance *= 0.625;
												else CritChance *= 0.875;
		}
		if (owner.CountInv("TimeSeraphVisor")) 
		{
			if (owner.CountInv("KCPowerKampoul"))
			{
						 if (owner.CountInv("TSArmorTier3Plus")) CritChance *= 0.0334;
				else if (owner.CountInv("TSArmorTier2")) CritChance *= 0.1;
				else if (owner.CountInv("TSArmorTier1")) CritChance *= 0.25;
																						else CritChance *= 0.625;
			}
			else
			{
						 if (owner.CountInv("TSArmorTier3Plus")) CritChance *= 0.5167; // 0.0334;
				else if (owner.CountInv("TSArmorTier2")) CritChance *= 0.55; // 0.1;
				else if (owner.CountInv("TSArmorTier1")) CritChance *= 0.625; // 0.25;
																						else CritChance *= 0.8125; // 0.625;
			}
			if (A_CheckForHeiwa()) CritChance *= frandompick(0.625,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.875);
												else CritChance *= frandompick(0.8125,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.875,0.9375);
		}
		if (A_CheckForHeiwa())
		{
			int temp = randompick(2,3,3,3,3,3,3,4);
			if (CritChance <= temp) CritChance = temp;
		}
		else 
		{
			if (CritChance <= 4) CritChance = 4;
		}

		double specitemfactor = 1.00;
		CritChance *= specitemfactor;
		if (A_CheckForHeiwa()) 
		{
			int temp = randompick(1,2,2,2,2,2,2,3);
			if (CritChance <= temp) CritChance = temp;
		}
		else 
		{
			if (CritChance <= 3) CritChance = 3;
		}
		
		if (MortalBlowCritBoostTimer > 0) 
		{
			if (A_CheckForHeiwa()) CritChance *= 0.09375;
												else CritChance *= 0.125;
		}
		else
		{
			if (owner.CountInv("OverFullHealth3")) CritChance *= 1.25;
			else if (owner.CountInv("OverFullHealth2")) CritChance *= 1.125;
			else if (owner.CountInv("OverFullHealth1")) CritChance *= 1.0625;
			else if (owner.CountInv("NormalHealth")) CritChance *= 1.0;
			else if (owner.CountInv("DecentHealth")) CritChance *= 0.9375;
			else if (owner.CountInv("LowHealth")) CritChance *= 0.875;
			else if (owner.CountInv("CriticalHealth")) CritChance *= 0.75;
		}
		if (CritChance <= 1) CritChance = 1;
		if (A_CheckForHeiwa())
		{
			int maxccance = 192;
			if (owner.CountInv("KCPowerKampoul"))
			{
				CritChance *= 0.25;
				maxccance *= 0.25;
			}
			if (MercyInvulnOnSiel > 0) 
			{
				CritChance *= 0.25;
				maxccance *= 0.25;
			}
			if (CritChance >= maxccance) CritChance = maxccance;
		}
		else
		{
			if (CritChance >= 128) CritChance = 128;
		}
		
		CritRoll = random[statitem](1,CritChance);
		if (CritRoll <= 1) owner.A_SetInventory("DealCriticalHit",1);
	}
	
	void MassStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (!A_CheckNoTimer())
		{
			TotalMass = 100;
			BaseMass = TotalMass;
			double massmulfactor = 0.22223;
			if (A_CheckForHeiwa()) massmulfactor = 0.188889;
			massmulfactor *= kc_pbalfactor;
			if (kc_expgains) massmulfactor *= 1.0;
			let playerset = KCPlayerPawn(owner);
			if (playerset) TotalMass = playerset.originalmass;
			BaseMass = TotalMass;
			if (kcdebug_masscalcs) Console.Printf("Mass [Base]: %d", TotalMass);
			
			int MassBonusAdd2 = MassBonusAdd;
			int MassLevelAdd2 = MassLevelAdd;
			MassNoRPGAdd2 = 0;
			if (!kc_expgains)
			{
				if (skill <= 0) MassBonusAdd2 *= 2.0;
				if (skill == 1) MassBonusAdd2 *= 1.75;
				if (skill == 2) MassBonusAdd2 *= 1.5;
				if (skill == 3) MassBonusAdd2 *= 1.25;
				if (skill >= 4) MassBonusAdd2 *= 1.0;
			}
			
			TotalMass += MassLevelAdd;
			BaseMass = TotalMass;
			if (kcdebug_masscalcs) Console.Printf("Mass [Level Add]: %d", TotalMass);
			
			TotalMass += MassBonusAdd;
			BaseMass = TotalMass;
			if (kcdebug_masscalcs) Console.Printf("Mass [Bonus Add]: %d", TotalMass);
			
			if (kc_expgains)
			{
				TotalMass += (ActualLevel * massmulfactor);
				BaseMass = TotalMass;
				if (kcdebug_masscalcs) Console.Printf("Mass [Level]: %d", TotalMass);
				
				if (kc_extraatkdefspd)
				{
					TotalMass += (TruePlayerDEF * massmulfactor);
					BaseMass = TotalMass;
					if (kcdebug_masscalcs) Console.Printf("Mass [DEF]: %d", TotalMass);
				}
			}
			PreBuffMass = BaseMass;
			
			// Buffs
			if ((owner.bINVULNERABLE || 
					 owner.player.cheats & CF_GODMODE2 || 
					 owner.player.cheats & CF_GODMODE) || 
					 owner.CountInv("KCPowerInvuln") || 
					 owner.CountInv("PowerInvulnerable")) TotalMass *= 128;
			
			if (berserked) 
			{
				if (A_CheckForHeiwa())
				{
					// Using the OG Doomguy Class Mass multi here now
					if (ActualLevel >= 200) TotalMass *= 1.556;
					else if (ActualLevel >= 150) TotalMass *= 1.445;
					else if (ActualLevel >= 100) TotalMass *= 1.334;
					else if (ActualLevel >= 50) TotalMass *= 1.223;
					else TotalMass *= 1.112;
				}
				else
				{
					// OG Doomguy class gets a rare mass buff :V
					if (ActualLevel >= 200) TotalMass *= 1.776;
					else if (ActualLevel >= 150) TotalMass *= 1.667;
					else if (ActualLevel >= 100) TotalMass *= 1.554;
					else if (ActualLevel >= 50) TotalMass *= 1.445;
					else TotalMass *= 1.334;
				}
			}

			if (Owner.CountInv("PowerGuard")) TotalMass *= 3;
			if (Owner.CountInv("PowerWeaken")) TotalMass /= 1.5;
			
			// Fist Blocks
			if ((weapon is "FistMarine" || 
					 weapon is "FistHeiwa") && 
					owner.CountInv("FistPlayerBlockItem"))
			{
				double fistboost = 1.00;
				if (weapon is "FistMarine")
				{
					if (Owner.CountInv("FistPlayerBlock"))  fistboost *= 2;
					if (Owner.CountInv("FistPlayerBlock2")) fistboost *= 2.667;
					if (Owner.CountInv("FistPlayerBlock3")) fistboost *= 4;
					if (Owner.CountInv("FistPlayerBlock4")) fistboost *= 7.5;
					
					TotalMass *= fistboost;
				}
				else if (weapon is "FistHeiwa")
				{
					if (Owner.CountInv("FistPlayerBlock"))  fistboost *= 5;
					if (Owner.CountInv("FistPlayerBlock2")) fistboost *= 6.667;
					if (Owner.CountInv("FistPlayerBlock3")) fistboost *= 10;
					if (Owner.CountInv("FistPlayerBlock4")) fistboost *= 17.5;
					
					if (TruePlayerLevel >= 120) fistboost *= 1.5;
					else if (TruePlayerLevel >= 90) fistboost *= 1.375;
					else if (TruePlayerLevel >= 60) fistboost *= 1.25;
					else if (TruePlayerLevel >= 30) fistboost *= 1.125;
					TotalMass *= fistboost;
				}
			}
			// Fist Blocks
			if (weapon is "KnifeHeiwa" && 
					owner.CountInv("KnifePlayerSwingItem"))
			{
				if (Owner.CountInv("KnifePlayerSwing"))  TotalMass *= 1.75;
				if (Owner.CountInv("KnifePlayerSwing2")) TotalMass *= 2.167;
				if (Owner.CountInv("KnifePlayerSwing3")) TotalMass *= 3;
				if (Owner.CountInv("KnifePlayerSwing4")) TotalMass *= 4.875;
			}

			// Food
			double mealbuff = 1.0;
			if (Owner.CountInv("PowerLMPieBuff")) mealbuff += 0.5;
			TotalMass *= mealbuff;
			if (kcdebug_masscalcs) Console.Printf("Mass [Buffs]: %d", TotalMass);

			If (weapon is "EvilWarriorShield")
			{
				TotalMass *= (1.5 + (HellWarriorShieldLevel * 0.075));
				if (Owner.CountInv("EWShieldDefendMode")) TotalMass *= (3.5 + (HellWarriorShieldLevel * 0.175));
				if (Owner.CountInv("EWShieldDefendModeExtra")) TotalMass *= (1.75 + (HellWarriorShieldLevel * 0.0875));
				if (berserked) TotalMass *= 2.5;
			}
			
			double NewMssFct = mssfct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewMssFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewMssFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewMssFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewMssFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewMssFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
			}
			TotalMass *= NewMssFct;
			if (kcdebug_masscalcs && NewMssFct) Console.Printf("Mass [NewMssFct]: %d, NewMssFct: %.8f", TotalMass, NewMssFct);
			
			// Armor
			name armorclasstype = "KCArmor";
			int ArmorAmt = owner.CountInv(armorclasstype);
			double MassInc = 0;
			double MassMulti = 1.0;
			double Base = 0.08;
			double BaseMulti = 0.0002;
			darmortype = 0;
			darmortype2 = 0;
			truearmortype = 0;
			let armor = owner.FindInventory("KCArmor");
			if (armor)
			{
				textureid icon = armor.icon;
				if (icon == TexMan.CheckForTexture("BON2A0", TexMan.TYPE_MiscPatch) ||
						icon == TexMan.CheckForTexture("BON4A0", TexMan.TYPE_MiscPatch) ||
						icon == TexMan.CheckForTexture("ARM1A0", TexMan.TYPE_MiscPatch) ||
						icon == TexMan.CheckForTexture("SHLDA0", TexMan.TYPE_MiscPatch)) 
				{
					darmortype = 1;
					darmortype2 = 1;
					truearmortype = 1;
				}
				else
				if (icon == TexMan.CheckForTexture("ARM2A0", TexMan.TYPE_MiscPatch) ||
						icon == TexMan.CheckForTexture("SHD2A0", TexMan.TYPE_MiscPatch))
				{
					darmortype = 2;
					darmortype2 = 2;
					truearmortype = 2;
				}
				else
				if (icon == TexMan.CheckForTexture("HEVAB0", TexMan.TYPE_MiscPatch))
				{
					darmortype = 3;
					darmortype2 = 3;
					truearmortype = 3;
				}
				if (owner.CountInv("TSArmorTier1") || 
						owner.CountInv("TSArmorTier2") ||
						owner.CountInv("TSArmorTier3Plus"))
				{
					darmortype = 0;
				}
					
				if (darmortype > 0)
				{
					if (darmortype == 1)
					{
						Base *= 1.0;
						BaseMulti *= 1.0;
					}
					if (darmortype == 2)
					{
						Base *= 2.0;
						BaseMulti *= 2.0;
					}
					if (darmortype == 3)
					{
						Base *= 4.75;
						BaseMulti *= 4.75;
					}
		
					MassInc = floor(ArmorAmt * Base);
					MassMulti = (ArmorAmt * BaseMulti);
					MassMulti += 1.0;
					
					if (MassInc) TotalMass += MassInc;
					if (MassMulti != 1.0) TotalMass *= MassMulti;
					if (kcdebug_masscalcs && darmortype) Console.Printf("Mass [\c[green]Armor\c-]: %d, Inc: %.8f, Multi: %.8f, kc_armorencumbrance: %.8f, darmortype: %d", TotalMass, MassInc, MassMulti, kc_armorencumbrance, darmortype);
				}
			}

			// TSArmor
			TotalNonTSAMass = TotalMass;
			bool debugtsamass = false;
			if (!(owner.bINVULNERABLE || 
					 owner.player.cheats & CF_GODMODE2 || 
					 owner.player.cheats & CF_GODMODE) || 
					 owner.CountInv("KCPowerInvuln") || 
					 owner.CountInv("PowerInvulnerable"))
			{
				int tsamassmul = kc_tsamassmultbase;
				tsamassmul *= kc_tsaeffectiveness;
				if (owner.CountInv("TSArmorTier3Plus")) 
				{
					debugtsamass = true;
					TotalMass *= (tsamassmul*tsamassmul*tsamassmul);
					TotalNonTSAMass *= ((tsamassmul*tsamassmul*tsamassmul) * 0.25);
				}
				else if (owner.CountInv("TSArmorTier2")) 
				{
					debugtsamass = true;
					TotalMass *= (tsamassmul*tsamassmul);
					TotalNonTSAMass *= ((tsamassmul*tsamassmul) * 0.25);
				}
				else if (owner.CountInv("TSArmorTier1")) 
				{
					debugtsamass = true;
					TotalMass *= tsamassmul;
					TotalNonTSAMass *= ((tsamassmul) * 0.25);
				}
				if (kcdebug_masscalcs && debugtsamass) Console.Printf("Mass [\c[HeiwaDeluge]TSArmor\c-]: %d, Inc: %.8f, Multi: %.8f, kc_armorencumbrance: %.8f", TotalMass, MassInc, MassMulti, kc_armorencumbrance);
			}

			if (TotalMass < 1) TotalMass = 1;
			
			owner.Mass = TotalMass;
			if (kcdebug_masscalcs) Console.Printf("    Calculated Mass: %d (Base Mass: %d) [Real Mass: %d]", TotalMass, BaseMass, owner.mass);
		}
	}
	
	void JumpStuff()
	{
		name armorclasstype = "KCArmor";
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (!A_CheckNoTimer())
		{
			double CharacterJumpZ = 8.25;
			if (A_CheckForHeiwa()) CharacterJumpZ = 9;
			if (IsMorphed == 1) 
			{
				CharacterJumpZ *= 0.334;
			}
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Character Base]: %.8f", CharacterJumpZ);

			// Level
			double LevelJumpZ = 1.00;
			double baseval = 0.004375;
			if (A_CheckForHeiwa()) baseval = 0.004773;
			baseval *= 0.3334;
			baseval *= kc_pjumpfactor;
			if (kc_expgains) 
			{
				if (IsMorphed == 1)
				{
					LevelJumpZ += (ActualLevel * (baseval * 0.334));
				}
				else
				{
					LevelJumpZ += (ActualLevel * baseval);
				}
				LevelJumpZ *= 1.0;
				if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Level]: %.8f", LevelJumpZ);
			}
			
			// Speed
			double SpeedJumpZ = 1.00;
			baseval = 0.004375; // 0.004375;
			if (A_CheckForHeiwa()) baseval = 0.004773;
			baseval *= 0.3334;
			baseval *= kc_pjumpfactor;
			if (kc_expgains && kc_extraatkdefspd) 
			{
				if (IsMorphed == 1)
				{
					SpeedJumpZ += (TruePlayerSPD * (baseval * 0.3334));
				}
				else
				{
					SpeedJumpZ += (TruePlayerSPD * baseval);
				}
				SpeedJumpZ *= 1.0;
				if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Speed]: %.8f", SpeedJumpZ);
			}
			
			double HealthJumpZ = 1.0;
			if (CurrentHealth >= (MaxHealthTrue * 3)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.5;
				if (skill == 1) HealthJumpZ *= 1.375;
				if (skill == 2) HealthJumpZ *= 1.25;
				if (skill == 3) HealthJumpZ *= 1.125;
				if (skill >= 4) HealthJumpZ *= 1.0625;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 2.75))
			{
				if (skill <= 0) HealthJumpZ *= 1.4375;
				if (skill == 1) HealthJumpZ *= 1.328125;
				if (skill == 2) HealthJumpZ *= 1.21875;
				if (skill == 3) HealthJumpZ *= 1.109375;
				if (skill >= 4) HealthJumpZ *= 1.0546875;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 2.5)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.375;
				if (skill == 1) HealthJumpZ *= 1.28125;
				if (skill == 2) HealthJumpZ *= 1.1875;
				if (skill == 3) HealthJumpZ *= 1.09375;
				if (skill >= 4) HealthJumpZ *= 1.046875;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 2.25)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.3125;
				if (skill == 1) HealthJumpZ *= 1.234375;
				if (skill == 2) HealthJumpZ *= 1.15625;
				if (skill == 3) HealthJumpZ *= 1.078125;
				if (skill >= 4) HealthJumpZ *= 1.0390625;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 2.0)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.25;
				if (skill == 1) HealthJumpZ *= 1.1875;
				if (skill == 2) HealthJumpZ *= 1.125;
				if (skill == 3) HealthJumpZ *= 1.0625;
				if (skill >= 4) HealthJumpZ *= 1.03125;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 1.75)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.1875;
				if (skill == 1) HealthJumpZ *= 1.140625;
				if (skill == 2) HealthJumpZ *= 1.09375;
				if (skill == 3) HealthJumpZ *= 1.046875;
				if (skill >= 4) HealthJumpZ *= 1.0234375;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 1.5)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.125;
				if (skill == 1) HealthJumpZ *= 1.09375;
				if (skill == 2) HealthJumpZ *= 1.0625;
				if (skill == 3) HealthJumpZ *= 1.03125;
				if (skill >= 4) HealthJumpZ *= 1.015625;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 1.25)) 
			{
				if (skill <= 0) HealthJumpZ *= 1.09375;
				if (skill == 1) HealthJumpZ *= 1.0625;
				if (skill == 2) HealthJumpZ *= 1.03125; 
				if (skill == 3) HealthJumpZ *= 1.015625;
				if (skill >= 4) HealthJumpZ *= 1.0078125;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 0.75)) 
			{
				HealthJumpZ *= 1.00;
			}
			else if (CurrentHealth >= (MaxHealthTrue * 0.5)) 
			{
				if (!owner.CountInv("KCPowerKampoul")) 
				{
					if (skill <= 0) HealthJumpZ *= 0.984375;
					if (skill == 1) HealthJumpZ *= 0.96875;
					if (skill == 2) HealthJumpZ *= 0.9375;
					if (skill == 3) HealthJumpZ *= 0.90625;
					if (skill >= 4) HealthJumpZ *= 0.875;
				}
			}
			else if (CurrentHealth >= (MaxHealthTrue * 0.25))
			{
				if (!owner.CountInv("KCPowerKampoul")) 
				{
					if (skill <= 0) HealthJumpZ *= 0.96875;
					if (skill == 1) HealthJumpZ *= 0.9375;
					if (skill == 2) HealthJumpZ *= 0.875;
					if (skill == 3) HealthJumpZ *= 0.8125;
					if (skill >= 4) HealthJumpZ *= 0.75;
				}
			}
			else if (CurrentHealth > 1)
			{
				if (!owner.CountInv("KCPowerKampoul")) 
				{
					if (skill <= 0) HealthJumpZ *= 0.9375;
					if (skill == 1) HealthJumpZ *= 0.875;
					if (skill == 2) HealthJumpZ *= 0.75;
					if (skill == 3) HealthJumpZ *= 0.625;
					if (skill >= 4) HealthJumpZ *= 0.5;
				}
			}
			else if (CurrentHealth == 1)
			{
				if (!owner.CountInv("KCPowerKampoul")) 
				{
					if (skill <= 0) HealthJumpZ *= 0.46875;
					if (skill == 1) HealthJumpZ *= 0.4375;
					if (skill == 2) HealthJumpZ *= 0.375;
					if (skill == 3) HealthJumpZ *= 0.3125;
					if (skill >= 4) HealthJumpZ *= 0.25;
				}
			}
			else if (CurrentHealth <= 0)
			{
				HealthJumpZ *= 0.0;
			}
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Health]: %.8f", HealthJumpZ);

			// Buffs
			double BuffJumpZ = 1.00;
			if (Owner.CountInv("PowerHaste")) BuffJumpZ *= 1.25;
			if (Owner.CountInv("PowerSlow")) BuffJumpZ *= 0.834;
			if (berserked) BuffJumpZ *= 1.334;
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Buffs]: %.8f", BuffJumpZ);

			double FoodJumpZ = 1.0;
			if (owner.CountInv("PowerLMPieBuff")) FoodJumpZ += 0.04;
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Food Buffs]: %.8f", FoodJumpZ);

			// Armor
			double ArmorJumpZ = 1.00;
			double armordiffmod = 1.00;
			int ArmorAmt = owner.CountInv(armorclasstype);
			double ArmorRatio = 0.0;
			int BMaxArmor = MaxHealthTrue;
			double fact = (owner.CountInv("SpecialBackpackBonus") * spbkpkarmorbonus);
			BMaxArmor *= (1.0 + fact);
			if (BMaxArmor > 0) ArmorRatio = double((ArmorAmt * 1.0) / (BMaxArmor * 1.0));
			double ArmorWeight;
			ArmorEnc = 0.00;
			if (owner.CountInv("TSArmorTier3Plus"))
			{
				if (A_CheckForHeiwa())
				{
					ArmorWeight = 0.01875;
					if (berserked) ArmorWeight *= 0.25;
				}
				else
				{
					ArmorWeight = 0.075;
					if (berserked) ArmorWeight *= 0.875;
				}
				ArmorWeight *= ArmorHealthFactor;
				ArmorWeight *= armordiffmod;
				ArmorEnc = ArmorWeight;
			}
			else
			if (owner.CountInv("TSArmorTier2"))
			{
				if (A_CheckForHeiwa())
				{
					ArmorWeight = 0.015625;
					if (berserked) ArmorWeight *= 0.25;
				}
				else
				{
					ArmorWeight = 0.0625;
					if (berserked) ArmorWeight *= 0.875;
				}
				ArmorWeight *= ArmorHealthFactor;
				ArmorWeight *= armordiffmod;
				ArmorEnc = ArmorWeight;
			}
			else
			if (owner.CountInv("TSArmorTier1"))
			{
				if (A_CheckForHeiwa())
				{
					ArmorWeight = 0.0125;
					if (berserked) ArmorWeight *= 0.25;
				}
				else
				{
					ArmorWeight = 0.05;
					if (berserked) ArmorWeight *= 0.875;
				}
				ArmorWeight *= ArmorHealthFactor;
				ArmorWeight *= armordiffmod;
				ArmorEnc = ArmorWeight;
			}
			else
			{
				if (A_CheckForHeiwa())
				{
					if (darmortype == 1) // Green Armor [Doom-type] (100% of HP max)
					{
						ArmorWeight = HARMORWEIGHTGREEN;
						if (berserked) ArmorWeight *= 0.4;
						if (ArmorRatio >= GREENARMORVALDOUBLE) ArmorRatio = GREENARMORVALDOUBLE;
					}
					if (darmortype == 2) // Blue Armor [Doom-type] (200% of HP max)
					{
						ArmorWeight = HARMORWEIGHTBLUE;
						if (berserked) ArmorWeight *= 0.4;
						if (ArmorRatio >= BLUEARMORVALDOUBLE) ArmorRatio = BLUEARMORVALDOUBLE;
					}
					if (darmortype == 3) // Red Armor [Doom-type] (350% of HP max)
					{
						ArmorWeight = HARMORWEIGHTRED;
						if (berserked) ArmorWeight *= 0.4;
						if (ArmorRatio >= REDARMORVALDOUBLE) ArmorRatio = REDARMORVALDOUBLE;
					}
				}
				else
				{
					if (darmortype == 1) // Green Armor [Doom-type] (100% of HP max)
					{
						ArmorWeight = MARMORWEIGHTGREEN;
						if (berserked) ArmorWeight *= 0.6;
						if (ArmorRatio >= GREENARMORVALDOUBLE) ArmorRatio = GREENARMORVALDOUBLE;
					}
					if (darmortype == 2) // Blue Armor [Doom-type] (200% of HP max)
					{
						ArmorWeight = MARMORWEIGHTBLUE;
						if (berserked) ArmorWeight *= 0.6;
						if (ArmorRatio >= BLUEARMORVALDOUBLE) ArmorRatio = BLUEARMORVALDOUBLE;
					}
					if (darmortype == 3) // Red Armor [Doom-type] (350% of HP max)
					{
						ArmorWeight = MARMORWEIGHTRED;
						if (berserked) ArmorWeight *= 0.6;
						if (ArmorRatio >= REDARMORVALDOUBLE) ArmorRatio = REDARMORVALDOUBLE;
					}
				}
				ArmorWeight *= ArmorHealthFactor;
				ArmorWeight *= armordiffmod;
				ArmorWeight *= (1.00 - (owner.CountInv("SpecialBackpackBonus") * 0.025));
				ArmorEnc = (ArmorWeight * ArmorRatio);
			}
			if (kcdebug_jumpingcalcs) Console.Printf("ArmorEnc: %.8f, ArmorWeight: %.8f, ArmorHealthFactor: %.8f, ArmorRatio: %.8f (%d / %d)", ArmorEnc, ArmorWeight, ArmorHealthFactor, ArmorRatio, ArmorAmt, BMaxArmor);
			
			ArmorEnc *= kc_armorencumbrance;
			ArmorEncL = ArmorEnc;
			if (owner.waterlevel >= 3) ArmorEnc *= 1.25;
			else if (owner.waterlevel == 2) ArmorEnc *= 1.08334;
			else if (owner.waterlevel == 1) ArmorEnc *= 1.025;
			
			double ArmorEncEft = (1.00 - (TruePlayerLevel * LVLfactArmr) - (TruePlayerATK * ATKfactArmr));
			if (ArmorEncEft <= 0.25) ArmorEncEft = 0.25;
			if (ArmorEncEft > 1.0) ArmorEncEft = 1.0;
			ArmorEnc *= ArmorEncEft;
			if (kcdebug_jumpingcalcs) Console.Printf("ArmorEncEft: %.8f", ArmorEncEft);
			
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				ArmorJumpZ -= ArmorEnc;
				if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Armor]: %.8f, ArmorEnc: %.8f, kc_armorencumbrance: %.8f", ArmorJumpZ, ArmorEnc, kc_armorencumbrance);
			}

			// Special
			double SpecialJumpZ = 1.00;
			if (A_CheckForHeiwa())
			{
				if (owner.CountInv("TSArmorTier3Plus") ||
						owner.CountInv("TSArmorTier2")) 
				{
					if (owner.CountInv("TimeSeraphVisor")) SpecialJumpZ *= frandompick(1.0,1.1875,1.1875,1.1875,1.375); 
																						else SpecialJumpZ *= frandompick(1.0,1.125,1.125,1.125,1.25);
				}
			}
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [SpecialItems]: %.8f", SpecialJumpZ);

			// Weapon Checks
			weapon = owner.player.ReadyWeapon;
			double WeaponJumpZ = 1.00;
			double WeaponJumpEx = 0.00;
			double BaseEncFactor = 0.00;
			if (weapon is "FistMarine" || 
					weapon is "FistHeiwa" ||
					weapon is "KnifeHeiwa")
			{
				if (A_CheckForHeiwa()) BaseEncFactor = 0.1667;
													else BaseEncFactor = 0.125;
				if (berserked) BaseEncFactor *= 1.5;
			}
			if (weapon is "Glock21")
			{
				if (A_CheckForHeiwa()) BaseEncFactor = -0.0125;
													else BaseEncFactor = -0.00078125;
				if (berserked) BaseEncFactor *= 0.25;
			}
			if (weapon is "BlasterPistol")
			{
				bool dualbpistols = false;
				if (owner.CountInv("DualBlasterPistols") && !owner.CountInv("DualBlasterPistolsDisabled")) dualbpistols = true;

				if (A_CheckForHeiwa()) BaseEncFactor = -0.016875;
													else BaseEncFactor = -0.0010546875;
				if (berserked) BaseEncFactor *= 0.25;
				
				if (dualbpistols) BaseEncFactor *= 1.75;
				if (owner.CountInv("BlasterPistolUpgrade"))
				{
					if (dualbpistols) BaseEncFactor *= 0.667;
											 else BaseEncFactor *= 0.75;
				}
			}
			if (weapon is "RiotGun")
			{
				if (A_CheckForHeiwa()) BaseEncFactor = -0.1;
													else BaseEncFactor = -0.05;
				if (berserked) BaseEncFactor *= 0.25;
				
				if (owner.CountInv("RiotGunUpgrade")) BaseEncFactor *= 0.75;
			}
			if (weapon is "TommyGun")
			{
				bool dualtommys = false;
				if (owner.CountInv("DualTommyGuns") && !owner.CountInv("DualTommyGunsDisabled")) dualtommys = true;
				
				if (A_CheckForHeiwa())
				{
					if (dualtommys) BaseEncFactor = -0.1125;
										 else BaseEncFactor = -0.05;
				}
				else
				{
					if (dualtommys) BaseEncFactor = -0.05625;
										 else BaseEncFactor = -0.025;
				}
				if (berserked) BaseEncFactor *= 0.25;
				
				if (owner.CountInv("TommyGunUpgrade"))
				{
					if (dualtommys) BaseEncFactor *= 0.667;
										 else BaseEncFactor *= 0.75;
				}
			}
			if (weapon is "BlasterRifle")
			{
				if (A_CheckForHeiwa()) BaseEncFactor = -0.05;
													else BaseEncFactor = -0.025;
				if (berserked) BaseEncFactor *= 0.25;
				
				if (owner.CountInv("BlasterRifleUpgrade")) BaseEncFactor *= 0.667;
			}
			if (weapon is "Deviation")
			{
				if (A_CheckForHeiwa()) BaseEncFactor = -0.15;
													else BaseEncFactor = -0.10;
				if (berserked) BaseEncFactor *= 0.25;
				
			}
			if (weapon is "Devastator")
			{
				bool dualdevs = false;
				if (owner.CountInv("DualDevastators") && !owner.CountInv("DualDevastatorsDisabled")) dualdevs = true;

				if (A_CheckForHeiwa())
				{
					if (dualdevs) BaseEncFactor = -0.225;
									 else BaseEncFactor = -0.1;
				}
				else
				{
					if (dualdevs) BaseEncFactor = -0.1125;
									 else BaseEncFactor = -0.05;
				}
				if (berserked) BaseEncFactor *= 0.25;
				
				if (owner.CountInv("DevastatorUpgrade"))
				{
					if (dualdevs) BaseEncFactor *= 0.5834;
									 else BaseEncFactor *= 0.667;
				}
			}
			if (weapon is "TeslaCannon")
			{
				bool dualteslas = false;
				if (owner.CountInv("DualTeslaCannons") && !owner.CountInv("DualTeslaCannonsDisabled")) dualteslas = true;

				if (A_CheckForHeiwa())
				{
					if (dualteslas) BaseEncFactor = -0.1;
										 else BaseEncFactor = -0.0625;
				}
				else
				{
					if (dualteslas) BaseEncFactor = -0.05;
										 else BaseEncFactor = -0.0078125;
				}
				if (berserked) BaseEncFactor *= 0.25;
			}
			if (weapon is "Incinerator")
			{
				BaseEncFactor = -0.09375;
				if (berserked) BaseEncFactor *= 0.25;
			}
			if (weapon is "BHGen")
			{
				if (A_CheckForHeiwa()) BaseEncFactor -= 0.25;
													else BaseEncFactor -= 0.1875;
				if (berserked) BaseEncFactor *= 0.25;
			}
			if (weapon is "CalamityBlade")
			{
				BaseEncFactor -= 0.1667;
				if (owner.CountInv("CalamityBladeUpgrade")) BaseEncFactor *= 0.25;
				
				if (berserked) BaseEncFactor *= 0.25;
			}
			If (weapon is "EvilWarriorShield")
			{
				if (Owner.CountInv("HWShieldBlockHold")) BaseEncFactor = (-0.25 * (1.0 + (HellWarriorShieldLevel * 0.0015625)));
																						else BaseEncFactor = (-0.10 * (1.0 + (HellWarriorShieldLevel * 0.00625)));
				if (A_CheckForHeiwa()) BaseEncFactor *= 1.334;
				if (berserked) BaseEncFactor *= 0.5;
				if (A_CheckForHeiwa())
				{
					double basebonus = 0.875;
					if (berserked) basebonus = 0.8125;
					if (TruePlayerLevel >= 10) BaseEncFactor *= basebonus;
					if (TruePlayerLevel >= 20) BaseEncFactor *= basebonus;
					if (TruePlayerLevel >= 30) BaseEncFactor *= basebonus;
					if (TruePlayerLevel >= 40) BaseEncFactor *= basebonus;
					if (TruePlayerLevel >= 50) BaseEncFactor *= basebonus;
					if (TruePlayerLevel >= 60) BaseEncFactor *= (basebonus*basebonus);
					if (TruePlayerLevel >= 70) BaseEncFactor *= (basebonus*basebonus);
					if (TruePlayerLevel >= 80) BaseEncFactor *= (basebonus*basebonus);
					if (TruePlayerLevel >= 90) BaseEncFactor *= (basebonus*basebonus);
					if (TruePlayerLevel >= 100) BaseEncFactor *= (basebonus*basebonus);
					if (TruePlayerLevel >= 120) BaseEncFactor *= (basebonus*basebonus*basebonus);
				}
			}
			
			double WeaponEncEft = (1.00 - (TruePlayerLevel * LVLfactWeap) - (TruePlayerATK * ATKfactWeap));
			if (WeaponEncEft <= 0.25) WeaponEncEft = 0.25;
			if (WeaponEncEft > 1.0) WeaponEncEft = 1.0;
			if (BaseEncFactor < 0.0) BaseEncFactor *= WeaponEncEft;
			WeaponJumpEx += BaseEncFactor;
			
			WeaponJumpEx *= kc_weaponencumbrance;
			WeaponJumpZ += WeaponJumpEx;
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [WeaponEquipped]: %.8f, WeaponJumpEx: %.8f, BaseEncFactor: %.8f, kc_weaponencumbrance: %.8f", WeaponJumpZ, WeaponJumpEx, BaseEncFactor, kc_weaponencumbrance);
			
			double FistBlockJumpZ = 1.00;
			if (A_CheckForHeiwa())
			{
				if (Owner.CountInv("FistPlayerSpeedFactor")) FistBlockJumpZ = 0.5;
				if (Owner.CountInv("FistPlayerSpeedFactor2")) FistBlockJumpZ = 0.65;
				if (Owner.CountInv("FistPlayerSpeedFactor3")) FistBlockJumpZ = 0.80;
				if (Owner.CountInv("FistPlayerSpeedFactor4")) FistBlockJumpZ = 0.95;
				
				if (Owner.CountInv("KnifePlayerSpeedFactor")) FistBlockJumpZ = 1.0125;
				if (Owner.CountInv("KnifePlayerSpeedFactor2")) FistBlockJumpZ = 1.025;
				if (Owner.CountInv("KnifePlayerSpeedFactor3")) FistBlockJumpZ = 1.05;
				if (Owner.CountInv("KnifePlayerSpeedFactor4")) FistBlockJumpZ = 1.1;
			}
			else
			{
				if (Owner.CountInv("FistPlayerSpeedFactor")) FistBlockJumpZ = 0.75;
				if (Owner.CountInv("FistPlayerSpeedFactor2")) FistBlockJumpZ = 0.825;
				if (Owner.CountInv("FistPlayerSpeedFactor3")) FistBlockJumpZ = 0.90;
				if (Owner.CountInv("FistPlayerSpeedFactor4")) FistBlockJumpZ = 0.975;
			}
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [Fist-Blocking]: %.8f", FistBlockJumpZ);
			
			// Drowning Debuff
			double DrownDebuffJumpZ = 1.00;
			if (drowndebufflevel) DrownDebuffJumpZ = 1.00 - (drowndebufflevel * frandompick[statitem](0.06,0.075,0.09));
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [DrownDebuff]: %.8f", DrownDebuffJumpZ);
			
			double NewJmpFct = jmpfct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewJmpFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewJmpFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewJmpFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewJmpFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewJmpFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
			}
			if (kcdebug_jumpingcalcs) Console.Printf("JumpZ [jmpfct]: %.8f (%.8f)", NewJmpFct, jmpfct);
			
			double TotalJumpZ = CharacterJumpZ
												* LevelJumpZ
												* SpeedJumpZ
												* HealthJumpZ
												* BuffJumpZ
												* ArmorJumpZ
												* WeaponJumpZ
												* SpecialJumpZ
												* FistBlockJumpZ
												* DrownDebuffJumpZ
												* NewJmpFct;

			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			actualjumpheight = ((TotalJumpZ * 35 / TICRATE) * 18);
			actualjumpheight2 = (((TotalJumpZ*2)**2)/2+owner.maxstepheight)/((TotalJumpZ**2)/2+owner.maxstepheight);
			TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
			if (kcdebug_jumpingcalcs) Console.Printf("TotalJumpZ: %.8f [\c[gold]actualjumpheight: %d\c- / \c[fire]actualjumpheight2: %d\c-x / \c[blue]TrueJumpHeight: %d\c-] (CharacterJumpZ: %.8f, LevelJumpZ: %.8f, SpeedJumpZ: %.8f, HealthJumpZ: %.8f, BuffJumpZ: %.8f, ArmorJumpZ: %.8f, SpecialJumpZ: %.8f, WeaponJumpZ: %.8f, jmpfct: %.8f (%.8f)), owner.maxstepheight: %d, \c[red]TICRATE: %d\c-", TotalJumpZ, actualjumpheight, actualjumpheight2, TrueJumpHeight, CharacterJumpZ, LevelJumpZ, SpeedJumpZ, HealthJumpZ, BuffJumpZ, ArmorJumpZ, SpecialJumpZ, WeaponJumpZ, NewJmpFct, jmpfct, owner.maxstepheight, TICRATE);
		}
	}
	
	
	void RenderStyleStuff()
	{
		let playeractor = KCPlayerPawn(owner);
		InvisPulseTimer = level.totaltime % 40;
		double InvisPulseAlpha = 1.00;
		double DashAlpha = 1.00;

		int InvisibilityTimer;
		if (!A_CheckNoTimer())
		{
			let MiscItem = PowerGhost(owner.FindInventory("PowerGhost",true));
			let MiscItem2 = PowerInvisibility(owner.FindInventory("PowerInvisibility",true));
			if (MiscItem || MiscItem2)
			{
				if (MiscItem) InvisibilityTimer = MiscItem.EffectTics;
				else if (MiscItem2) InvisibilityTimer = MiscItem2.EffectTics;
				//Console.Printf("InvisibilityTimer: %d", InvisibilityTimer);
				if (InvisibilityTimer > 0)
				{
					if (InvisPulseTimer == 0 || InvisPulseTimer == 20 || InvisPulseTimer == 40) InvisPulseAlpha = 0.20;
					if (InvisPulseTimer == 1 || InvisPulseTimer == 19) InvisPulseAlpha = 0.205;
					if (InvisPulseTimer == 2 || InvisPulseTimer == 18) InvisPulseAlpha = 0.21;
					if (InvisPulseTimer == 3 || InvisPulseTimer == 17) InvisPulseAlpha = 0.215;
					if (InvisPulseTimer == 4 || InvisPulseTimer == 16) InvisPulseAlpha = 0.22;
					if (InvisPulseTimer == 5 || InvisPulseTimer == 15) InvisPulseAlpha = 0.225;
					if (InvisPulseTimer == 6 || InvisPulseTimer == 14) InvisPulseAlpha = 0.23;
					if (InvisPulseTimer == 7 || InvisPulseTimer == 13) InvisPulseAlpha = 0.235;
					if (InvisPulseTimer == 8 || InvisPulseTimer == 12) InvisPulseAlpha = 0.24;
					if (InvisPulseTimer == 9 || InvisPulseTimer == 11) InvisPulseAlpha = 0.245;
					if (InvisPulseTimer == 10) InvisPulseAlpha = 0.25;
					if (InvisPulseTimer == 21 || InvisPulseTimer == 39) InvisPulseAlpha = 0.195;
					if (InvisPulseTimer == 22 || InvisPulseTimer == 38) InvisPulseAlpha = 0.19;
					if (InvisPulseTimer == 23 || InvisPulseTimer == 37) InvisPulseAlpha = 0.185;
					if (InvisPulseTimer == 24 || InvisPulseTimer == 36) InvisPulseAlpha = 0.18;
					if (InvisPulseTimer == 25 || InvisPulseTimer == 35) InvisPulseAlpha = 0.175;
					if (InvisPulseTimer == 26 || InvisPulseTimer == 34) InvisPulseAlpha = 0.17;
					if (InvisPulseTimer == 27 || InvisPulseTimer == 33) InvisPulseAlpha = 0.165;
					if (InvisPulseTimer == 28 || InvisPulseTimer == 32) InvisPulseAlpha = 0.16;
					if (InvisPulseTimer == 29 || InvisPulseTimer == 31) InvisPulseAlpha = 0.155;
					if (InvisPulseTimer == 30) InvisPulseAlpha = 0.15;
				}

				if (DashTics)
				{
					if (random[statitem](1,128) <= (68 + (ActualLevel * frandom[statitem](2.75,4.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
				}
				else
				{
					if (random[statitem](1,128) <= (64 + (ActualLevel * frandom[statitem](0.75,1.25)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
				}
			}
			else
			{
				if (DashTics)
				{
					if (random[statitem](1,128) <= (4 + (ActualLevel * frandom[statitem](2,3)))) Owner.bCANTSEEK = true; else Owner.bCANTSEEK = false;
				}
				else
				{
					Owner.bCANTSEEK = false;
				}
			}

			if (DashTics)
			{
				if (level.time % 4 <= 1) DashAlpha = frandompick[statitem](0.375,0.5,0.625);
														else DashAlpha = frandompick[statitem](0.625,0.75,0.875);
			}
			if (DashTics) owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Add);
							 else owner.A_SetRenderStyle((DashAlpha*InvisPulseAlpha*MercyFlickerAlpha),STYLE_Translucent);
		}
	}
	
	void MercyInvulnStuff()
	{
		let playeractor = KCPlayerPawn(owner);
		
		MercyFlickerAlpha = 1.0;
		if (!A_CheckNoTimer())
		{
			if (MercyInvulnOn)
			{
				if (MercyInvulnTimer > 0)
				{
					if (!(owner.CountInv("KCPowerInvuln") || owner.CountInv("PowerInvulnerable")))
					{
						owner.player.cheats |= CF_GODMODE;
						owner.bINVULNERABLE = 1;
					}
					MercyInvulnMod = MercyInvulnTimer % 120;
					if (MercyInvulnMod >= 0 && MercyInvulnMod <= 14) MercyFlickerAlpha = 0.25;
					if (MercyInvulnMod >= 15 && MercyInvulnMod <= 29) MercyFlickerAlpha = 0.3125;
					if (MercyInvulnMod >= 30 && MercyInvulnMod <= 44) MercyFlickerAlpha = 0.375;
					if (MercyInvulnMod >= 45 && MercyInvulnMod <= 59) MercyFlickerAlpha = 0.4375;
					if (MercyInvulnMod >= 60 && MercyInvulnMod <= 74) MercyFlickerAlpha = 0.5;
					if (MercyInvulnMod >= 75 && MercyInvulnMod <= 89) MercyFlickerAlpha = 0.4375;
					if (MercyInvulnMod >= 90 && MercyInvulnMod <= 104) MercyFlickerAlpha = 0.375;
					if (MercyInvulnMod >= 105 && MercyInvulnMod <= 119) MercyFlickerAlpha = 0.3125;
					if (kcdebug_mercyinvulndisplays) Console.Printf("MercyFlickerAlpha: %.8f, MercyInvulnMod [Timer]: %d [%d]", MercyFlickerAlpha, owner.GetRenderStyle(), MercyInvulnMod, MercyInvulnTimer);
					MercyInvulnTimer -= 20;
				}
				else // Timer at zero
				{
					if (!(owner.CountInv("KCPowerInvuln") || owner.CountInv("PowerInvulnerable")))
					{
						owner.player.cheats &= ~CF_GODMODE;
						owner.bINVULNERABLE = 0;
					}
					MercyInvulnTimer = MercyInvulnMod = 0;
					MercyInvulnOn = false;
					MercyInvulnOnSiel = false;
				}
			}
			else
			{
				if (!(owner.CountInv("KCPowerInvuln") || owner.CountInv("PowerInvulnerable")))
				{
					owner.player.cheats &= ~CF_GODMODE;
					owner.bINVULNERABLE = 0;
				}
			}
			if (kcdebug_mercyinvulndisplays) Console.Printf("MercyInvuln: %d {%d} [%d]", MercyInvulnOn, MercyInvulnMod, MercyInvulnTimer);
		}
	}
	
	void InventoryWeaponLimits()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (!A_CheckNoTimer())
		{
			int dropamt;
			string itemname;
			int baseholdamount;
			double leveladd, atkadd;
			int itemsmax;
			int itemid;
			double baselvlfactor = 50.0;
			if (owner.CountInv("PlayingHexen")) baselvlfactor = 33.4;
			double baseatkfactor = 50.0;
			double minf = 1.0;
			if (minf < 0.5) minf = 0.5;
			baselvlfactor *= minf;
			double baseholdmultibp1 = 1.5; // 1.25
			double baseholdmultibp2 = 2.0; // 1.5
			
			//*******************
			//* Inventory Items *
			//*******************
			//
			
			//**************
			//* Ammo Types *
			//**************
			baselvlfactor = 200.0;
			minf = 1.0;
			if (minf < 0.5) minf = 0.5;
			baselvlfactor *= minf;
			baseholdmultibp1 = 2.0; // 1.5
			baseholdmultibp2 = 4.0; // 2.0
			if (owner.CountInv("PlayingHexen")) baselvlfactor = 150.0;
			
			if (A_CheckForHeiwa()) 
			{
				if (heiwavhardmodifier)
				{
					CalcInvLimit("Clip", 60, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Shell", 15, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("RocketAmmo", 15, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Cell", 90, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("TommAmmo", 150, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("MiniRockets", 60, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("ImpalerBolts", 12, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Bolts", 135, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Saws", 15, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("PikeAmmo", 6, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				}
				else
				{
					CalcInvLimit("Clip", 100, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Shell", 25, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("RocketAmmo", 25, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Cell", 150, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("TommAmmo", 250, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("MiniRockets", 100, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("ImpalerBolts", 20, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Bolts", 225, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("Saws", 25, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
					CalcInvLimit("PikeAmmo", 10, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				}
			}
			else
			{
				CalcInvLimit("Clip", 200, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("Shell", 50, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("RocketAmmo", 50, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("Cell", 300, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("TommAmmo", 500, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("MiniRockets", 200, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("ImpalerBolts", 40, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("Bolts", 450, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
				CalcInvLimit("Saws", 50, baselvlfactor, baseatkfactor, baseholdmultibp1, baseholdmultibp2, 1);
			}
		}
		//
		//
		//
	}
	
	void GameStatTracker()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		//
		totalkillsgame = 0;
		totalmaxkills = 0;
		totalitemsgame = 0;
		totalmaxitems = 0;
		totalsecretsgame = 0;
		totalmaxsecrets = 0;
		totalallkills = 0;
		totalallitems = 0;
		totalallsecrets = 0;
		totalcompleted = 0;
		int levelnums = level.levelnum;
		if (kcdebug_gametracker) Console.Printf("\c[gold]MapNo: %d", levelnums);
		if (level.time >= 1)
		{
			nummaps = globalvars.MapsFinished;
			if (kcdebug_gametracker) Console.Printf("\c[orange]nummaps: %d", nummaps);
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (kcdebug_gametracker) Console.Printf("\c[orange]MapNo: %d vs Ref: %d (i: %d)", levelnums, globalvars.MapNum[i], i);
				if (levelnums == globalvars.MapNum[i])
				{
					if (kcdebug_gametracker) Console.Printf("\c[blue]MapNum Match");
					globalvars.NumKills[i] = level.killed_monsters;
					globalvars.MaxKills[i] = level.total_monsters;
					globalvars.NumItems[i] = level.found_items;
					globalvars.MaxItems[i] = level.total_items;
					globalvars.NumSecrets[i] = level.found_secrets;
					globalvars.MaxSecrets[i] = level.total_secrets;
				}
				// Kills
				if (globalvars.AllKills[i] == false && globalvars.NumKills[i] >= globalvars.MaxKills[i])
				{
					globalvars.AllKills[i] = true;
				}
				else
				if (globalvars.AllKills[i] == true && globalvars.NumKills[i] < globalvars.MaxKills[i])
				{
					globalvars.AllKills[i] = false;
				}
				// Items
				if (globalvars.AllItems[i] == false && globalvars.NumItems[i] >= globalvars.MaxItems[i]) 
				{
					globalvars.AllItems[i] = true;
				}
				else
				if (globalvars.AllItems[i] == true && globalvars.NumItems[i] < globalvars.MaxItems[i]) 
				{
					globalvars.AllItems[i] = false;
				}
				// Secrets
				if (globalvars.AllSecrets[i] == false && globalvars.NumSecrets[i] >= globalvars.MaxSecrets[i]) 
				{
					globalvars.AllSecrets[i] = true;
				}
				else
				if (globalvars.AllSecrets[i] == true && globalvars.NumSecrets[i] < globalvars.MaxSecrets[i])
				{
					globalvars.AllSecrets[i] = false;
				}
				// Full Completion
				if (globalvars.AllKills[i] &&
						globalvars.AllItems[i] &&
						globalvars.AllSecrets[i])
				{
					globalvars.AllCompletion[i] = true;
					if (globalvars.AllCompletionSound[i] == false && (globalvars.MaxKills[i] > 0 || globalvars.MaxSecrets[i] > 0 || globalvars.MaxItems[i] > 0)) 
					{
						owner.A_StartSound("stats/allcompletion",1004,CHANF_DEFAULT,1.0,ATTN_NONE,frandom[statitem](0.8,1.2));
						owner.A_PrintBold(String.Format("\c[gold]Level 100% Completed!\c-"), frandom[statitem](1.37,1.6));
						globalvars.AllCompletionSound[i] = true;
					}
				}
				else
				{
					globalvars.AllCompletion[i] = false;
					globalvars.AllCompletionSound[i] = false;
				}

				totalkillsgame += globalvars.NumKills[i];
				totalmaxkills += globalvars.MaxKills[i];
				totalitemsgame += globalvars.NumItems[i];
				totalmaxitems += globalvars.MaxItems[i];
				totalsecretsgame += globalvars.NumSecrets[i];
				totalmaxsecrets += globalvars.MaxSecrets[i];
				if (globalvars.AllKills[i]) totalallkills++;
				if (globalvars.AllItems[i]) totalallitems++;
				if (globalvars.AllSecrets[i]) totalallsecrets++;
				if (globalvars.AllCompletion[i]) totalcompleted++;
				
				if (kcdebug_gametracker)
				{
					Console.Printf("\c[red](Map#: %d [queue#: %d]) Kills: %d / %d, [AllKills: %d]", globalvars.MapNum[i], i, globalvars.NumKills[i], globalvars.MaxKills[i], globalvars.AllKills[i]);
					Console.Printf("\c[lightblue](Map#: %d [queue#: %d]) Items: %d / %d, [AllItems: %d]", globalvars.MapNum[i], i, globalvars.NumItems[i], globalvars.MaxItems[i], globalvars.AllItems[i]);
					Console.Printf("\c[gold](Map#: %d [queue#: %d]) Secrets: %d / %d, [AllSecrets: %d]", globalvars.MapNum[i], i, globalvars.NumSecrets[i], globalvars.MaxSecrets[i], globalvars.AllSecrets[i]);
					Console.Printf("\c[fire](Map#: %d [queue#: %d]) [AllCompletion: %d]", globalvars.MapNum[i], i, globalvars.AllCompletion[i]);
				}
			}
			if (kcdebug_gametracker)
			{
				Console.Printf("\c[red]Total Kills: %d / %d", totalkillsgame, totalmaxkills);
				Console.Printf("\c[lightblue]Total Items: %d / %d", totalitemsgame, totalmaxitems);
				Console.Printf("\c[gold]Total Secrets: %d / %d", totalsecretsgame, totalmaxsecrets);
				Console.Printf("\c[fire]Total 100%: %d / %d", totalcompleted, (globalvars.MapsFinished+1));
			}
		}
	}
	
		void CalcInvLimit(name itemtype, int baseholdamount, double baselvlfactor, double baseatkfactor, double baseholdmultibp1, double baseholdmultibp2, int invintervals)
		{
			int dropamt;
			string itemname;
			double leveladd, atkadd;
			int itemsmax;
			int itemid;
			
			let currentitemtype = owner.FindInventory(itemtype);
			if (currentitemtype)
			{
				let isammo = Ammo(currentitemtype);

				itemname = currentitemtype.GetClassName();

				if (!kc_expgains)
				{
					double PerkFactor2 = 0.0;
				}
				
				
				if (owner.CountInv("Backpack") || 
						owner.CountInv("BackpackTier1") || 
						owner.CountInv("BackpackTier2"))
				{
					if (owner.CountInv("BackpackTier2")) baseholdamount *= baseholdmultibp2;
																					else baseholdamount *= baseholdmultibp1;
				}
				if (baseholdamount < 1) baseholdamount = 1;
				if (kcdebug_inventorylimits) Console.Printf("baseholdamount  [\c[green]%s\c-]: %.2f (baselvlfactor: %.4f)", itemname, int(baseholdamount), baselvlfactor);
				if (kc_expgains)
				{
					if (isammo) 
					{
						if (kc_dynamicammolimits)
						{
							leveladd = (baseholdamount * double((ActualLevel / baselvlfactor)));
							atkadd = (baseholdamount * double((TruePlayerATK / baseatkfactor)));
						}
					}
					else
					{
						if (kc_dynamicinventorylimits) 
						{
							leveladd = (baseholdamount * double((ActualLevel / baselvlfactor)));
							atkadd = (baseholdamount * double((TruePlayerATK / baseatkfactor)));
						}
					}
				}
				if (kcdebug_inventorylimits) 
				{
					Console.Printf("leveladd [\c[green]%s\c-]: %.2f", itemname, int(leveladd));
					Console.Printf("atkadd [\c[green]%s\c-]: %.2f", itemname, int(atkadd));
				}
				itemsmax = (baseholdamount + int(leveladd) + int(atkadd));
				currentitemtype.MaxAmount = itemsmax;
				if (invintervals > 1)
				{
					int extra = currentitemtype.MaxAmount % invintervals;
					currentitemtype.MaxAmount -= extra;
				}
				if (currentitemtype.MaxAmount < 1) currentitemtype.MaxAmount = 1;
				
				if (!isammo)
				{
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
				}
				else
				{
					if (currentitemtype.Amount > currentitemtype.MaxAmount) currentitemtype.Amount = currentitemtype.MaxAmount;
				}
			}
		}
	
	void InitStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		if (itemtimer <= 2 && kc_deathexitaffectsstats)
		{
			if (itemtimer == 0) ClassCheck = globalvars.ClassCheck = 0;
			PlayerLevel = globalvars.PlayerLevel = 0;
			TruePlayerLevel = globalvars.TruePlayerLevel = 0;
			Experience = globalvars.Experience = 0;
			globalvars.atkfct = atkfct = 1.0;
			globalvars.deffct = deffct = 1.0;
			globalvars.spdfct = spdfct = 1.0;
			globalvars.jmpfct = jmpfct = 1.0;
			globalvars.suvfct = suvfct = 1.0;
			globalvars.mssfct = mssfct = 1.0;
			globalvars.evdfct = evdfct = 1.0;
			globalvars.heiwavhardmodifier = heiwavhardmodifier = 0;
			globalvars.PlayerATK = PlayerATK = 2;
			globalvars.PlayerDEF = PlayerDEF = 2;
			globalvars.PlayerSPD = PlayerSPD = 2;
			globalvars.PlayerVIT = PlayerVIT = 0;
			globalvars.PlayerIQ = PlayerIQ = 0;
			globalvars.PlayerGUTS = PlayerGUTS = 0;
			globalvars.PlayerLUCK = PlayerLUCK = 2;
			globalvars.HealthLevelAdd = HealthLevelAdd = 0;
			globalvars.HealthNoRPGAdd = HealthNoRPGAdd = 0;
			globalvars.HealthNoRPGAdd2 = HealthNoRPGAdd2 = 0;
			globalvars.HealthBonusAdd = HealthBonusAdd = 0;
			globalvars.VitalityPieces = VitalityPieces = 0;
			globalvars.VitalityCurrHPBoosts = VitalityCurrHPBoosts = 0;
			globalvars.VitalityCurrHPBoosts2 = VitalityCurrHPBoosts2 = 0;
			globalvars.PPLevelAdd = PPLevelAdd = 0;
			globalvars.PPNoRPGAdd = PPNoRPGAdd = 0;
			globalvars.PPNoRPGAdd2 = PPNoRPGAdd2 = 0;
			globalvars.PPBonusAdd = PPBonusAdd = 0;
			globalvars.IQPieces = IQPieces = 0;
			globalvars.IQCurrPPBoosts = IQCurrPPBoosts = 0;
			globalvars.IQCurrPPBoosts2 = IQCurrPPBoosts2 = 0;
			globalvars.MPLevelAdd = MPLevelAdd = 0;
			globalvars.MPNoRPGAdd = MPNoRPGAdd = 0;
			globalvars.MPNoRPGAdd2 = MPNoRPGAdd2 = 0;
			globalvars.MPBonusAdd = MPBonusAdd = 0;
			globalvars.SensesPieces = SensesPieces = 0;
			globalvars.SensesCurrMPBoosts = SensesCurrMPBoosts = 0;
			globalvars.SensesCurrMPBoosts2 = SensesCurrMPBoosts2 = 0;
			globalvars.MassLevelAdd = MassLevelAdd = 0;
			globalvars.MassNoRPGAdd = MassNoRPGAdd = 0;
			globalvars.MassNoRPGAdd2 = MassNoRPGAdd2 = 0;
			globalvars.MassBonusAdd = MassBonusAdd = 0;
			globalvars.AirLevelAdd = AirLevelAdd = 0;
			globalvars.AirNoRPGAdd = AirNoRPGAdd = 0;
			globalvars.AirNoRPGAdd2 = AirNoRPGAdd2 = 0;
			globalvars.AirBonusAdd = AirBonusAdd = 0;
			if (itemtimer == 0 && kcdebug_deathexitdebug) Console.Printf("kc_deathexitaffectsstats: YES", kc_deathexitaffectsstats);
		}
		else
		{
			ClassCheck = globalvars.ClassCheck;
			PlayerLevel = globalvars.PlayerLevel;
			TruePlayerLevel = globalvars.TruePlayerLevel;
			Experience = globalvars.Experience;
			atkfct = globalvars.atkfct;
			deffct = globalvars.deffct;
			spdfct = globalvars.spdfct;
			jmpfct = globalvars.jmpfct;
			suvfct = globalvars.suvfct;
			mssfct = globalvars.mssfct;
			evdfct = globalvars.evdfct;
			heiwavhardmodifier = globalvars.heiwavhardmodifier;
			PlayerATK = globalvars.PlayerATK;
			PlayerDEF = globalvars.PlayerDEF;
			PlayerSPD = globalvars.PlayerSPD;
			PlayerVIT = globalvars.PlayerVIT;
			PlayerIQ = globalvars.PlayerIQ;
			PlayerGUTS = globalvars.PlayerGUTS;
			PlayerLUCK = globalvars.PlayerLUCK;
			MaxHealthTrue = globalvars.MaxHealthTrue;
			MaxPsychicPoints = globalvars.MaxPsychicPoints;
			MaxMagicPoints = globalvars.MaxMagicPoints;
			HealthLevelAdd = globalvars.HealthLevelAdd;
			HealthNoRPGAdd = globalvars.HealthNoRPGAdd;
			HealthNoRPGAdd2 = globalvars.HealthNoRPGAdd2;
			HealthBonusAdd = globalvars.HealthBonusAdd;
			VitalityPieces = globalvars.VitalityPieces;
			VitalityCurrHPBoosts = globalvars.VitalityCurrHPBoosts;
			VitalityCurrHPBoosts2 = globalvars.VitalityCurrHPBoosts2;
			PPLevelAdd = globalvars.PPLevelAdd;
			PPNoRPGAdd = globalvars.PPNoRPGAdd;
			PPNoRPGAdd2 = globalvars.PPNoRPGAdd2;
			PPBonusAdd = globalvars.PPBonusAdd;
			IQPieces = globalvars.IQPieces;
			IQCurrPPBoosts = globalvars.IQCurrPPBoosts;
			IQCurrPPBoosts2 = globalvars.IQCurrPPBoosts2;
			MPLevelAdd = globalvars.MPLevelAdd;
			MPNoRPGAdd = globalvars.MPNoRPGAdd;
			MPNoRPGAdd2 = globalvars.MPNoRPGAdd2;
			MPBonusAdd = globalvars.MPBonusAdd;
			SensesPieces = globalvars.SensesPieces;
			SensesCurrMPBoosts = globalvars.SensesCurrMPBoosts;
			SensesCurrMPBoosts2 = globalvars.SensesCurrMPBoosts2;
			MassLevelAdd = globalvars.MassLevelAdd;
			MassNoRPGAdd = globalvars.MassNoRPGAdd;
			MassNoRPGAdd2 = globalvars.MassNoRPGAdd2;
			MassBonusAdd = globalvars.MassBonusAdd;
			AirLevelAdd = globalvars.AirLevelAdd;
			AirNoRPGAdd = globalvars.AirNoRPGAdd;
			AirNoRPGAdd2 = globalvars.AirNoRPGAdd2;
			AirBonusAdd = globalvars.AirBonusAdd;
			BaseStartMaxHealth = globalvars.BaseStartMaxHealth;
			if (itemtimer == 0) 
			{
				glockclipsize1 = 12;
				glockclipsize2 = 20;
				TSArtifactSpawnCooldown += (kc_tsadropcooldown * TICRATE);
						 if (random(1,8) <= 5 && !A_CheckForHeiwa()) TSArtifactSpawnCooldown *= 1.5;
				else if (random(1,8) <= 1 && A_CheckForHeiwa()) TSArtifactSpawnCooldown *= 1.5;
				
				if (MaxHealthTrue) owner.player.mo.health = MaxHealthTrue;
				if (kcdebug_deathexitdebug)
				{
					Console.Printf("MaxHealthTrue: %d, HealthLevelAdd: %d, HealthNoRPGAdd: %d, HealthBonusAdd: %d, HealthBonusAdd2: %d, BaseStartMaxHealth: %d", MaxHealthTrue, HealthLevelAdd, HealthBonusAdd, HealthNoRPGAdd, HealthNoRPGAdd2, BaseStartMaxHealth);
					Console.Printf("kc_deathexitaffectsstats: NO", kc_deathexitaffectsstats);
				}
			}
		}
		owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
		owner.A_SetInventory("PlayerMaxPP",MaxPsychicPoints);
		owner.A_SetInventory("PlayerMaxMP",MaxMagicPoints);
		if (itemtimer <= 2) owner.A_SetInventory("ExpPts",globalvars.Experience);
		
		weapon = owner.player.ReadyWeapon;
		HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
		HellWarriorMaxCharge = 1000;
		if (playeractor.GetClassName() == "HeiwaPlayer") CharacterClass = 15;
				/* Class IDs
				0 = Deggaris Montegger [Aetherius (Secondary Class)] / Doomguy [Doom]
				1 = Illucia Hendershot [Aetherius (Secondary Class)]
				2 = Flora Briscoletti [Aetherius (Main Class)]
				3 = Corvus [Heretic]
				4 = Baratus [Hexen]
				5 = Parias [Hexen]
				6 = Daedolon [Hexen]
				7 = Strife Mercenary/Strifeguy [Strife]
				8 = Ailish Estdale [Aetherius (Expansion Pack)]
				9 = Petra Johanna Lagerkvist [Aetherius (Expansion Pack)]
				10 = Dinah Wyck [Explosive Expedition/Dynamite Duchess (Main Class)]
				11 = Delila Dorsey [Explosive Expedition/Dynamite Duchess (Secondary Class)]
				12 = Frieda Fairchild [Explosive Expedition/Dynamite Duchess (Secondary Class)]
				13 = Haig Holbrooke [Explosive Expedition/Dynamite Duchess (Secondary Class)]
				15 = 'Heiwa' [Kampoulchhr (Main Class)]
				*/
		
		cankick = true;
		
		//
		if (ClassCheck <= 1)
		{
			// Defensive [default]
			timefreeze1duration = 10.0;
			timefreeze1durationbase = 10.0;
			timefreeze1cooldown = 45.0;
			timefreeze1cooldownratio = 1.0;
			// Offensive
			timefreeze2duration = 10.0;
			timefreeze2durationbase = 10.0;
			timefreeze2cooldown = 45.0;
			timefreeze2cooldownratio = 1.0;
			// Neutral
			timefreeze3duration = 20.0;
			timefreeze3durationbase = 20.0;
			timefreeze3cooldown = 22.5;
			timefreeze3cooldownratio = 1.0;
			
			timefreezedurationinc1 = 0.05;
			timefreezedurationinc2 = 0.1;

			sielsgracecooldownbase = (700 * 35);
			if (A_CheckForHeiwa()) 
			{
				int sielgracestartchancemax = 64;
				if (TrueGameSkill == SKILL_VERY_EASY) 
				{
					sielgracestartchancemax = 16;
					sielsgracecooldownbase = (540 * TICRATE);
				}
				if (TrueGameSkill == SKILL_EASY) 
				{
					sielgracestartchancemax = 32;
					sielsgracecooldownbase = (630 * TICRATE);
				}
				if (TrueGameSkill == SKILL_NORMAL)
				{
					sielgracestartchancemax = 64;
					sielsgracecooldownbase = (700 * TICRATE);
				}
				if (TrueGameSkill == SKILL_HARD) 
				{
					sielgracestartchancemax = 128;
					sielsgracecooldownbase = (770 * TICRATE);
				}
				if (TrueGameSkill == SKILL_VERY_HARD) 
				{
					sielgracestartchancemax = 256;
					sielsgracecooldownbase = (840 * TICRATE);
				}
				sielgracestartchancemax /= randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,4,4,4,4,4,8,8,8,8,16,16,16,32,32,64);
				if (sielgracestartchancemax < 2) sielgracestartchancemax = 2;
				if (random(1,sielgracestartchancemax) <= (sielgracestartchancemax-1)) A_SielsGraceCooldown(randompick(0,0,0,0,0,0,0,0,0,1));
																																				 else sielsgraceactive = true;
			}
		}
	}
	
	void LevelUpProcess(int type)
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);

		int levelmodulo, levelbonustype;
		levelmodulo = PlayerLevel % 20;
		if (HeiwaPlayer(owner)) 
		{
			int basechance = 10;
			if (heiwavhardmodifier) basechance = 5;
			if (random(1,100) <= basechance)
			{
				if (levelmodulo == 0) levelbonustype = 0;
				else if (levelmodulo == 4) levelbonustype = randompick[statitem](1,1,1,0,0);
				else if (levelmodulo == 5) levelbonustype = randompick[statitem](2,2,1,1,0);
				else if (levelmodulo == 8) levelbonustype = randompick[statitem](1,1,1,0,0);
				else if (levelmodulo == 10) levelbonustype = randompick[statitem](2,2,1,1,0);
				else if (levelmodulo == 12) levelbonustype = randompick[statitem](1,1,1,0,0);
				else if (levelmodulo == 15) levelbonustype = randompick[statitem](2,2,1,1,0);
				else if (levelmodulo == 16) levelbonustype = randompick[statitem](1,1,1,0,0);
				else levelbonustype = randompick[statitem](2,2,2,1,1);
			}
			else
			{
				basechance = 25;
				if (heiwavhardmodifier) basechance = random(12,13);
				if (random(1,100) <= basechance)
				{
					if (levelmodulo == 0) levelbonustype = 0;
					else if (levelmodulo == 4) levelbonustype = randompick[statitem](1,1,1,1,1,0);
					else if (levelmodulo == 5) levelbonustype = randompick[statitem](2,2,2,2,1,1);
					else if (levelmodulo == 8) levelbonustype = randompick[statitem](1,1,1,1,1,0);
					else if (levelmodulo == 10) levelbonustype = randompick[statitem](2,2,2,2,1,1);
					else if (levelmodulo == 12) levelbonustype = randompick[statitem](1,1,1,1,1,0);
					else if (levelmodulo == 15) levelbonustype = randompick[statitem](2,2,2,2,1,1);
					else if (levelmodulo == 16) levelbonustype = randompick[statitem](1,1,1,1,1,0);
					else levelbonustype = randompick[statitem](2,2,2,2,2,1);
				}
				else
				{
					if (levelmodulo == 0) levelbonustype = 0;
					else if (levelmodulo == 4) levelbonustype = 1;
					else if (levelmodulo == 5) levelbonustype = randompick[statitem](2,2,2,2,2,1);
					else if (levelmodulo == 8) levelbonustype = 1;
					else if (levelmodulo == 10) levelbonustype = randompick[statitem](2,2,2,2,2,1);
					else if (levelmodulo == 12) levelbonustype = 1;
					else if (levelmodulo == 15) levelbonustype = randompick[statitem](2,2,2,2,2,1);
					else if (levelmodulo == 16) levelbonustype = 1;
					else levelbonustype = 2;
				}
			}
		}
		else
		{
			int basechance = 10;
			if (random(1,100) <= basechance)
			{
				if (levelmodulo == 0) levelbonustype = randompick(0,0,0,0,0,-1);
				else if (levelmodulo == 4) levelbonustype = randompick[statitem](1,1,1,1,1,0);
				else if (levelmodulo == 5) levelbonustype = randompick[statitem](2,2,2,2,1,1);
				else if (levelmodulo == 8) levelbonustype = randompick[statitem](1,1,1,1,1,0);
				else if (levelmodulo == 10) levelbonustype = randompick[statitem](2,2,2,2,1,1);
				else if (levelmodulo == 12) levelbonustype = randompick[statitem](1,1,1,1,1,0);
				else if (levelmodulo == 15) levelbonustype = randompick[statitem](2,2,2,2,1,1);
				else if (levelmodulo == 16) levelbonustype = randompick[statitem](1,1,1,1,1,0);
				else levelbonustype = randompick[statitem](2,2,2,2,2,1);
			}
			else
			{
				if (levelmodulo == 0) levelbonustype = 0;
				else if (levelmodulo == 4) levelbonustype = 1;
				else if (levelmodulo == 5) levelbonustype = randompick[statitem](2,2,2,2,2,1);
				else if (levelmodulo == 8) levelbonustype = 1;
				else if (levelmodulo == 10) levelbonustype = randompick[statitem](2,2,2,2,2,1);
				else if (levelmodulo == 12) levelbonustype = 1;
				else if (levelmodulo == 15) levelbonustype = randompick[statitem](2,2,2,2,2,1);
				else if (levelmodulo == 16) levelbonustype = 1;
				else levelbonustype = 2;
			}
		}
		if (kcdebug_levelupdisplays) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);
		
		double RandomizedStatChance, RandomizedStatChance2;
		RandomizedStatChance = 1.00000000; // 192;
		if (levelbonustype <= -1) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
		{
			if (HeiwaPlayer(owner)) RandomizedStatChance -= (0.25 * random[statitem](5,9)); // 112 to 152
												 else RandomizedStatChance -= (0.2 * random[statitem](4,8)); // 112 to 152
		}
		else
		if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
		{
			if (HeiwaPlayer(owner)) RandomizedStatChance -= (0.125 * random[statitem](5,9)); // 112 to 152
												 else RandomizedStatChance -= (0.1 * random[statitem](4,8)); // 112 to 152
		}
		else
		if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
		{
			if (HeiwaPlayer(owner)) RandomizedStatChance -= (0.025 * random[statitem](5,9)); // 112 to 152
												 else RandomizedStatChance -= (0.02 * random[statitem](4,8)); // 160 to 176
		}
		else
		if (levelbonustype >= 2) // Any other level that's not a multiple of 4 or 20
		{
			if (HeiwaPlayer(owner)) RandomizedStatChance -= (0.005 * random[statitem](5,9)); // 112 to 152
												 else RandomizedStatChance -= (0.004 * random[statitem](4,8));
		}
		double RNDSCSubtractor1 = 0;
		double RNDSCSubtractor2 = 0;
		if (HeiwaPlayer(owner)) 
		{
			RNDSCSubtractor1 = (PlayerLevel * 0.40);
			RNDSCSubtractor1 = clamp(RNDSCSubtractor1, 0.00000, 0.41667);
		}
		else
		{
			RNDSCSubtractor1 = (PlayerLevel * 0.32);
			RNDSCSubtractor1 = clamp(RNDSCSubtractor1, 0.00000, 0.33334);
		}
		if (PlayerLevel > 100)
		{
			if (HeiwaPlayer(owner)) 
			{
				RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.5);
				RNDSCSubtractor2 = clamp(RNDSCSubtractor2, 0.00000, 0.41667);
			}
			else
			{
				RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
				RNDSCSubtractor2 = clamp(RNDSCSubtractor2, 0.00000, 0.33334);
			}
		}
		if (kcdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor1\c-: %.8f, \cxRNDSCSubtractor2\c-: %.8f", RNDSCSubtractor1, RNDSCSubtractor2);

		double RNDSCSubtractor = 0;
		RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
		RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
		RandomizedStatChance -= RNDSCSubtractor;
		if (HeiwaPlayer(owner)) 
		{
			if (RandomizedStatChance < 0.0039062505) RandomizedStatChance = 0.0039062505;
		}
		else
		{
			if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
		}
		if (kcdebug_levelupdisplays) Console.Printf("\cyRNDSCSubtractor\c-: %.8f, \cxRandomizedStatChance\c-: %.8f", RNDSCSubtractor, RandomizedStatChance);

		RandomizedStatChance2 = 1.00000000;
		double d11 = 0.05208333375;
		double d21 = 0.1041666675;
		if (HeiwaPlayer(owner)) 
		{
			d11 = 0.025;
			d21 = 0.05;
		}
		else
		{
			d11 = 0.02;
			d21 = 0.04;
		}
		if (PlayerLevel >= 25) RandomizedStatChance2 -= d11; // 23
		if (PlayerLevel >= 50) RandomizedStatChance2 -= d11; // 22
		if (PlayerLevel >= 75) RandomizedStatChance2 -= d11; // 21
		if (PlayerLevel >= 100) RandomizedStatChance2 -= d11; // 20
		if (PlayerLevel >= 125) RandomizedStatChance2 -= d21; // 18
		if (PlayerLevel >= 150) RandomizedStatChance2 -= d21; // 16
		if (PlayerLevel >= 175) RandomizedStatChance2 -= d21; // 14
		
		if (kcdebug_levelupdisplays) Console.Printf("\cyStat Chance 1\c-: %.8f, \cxStat Chance 2\c-: %.8f", RandomizedStatChance, RandomizedStatChance2);
		
		//********************************
		//*Random Levelups to Stat Values*
		//********************************
		int SeedIncreaseAmt;
		double LvlSkillMulti;
		double RollValue;
		double BaseChance1;
		double BaseChance1a = 0.2;
		double BaseChance1b = 0.2;
		double BaseChance1c = 0.2;
		double BaseChance1d = 0.2;
		double BaseChance1e = 0.2;
		double BaseChance1hvhrand = frandompick(2.0,2.0,2.25,2.25,2.25,2.5,2.5,2.5,2.5,2.5,2.5,2.75,2.75,2.75,3.0,3.0);
		double BaseChance2;
		double BaseChance2a = 0.825;
		double BaseChance2b = 0.825;
		double BaseChance2c = 0.825;
		double BaseChance2d = 0.825;
		double BaseChance2e = 0.825;
		if (HeiwaPlayer(owner)) 
		{
			BaseChance1a = frandompick(0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			BaseChance1b = frandompick(0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			BaseChance1c = frandompick(0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			BaseChance1d = frandompick(0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			BaseChance1e = frandompick(0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			BaseChance2a = frandompick(0.6667,0.75,0.75,0.75,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.875,0.875,0.9375);
			BaseChance2b = frandompick(0.6667,0.75,0.75,0.75,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.875,0.875,0.9375);
			BaseChance2c = frandompick(0.6667,0.75,0.75,0.75,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.875,0.875,0.9375);
			BaseChance2d = frandompick(0.6667,0.75,0.75,0.75,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.875,0.875,0.9375);
			BaseChance2e = frandompick(0.6667,0.75,0.75,0.75,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.825,0.875,0.875,0.9375);
		}
		int LvlStatMulti = 1;
		// Luck Boost [1]
		if (KCPlayer(owner))
		{
			BaseChance1 = 0.25;
			BaseChance2 = 0.0625;
		}
		if (HeiwaPlayer(owner))
		{
			BaseChance1 = 0.375;
			BaseChance2 = 0.0625;
			if (heiwavhardmodifier) 
			{
				BaseChance1 *= BaseChance1hvhrand;
				BaseChance2 *= 3;
			}
		}
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;
		// Luck Boost [2]
		BaseChance1 *= BaseChance1a;
		BaseChance2 *= BaseChance2a;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;
		// Luck Boost [3]
		BaseChance1 *= BaseChance1b;
		BaseChance2 *= BaseChance2b;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;
		// Luck Boost [4]
		BaseChance1 *= BaseChance1c;
		BaseChance2 *= BaseChance2c;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;
		// Luck Boost [5]
		BaseChance1 *= BaseChance1d;
		BaseChance2 *= BaseChance2d;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;
		// Luck Boost [6]
		BaseChance1 *= BaseChance1e;
		BaseChance2 *= BaseChance2e;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerLUCK += LvlSkillMulti;

		// Speed Boost [1]
		if (KCPlayer(owner))
		{
			BaseChance1 = 0.375;
			BaseChance2 = 0.0625;
		}
		if (HeiwaPlayer(owner))
		{
			BaseChance1 = 0.703125;
			BaseChance2 = 0.0625;
			if (heiwavhardmodifier) 
			{
				BaseChance1 *= BaseChance1hvhrand;
				BaseChance2 *= 3;
			}
		}
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [2]
		BaseChance1 *= BaseChance1a;
		BaseChance2 *= BaseChance2a;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [3]
		BaseChance1 *= BaseChance1b;
		BaseChance2 *= BaseChance2b;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [4]
		BaseChance1 *= BaseChance1c;
		BaseChance2 *= BaseChance2c;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [5]
		BaseChance1 *= BaseChance1d;
		BaseChance2 *= BaseChance2d;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		// Speed Boost [6]
		BaseChance1 *= BaseChance1e;
		BaseChance2 *= BaseChance2e;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerSPD += LvlSkillMulti;
		

		// Guts Boost [1]
		if (KCPlayer(owner))
		{
			BaseChance1 = 0.625;
			BaseChance2 = 0.0625;
		}
		if (HeiwaPlayer(owner))
		{
			BaseChance1 = 0.375;
			BaseChance2 = 0.0625;
			if (heiwavhardmodifier) 
			{
				BaseChance1 *= BaseChance1hvhrand;
				BaseChance2 *= 3;
			}
		}
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;
		// Guts Boost [2]
		BaseChance1 *= BaseChance1a;
		BaseChance2 *= BaseChance2a;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;
		// Guts Boost [3]
		BaseChance1 *= BaseChance1b;
		BaseChance2 *= BaseChance2b;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;
		// Guts Boost [4]
		BaseChance1 *= BaseChance1c;
		BaseChance2 *= BaseChance2c;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;
		// Guts Boost [5]
		BaseChance1 *= BaseChance1d;
		BaseChance2 *= BaseChance2d;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;
		// Guts Boost [6]
		BaseChance1 *= BaseChance1e;
		BaseChance2 *= BaseChance2e;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerGUTS += LvlSkillMulti;

		// Attack Boost [1]
		if (KCPlayer(owner))
		{
			BaseChance1 = 0.3125;
			BaseChance2 = 0.0625;
		}
		if (HeiwaPlayer(owner))
		{
			BaseChance1 = 0.5;
			BaseChance2 = 0.0625;
			if (heiwavhardmodifier) 
			{
				BaseChance1 *= BaseChance1hvhrand;
				BaseChance2 *= 3;
			}
		}
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [2]
		BaseChance1 *= BaseChance1a;
		BaseChance2 *= BaseChance2a;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [3]
		BaseChance1 *= BaseChance1b;
		BaseChance2 *= BaseChance2b;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [4]
		BaseChance1 *= BaseChance1c;
		BaseChance2 *= BaseChance2c;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [5]
		BaseChance1 *= BaseChance1d;
		BaseChance2 *= BaseChance2d;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		// Attack Boost [6]
		BaseChance1 *= BaseChance1e;
		BaseChance2 *= BaseChance2e;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerATK += LvlSkillMulti;
		
		// Defense Boost [1]
		if (KCPlayer(owner))
		{
			BaseChance1 = 0.5625;
			BaseChance2 = 0.0625;
		}
		if (HeiwaPlayer(owner))
		{
			BaseChance1 = 0.375;
			BaseChance2 = 0.0625;
			if (heiwavhardmodifier) 
			{
				BaseChance1 *= BaseChance1hvhrand;
				BaseChance2 *= 3;
			}
		}
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [2]
		BaseChance1 *= BaseChance1a;
		BaseChance2 *= BaseChance2a;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [3]
		BaseChance1 *= BaseChance1b;
		BaseChance2 *= BaseChance2b;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [4]
		BaseChance1 *= BaseChance1c;
		BaseChance2 *= BaseChance2c;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [5]
		BaseChance1 *= BaseChance1d;
		BaseChance2 *= BaseChance2d;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;
		// Defense Boost [6]
		BaseChance1 *= BaseChance1e;
		BaseChance2 *= BaseChance2e;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance2);
		if (RollValue <= BaseChance2) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= LvlStatMulti;
		RollValue = frandom[statitem2](0.00000001,RandomizedStatChance);
		if (RollValue <= BaseChance1) PlayerDEF += LvlSkillMulti;

		// Health/HP Boost
		CurrentHealth = owner.player.mo.health;
		HPMaxGain = 0;
		VitHPMaxGain = 0;
		
		if (KCPlayer(owner))
		{
			if (random(1,256) <= 240) 
			{
				HPMaxGain += randompick(0,1,1,1,1,1,1,1,1,2);
				if (random(1,256) <= 60) 
				{
					HPMaxGain += randompick(0,1,1,1,1,1,1,1,1,2);
					if (random(1,256) <= 15) 
					{
						HPMaxGain += randompick(0,1,1,1,1,1,1,1,1,2);
						if (random(1,256) <= randompick(3,4,4,4)) 
						{
							HPMaxGain += randompick(0,1,1,1,1,1,1,1,1,2);
						}
					}
				}
			}
			
			if (PlayerLevel >= 151 && PlayerLevel <= 200)				HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
			else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
			else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0375,0.045));
			else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.0375));
			
			HPMaxGain += 													randompick[statitem](0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3);
			if (levelbonustype <= -1) HPMaxGain += randompick[statitem](1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3);
			if (levelbonustype == 0) HPMaxGain += randompick[statitem](1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3);
			if (levelbonustype == 1) HPMaxGain += randompick[statitem](0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3);
			if (levelbonustype >= 2) HPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2);
		}
		if (HeiwaPlayer(owner))
		{
			if (random(1,256) <= random(64,80)) 
			{
				if (heiwavhardmodifier) HPMaxGain += randompick(0,0,0,0,0,1,1,1);
													 else HPMaxGain += randompick(0,0,0,1,1,1,1,2);
				if (random(1,256) <= random(16,20)) 
				{
					if (heiwavhardmodifier) HPMaxGain += randompick(0,0,0,0,0,1,1,1);
														 else HPMaxGain += randompick(0,0,0,1,1,1,1,2);
					if (random(1,256) <= random(4,5)) 
					{
						if (heiwavhardmodifier) HPMaxGain += randompick(0,0,0,0,1,1,1,1);
															 else HPMaxGain += randompick(0,0,1,1,1,1,1,2);
						if (random(1,256) <= random(1,randompick(1,1,1,2)))
						{
							if (heiwavhardmodifier) HPMaxGain += randompick(0,0,0,0,1,1,1,1);
																 else HPMaxGain += randompick(0,0,1,1,1,1,1,2);
						}
					}
				}
			}
			if (heiwavhardmodifier)
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0375,0.045));
				else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.0375));
			}
			else
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03375,0.0375));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.03375));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.02625,0.03));
				else if (PlayerLevel <= 50)													HPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0225,0.02625));
			}
			
			if (heiwavhardmodifier)
			{
				HPMaxGain += 													 randompick[statitem](0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				if (levelbonustype <= -1)	HPMaxGain += randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3);
				if (levelbonustype == 0)	HPMaxGain += randompick[statitem](0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2);
				if (levelbonustype == 1)	HPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2);
				if (levelbonustype >= 2)	HPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			}
			else
			{
				HPMaxGain += 													 randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2);
				if (levelbonustype <= -1)	HPMaxGain += randompick[statitem](0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3);
				if (levelbonustype == 0)	HPMaxGain += randompick[statitem](0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3);
				if (levelbonustype == 1)	HPMaxGain += randompick[statitem](0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
				if (levelbonustype >= 2)	HPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);
			}
		}
		
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			if (KCPlayer(owner)) 
			{
				HPMaxGain += randompick[statitem](1,2,2,3,3);
				HPMaxGain += (MaxHealthTrue / randompick(173,174,174));
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					HPMaxGain += randompick[statitem](0,1,1,2,2);
					HPMaxGain += (MaxHealthTrue / 270);
				}
				else
				{
					HPMaxGain += randompick[statitem](1,1,2,2,3);
					HPMaxGain += (MaxHealthTrue / 216);
				}
			}
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			if (KCPlayer(owner)) 
			{
				HPMaxGain += randompick[statitem](1,1,2,2,3);
				HPMaxGain += (MaxHealthTrue / 216);
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					HPMaxGain += randompick[statitem](0,0,1,1,2);
					HPMaxGain += (MaxHealthTrue / 324);
				}
				else
				{
					HPMaxGain += randompick[statitem](0,1,1,2,2);
					HPMaxGain += (MaxHealthTrue / 270);
				}
			}
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			if (KCPlayer(owner)) 
			{
				HPMaxGain += randompick[statitem](0,1,1,2,2);
				HPMaxGain += (MaxHealthTrue / random(259,260));
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					HPMaxGain += randompick[statitem](0,0,0,1,1);
					HPMaxGain += (MaxHealthTrue / 378);
				}
				else
				{
					HPMaxGain += randompick[statitem](0,0,1,1,2);
					HPMaxGain += (MaxHealthTrue / 324);
				}
			}
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			if (KCPlayer(owner)) 
			{
				HPMaxGain += randompick[statitem](0,0,1,1,2);
				HPMaxGain += (MaxHealthTrue / random(303,304));
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					HPMaxGain += randompick[statitem](0,0,0,0,1);
					HPMaxGain += (MaxHealthTrue / 432);
				}
				else
				{
					HPMaxGain += randompick[statitem](0,0,0,1,1);
					HPMaxGain += (MaxHealthTrue / 378);
				}
			}
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			if (KCPlayer(owner)) 
			{
				HPMaxGain += randompick[statitem](0,0,0,1,1);
				HPMaxGain += (MaxHealthTrue / random(347,349));
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					if (random(1,2) <= 1) 
					{
						HPMaxGain += randompick[statitem](0,0,0,0,1);
						HPMaxGain += (MaxHealthTrue / 488);
					}
				}
				else
				{
					HPMaxGain += randompick[statitem](0,0,0,0,1);
					HPMaxGain += (MaxHealthTrue / 432);
				}
			}
		}
		if (HeiwaPlayer(owner) && heiwavhardmodifier) HPMaxGain *= frandompick(1.25,1.5,1.5,1.5,1.5,1.75);
		
		if (!(HeiwaPlayer(owner) && heiwavhardmodifier && random(1,4) <= 1)) if (HPMaxGain < 1) HPMaxGain = 1;
		owner.player.mo.health += HPMaxGain;
		HealthLevelAdd += HPMaxGain;
		if (type == 1) 
		{
			HealthNoRPGAdd += HPMaxGain;
			if (!kc_expgains)
			{
				if (skill <= 0) HPMaxGain *= 4.0;
				if (skill == 1) HPMaxGain *= 3.5;
				if (skill == 2) HPMaxGain *= 3.0;
				if (skill == 3) HPMaxGain *= 2.5;
				if (skill >= 4) HPMaxGain *= 2.0;
			}
		}
		if (!owner.CountInv("SilentLevelUp")) A_StatIncHud(HPMaxGain,0);
		if (kcdebug_levelupdisplays) Console.Printf("HPMaxGain: %d", HPMaxGain);
		
		// Psychic Points/PP Boost
		PPMaxGain = 0;
		IQPPMaxGain = 0;
		if (HeiwaPlayer(owner)) // Only Heiwa uses PP
		{
			if (random(1,256) <= random(128,160)) 
			{
				if (heiwavhardmodifier) PPMaxGain += randompick(0,0,0,0,0,1,1,1);
													 else PPMaxGain += randompick(0,0,0,1,1,1,1,2);
				if (random(1,256) <= random(32,40)) 
				{
					if (heiwavhardmodifier) PPMaxGain += randompick(0,0,0,0,0,1,1,1);
														 else PPMaxGain += randompick(0,0,0,1,1,1,1,2);
					if (random(1,256) <= random(16,20)) 
					{
						if (heiwavhardmodifier) PPMaxGain += randompick(0,0,0,0,1,1,1,1);
															 else PPMaxGain += randompick(0,0,1,1,1,1,1,2);
						if (random(1,256) <= random(4,5))
						{
							if (heiwavhardmodifier) PPMaxGain += randompick(0,0,0,0,1,1,1,1);
																 else PPMaxGain += randompick(0,0,1,1,1,1,1,2);
						}
					}
				}
			}
			if (heiwavhardmodifier)
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0375,0.045));
				else if (PlayerLevel <= 50)													PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.0375));
			}
			else
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03375,0.0375));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.03375));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.02625,0.03));
				else if (PlayerLevel <= 50)													PPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0225,0.02625));
			}
			
			if (heiwavhardmodifier)
			{
				PPMaxGain += 													 randompick[statitem](0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				if (levelbonustype <= -1)	PPMaxGain += randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3);
				if (levelbonustype == 0)	PPMaxGain += randompick[statitem](0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2);
				if (levelbonustype == 1)	PPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2);
				if (levelbonustype >= 2)	PPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			}
			else
			{
				PPMaxGain += 													 randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2);
				if (levelbonustype <= -1)	PPMaxGain += randompick[statitem](0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3);
				if (levelbonustype == 0)	PPMaxGain += randompick[statitem](0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3);
				if (levelbonustype == 1)	PPMaxGain += randompick[statitem](0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
				if (levelbonustype >= 2)	PPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);
			}
		
			if (TrueGameSkill <= SKILL_VERY_EASY) 
			{
				if (heiwavhardmodifier)
				{
					PPMaxGain += randompick[statitem](0,1,1,2,2);
					PPMaxGain += (MaxPsychicPoints / 270);
				}
				else
				{
					PPMaxGain += randompick[statitem](1,1,2,2,3);
					PPMaxGain += (MaxPsychicPoints / 216);
				}
			}
			if (TrueGameSkill == SKILL_EASY) 
			{
				if (heiwavhardmodifier)
				{
					PPMaxGain += randompick[statitem](0,0,1,1,2);
					PPMaxGain += (MaxPsychicPoints / 324);
				}
				else
				{
					PPMaxGain += randompick[statitem](0,1,1,2,2);
					PPMaxGain += (MaxPsychicPoints / 270);
				}
			}
			if (TrueGameSkill == SKILL_NORMAL) 
			{
				if (heiwavhardmodifier)
				{
					PPMaxGain += randompick[statitem](0,0,0,1,1);
					PPMaxGain += (MaxPsychicPoints / 378);
				}
				else
				{
					PPMaxGain += randompick[statitem](0,0,1,1,2);
					PPMaxGain += (MaxPsychicPoints / 324);
				}
			}
			if (TrueGameSkill == SKILL_HARD) 
			{
				if (heiwavhardmodifier)
				{
					PPMaxGain += randompick[statitem](0,0,0,0,1);
					PPMaxGain += (MaxPsychicPoints / 432);
				}
				else
				{
					PPMaxGain += randompick[statitem](0,0,0,1,1);
					PPMaxGain += (MaxPsychicPoints / 378);
				}
			}
			if (TrueGameSkill == SKILL_VERY_HARD)
			{
				if (heiwavhardmodifier)
				{
					if (random(1,2) <= 1) 
					{
						PPMaxGain += randompick[statitem](0,0,0,0,1);
						PPMaxGain += (MaxPsychicPoints / 488);
					}
				}
				else
				{
					PPMaxGain += randompick[statitem](0,0,0,0,1);
					PPMaxGain += (MaxPsychicPoints / 432);
				}
			}
			if (heiwavhardmodifier) PPMaxGain *= frandompick(1.25,1.5,1.5,1.5,1.5,1.75);
			if (PPMaxGain < 1) PPMaxGain = 1;
			CurrentPsychicPoints += PPMaxGain;
			PPLevelAdd += PPMaxGain;
			if (type == 1) 
			{
				PPNoRPGAdd += PPMaxGain;
				if (!kc_expgains)
				{
					if (skill <= 0) PPMaxGain *= 4.0;
					if (skill == 1) PPMaxGain *= 3.5;
					if (skill == 2) PPMaxGain *= 3.0;
					if (skill == 3) PPMaxGain *= 2.5;
					if (skill >= 4) PPMaxGain *= 2.0;
				}
			}
			//if (!owner.CountInv("SilentLevelUp")) A_StatIncHud(PPMaxGain,0);
			if (kcdebug_levelupdisplays) Console.Printf("PPMaxGain: %d", PPMaxGain);
		}

		// Magic Points/MP Boost
		MPMaxGain = 0;
		SensesMPMaxGain = 0;
		if (HeiwaPlayer(owner)) // Only Heiwa uses MP
		{
			if (random(1,256) <= random(96,120)) 
			{
				if (heiwavhardmodifier) MPMaxGain += randompick(0,0,0,0,0,1,1,1);
													 else MPMaxGain += randompick(0,0,0,1,1,1,1,2);
				if (random(1,256) <= random(24,30)) 
				{
					if (heiwavhardmodifier) MPMaxGain += randompick(0,0,0,0,0,1,1,1);
														 else MPMaxGain += randompick(0,0,0,1,1,1,1,2);
					if (random(1,256) <= random(6,random(7,8))) 
					{
						if (heiwavhardmodifier) MPMaxGain += randompick(0,0,0,0,1,1,1,1);
															 else MPMaxGain += randompick(0,0,1,1,1,1,1,2);
						if (random(1,256) <= random(random(1,2),randompick(1,2,2,2,2,2,2,2)))
						{
							if (heiwavhardmodifier) MPMaxGain += randompick(0,0,0,0,1,1,1,1);
																 else MPMaxGain += randompick(0,0,1,1,1,1,1,2);
						}
					}
				}
			}
			if (heiwavhardmodifier)
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0375,0.045));
				else if (PlayerLevel <= 50)													MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.0375));
			}
			else
			{
						 if (PlayerLevel >= 151 && PlayerLevel <= 200)	MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03375,0.0375));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.03,0.03375));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.02625,0.03));
				else if (PlayerLevel <= 50)													MPMaxGain += floor(PlayerLevel * frandompick[statitem](0.0225,0.02625));
			}
			
			if (heiwavhardmodifier)
			{
				MPMaxGain += 													 randompick[statitem](0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
				if (levelbonustype <= -1)	MPMaxGain += randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3);
				if (levelbonustype == 0)	MPMaxGain += randompick[statitem](0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2);
				if (levelbonustype == 1)	MPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2);
				if (levelbonustype >= 2)	MPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
			}
			else
			{
				MPMaxGain += 													 randompick[statitem](0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2);
				if (levelbonustype <= -1)	MPMaxGain += randompick[statitem](0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3);
				if (levelbonustype == 0)	MPMaxGain += randompick[statitem](0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3);
				if (levelbonustype == 1)	MPMaxGain += randompick[statitem](0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
				if (levelbonustype >= 2)	MPMaxGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1);
			}
		
			if (TrueGameSkill <= SKILL_VERY_EASY) 
			{
				if (heiwavhardmodifier)
				{
					MPMaxGain += randompick[statitem](0,1,1,2,2);
					MPMaxGain += (MaxMagicPoints / 270);
				}
				else
				{
					MPMaxGain += randompick[statitem](1,1,2,2,3);
					MPMaxGain += (MaxMagicPoints / 216);
				}
			}
			if (TrueGameSkill == SKILL_EASY) 
			{
				if (heiwavhardmodifier)
				{
					MPMaxGain += randompick[statitem](0,0,1,1,2);
					MPMaxGain += (MaxMagicPoints / 324);
				}
				else
				{
					MPMaxGain += randompick[statitem](0,1,1,2,2);
					MPMaxGain += (MaxMagicPoints / 270);
				}
			}
			if (TrueGameSkill == SKILL_NORMAL) 
			{
				if (heiwavhardmodifier)
				{
					MPMaxGain += randompick[statitem](0,0,0,1,1);
					MPMaxGain += (MaxMagicPoints / 378);
				}
				else
				{
					MPMaxGain += randompick[statitem](0,0,1,1,2);
					MPMaxGain += (MaxMagicPoints / 324);
				}
			}
			if (TrueGameSkill == SKILL_HARD) 
			{
				if (heiwavhardmodifier)
				{
					MPMaxGain += randompick[statitem](0,0,0,0,1);
					MPMaxGain += (MaxMagicPoints / 432);
				}
				else
				{
					MPMaxGain += randompick[statitem](0,0,0,1,1);
					MPMaxGain += (MaxMagicPoints / 378);
				}
			}
			if (TrueGameSkill == SKILL_VERY_HARD)
			{
				if (heiwavhardmodifier)
				{
					if (random(1,2) <= 1) 
					{
						MPMaxGain += randompick[statitem](0,0,0,0,1);
						MPMaxGain += (MaxMagicPoints / 488);
					}
				}
				else
				{
					MPMaxGain += randompick[statitem](0,0,0,0,1);
					MPMaxGain += (MaxMagicPoints / 432);
				}
			}
			if (heiwavhardmodifier) MPMaxGain *= frandompick(1.25,1.5,1.5,1.5,1.5,1.75);
			if (MPMaxGain < 1) MPMaxGain = 1;
			CurrentMagicPoints += MPMaxGain;
			MPLevelAdd += MPMaxGain;
			if (type == 1) 
			{
				MPNoRPGAdd += MPMaxGain;
				if (!kc_expgains)
				{
					if (skill <= 0) MPMaxGain *= 4.0;
					if (skill == 1) MPMaxGain *= 3.5;
					if (skill == 2) MPMaxGain *= 3.0;
					if (skill == 3) MPMaxGain *= 2.5;
					if (skill >= 4) MPMaxGain *= 2.0;
				}
			}
			//if (!owner.CountInv("SilentLevelUp")) A_StatIncHud(MPMaxGain,0);
			if (kcdebug_levelupdisplays) Console.Printf("MPMaxGain: %d", MPMaxGain);
		}

		// Mass/Balance
		double BaseMass = 1.0;
		let playerset = KCPlayerPawn(owner);
		if (playerset) BaseMass = playerset.originalmass;
		MassGain = 0;

		if (KCPlayer(owner))
		{
			if (PlayerLevel >= 151 && PlayerLevel <= 200)				MassGain += floor(PlayerLevel * frandompick[statitem](0.0675,0.075));
			else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MassGain += floor(PlayerLevel * frandompick[statitem](0.06,0.0675));
			else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MassGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
			else if (PlayerLevel <= 50)													MassGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
			
			MassGain += 													randompick[statitem](0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2);
			if (levelbonustype <= -1) MassGain += randompick[statitem](1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3);
			if (levelbonustype == 0) MassGain += randompick[statitem](1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3);
			if (levelbonustype == 1) MassGain += randompick[statitem](0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2);
			if (levelbonustype >= 2) MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1);
		}
		
		if (HeiwaPlayer(owner)) 
		{
			if (heiwavhardmodifier)
			{
				if (PlayerLevel >= 151 && PlayerLevel <= 200)				MassGain += floor(PlayerLevel * frandompick[statitem](0.0675,0.075));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MassGain += floor(PlayerLevel * frandompick[statitem](0.06,0.0675));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MassGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
				else if (PlayerLevel <= 50)													MassGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
			}
			else
			{
				if (PlayerLevel >= 151 && PlayerLevel <= 200)				MassGain += floor(PlayerLevel * frandompick[statitem](0.0525,0.06));
				else if (PlayerLevel >= 101 && PlayerLevel <= 150)	MassGain += floor(PlayerLevel * frandompick[statitem](0.045,0.0525));
				else if (PlayerLevel >= 51 && PlayerLevel <= 100)		MassGain += floor(PlayerLevel * frandompick[statitem](0.0375,0.045));
				else if (PlayerLevel <= 50)													MassGain += floor(PlayerLevel * frandompick[statitem](0.03,0.0375));
			}
			
			if (heiwavhardmodifier)
			{
				MassGain += 													randompick[statitem](0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1);
				if (levelbonustype <= -1)	MassGain += randompick[statitem](0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2);
				if (levelbonustype == 0)	MassGain += randompick[statitem](0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2);
				if (levelbonustype == 1)	MassGain += randompick[statitem](0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1);
				if (levelbonustype >= 2)	MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
			}
			else
			{
				MassGain += 													randompick[statitem](0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2);
				if (levelbonustype <= -1) MassGain += randompick[statitem](1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3);
				if (levelbonustype == 0) MassGain += randompick[statitem](1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3);
				if (levelbonustype == 1) MassGain += randompick[statitem](0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2);
				if (levelbonustype >= 2) MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1);
			}
		}
		
		if (TrueGameSkill <= SKILL_VERY_EASY) 
		{
			if (KCPlayer(owner)) 
			{
				MassGain += randompick[statitem](0,0,0,0,0,1,1,2,2,3);
				MassGain += (BaseMass / random(259,260));
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,1,1,2,2);
					MassGain += (BaseMass / 405);
				}
				else
				{
					MassGain += randompick[statitem](0,0,0,0,0,1,1,2,2,3);
					MassGain += (BaseMass / 324);
				}
			}
		}
		if (TrueGameSkill == SKILL_EASY) 
		{
			if (KCPlayer(owner)) 
			{
				MassGain += randompick[statitem](0,0,0,0,0,0,1,1,2,2);
				MassGain += (BaseMass / 324);
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,1,1,2);
					MassGain += (BaseMass / 486);
				}
				else
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,1,1,2,2);
					MassGain += (BaseMass / 405);
				}
			}
		}
		if (TrueGameSkill == SKILL_NORMAL) 
		{
			if (KCPlayer(owner)) 
			{
				MassGain += randompick[statitem](0,0,0,0,0,0,0,1,1,2);
				MassGain += (BaseMass / 389);
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,0,1,1);
					MassGain += (BaseMass / 557);
				}
				else
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,1,1,2);
					MassGain += (BaseMass / 486);
				}
			}
		}
		if (TrueGameSkill == SKILL_HARD) 
		{
			if (KCPlayer(owner)) 
			{
				MassGain += randompick[statitem](0,0,0,0,0,0,0,0,1,1);
				MassGain += (BaseMass / 446);
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,0,1,1);
					MassGain += (BaseMass / 648);
				}
				else
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,0,1,1);
					MassGain += (BaseMass / 557);
				}
			}
		}
		if (TrueGameSkill == SKILL_VERY_HARD)
		{
			if (KCPlayer(owner)) 
			{
				MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,1);
				MassGain += (BaseMass / 514);
			}
			if (HeiwaPlayer(owner)) 
			{
				if (heiwavhardmodifier)
				{
					if (random(1,2) <= 1)
					{
						MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,1);
						MassGain += (BaseMass / 720);
					}
				}
				else
				{
					MassGain += randompick[statitem](0,0,0,0,0,0,0,0,0,1);
					MassGain += (BaseMass / 648);
				}
			}
		}
		if (HeiwaPlayer(owner) && heiwavhardmodifier) MassGain *= frandompick(1.25,1.5,1.5,1.5,1.5,1.75);

		MassLevelAdd += MassGain;
		if (type == 1) 
		{
			MassNoRPGAdd += MassGain;
			if (!kc_expgains)
			{
				if (skill <= 0) MassGain *= 2.0;
				if (skill == 1) MassGain *= 1.75;
				if (skill == 2) MassGain *= 1.5;
				if (skill == 3) MassGain *= 1.25;
				if (skill >= 4) MassGain *= 1.0;
			}
		}
		
		// Vitality Points [Heiwa Only, 1 full point = +15 max HP ala EarthBound :V]
		double vitgain0 = frandompick(0.015625,0.03125,0.03125,0.03125,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.09375,0.09375,0.09375,0.125); // frandompick(0.0125,0.0375,0.0375,0.0375,0.0375,0.0375,0.0625);
		double vitgain1 = (vitgain0 + 0.03125); // (vitgain0 + 0.0625);
		double vitgain2 = (vitgain0 + 0.09375); // (vitgain0 + 0.1875);
		double vitgain3 = (vitgain0 + 0.125); // (vitgain0 + 0.25);
		if (heiwavhardmodifier)
		{
			vitgain0 = frandompick(0.0125,0.0375,0.0375,0.0375,0.0375,0.0375,0.0625);
			vitgain1 = (vitgain0 + 0.0625);
			vitgain2 = (vitgain0 + 0.1875);
			vitgain3 = (vitgain0 + 0.25);
		}
		
		double VitalPieceGain = 0.0;
		VitalPieceGain += 													frandompick[statitem](vitgain0,vitgain0,vitgain0,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2);
		if (levelbonustype <= -1) VitalPieceGain += frandompick[statitem](vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain3,vitgain3,vitgain3,vitgain3,vitgain3);
		if (levelbonustype == 0)  VitalPieceGain += frandompick[statitem](vitgain0,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain3,vitgain3);
		if (levelbonustype == 1)  VitalPieceGain += frandompick[statitem](vitgain0,vitgain0,vitgain0,vitgain0,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain2,vitgain3);
		if (levelbonustype >= 2)  VitalPieceGain += frandompick[statitem](vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain0,vitgain1,vitgain1,vitgain1,vitgain1,vitgain1);
		if (HeiwaPlayer(owner)) 
		{
			if (heiwavhardmodifier) VitalPieceGain *= frandompick(1.25,1.5,1.5,1.5,1.75);
			double NewVitMul = 1.0;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 0.25;
				NewVitMul *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewVitMul >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewVitMul = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewVitMul <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewVitMul = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
				VitalPieceGain *= NewVitMul;
			}
		}
		VitalityPieces += VitalPieceGain;

		int VitalityPiecesAdd = floor(int(VitalityPieces));
		if (HeiwaPlayer(owner))
		{
			if (kcdebug_levelupdisplays) Console.Printf("VitHPMaxGain [pre]: %d, VitalityCurrHPBoosts2: (%d / %d)", VitHPMaxGain, VitalityCurrHPBoosts2, VitalityPiecesAdd);
			int tempboost = VitalityCurrHPBoosts;
			while (VitalityCurrHPBoosts2 < VitalityPiecesAdd)
			{
				if (VitalityCurrHPBoosts2 >= tempboost) VitHPMaxGain += 15;
				if (heiwavhardmodifier) 
				{
					(MassGain += (randompick(6,7,7,8,8,8,8,9,9,10) + randompick(-1,0,0,0,0,0,0,0,0,1)) * frandom(1.125,1.375));
				}
				else
				{
					MassGain += (randompick(6,7,7,8,8,8,8,9,9,10) + randompick(-1,0,0,0,0,0,0,0,0,1));
				}
				VitalityCurrHPBoosts2++;
			}
			if (kcdebug_levelupdisplays) Console.Printf("VitHPMaxGain [post]: %d, VitalityCurrHPBoosts2: (%d / %d)", VitHPMaxGain, VitalityCurrHPBoosts2, VitalityPiecesAdd);
		}
		if (kcdebug_levelupdisplays) Console.Printf("MassGain: %d", MassGain);
		
		// IQ Points [Heiwa Only, 1 full point = +5 max PP ala EarthBound :V]
		double iqgain0 = frandompick(0.03125,0.0625,0.0625,0.0625,0.125,0.125,0.125,0.125,0.125,0.125,		0.1875,0.1875,0.1875,0.25); // frandompick(0.0125,0.0375,0.0375,0.0375,0.0375,0.0375,0.0625);
		double iqgain1 = (iqgain0 + 0.0625); // (vitgain0 + 0.0625);
		double iqgain2 = (iqgain0 + 0.1875); // (vitgain0 + 0.1875);
		double iqgain3 = (iqgain0 + 0.25); // (vitgain0 + 0.25);
		if (heiwavhardmodifier)
		{
			iqgain0 = frandompick(0.025,0.075,0.075,0.075,0.075,0.075,0.125);
			iqgain1 = (iqgain0 + 0.125);
			iqgain2 = (iqgain0 + 0.375);
			iqgain3 = (iqgain0 + 0.5);
		}
		iqgain0 *= 1.334;
		iqgain1 *= 1.334;
		iqgain2 *= 1.334;
		iqgain3 *= 1.334;
		
		double IQPieceGain = 0.0;
		IQPieceGain += 													frandompick[statitem](iqgain0,iqgain0,iqgain0,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2);
		if (levelbonustype <= -1) IQPieceGain += frandompick[statitem](iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain3,iqgain3,iqgain3,iqgain3,iqgain3);
		if (levelbonustype == 0)  IQPieceGain += frandompick[statitem](iqgain0,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain3,iqgain3);
		if (levelbonustype == 1)  IQPieceGain += frandompick[statitem](iqgain0,iqgain0,iqgain0,iqgain0,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain2,iqgain3);
		if (levelbonustype >= 2)  IQPieceGain += frandompick[statitem](iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain0,iqgain1,iqgain1,iqgain1,iqgain1,iqgain1);
		if (HeiwaPlayer(owner)) 
		{
			if (heiwavhardmodifier) IQPieceGain *= frandompick(1.25,1.5,1.5,1.5,1.75);
			double NewIQMul = 1.0;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 0.25;
				NewIQMul *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewIQMul >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewIQMul = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewIQMul <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewIQMul = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
				IQPieceGain *= NewIQMul;
			}
		}
		IQPieces += IQPieceGain;

		int IQPiecesAdd = floor(int(IQPieces));
		if (HeiwaPlayer(owner))
		{
			if (kcdebug_levelupdisplays) Console.Printf("IQPPMaxGain [pre]: %d, IQCurrPPBoosts2: (%d / %d)", IQPPMaxGain, IQCurrPPBoosts2, IQPiecesAdd);
			int tempboost = IQCurrPPBoosts;
			while (IQCurrPPBoosts2 < IQPiecesAdd)
			{
				if (IQCurrPPBoosts2 >= tempboost) IQPPMaxGain += 5;
				IQCurrPPBoosts2++;
			}
			if (kcdebug_levelupdisplays) Console.Printf("IQPPMaxGain [post]: %d, IQCurrPPBoosts2: (%d / %d)", IQPPMaxGain, IQCurrPPBoosts2, IQPiecesAdd);
		}

		// Senses Points [Heiwa Only, 1 full point = +5 max MP]
		double sensegain0 = frandompick(0.03125,0.0625,0.0625,0.0625,0.125,0.125,0.125,0.125,0.125,0.125,		0.1875,0.1875,0.1875,0.25); // frandompick(0.0125,0.0375,0.0375,0.0375,0.0375,0.0375,0.0625);
		double sensegain1 = (sensegain0 + 0.0625); // (vitgain0 + 0.0625);
		double sensegain2 = (sensegain0 + 0.1875); // (vitgain0 + 0.1875);
		double sensegain3 = (sensegain0 + 0.25); // (vitgain0 + 0.25);
		if (heiwavhardmodifier)
		{
			sensegain0 = frandompick(0.025,0.075,0.075,0.075,0.075,0.075,0.125);
			sensegain1 = (sensegain0 + 0.125);
			sensegain2 = (sensegain0 + 0.375);
			sensegain3 = (sensegain0 + 0.5);
		}
		
		double SensePieceGain = 0.0;
		SensePieceGain += 													frandompick[statitem](sensegain0,sensegain0,sensegain0,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2);
		if (levelbonustype <= -1) SensePieceGain += frandompick[statitem](sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain3,sensegain3,sensegain3,sensegain3,sensegain3);
		if (levelbonustype == 0)  SensePieceGain += frandompick[statitem](sensegain0,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain3,sensegain3);
		if (levelbonustype == 1)  SensePieceGain += frandompick[statitem](sensegain0,sensegain0,sensegain0,sensegain0,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain2,sensegain3);
		if (levelbonustype >= 2)  SensePieceGain += frandompick[statitem](sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain0,sensegain1,sensegain1,sensegain1,sensegain1,sensegain1);
		if (HeiwaPlayer(owner) && heiwavhardmodifier) 
		{
			SensePieceGain *= frandompick(1.25,1.5,1.5,1.5,1.75);
			double NewSenMul = 1.0;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 0.25;
				NewSenMul *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewSenMul >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewSenMul = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewSenMul <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewSenMul = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
				SensePieceGain *= NewSenMul;
			}
		}
		SensesPieces += SensePieceGain;

		int SensesPiecesAdd = floor(int(SensesPieces));
		if (HeiwaPlayer(owner))
		{
			if (kcdebug_levelupdisplays) Console.Printf("SensesMPMaxGain [pre]: %d, SensesCurrMPBoosts2: (%d / %d)", SensesMPMaxGain, SensesCurrMPBoosts2, SensesPiecesAdd);
			int tempboost = SensesCurrMPBoosts;
			while (SensesCurrMPBoosts2 < SensesPiecesAdd)
			{
				if (SensesCurrMPBoosts2 >= tempboost) SensesMPMaxGain += 5;
				SensesCurrMPBoosts2++;
			}
			if (kcdebug_levelupdisplays) Console.Printf("SensesMPMaxGain [post]: %d, SensesCurrMPBoosts2: (%d / %d)", SensesMPMaxGain, SensesCurrMPBoosts2, SensesPiecesAdd);
		}
		
		if (!owner.CountInv("SilentLevelUp")) owner.A_StartSound("misc/levelup",101,CHANF_DEFAULT,frandom[statitem](0.6,0.75),ATTN_NORM,frandom[statitem](1.25,1.5));
	}
	
	void LuckChecks()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
	}
	
	void LevelUpExpStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		Experience = owner.CountInv("ExpPts");
		owner.A_SetInventory("ExpPtsLeft",(LevelExpRequirement[(PlayerLevel)]-Experience));
		owner.A_SetInventory("ExpPtsNeeded",LevelExpRequirement[(PlayerLevel)]);
		if (PlayerLevel >= 1) owner.A_SetInventory("ExpPtsLDiff",(LevelExpRequirement[(PlayerLevel)] - LevelExpRequirement[(PlayerLevel-1)]));
										 else owner.A_SetInventory("ExpPtsLDiff",(LevelExpRequirement[(PlayerLevel)]));
		PlayerLevel = owner.CountInv("PlayerLevel");
		PlayerATK = owner.CountInv("PlayerATK");
		PlayerDEF = owner.CountInv("PlayerDEF");
		PlayerSPD = owner.CountInv("PlayerSPD");
		PlayerVIT = owner.CountInv("PlayerVIT");
		PlayerIQ = owner.CountInv("PlayerIQ");
		PlayerGUTS = owner.CountInv("PlayerGUTS");
		PlayerLUCK = owner.CountInv("PlayerLUCK");

		int levelmodulo, levelbonustype;
		int leveluptimes = 0;
		int leveluptimesmax = LevelCap - PlayerLevel;
		int StatIncrease;
		PrevATK = PlayerATK;
		PrevDEF = PlayerDEF;
		PrevSPD = PlayerSPD;
		PrevGUTS = PlayerGUTS;
		for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
		{
			if (kcdebug_levelup) Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
			if (Experience >= LevelExpRequirement[PlayerLevel])
			{
				if (PlayerLevel < LevelCap)
				{
					PlayerLevel += 1;
					
					LevelUpProcess(0);
					
					owner.A_SetInventory("PlayerLevel",PlayerLevel);
					owner.A_SetInventory("PlayerATK",PlayerATK);
					owner.A_SetInventory("PlayerDEF",PlayerDEF);
					owner.A_SetInventory("PlayerSPD",PlayerSPD);
					owner.A_SetInventory("PlayerLUCK",PlayerLUCK);
					owner.A_SetInventory("PlayerGUTS",PlayerGUTS);
					if (!owner.CountInv("SilentLevelUp"))
					{
						string LevelUpMsg = "";
						LevelUpMsg.AppendFormat("\c[Green]Congradulations, you've reached Level %d", PlayerLevel);
						if (VitHPMaxGain > 0 || 
								IQPPMaxGain > 0 || 
								SensesMPMaxGain > 0 || 
								HPMaxGain > 0 || 
								PPMaxGain > 0 || 
								MPMaxGain > 0) 
						{
							LevelUpMsg.AppendFormat("\n\n");
								if (VitHPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[brick][+%d HP, \c[green]+%d Vitality\c[brick]]", (HPMaxGain + VitHPMaxGain), (VitHPMaxGain / 15));
							else if (HPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[brick][+%d HP]", HPMaxGain);
								 if (IQPPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[purple][+%d PP, \c[purple]+%d IQ\c[purple]]", (PPMaxGain + IQPPMaxGain), (IQPPMaxGain / 5));
							else if (PPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[purple][+%d PP]", PPMaxGain);
						 if (SensesMPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[blue][+%d MP, \c[sapphire]+%d Senses\c[blue]]", (MPMaxGain + SensesMPMaxGain), (SensesMPMaxGain / 5));
							else if (MPMaxGain > 0) LevelUpMsg.AppendFormat("\n\c[blue][+%d MP]", MPMaxGain);
						}
						if (kc_extraatkdefspd)
						{
							if ((PlayerATK > PrevATK) || 
									(PlayerDEF > PrevDEF) || 
									(PlayerSPD > PrevSPD) || 
									(PlayerGUTS > PrevGUTS)) LevelUpMsg.AppendFormat("\n\n");
							if (PlayerATK > PrevATK) LevelUpMsg.AppendFormat("\n\c[brick]Attack Increased By %d!", (PlayerATK-PrevATK));
							if (PlayerDEF > PrevDEF) LevelUpMsg.AppendFormat("\n\c[olive]Defense Increased By %d!", (PlayerDEF-PrevDEF));
							if (PlayerSPD > PrevSPD) LevelUpMsg.AppendFormat("\n\c[lightblue]Speed Increased By %d!", (PlayerSPD-PrevSPD));
							if (PlayerGUTS > PrevGUTS) LevelUpMsg.AppendFormat("\n\c[FIRE]Guts Increased By %d!", (PlayerGUTS-PrevGUTS));
						}
						if (A_CheckForHeiwa())
						{
							int knifelevelmod = (A_GetKnifeSpd() * 0.75);
							int numberknifes;
							let FoundKnife = KnifeHeiwa(owner.FindInventory("KnifeHeiwa"));
							if (FoundKnife)
							{
								numberknifes = (PlayerLevel / knifelevelmod);
							}
							//Console.Printf("numberknifes: %d", numberknifes);
							if (PlayerLevel != 0 &&
									PlayerLevel % knifelevelmod == 0)
							{
								if (numberknifes >= 2)
								{
									LevelUpMsg.AppendFormat("\n\n\c[gold]Heiwa's Knife Throw <ALT-FIRE \c[green][");
									LevelUpMsg.AppendFormat(ReturnKeyBind1("+altattack"));
									LevelUpMsg.AppendFormat("\c[green]]\c[gold]> can now allow\n you to throw up to %d knifes at once. Press <USER4 \c[green][", numberknifes);
									LevelUpMsg.AppendFormat(ReturnKeyBind1("+user4"));
									LevelUpMsg.AppendFormat("\c[green]]\c[gold]>\n to cycle the amount of knives thrown!");
								}
								else
								if (numberknifes == 1)
								{
									LevelUpMsg.AppendFormat("\n\n\c[gold]Heiwa's Knife can now be used with <ALT-FIRE \c[green][");
									LevelUpMsg.AppendFormat(ReturnKeyBind1("+altattack"));
									LevelUpMsg.AppendFormat("\c[green]]\c[gold]>\n to throw magically replicated copies for an MP cost!");
								}
								
								if (!owner.CountInv("SilentLevelUp")) owner.A_StartSound("misc/skilllvl",102,CHANF_DEFAULT,frandom[statitem](0.6,0.75),ATTN_NORM,frandom[statitem](1.25,1.5));
							}
						}
						owner.A_Print(LevelUpMsg);
						owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
					}
				}
			}
		}
		if (kc_expgains) 
		{
			TruePlayerLevel = PlayerLevel;
			TruePlayerATK = PlayerATK;
			TruePlayerDEF = PlayerDEF;
			TruePlayerSPD = PlayerSPD;
		}
		else
		{
			TruePlayerLevel = 0;
			TruePlayerATK = 0;
			TruePlayerDEF = 0;
			TruePlayerSPD = 0;
		}
		ActualLevel = A_CheckActualLevel(1);
		
		int oldhealth = owner.health;
		if (owner.CountInv("NormalHealth")) oldhealthratio = 0;
		if (owner.CountInv("DecentHealth")) oldhealthratio = 1;
		if (owner.CountInv("LowHealth")) oldhealthratio = 2;
		if (owner.CountInv("CriticalHealth")) oldhealthratio = 3;
		
		PrevATK = PlayerATK;
		PrevDEF = PlayerDEF;
		PrevSPD = PlayerSPD;
		leveluptimes = 0;
		leveluptimesmax = NumOfLegendMeds - MedCurrLvl;
	}

	void TimeSeraphArmorStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		double chargevol = 0.5;
		if (TimeArmorRelicsOwned == 1) chargevol *= 0.667;
		if (TimeArmorRelicsOwned == 2) chargevol *= 0.834;
		if (TimeArmorRelicsOwned >= 3) chargevol *= 1.0;
		
		TimeArmorEnergyMaxTics = 0;
		TimeArmorRelicsOwned = 0;
		owner.A_SetInventory("TSArtifactsInUse",0);
		TimeArmorRelicsUsedBits = 0;
		TimeArmorRelicsOwnedBits = 0;
		if (owner.CountInv("TimeSeraphCharm") > 0) 
		{
			TimeArmorRelicsOwned++;
			TimeArmorRelicsOwnedBits += 1;
		}
		if (owner.CountInv("TimeSeraphPocketWatch")) 
		{
			TimeArmorRelicsOwned++;
			TimeArmorRelicsOwnedBits += 2;
		}
		if (owner.CountInv("TimeSeraphBangle")) 
		{
			TimeArmorRelicsOwned++;
			TimeArmorRelicsOwnedBits += 4;
		}
		
		if (TimeArmorRelicsOwned)
		{
			TimeArmorEnergyMaxTics = ((1800 * TimeArmorRelicsOwned) * TICRATE);
			
			if (TimeArmorEnergyTics > 0)
			{
				nm = "TSArmorTier1";
				nn = "TSArmorTier2";
				no = "TSArmorTier3Plus";
				np = "TimeSeraphVisor";
				TSADrainAmt = 0;
				if (owner.CountInv(no)) 
				{
					TSADrainAmt += random(random(32,36),random(44,48));
					TimeArmorRelicsUsedBits += 11;
				}
				else
				if (owner.CountInv(nn)) 
				{
					TSADrainAmt += 40;
					TimeArmorRelicsUsedBits += 3;
				}
				else
				if (owner.CountInv(nm)) 
				{
					TSADrainAmt += 10;
					TimeArmorRelicsUsedBits += 1;
				}
				if (owner.CountInv(np)) 
				{
					TimeArmorRelicsUsedBits += 4;
					TSADrainAmt += 2;
					if (!owner.CountInv("KCPowerTorchBangle")) owner.A_SetInventory("KCPowerTorchBangle",1);
				}
				else
				{
					if (owner.CountInv("KCPowerTorchBangle")) owner.A_SetInventory("KCPowerTorchBangle",0);
				}
				if (TimeArmorRelicsUsedBits > 0) owner.A_SetInventory("TSArtifactsInUse",1);
				if (TSADrainAmt)
				{
					TSADrainAmt *= kc_tsadrainspd;
					TSADrainAmt *= (1.0 / kc_tsaeffectiveness);
					if (TSADrainAmt < 1) TSADrainAmt = 1;
					if (TSADrainAmt > 10000) TSADrainAmt = 10000;
				}
				if (!A_CheckNoTimer()) 
				{
					int TimeArmorEnergyMod = (TimeArmorEnergyMaxTics / 67);

					TimeArmorEnergyTics -= TSADrainAmt;
					if (TimeArmorRelicsUsedBits)
					{
						TimeArmorChargeSoundInc += TSADrainAmt;
						if (kcdebug_timeserapharmor) Console.Printf("TimeArmorChargeSoundInc: %d / TimeArmorEnergyMod: %d", TimeArmorChargeSoundInc, TimeArmorEnergyMod);
						while (TimeArmorChargeSoundInc >= TimeArmorEnergyMod)
						{
							TimeArmorChargeSoundInc -= TimeArmorEnergyMod;
							owner.A_StopSound(551);
							owner.A_StartSound("tsarmor/drain1",551,CHANF_DEFAULT,chargevol,ATTN_NONE,frandom[statitem](1.00,1.334));
						}
					}
				}
				if (TimeArmorEnergyTics <= 0.0000) 
				{
					TimeArmorEnergyTics = 0;
					
					owner.A_StopSound(551);
					owner.A_StartSound("tsarmor/depleted",551,CHANF_DEFAULT,1.0,ATTN_NONE,frandom[statitem](1.00,1.334));
					if (owner.CountInv(nm)) 
					{
						owner.A_StopSound(555);
						owner.A_StartSound("tsarmor1/end",555,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						owner.A_SetInventory(nm,0);
					}
					if (owner.CountInv(nn)) 
					{
						owner.A_StopSound(556);
						owner.A_StartSound("tsarmor2/end",556,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						owner.A_SetInventory(nn,0);
					}
					if (owner.CountInv(no)) 
					{
						owner.A_StopSound(558);
						owner.A_StartSound("tsbangle/end",558,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(1.00,1.334));
						owner.A_SetInventory(no,0);
					}
				}
			}

			if (TimeArmorEnergyTics < TimeArmorEnergyMaxTics)
			{
				double baseregenamt = (8.0 + (TruePlayerLevel * 0.025));
				if (A_CheckTimeFreeze()) 
				{
					if (TimeArmorRelicsOwned == 1) baseregenamt *= 0.25;
					if (TimeArmorRelicsOwned == 2) baseregenamt *= 0.275;
					if (TimeArmorRelicsOwned >= 3) baseregenamt *= 0.325;
				}
				TSARegenAmt = baseregenamt;
				TSARegenAmt *= TimeArmorRelicsOwned;
				if (TSARegenAmt)
				{
					TSARegenAmt *= kc_tsaregenspd;
					TSARegenAmt *= kc_tsaeffectiveness;
					if (TSARegenAmt < (baseregenamt / 1250)) TSARegenAmt = (baseregenamt / 1250);
					if (TSARegenAmt > (baseregenamt * 1250)) TSARegenAmt = (baseregenamt * 1250);
				}
				
				PlayerPawn plr;
				plr = PlayerPawn(owner);
				if (plr)
				{
					double plrspeed = (plr.vel.x * plr.vel.x) + (plr.vel.y * plr.vel.y) + (plr.vel.z * plr.vel.z);
					bool isrunning = false;
					bool ismanualmove = false;
					if (plr.player.cmd.buttons & BT_MOVELEFT ||
							plr.player.cmd.buttons & BT_MOVERIGHT ||
							plr.player.cmd.buttons & BT_FORWARD ||
							plr.player.cmd.buttons & BT_BACK) ismanualmove = true;
					if (cl_run) 
					{
						if (plr.player.cmd.buttons & BT_SPEED) isrunning = false; 
																							else isrunning = true; 
					}
					else
					{
						if (plr.player.cmd.buttons & BT_SPEED) isrunning = true; 
																							else isrunning = false; 
					}
					double basespd = 1024;
					if (TimeArmorRelicsOwned >= 1) 
					{
						if (TrueGameSkill <= SKILL_VERY_EASY) basespd -= (160 - random(-4,4));
						if (TrueGameSkill == SKILL_EASY) basespd -= (144 - random(-3,3));
						if (TrueGameSkill == SKILL_NORMAL) basespd -= (128 - random(-2,2));
						if (TrueGameSkill == SKILL_HARD) basespd -= (112 - random(-1,1));
						if (TrueGameSkill >= SKILL_VERY_HARD) basespd -= (96 - random(0,0));
					}
					if (TimeArmorRelicsOwned >= 2) 
					{
						if (TrueGameSkill <= SKILL_VERY_EASY) basespd -= (160 - random(-4,4));
						if (TrueGameSkill == SKILL_EASY) basespd -= (144 - random(-3,3));
						if (TrueGameSkill == SKILL_NORMAL) basespd -= (128 - random(-2,2));
						if (TrueGameSkill == SKILL_HARD) basespd -= (112 - random(-1,1));
						if (TrueGameSkill >= SKILL_VERY_HARD) basespd -= (96 - random(0,0));
					}
					if (TimeArmorRelicsOwned >= 3) 
					{
						if (TrueGameSkill <= SKILL_VERY_EASY) basespd -= (160 - random(-4,4));
						if (TrueGameSkill == SKILL_EASY) basespd -= (144 - random(-3,3));
						if (TrueGameSkill == SKILL_NORMAL) basespd -= (128 - random(-2,2));
						if (TrueGameSkill == SKILL_HARD) basespd -= (112 - random(-1,1));
						if (TrueGameSkill >= SKILL_VERY_HARD) basespd -= (96 - random(0,0));
					}
					double mulfactor = 1.0;
					if (A_CheckTimeFreeze()) basespd *= (random(87,113) * 0.01);
															else basespd *= (random(98,102) * 0.01);
					double moveratio = ((plrspeed * 1.0) / (basespd * 1.0));
					
					if (A_CheckTimeFreeze() && plrspeed) 
					{
						if (TimeArmorRelicsOwned == 1) 
						{
							moveratio /= 0.20;
							if (moveratio >= 5) moveratio = 5;
						}
						if (TimeArmorRelicsOwned == 2) 
						{
							moveratio /= 0.18;
							if (moveratio >= 5.56) moveratio = 5.56;
						}
						if (TimeArmorRelicsOwned >= 3) 
						{
							moveratio /= 0.14;
							if (moveratio >= 7.143) moveratio = 7.143;
						}
						if (basespd) mulfactor = (moveratio * moveratio);
						if (mulfactor < 0.0) mulfactor = 0.0;
					}
					else
					{
						if (basespd) mulfactor += (moveratio + ((moveratio + (moveratio*0.5) + (moveratio*0.25))));
						if (mulfactor < 1.0) mulfactor = 1.0;
					}
					
					TSARegenAmt *= mulfactor;
					if (kcdebug_timeserapharmor) Console.Printf("plrspeed / basespd: %.8f / %.8f, mulfactor: %.8f, TSARegenAmt: %d (baseregenamt: %d), moveratio: %.8f", plrspeed, basespd, mulfactor, TSARegenAmt, baseregenamt, moveratio);
				}
				
				if (!A_CheckNoTimer()) 
				{
					int TimeArmorEnergyMod = (TimeArmorEnergyMaxTics / 100);

					TimeArmorEnergyTics += TSARegenAmt;
					if (!TimeArmorRelicsUsedBits)
					{
						TimeArmorChargeSoundInc += TSARegenAmt;
						if (kcdebug_timeserapharmor) Console.Printf("TimeArmorChargeSoundInc: %d / TimeArmorEnergyMod: %d", TimeArmorChargeSoundInc, TimeArmorEnergyMod);
						while (TimeArmorChargeSoundInc >= TimeArmorEnergyMod)
						{
							TimeArmorChargeSoundInc -= TimeArmorEnergyMod;
							owner.A_StopSound(551);
							owner.A_StartSound("tsarmor/charge1",551,CHANF_DEFAULT,chargevol,ATTN_NONE,frandom[statitem](1.00,1.334));
						}
					}
				}
			}
			
			if (TimeArmorEnergyTics <= 0)
			{
				//if (owner.CountInv("KCPowerTorch")) owner.A_SetInventory("KCPowerTorch",0);
			}
			
			if (TimeArmorEnergyTics > TimeArmorEnergyMaxTics) 
			{
				TimeArmorEnergyTics = TimeArmorEnergyMaxTics;
				if (TimeArmorRelicsUsedBits <= 0)
				{
					owner.A_StopSound(551);
					owner.A_StartSound("tsarmor/fullcharge",551,CHANF_DEFAULT,1.0,ATTN_NONE,frandom[statitem](1.00,1.334));
				}
			}
		}
		else
		{
			TimeArmorEnergyTics = 0;
		}
		if (kcdebug_timeserapharmor && TimeArmorRelicsOwned) Console.Printf("TimeArmorRelicsOwned: %d, TimeArmorEnergyTics: %.4f / %.4f, \c[sapphire]TSARegenAmt: %.4f\c-, \c[red]TSADrainAmt: %.4f\c-", TimeArmorRelicsOwned, TimeArmorEnergyTics, TimeArmorEnergyMaxTics, TSARegenAmt, TSADrainAmt);
	}
	
	void TimeFreezeStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		int TickTimer;

		// Defensive [default]
		timefreeze1duration = 10.0 + (timefreezedurationinc1 * timefreeze1timesused);
		timefreeze1cooldown = 45.0 * timefreeze1cooldownratio;
		// Offensive
		timefreeze2duration = 10.0 + (timefreezedurationinc1 * timefreeze2timesused);
		timefreeze2cooldown = 45.0 * timefreeze2cooldownratio;
		// Neutral
		timefreeze3duration = 20.0 + (timefreezedurationinc2 * timefreeze3timesused);
		timefreeze3cooldown = 22.5 * timefreeze3cooldownratio;
		
		if (timefreeze1durationbase > 0.00)
		{
			timefreeze1durationratio = (timefreeze1duration * 1.0) / (timefreeze1durationbase * 1.0);
			if (timefreeze1durationratio > 0.00) 
			{
				timefreeze1cooldownratio = 1.0 / (timefreeze1durationratio * 1.0);
			}
			if (kcdebug_timefreezechecks) Console.Printf("\c[green]timefreeze1durationratio: %.8f, timefreeze1cooldownratio: %.8f\c-, \c[btick]timefreeze2durationratio: %.8f, timefreeze2cooldownratio: %.8f\c-, \c[gray]timefreeze3durationratio: %.8f, timefreeze3cooldownratio: %.8f\c-",
																									timefreeze1durationratio, timefreeze1cooldownratio, timefreeze2durationratio, timefreeze2cooldownratio, timefreeze3durationratio, timefreeze3cooldownratio);
		}
		
		if (timestopstate)
		{
			if (timestopactivetics > 0)
			{
				double tickvol = 1.00;
				if (timestopactivemaxtics > 0) tickvol = double(tickvol * (timestopactivetics * 1.0) / (timestopactivemaxtics * 1.0));
				owner.A_SetInventory("KCTimeFreezer1",1);
				owner.A_SetInventory("KCTimeCooldown",0);
				TickTimer = timestopactivetics % 35;
				if (TickTimer == 0)
				{
					owner.A_StopSound(218);
					owner.A_StartSound("TimeStopTick",218,CHANF_DEFAULT,(frandom[statitem](0.40,0.60) * tickvol),ATTN_NONE); 
				}
				if (timestopactivetics == 65) 
				{
					owner.A_StopSound(217);
					owner.A_StartSound("TimeFreezeOut4",217,CHANF_DEFAULT,0.875,ATTN_NONE); 
				}
				if (!A_CheckNoTimer() 
						&& owner.health > 0) 
				{
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) { }
					else 
					{
						timestopactivetics--;
						timefreezegenduration++;
					}
				}
				timefreeze1cooldownratio2 = 1.0 - ((timestopactivetics * 1.0) / (timestopactivemaxtics * 1.0));
				if (kcdebug_timefreezechecks) Console.Printf("tickvol: %.8f, \c[green]timefreeze1cooldownratio2: %.8f, \c[brick]timefreeze2cooldownratio2: %.8f, \c[gray]timefreeze3cooldownratio2: %.8f", 
																											tickvol, 
																											timefreeze1cooldownratio2, 
																											timefreeze2cooldownratio2, 
																											timefreeze3cooldownratio2);
			}
			else
			if (timestopactivetics == 0) 
			{
				timestopstate = 0;
				timefreezegenduration = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				owner.A_SetInventory("KCTimeFreezer1",0);
				owner.A_SetInventory("KCTimeFreezer2",0);
				owner.A_SetInventory("KCTimeFreezer3",0);
				if (timestopcooldown1tics <= 0)
				{
					if (timestopcooldown1tics == 0) 
					{
						timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timefreeze1timesused += timeusemulti; // 1
					}
					timestopcooldown1tics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					timestopcooldown1maxtics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					owner.A_SetInventory("KCTimeCooldown",1);
					timefreeze1cooldownratio2 = 0.0;
				}
			}
			else
			if (timestopactivetics < 0)
			{
				timefreezegenduration = 0;
				timestopactivetics = 0;
				timestopstate = 0;
				owner.A_SetInventory("KCTimeFreezer",0);
				owner.A_SetInventory("KCTimeFreezer1",0);
				owner.A_SetInventory("KCTimeFreezer2",0);
				owner.A_SetInventory("KCTimeFreezer3",0);
				if (timestopcooldown1tics <= 0)
				{
					if (timestopcooldown1tics == 0) 
					{
						timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timefreeze1timesused += timeusemulti; // 1
						if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timefreeze1timesused += timeusemulti; // 1
					}
					timestopcooldown1tics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					timestopcooldown1maxtics = (int(timefreeze1cooldown * TICRATE) * timefreeze1cooldownratio2);
					owner.A_SetInventory("KCTimeCooldown",1);
					timefreeze1cooldownratio2 = 0.0;
				}
			}
		}
		else
		{
			owner.A_SetInventory("KCTimeFreezer",0);
			owner.A_SetInventory("KCTimeFreezer1",0);
			owner.A_SetInventory("KCTimeFreezer2",0);
			owner.A_SetInventory("KCTimeFreezer3",0);
			timefreezegenduration = 0;
			// Defensive [Cooldown]
			if (timestopcooldown1tics > 0) 
			{
				owner.A_SetInventory("KCTimeCooldown",1);
				if (!A_CheckNoTimer() && 
						owner.health > 0) 
				{
					timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown1tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown1tics--;
				}
				if (timestopcooldown1tics == 0) 
				{
					owner.A_SetInventory("KCTimeCooldown",0);
					owner.A_StartSound("TimeFreezeCooldown",219,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
					owner.A_SetBlend("264026",0.667,random[statitem](random[statitem](22,23),27));
				}
			}
			else 
			if (timestopcooldown1tics <= 0) 
			{
				owner.A_SetInventory("KCTimeCooldown",0);
				timestopcooldown1tics = 0;
			}

			// Offensive [Cooldown]
			if (timestopcooldown2tics > 0) 
			{
				owner.A_SetInventory("KCTimeCooldown2",1);
				if (!A_CheckNoTimer() && 
						owner.health > 0) 
				{
					timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown2tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown2tics--;
				}
				if (timestopcooldown2tics == 0) 
				{
					owner.A_SetInventory("KCTimeCooldown2",0);
					owner.A_StartSound("TimeFreezeCooldown",220,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
					owner.A_SetBlend("402626",0.667,random[statitem](random[statitem](22,23),27));
				}
			}
			else 
			if (timestopcooldown2tics <= 0) 
			{
				owner.A_SetInventory("KCTimeCooldown2",0);
				timestopcooldown2tics = 0;
			}

			// Neutral [Cooldown]
			if (timestopcooldown3tics > 0) 
			{
				owner.A_SetInventory("KCTimeCooldown3",1);
				if (!A_CheckNoTimer() && 
						owner.health > 0) 
				{
					timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 3)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 2)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown3tics--;
					if ((owner.CountInv("KCPowerKampoul") && random(1,4) <= 1)) timestopcooldown3tics--;
				}
				if (timestopcooldown3tics == 0) 
				{
					owner.A_SetInventory("KCTimeCooldown3",0);
					owner.A_StartSound("TimeFreezeCooldown",221,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
					owner.A_SetBlend("252540",0.667,random[statitem](random[statitem](22,23),27));
				}
			}
			else 
			if (timestopcooldown3tics <= 0) 
			{
				owner.A_SetInventory("KCTimeCooldown3",0);
				timestopcooldown3tics = 0;
			}
		}
		
		timestoptype = 0;
		if (owner.CountInv("KCTimeFreezer1")) timestoptype = 1;
		if (owner.CountInv("KCTimeFreezer2")) timestoptype = 2;
		if (owner.CountInv("KCTimeFreezer3")) timestoptype = 3;
		if (kcdebug_timefreezechecks) Console.Printf("\c[HeiwaDeluge]timefreezegenduration: %d\c-, \c[green]timefreeze1timesused: %d\c-, \c[brick]timefreeze2timesused: %d\c-, \c[gray]timefreeze3timesused: %d\c-, \c[HeiwaDeluge]timestopstate: %d, \c[lightblue]timestopactivetics: %d / %d, \c[green]timestopcooldown1tics: %d / %d, \c[brick]timestopcooldown2tics: %d / %d, \c[gray]timestopcooldown3tics: %d / %d, \c[green]timefreeze1duration: %.2f, timefreeze1cooldown: %.2f, \c[brick]timefreeze2duration: %.2f, timefreeze2cooldown: %.2f, \c[gray]timefreeze3duration: %.2f, timefreeze3cooldown: %.2f", 
																								timefreezegenduration, 
																								timefreeze1timesused, 
																								timefreeze2timesused, 
																								timefreeze3timesused, 
																								timestopstate, 
																								timestopactivetics, timestopactivemaxtics, 
																								timestopcooldown1tics, timestopcooldown1maxtics, 
																								timestopcooldown2tics, timestopcooldown2maxtics, 
																								timestopcooldown3tics, timestopcooldown3maxtics, 
																								timefreeze1duration, timefreeze1cooldown, 
																								timefreeze2duration, timefreeze2cooldown, 
																								timefreeze3duration, timefreeze3cooldown);
	}
	
	void LandDamageStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		landdmgbonus = 0;
		if (kcdebug_landdamage && owner.vel.z) Console.Printf("    \ceLanding Damage (ZVel: %.8f, OnGround: %d, WaterLevel: %d)", owner.vel.z, owner.player.onground, owner.waterlevel);
		if (owner.waterlevel <= 0 && !owner.player.onground)
		{
			if (owner.vel.z < -162.0)
			{
				landdmgbonus = 4;
				if (kcdebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]");
			}
			else
			if (owner.vel.z < -54.0)
			{
				landdmgbonus = 3;
				if (kcdebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]");
			}
			else
			if (owner.vel.z < -18.0)
			{
				landdmgbonus = 2;
				if (kcdebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]");
			}
			else
			if (owner.vel.z < -6.0)
			{
				landdmgbonus = 1;
				if (kcdebug_landdamage) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]");
			}
		}
	}
	
	void CountCapper()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		if (owner.CountInv("PoisonCount"))
		{
			owner.player.poisoncount += owner.CountInv("PoisonCount");
			owner.A_SetInventory("PoisonCount",0);
		}
		if (owner.CountInv("DamageCount"))
		{
			owner.player.DamageCount += owner.CountInv("DamageCount");
			if (owner.player.DamageCount > 100) owner.player.DamageCount = 100;
			owner.A_SetInventory("DamageCount",0);
		}
		if (owner.CountInv("BonusCount"))
		{
			owner.player.BonusCount += owner.CountInv("BonusCount");
			if (owner.player.BonusCount > 100) owner.player.BonusCount = 100;
			owner.A_SetInventory("BonusCount",0);
		}
	}
	
	void WeaponCheck()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		string nt;
		// Hand To Hand
		if (weapon is "FistMarine" || 
				weapon is "FistHeiwa") 
		{
		}
		else
		{
			nt = "FistPlayerSpeedFactor"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerSpeedFactor2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerSpeedFactor3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerSpeedFactor4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlock"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlock2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlock3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlock4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlockExtra"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlockExtra2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlockItem"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "FistPlayerBlockHold"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
		}

		// Hand To Hand
		if (weapon is "KnifeHeiwa") 
		{
		}
		else
		{
			nt = "KnifePlayerSpeedFactor"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSpeedFactor2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSpeedFactor3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSpeedFactor4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwing"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwing2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwing3"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwing4"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwingExtra"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwingExtra2"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwingItem"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
			nt = "KnifePlayerSwingHold"; if (owner.CountInv(nt)) owner.A_SetInventory(nt,0);
		}
		
		let BstP = BlasterPistol(playeractor.FindInventory("BlasterPistol"));
		if (BstP)
		{
			bool DualCheck = false;
			if (playeractor.CountInv("DualBlasterPistols") && !playeractor.CountInv("DualBlasterPistolsDisabled")) DualCheck = true;
			if (DualCheck)
			{
				if (playeractor.CountInv("BlasterPistolUpgrade")) BstP.spareshotsmax = 6;
																										 else BstP.spareshotsmax = 2;
			}
			else
			{
				if (playeractor.CountInv("BlasterPistolUpgrade")) BstP.spareshotsmax = 3;
																										 else BstP.spareshotsmax = 1;
			}
			int baseinc = random(12,13);
			if (level.time % 2 == 0) baseinc = 12;
			if (level.time % 2 == 1) baseinc = 13;
			int basetimercap = 350;
			if (BstP.spareshots < BstP.spareshotsmax) 
			{
				if (BstP.firestate > 0) 
				{
					baseinc /= baseinc;
					if (level.time % 2 == 1) baseinc = 0;
				}
				double chargevol = 0.9375;
				double chargepitch1 = 0.87;
				double chargepitch2 = 0.93;
				if (playeractor.CountInv("BlasterPistolUpgrade")) 
				{
					baseinc *= 2.5;
					chargevol = 1.25;
					chargepitch1 = 1.149425287356322;
					chargepitch2 = 1.075268817204301;
				}
				playeractor.A_StartSound("weapons/blasterpistolcharge1",656,CHANF_LOOPING,chargevol,ATTN_NORM,chargepitch1);
				if (DualCheck) playeractor.A_StartSound("weapons/blasterpistolcharge2",657,CHANF_LOOPING,chargevol,ATTN_NORM,chargepitch2);
				BstP.spareshotregentimer += baseinc;
				if (BstP.spareshotregentimer > basetimercap)
				{
					BstP.spareshots++;
					if (DualCheck) BstP.spareshots++;
					if (BstP.spareshots >= BstP.spareshotsmax)
					{
						BstP.spareshots = BstP.spareshotsmax;
						BstP.spareshotregentimer = 0;
						playeractor.A_StartSound("weapons/blasterpistolcharging",658,CHANF_DEFAULT,0.5625,ATTN_NORM,frandom(0.9,1.111));
						if (DualCheck) playeractor.A_StartSound("weapons/blasterpistolcharging",659,CHANF_DEFAULT,0.5625,ATTN_NORM,frandom(0.9,1.111));
					}
					else
					{
						BstP.spareshotregentimer -= basetimercap;
						//
					}
				}
				//Console.Printf("\c[fire]firestate: %d\c-, baseinc: %d, \c[green]spareshotregentimer: %d / %d\c-, \c[sapphire]spareshots: %d / %d\c-", BstP.firestate, baseinc, BstP.spareshotregentimer, basetimercap, BstP.spareshots, BstP.spareshotsmax);
			}
			else
			{
				playeractor.A_StopSound(656);
				playeractor.A_StopSound(657);
				BstP.spareshotregentimer = 0;
				if (BstP.spareshots > BstP.spareshotsmax) BstP.spareshots = BstP.spareshotsmax;
			}
		}
		else
		{
			playeractor.A_StopSound(656);
			playeractor.A_StopSound(657);
		}

		let BlR = BlasterRifle(playeractor.FindInventory("BlasterRifle"));
		if (BlR)
		{
			if (playeractor.CountInv("BlasterRifleUpgrade")) BlR.spareshotsmax = 5;
																									else BlR.spareshotsmax = 1;
			int baseinc = 5;
			int basetimercap = 350;
			if (BlR.spareshots < BlR.spareshotsmax) 
			{
				if (BlR.firestate > 0) baseinc /= 5;
				double chargevol = 0.25;
				double chargepitch = 0.8;
				if (playeractor.CountInv("BlasterRifleUpgrade")) 
				{
					baseinc *= 5;
					chargevol = 0.4375;
					chargepitch = 1.25;
				}
				playeractor.A_StartSound("weapons/blasterriflecharging",655,CHANF_LOOPING,chargevol,ATTN_NORM,chargepitch);
				BlR.spareshotregentimer += baseinc;
				if (BlR.spareshotregentimer > basetimercap)
				{
					BlR.spareshots++;
					if (BlR.spareshots >= BlR.spareshotsmax)
					{
						BlR.spareshots = BlR.spareshotsmax;
						BlR.spareshotregentimer = 0;
						playeractor.A_StartSound("weapons/blasterriflecharge1",654,CHANF_DEFAULT,0.5625,ATTN_NORM,frandom(0.9,1.111));
					}
					else
					{
						BlR.spareshotregentimer -= basetimercap;
						playeractor.A_StartSound("weapons/blasterriflecharge2",654,CHANF_DEFAULT,0.1875,ATTN_NORM,frandom(0.9,1.111));
					}
				}
				//Console.Printf("\c[fire]firestate: %d\c-, baseinc: %d, \c[green]spareshotregentimer: %d / %d\c-, \c[sapphire]spareshots: %d / %d\c-", BlR.firestate, baseinc, BlR.spareshotregentimer, basetimercap, BlR.spareshots, BlR.spareshotsmax);
			}
			else
			{
				playeractor.A_StopSound(655);
				BlR.spareshotregentimer = 0;
				if (BlR.spareshots > BlR.spareshotsmax) BlR.spareshots = BlR.spareshotsmax;
			}
		}
		else
		{
			playeractor.A_StopSound(654);
			playeractor.A_StopSound(655);
		}
		
	}
	
	
	void HandlePianoSing(int type = 0)
	{
		Actor mo;
		/*
		ThinkerIterator SingerFinder = ThinkerIterator.Create("Singer");
		while (mo = Actor(SingerFinder.Next()))
		{
			state ActState = mo.FindState("Inactive");
			if (type == 0) ActState = mo.FindState("Inactive");
			if (type == 1) ActState = mo.FindState("Active");
			if (ActState) mo.SetState(ActState);
		}
		
		ThinkerIterator PianoFinder = ThinkerIterator.Create("Pianoman");
		while (mo = Actor(PianoFinder.Next()))
		{
			state ActState = mo.FindState("Inactive");
			if (type == 0) ActState = mo.FindState("Inactive");
			if (type == 1) ActState = mo.FindState("Active");
			if (ActState) mo.SetState(ActState);
		}
		*/
	}
	void HandleDynamicMusic()
	{
		let playeractor = KCPlayerPawn(owner);

		if (playeractiontimer > 0)
		{
			playeractiontimerfrag++;
			if (DynMusFightTimer > 0) playeractiontimerfrag -= randompick[statitem](0,0,1,1,1,2,2);
			if (playeractiontimerfrag < 0) playeractiontimerfrag = 0;
			while (playeractiontimerfrag >= 20)
			{
				playeractiontimerfrag -= 20;
				playeractiontimer--;
				if (playeractiontimer < 0) playeractiontimer = 0;
				if (playeractiontimerfrag < 0) playeractiontimerfrag = 0;
			}
		}
		
		int tempdynmusictype = kc_dynamicmusic;
		int tutlevelmin = 1801;
		int tutlevelmax = 1804;
		if (level.levelnum >= tutlevelmin && level.levelnum <= tutlevelmax) tempdynmusictype = 3;
		
		if (tempdynmusictype)
		{
			bool usemusic = true;
			let IsPSXDoom = PlayingPSXDoom(owner.FindInventory("PlayingPSXDoom"));
			if (IsPSXDoom)
			{
				if (level.GetChecksum() == '95d8e4afa07a7e3330997a6aa5d0318d' ||
						level.GetChecksum() == '17e16b88bf7f163f05a6a5c45f0dfeb6' ||
						level.GetChecksum() == '39f6b93101248e39ae1af7c751647ea1' ||
						level.GetChecksum() == '058234c82963c80b99a58081f829dead' ||
						level.GetChecksum() == '77e33d393cb8386a13fe74391e053cd6' ||
						level.GetChecksum() == '7364394e3b113aea8490d8b0b89c7e05') usemusic = false;
			}
			if (Wads.CheckNumForName("KC-UOHYM", Wads.ns_global, -1, true) != -1)
			{
				if (level.mapname == "MAP01" ||
						level.mapname == "20PAM" ||
						level.mapname == "MAP02") usemusic = false;
			}
			
			if (usemusic)
			{
				if (tempdynmusictype == 1) DynMusSetUsed = kcdebug_misc8;
				if (kc_deathmusic && owner.health <= 0)
				{
					DynMusCalmTimer = -1;
					DynMusFightTimer = -1;
					randmusroll = -1;
				}
				else
				{
					if (DynMusFightTimer == 1) HandlePianoSing(0);
					if (DynMusFightTimer <= 0)
					{
						randmusroll = -1;
						DynMusCalmTimer++;
						if ((DynMusCalmTimer % 35) == 0 || (DynMusCalmTimer % 35) == 1 || (DynMusCalmTimer % 35) == 34)
						{
							if (tempdynmusictype == 1 || tempdynmusictype == 3)
							{
								if (kcdebug_dynmusdisplays) Console.Printf("\c[blue]Calling Paired Dynamic Music (Calm) [%d]\c-", DynMusCalmTimer);
								if (DynMusSetUsed == 0) { S_ChangeMusic("BGMPRTY", 0, true, true); snglen = 2676; } // Party
								if (DynMusSetUsed == 1) { S_ChangeMusic("BGMOBSV", 0, true, true); snglen = 3815; } // Observation
								if (DynMusSetUsed == 2) { S_ChangeMusic("BGMDING", 0, true, true); snglen = 5560; } // Dining
								if (DynMusSetUsed == 3) { S_ChangeMusic("BGMGARDN", 0, true, true); snglen = 6985; } // Garden
								if (DynMusSetUsed == 4) { S_ChangeMusic("BGMHEDGE", 0, true, true); snglen = 4494; } // Hedges
								if (DynMusSetUsed == 5) { S_ChangeMusic("BGMSPRNG", 0, true, true); snglen = 2011; } // Springs
								if (DynMusSetUsed == 6) { S_ChangeMusic("BGMCRICK", 0, true, true); snglen = 2950; } // Grove
								if (DynMusSetUsed == 7) { S_ChangeMusic("BGMHAUS", 0, true, true); snglen = 7111; } // House
								
								if (DynMusSetUsed == 8) { S_ChangeMusic("BGMVOKT", 0, true, true); snglen = 883; } // Villa
								if (DynMusSetUsed == 9) { S_ChangeMusic("BGMHERO", 0, true, true); snglen = 2209; } // Heroes
								if (DynMusSetUsed == 10) { S_ChangeMusic("BGMCORT", 0, true, true); snglen = 3261; } // School
								if (DynMusSetUsed == 11) { S_ChangeMusic("BGMMAGI", 0, true, true); snglen = 1444; } // Magic
								if (DynMusSetUsed == 12) { S_ChangeMusic("BGMHOLY", 0, true, true); snglen = 1946; } // Manse
								if (DynMusSetUsed == 13) { S_ChangeMusic("BGMETIQ", 0, true, true); snglen = 1235; } // Embassy
								if (DynMusSetUsed == 14) { S_ChangeMusic("BGMARTS", 0, true, true); snglen = 662; } // Abbey
								if (DynMusSetUsed == 15) { S_ChangeMusic("BGMAIR", 0, true, true); snglen = 1708; } // Zepp1
								if (DynMusSetUsed == 16) { S_ChangeMusic("BGMAIR", 0, true, true); snglen = 1708; } // Zepp2
		
								if (DynMusSetUsed == 17) { S_ChangeMusic("BGMCARN", 0, true, true); snglen = 1166; } // ?1
								if (DynMusSetUsed == 18) { S_ChangeMusic("BGMHEV", 0, true, true); snglen = 3819; } // ?2
								if (DynMusSetUsed == 19) { S_ChangeMusic("BGMHEVF", 0, true, true); snglen = 2656; } // ?3
								if (DynMusSetUsed == 20) { S_ChangeMusic("BGMHEVH", 0, true, true); snglen = 2589; } // ?4
								if (DynMusSetUsed == 21) { S_ChangeMusic("BGMPURGC", 0, true, true); snglen = 5873; } // ?5
								if (DynMusSetUsed == 22) { S_ChangeMusic("BGMHELLC", 0, true, true); snglen = 5062; } // ?6
								if (DynMusSetUsed == 23) { S_ChangeMusic("BGMMOTHC", 0, true, true); snglen = 1684; } // ?7
								
								if (DynMusSetUsed == 101) { S_ChangeMusic("SILONORM", 0, true, true); snglen = 1835; } // SiN - Silo
								if (DynMusSetUsed == 102) { S_ChangeMusic("GORGNORM", 0, true, true); snglen = 2318; } // SiN - Gorge
								if (DynMusSetUsed == 103) { S_ChangeMusic("BIONORM", 0, true, true); snglen = 1892; } // SiN - BioTech
								if (DynMusSetUsed == 104) { S_ChangeMusic("CORNORM", 0, true, true); snglen = 1757; } // SiN - Coral
								if (DynMusSetUsed == 105) { S_ChangeMusic("MUNTNORM", 0, true, true); snglen = 1860; } // SiN - Munt
								if (DynMusSetUsed == 106) { S_ChangeMusic("MANENORM", 0, true, true); snglen = 901; } // SiN - Mane
								if (DynMusSetUsed == 107) { S_ChangeMusic("BANKNORM", 0, true, true); snglen = 1891; } // SiN - Bank
								if (DynMusSetUsed == 108) { S_ChangeMusic("CHEMNORM", 0, true, true); snglen = 2588; } // SiN - Chem
								if (DynMusSetUsed == 109) { S_ChangeMusic("CASINORM", 0, true, true); snglen = 3448; } // SiN - Casino
								if (DynMusSetUsed == 110) { S_ChangeMusic("AQUANORM", 0, true, true); snglen = 1339; } // SiN - Aqua
								if (DynMusSetUsed == 111) { S_ChangeMusic("CSNORM", 0, true, true); snglen = 1941; } // SiN - Construct
								if (DynMusSetUsed == 112) { S_ChangeMusic("DAMNORM", 0, true, true); snglen = 1963; } // SiN - Dam
								if (DynMusSetUsed == 113) { S_ChangeMusic("HDCKNORM", 0, true, true); snglen = 1960; } // SiN - HiDocks
								if (DynMusSetUsed == 114) { S_ChangeMusic("INTRNORM", 0, true, true); snglen = 1055; } // SiN - Intr
								if (DynMusSetUsed == 115) { S_ChangeMusic("JUNGNORM", 0, true, true); snglen = 3925; } // SiN - Jungle
								if (DynMusSetUsed == 116) { S_ChangeMusic("MANSNORM", 0, true, true); snglen = 2272; } // SiN - Mansion
								if (DynMusSetUsed == 117) { S_ChangeMusic("POWNORM", 0, true, true); snglen = 2347; } // SiN - Pow
								if (DynMusSetUsed == 118) { S_ChangeMusic("XENONORM", 0, true, true); snglen = 2252; } // SiN - Xeno
								if (DynMusSetUsed == 119) { S_ChangeMusic("WHNORM", 0, true, true); snglen = 2594; } // SiN - Wareh
								if (DynMusSetUsed == 120) { S_ChangeMusic("WAWNORM", 0, true, true); snglen = 3034; } // SiN - Waw
								if (DynMusSetUsed == 121) { S_ChangeMusic("UWNORM", 0, true, true); snglen = 2803; } // SiN - Uw
								if (DynMusSetUsed == 122) { S_ChangeMusic("THRLMSTN", 0, true, true); snglen = 738; } // SiN - TMaster
	
								if (DynMusSetUsed == 1001) { S_ChangeMusic("WFMAP12", 0, true, true); snglen = 6329; } // Winter' Fury 1-2
								if (DynMusSetUsed == 1002) { S_ChangeMusic("62KRONAN", 0, true, true); snglen = 2523; } // SS2 Kronor 6-2
								if (DynMusSetUsed == 1003) { S_ChangeMusic("54ELLENN", 0, true, true); snglen = 3734; } // SS2 Ellenier 5-4
								if (DynMusSetUsed == 1004) { S_ChangeMusic("exltheme", 0, true, true); snglen = 4980; } // ?
								if (DynMusSetUsed == 1005) { S_ChangeMusic("temtheme", 0, true, true); snglen = 6026; } // ?
								if (DynMusSetUsed == 1006) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
								if (DynMusSetUsed == 1007) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
								if (DynMusSetUsed == 1008) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
								if (DynMusSetUsed == 1009) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
								if (DynMusSetUsed == 1010) { S_ChangeMusic("", 0, true, true); snglen = 0; } // ?
	
								if (snglen <= 0) snglen = 1050;
								if (tempdynmusictype == 3 && DynMusCalmTimer % snglen == (snglen-1)) 
								{
									if (kcdebug_dynmusdisplays) Console.Printf("\c[orange]Song should be looping or setting to a different one) [%d]\c-", DynMusCalmTimer);
									if (random[statitem](1,16) <= 15) DynMusChangeChance++;
									else
									{
										if (random[statitem](1,4) <= 1) DynMusChangeChance += 2;
										else
										{
											DynMusSetUsed = randompick[statitem](random[statitem](0,23),random[statitem](101,122),random[statitem](1001,1005));
											DynMusChangeChance = 1;
											snglen = 0;
										}
									}
								}
							}
							else
							{
								if (kcdebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (Random Fight Music Mode) [%d]\c-", DynMusCalmTimer);
								if (DynMusFightTimer >= 0) HandlePianoSing(0);
								S_ChangeMusic("*", 0, true, true);
							}
						}
						if (kcdebug_dynmusdisplays) 
						{
							if (tempdynmusictype == 2) Console.Printf("\c[sapphire]CalmTimer: %d \c[fire](FightTimer: %d (mod: %d))\c-, \c[green]RNG#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusCalmTimer, DynMusFightTimer, fighttimermod, randmusroll, playeractiontimer, playeractiontimerfrag);
																		else Console.Printf("\c[sapphire]CalmTimer: %d \c[fire](FightTimer: %d (mod: %d))\c-, \c[green]Set#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-, snglen: %d", DynMusCalmTimer, DynMusFightTimer, fighttimermod, DynMusSetUsed, playeractiontimer, playeractiontimerfrag, snglen);
						}
					}
					else
					{
						if (DynMusActCall)
						{
							if (DynMusCalmTimer >= 0) HandlePianoSing(1);
							DynMusCalmTimer = -1;
							if (tempdynmusictype == 1 || tempdynmusictype == 3)
							{
								randmusroll = -1;
								if (kcdebug_dynmusdisplays) Console.Printf("\c[brick]Calling Paired Dynamic Music (Fight) [%d (%d)]\c-", DynMusFightTimer, DynMusCalmTimer);
								if (DynMusSetUsed == 0) S_ChangeMusic("BGMBAT4", 0, true, true); // Party
								if (DynMusSetUsed == 1) S_ChangeMusic("BGMBAT2", 0, true, true); // Observation
								if (DynMusSetUsed == 2) S_ChangeMusic("BGMBAT2", 0, true, true); // Dining
								if (DynMusSetUsed == 3) S_ChangeMusic("BGMBAT1", 0, true, true); // Garden
								if (DynMusSetUsed == 4) S_ChangeMusic("BGMBAT3", 0, true, true); // Hedges
								if (DynMusSetUsed == 5) S_ChangeMusic("BGMBAT3", 0, true, true); // Springs
								if (DynMusSetUsed == 6) S_ChangeMusic("BGMBAT2", 0, true, true); // Cricket
								if (DynMusSetUsed == 7) S_ChangeMusic("BGMBAT3", 0, true, true); // House
	
								if (DynMusSetUsed == 8) S_ChangeMusic("BGMBAT3", 0, true, true); // Villa
								if (DynMusSetUsed == 9) S_ChangeMusic("BGMBAT3", 0, true, true); // Heroes
								if (DynMusSetUsed == 10) S_ChangeMusic("BGMBAT2", 0, true, true); // School
								if (DynMusSetUsed == 11) S_ChangeMusic("BGMBATM", 0, true, true); // Magic
								if (DynMusSetUsed == 12) S_ChangeMusic("BGMBAT2", 0, true, true); // Manse
								if (DynMusSetUsed == 13) S_ChangeMusic("BGMBAT2", 0, true, true); // Embassy
								if (DynMusSetUsed == 14) S_ChangeMusic("BGMBATA", 0, true, true); // Abbey
								if (DynMusSetUsed == 15) S_ChangeMusic("BGMBAT1", 0, true, true); // Zepp1
								if (DynMusSetUsed == 16) S_ChangeMusic("BGMBAT3", 0, true, true); // Zepp2
	
								if (DynMusSetUsed == 17) S_ChangeMusic("BGMBATC", 0, true, true); // ?1
								if (DynMusSetUsed == 18) S_ChangeMusic("BGMBATH", 0, true, true); // ?2
								if (DynMusSetUsed == 19) S_ChangeMusic("BGMBATH2", 0, true, true); // ?3
								if (DynMusSetUsed == 20) S_ChangeMusic("BGMBATH3", 0, true, true); // ?4
								if (DynMusSetUsed == 21) S_ChangeMusic("BGMPURGF", 0, true, true); // ?5
								if (DynMusSetUsed == 22) S_ChangeMusic("BGMHELLF", 0, true, true); // ?6
								if (DynMusSetUsed == 23) S_ChangeMusic("BGMMOTHF", 0, true, true); // ?7
								
								if (DynMusSetUsed == 101) S_ChangeMusic("SILOACT", 0, true, true); // SiN - Silo
								if (DynMusSetUsed == 102) S_ChangeMusic("GORGACT", 0, true, true); // SiN - Gorge
								if (DynMusSetUsed == 103) S_ChangeMusic("BIOACT", 0, true, true); // SiN - BioTech
								if (DynMusSetUsed == 104) S_ChangeMusic("CORACT", 0, true, true); // SiN - Coral
								if (DynMusSetUsed == 105) S_ChangeMusic("MUNTACT", 0, true, true); // SiN - Munt
								if (DynMusSetUsed == 106) S_ChangeMusic("MANEACT", 0, true, true); // SiN - Mane
								if (DynMusSetUsed == 107) S_ChangeMusic("BANKACT", 0, true, true); // SiN - Bank
								if (DynMusSetUsed == 108) S_ChangeMusic("CHEMACT", 0, true, true); // SiN - Chem
								if (DynMusSetUsed == 109) S_ChangeMusic("CASIACT", 0, true, true); // SiN - Casino
								if (DynMusSetUsed == 110) S_ChangeMusic("AQUAACT", 0, true, true); // SiN - Aqua
								if (DynMusSetUsed == 111) S_ChangeMusic("CSACT", 0, true, true); // SiN - Construct
								if (DynMusSetUsed == 112) S_ChangeMusic("DAMACT", 0, true, true); // SiN - Dam
								if (DynMusSetUsed == 113) S_ChangeMusic("HDCKACT", 0, true, true); // SiN - HiDocks
								if (DynMusSetUsed == 114) S_ChangeMusic("INTRACT", 0, true, true); // SiN - Intr
								if (DynMusSetUsed == 115) S_ChangeMusic("JUNGACT", 0, true, true); // SiN - Jungle
								if (DynMusSetUsed == 116) S_ChangeMusic("MANSACT", 0, true, true); // SiN - Mansion
								if (DynMusSetUsed == 117) S_ChangeMusic("POWACT", 0, true, true); // SiN - Pow
								if (DynMusSetUsed == 118) S_ChangeMusic("XENOACT", 0, true, true); // SiN - Xeno
								if (DynMusSetUsed == 119) S_ChangeMusic("WHACT", 0, true, true); // SiN - Wareh
								if (DynMusSetUsed == 120) S_ChangeMusic("WAWACT", 0, true, true); // SiN - Waw
								if (DynMusSetUsed == 121) S_ChangeMusic("UWACT", 0, true, true); // SiN - Uw
								if (DynMusSetUsed == 122) S_ChangeMusic("THRLMSTA", 0, true, true); // SiN - TMaster
	
								if (DynMusSetUsed == 1001) S_ChangeMusic("WFMAP12C", 0, true, true); // Winter' Fury 1-2
								if (DynMusSetUsed == 1002) S_ChangeMusic("62KRONAF", 0, true, true); // SS2 Kronor 6-2
								if (DynMusSetUsed == 1003) S_ChangeMusic("54ELLENF", 0, true, true); // SS2 Ellenier 5-4
								if (DynMusSetUsed == 1004) S_ChangeMusic("exlmenu", 0, true, true); // ?
								if (DynMusSetUsed == 1005) S_ChangeMusic("temmenu", 0, true, true); // ?
								if (DynMusSetUsed == 1006) S_ChangeMusic("", 0, true, true); // ?
								if (DynMusSetUsed == 1007) S_ChangeMusic("", 0, true, true); // ?
								if (DynMusSetUsed == 1008) S_ChangeMusic("", 0, true, true); // ?
								if (DynMusSetUsed == 1009) S_ChangeMusic("", 0, true, true); // ?
								if (DynMusSetUsed == 1010) S_ChangeMusic("", 0, true, true); // ?
							}
							else
							{
								if (kcdebug_dynmusdisplays) Console.Printf("\c[brick]Calling Randomized Combat Music [%d, roll: %d]\c-", DynMusFightTimer, randmusroll);
								if (randmusroll <= -1)
								{
									randmusroll = random[statitem](randompick[statitem](-12,-12,-13),39);
									if (randmusroll == 0) S_ChangeMusic("BGMBAT1", 0, true, true);
									if (randmusroll == 1) S_ChangeMusic("BGMBAT2", 0, true, true);
									if (randmusroll == 2) S_ChangeMusic("BGMBAT4", 0, true, true);
									if (randmusroll == 3) S_ChangeMusic("BGMBAT3", 0, true, true);
									if (randmusroll == 4) S_ChangeMusic("BGMBATM", 0, true, true);
									if (randmusroll == 5) S_ChangeMusic("BGMBATA", 0, true, true);
									if (randmusroll == 6) S_ChangeMusic("BGMBATC", 0, true, true);
									if (randmusroll == 7) S_ChangeMusic("BGMBATH", 0, true, true);
									if (randmusroll == 8) S_ChangeMusic("BGMBATH2", 0, true, true);
									if (randmusroll == 9) S_ChangeMusic("BGMBATH3", 0, true, true);
									if (randmusroll == 10) S_ChangeMusic("BGMPURGF", 0, true, true);
									if (randmusroll == 11) S_ChangeMusic("BGMHELLF", 0, true, true);
									if (randmusroll == 12) S_ChangeMusic("BGMMOTHF", 0, true, true);
									if (randmusroll == 13) S_ChangeMusic("SILOACT", 0, true, true); // SiN - Silo
									if (randmusroll == 14) S_ChangeMusic("GORGACT", 0, true, true); // SiN - Gorge
									if (randmusroll == 15) S_ChangeMusic("BIOACT", 0, true, true); // SiN - BioTech
									if (randmusroll == 16) S_ChangeMusic("CORACT", 0, true, true); // SiN - Coral
									if (randmusroll == 17) S_ChangeMusic("MUNTACT", 0, true, true); // SiN - Munt
									if (randmusroll == 18) S_ChangeMusic("MANEACT", 0, true, true); // SiN - Mane
									if (randmusroll == 19) S_ChangeMusic("BANKACT", 0, true, true); // SiN - Bank
									if (randmusroll == 20) S_ChangeMusic("CHEMACT", 0, true, true); // SiN - Chem
									if (randmusroll == 21) S_ChangeMusic("CASIACT", 0, true, true); // SiN - Casino
									if (randmusroll == 22) S_ChangeMusic("AQUAACT", 0, true, true); // SiN - Aqua
									if (randmusroll == 23) S_ChangeMusic("WFMAP12C", 0, true, true); // Winter' Fury 1-2
									if (randmusroll == 24) S_ChangeMusic("62KRONAF", 0, true, true); // SS2 Kronor 6-2
									if (randmusroll == 25) S_ChangeMusic("54ELLENF", 0, true, true); // SS2 Ellenier 5-4
									if (randmusroll == 26) S_ChangeMusic("CSACT", 0, true, true); // SiN - Construct
									if (randmusroll == 27) S_ChangeMusic("DAMACT", 0, true, true); // SiN - Dam
									if (randmusroll == 28) S_ChangeMusic("HDCKACT", 0, true, true); // SiN - HiDocks
									if (randmusroll == 29) S_ChangeMusic("INTRACT", 0, true, true); // SiN - Intr
									if (randmusroll == 30) S_ChangeMusic("JUNGACT", 0, true, true); // SiN - Jungle
									if (randmusroll == 31) S_ChangeMusic("MANSACT", 0, true, true); // SiN - Mansion
									if (randmusroll == 32) S_ChangeMusic("POWACT", 0, true, true); // SiN - Pow
									if (randmusroll == 33) S_ChangeMusic("XENOACT", 0, true, true); // SiN - Xeno
									if (randmusroll == 34) S_ChangeMusic("WHACT", 0, true, true); // SiN - Wareh
									if (randmusroll == 35) S_ChangeMusic("WAWACT", 0, true, true); // SiN - Waw
									if (randmusroll == 36) S_ChangeMusic("UWACT", 0, true, true); // SiN - Uw
									if (randmusroll == 37) S_ChangeMusic("THRLMSTA", 0, true, true); // SiN - TMaster
									if (randmusroll == 38) S_ChangeMusic("exltheme", 0, true, true); // ?
									if (randmusroll == 39) S_ChangeMusic("temtheme", 0, true, true); // ?
									if (randmusroll == 40) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 41) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 42) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 43) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 44) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 45) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 46) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 47) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 48) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 49) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 50) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 51) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 52) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 53) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 54) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 55) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 56) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 57) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 58) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 59) S_ChangeMusic("", 0, true, true); // ?
									if (randmusroll == 60) S_ChangeMusic("", 0, true, true); // ?
								}
							}
							DynMusActCall = false;
						}
						
						if (A_CheckTimeFreeze())
						{
							if (level.time % fighttimermod == 0) 
							{
								DynMusFightTimer--;
								fighttimermod = randompick(4,8,8,16,16,16,16,16);
							}
						}
						else
						{
							DynMusFightTimer--;
						}
						if (kcdebug_dynmusdisplays) 
						{
							if (tempdynmusictype == 2) Console.Printf("\c[fire]FightTimer: %d (mod: %d) \c[sapphire](CalmTimer: %d)\c-, \c[green]RNG#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusFightTimer, fighttimermod, DynMusCalmTimer, randmusroll, playeractiontimer, playeractiontimerfrag);
																		else Console.Printf("\c[fire]FightTimer: %d (mod: %d) \c[sapphire](CalmTimer: %d)\c-, \c[green]Set#: %d\c-, \c[orange]acttimer: %d\c-, \c[yellow]acttimerfrag: %d / 20\c-", DynMusFightTimer, fighttimermod, DynMusCalmTimer, DynMusSetUsed, playeractiontimer, playeractiontimerfrag);
						}
						if (DynMusFightTimer <= 0) 
						{
							if (random[statitem](1,32) <= 31) DynMusChangeChance++;
							else
							{
								if (random[statitem](1,2) <= 1) DynMusChangeChance += 2;
							}
							DynMusFightTimer = 0;
							if (tempdynmusictype == 3 && random[statitem](1,32) <= DynMusChangeChance + random[statitem](0,2)) 
							{
								DynMusSetUsed = randompick[statitem](random[statitem](0,23),random[statitem](101,122),random[statitem](1001,1005));
								DynMusChangeChance = 1;
								snglen = 0;
							}
							playeractiontimer = 0;
							playeractiontimerfrag = 0;
						}
					}
				}
			}
			else
			{
				if (DynMusFightTimer > -1 || DynMusCalmTimer > -1)
				{
					if (DynMusFightTimer >= 0) HandlePianoSing(0);
					DynMusFightTimer = -1;
					DynMusCalmTimer = -1;
					randmusroll = -1;
					playeractiontimer = -1;
					playeractiontimerfrag = -1;
					DynMusChangeChance = 1;
					if (kcdebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (DynMusic Turned off)\c-");
					S_ChangeMusic("*", 0, true, true);
				}
			}
		}
		else
		{
			if (DynMusFightTimer > -1 || DynMusCalmTimer > -1)
			{
				if (DynMusFightTimer >= 0) HandlePianoSing(0);
				DynMusFightTimer = -1;
				DynMusCalmTimer = -1;
				randmusroll = -1;
				playeractiontimer = -1;
				playeractiontimerfrag = -1;
				DynMusChangeChance = 1;
				if (kcdebug_dynmusdisplays) Console.Printf("\c[darkgrey]Resetting to Base Music (DynMusic Turned off)\c-");
				S_ChangeMusic("*", 0, true, true);
			}
		}
	}
	
	void FlatDefenseCalc()
	{
		weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		double armoradd;
		double defbase;
		double heiwadefmult = (1.0 / 0.5);
		
		double baseflatmul = 0.01;
		if (skill <= 0) 
		{
			baseflatmul = 0.0125;
			heiwadefmult = (1.0 / 0.375);
		}
		if (skill == 1) 
		{
			baseflatmul = 0.01125;
			heiwadefmult = (1.0 / 0.4325);
		}
		if (skill == 2) 
		{
			baseflatmul = 0.01;
			heiwadefmult = (1.0 / 0.5);
		}
		if (skill == 3) 
		{
			baseflatmul = 0.00875;
			heiwadefmult = (1.0 / 0.5625);
		}
		if (skill >= 4) 
		{
			baseflatmul = 0.0075;
			heiwadefmult = (1.0 / 0.625);
		}
		
		// Normal
		defbase = (1.0 / kc_defenselvlint);
		if (A_CheckForHeiwa()) defbase *= heiwadefmult;
		BaseFlatDefValue = ((ActualLevel * defbase) + (TruePlayerDEF * defbase));
		BaseFlatDefValue *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		// Crushers
		defbase = (1.0 / (kc_defenselvlint * 2.5));
		if (A_CheckForHeiwa()) defbase *= heiwadefmult;
		BaseFlatDefValueCrush = ((ActualLevel * defbase) + (TruePlayerDEF * defbase));
		BaseFlatDefValueCrush *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		// DamageFloors
		defbase = (1.0 / (kc_defenselvlint * 5));
		if (A_CheckForHeiwa()) defbase *= heiwadefmult;
		BaseFlatDefValueDmgFlr = ((ActualLevel * defbase) + (TruePlayerDEF * defbase));
		BaseFlatDefValueDmgFlr *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		// HUD Visual Displays
		defbase = (1.0 / kc_defenselvlint);
		if (A_CheckForHeiwa()) defbase *= heiwadefmult;
		BaseFlatDefValueHUD = ((ActualLevel * defbase) + (TruePlayerDEF * defbase));
		BaseFlatDefValueHUD *= 1.0 + (((ActualLevel * baseflatmul) + (TruePlayerDEF * baseflatmul)));
		
		double heiwafistblockbonus = 1.5;
		if (owner.CountInv("FistPlayerBlock"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (1.125 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.05 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.025 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (1.125 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 1.125;
				BaseFlatDefValueCrush *= 1.05;
				BaseFlatDefValueDmgFlr *= 1.025;
				BaseFlatDefValueHUD *= 1.125;
			}
		}
		if (owner.CountInv("FistPlayerBlock2"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (1.25 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.10 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.05 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (1.25 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 1.25;
				BaseFlatDefValueCrush *= 1.10;
				BaseFlatDefValueDmgFlr *= 1.05;
				BaseFlatDefValueHUD *= 1.25;
			}
		}
		if (owner.CountInv("FistPlayerBlock3"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (1.5 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.20 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.10 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (1.5 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 1.5;
				BaseFlatDefValueCrush *= 1.20;
				BaseFlatDefValueDmgFlr *= 1.10;
				BaseFlatDefValueHUD *= 1.5;
			}
		}
		if (owner.CountInv("FistPlayerBlock4"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (2.00 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.40 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.20 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (2.00 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 2.00;
				BaseFlatDefValueCrush *= 1.40;
				BaseFlatDefValueDmgFlr *= 1.20;
				BaseFlatDefValueHUD *= 2.00;
			}
		}
		if (owner.CountInv("FistPlayerBlockExtra"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (1.25 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.10 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.05 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (1.25 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 1.25;
				BaseFlatDefValueCrush *= 1.10;
				BaseFlatDefValueDmgFlr *= 1.05;
				BaseFlatDefValueHUD *= 1.25;
			}
		}
		if (owner.CountInv("FistPlayerBlockExtra2"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= (1.25 * heiwafistblockbonus);
				BaseFlatDefValueCrush *= (1.10 * heiwafistblockbonus);
				BaseFlatDefValueDmgFlr *= (1.05 * heiwafistblockbonus);
				BaseFlatDefValueHUD *= (1.25 * heiwafistblockbonus);
			}
			else
			{
				BaseFlatDefValue *= 1.25;
				BaseFlatDefValueCrush *= 1.10;
				BaseFlatDefValueDmgFlr *= 1.05;
				BaseFlatDefValueHUD *= 1.25;
			}
		}
		double heiwaknifebonus = frandompick(1.0,1.25,1.25,1.25,1.25,1.25,1.25,1.5);
		if (owner.CountInv("KnifePlayerSwing"))
		{
			BaseFlatDefValue *= (1.0625 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.025 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.0125 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.0625 * heiwaknifebonus);
		}
		if (owner.CountInv("KnifePlayerSwing2"))
		{
			BaseFlatDefValue *= (1.125 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.05 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.025 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.125 * heiwaknifebonus);
		}
		if (owner.CountInv("KnifePlayerSwing3"))
		{
			BaseFlatDefValue *= (1.25 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.10 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.05 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.25 * heiwaknifebonus);
		}
		if (owner.CountInv("KnifePlayerSwing4"))
		{
			BaseFlatDefValue *= (1.50 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.20 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.10 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.50 * heiwaknifebonus);
		}
		if (owner.CountInv("KnifePlayerSwingExtra"))
		{
			BaseFlatDefValue *= (1.125 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.05 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.025 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.125 * heiwaknifebonus);
		}
		if (owner.CountInv("KnifePlayerSwingExtra2"))
		{
			BaseFlatDefValue *= (1.125 * heiwaknifebonus);
			BaseFlatDefValueCrush *= (1.05 * heiwaknifebonus);
			BaseFlatDefValueDmgFlr *= (1.025 * heiwaknifebonus);
			BaseFlatDefValueHUD *= (1.125 * heiwaknifebonus);
		}
		if (owner.CountInv("KCPowerKampoul"))
		{
			if (A_CheckForHeiwa())
			{
				BaseFlatDefValue *= 3.00;
				BaseFlatDefValueCrush *= 1.80;
				BaseFlatDefValueDmgFlr *= 1.40;
				BaseFlatDefValueHUD *= 3.00;
			}
			else
			{
				BaseFlatDefValue *= 1.50;
				BaseFlatDefValueCrush *= 1.20;
				BaseFlatDefValueDmgFlr *= 1.10;
				BaseFlatDefValueHUD *= 1.50;
			}
		}
		if (owner.CountInv("PowerGuard"))
		{
			BaseFlatDefValue *= 2.00;
			BaseFlatDefValueCrush *= 1.40;
			BaseFlatDefValueDmgFlr *= 1.20;
			BaseFlatDefValueHUD *= 2.00;
		}
		if (owner.CountInv("PowerWeaken"))
		{
			BaseFlatDefValue *= 0.50;
			BaseFlatDefValueCrush *= 0.80;
			BaseFlatDefValueDmgFlr *= 0.90;
			BaseFlatDefValueHUD *= 0.50;
		}
		if (owner.CountInv("EWShieldIdleMode"))
		{
			BaseFlatDefValue *= 1.15;
			BaseFlatDefValueCrush *= 1.06;
			BaseFlatDefValueDmgFlr *= 1.03;
			BaseFlatDefValueHUD *= 1.15;
		}
		if (owner.CountInv("EWShieldDefendMode"))
		{
			BaseFlatDefValue *= 1.45;
			BaseFlatDefValueCrush *= 1.18;
			BaseFlatDefValueDmgFlr *= 1.09;
			BaseFlatDefValueHUD *= 1.45;
		}
		if (owner.CountInv("EWShieldDefendModeExtra"))
		{
			BaseFlatDefValue *= 1.225;
			BaseFlatDefValueCrush *= 1.09;
			BaseFlatDefValueDmgFlr *= 1.045;
			BaseFlatDefValueHUD *= 1.225;
		}
		if (berserked)
		{
			BaseFlatDefValue *= 1.2;
			BaseFlatDefValueCrush *= 1.08;
			BaseFlatDefValueDmgFlr *= 1.04;
			BaseFlatDefValueHUD *= 1.2;
		}
		BaseFlatDefValue *= kc_natflatdeffactor;
		BaseFlatDefValue *= kc_flatdefensefactor;
		BaseFlatDefValueCrush *= kc_natflatdeffactor;
		BaseFlatDefValueCrush *= kc_flatdefensefactor;
		BaseFlatDefValueDmgFlr *= kc_natflatdeffactor;
		BaseFlatDefValueDmgFlr *= kc_flatdefensefactor;
		BaseFlatDefValueHUD *= kc_natflatdeffactor;
		BaseFlatDefValueHUD *= kc_flatdefensefactor;
		
		//**********************
		//* Armor Defense Calc *
		//**********************
		ArmorDefValue = 0;
		ArmorDefValueCrush = 0;
		ArmorDefValueDmgFlr = 0;
		ArmorDefValueHUD = 0;
		
		if (armtier == 1)
		{
			armoradd = ((ActualLevel * 0.025) + (TruePlayerDEF * 0.025));
			
			ArmorDefValue += (random[statitem](1,2) + armoradd);
			ArmorDefValueCrush += randompick[statitem](0,0,0,1,1);
			ArmorDefValueDmgFlr += randompick[statitem](0,0,0,0,0,0,0,0,0,0,0,1,1);
			ArmorDefValueHUD = 2 + armoradd;
		}
		if (armtier == 2)
		{
			armoradd = ((ActualLevel * 0.0625) + (TruePlayerDEF * 0.0625));
			
			ArmorDefValue += (random[statitem](4,5) + armoradd);
			ArmorDefValueCrush += randompick[statitem](1,1,2,2,3);
			ArmorDefValueDmgFlr += randompick[statitem](0,0,0,0,0,0,0,0,1,1,2,2,3);
			ArmorDefValueHUD = 5 + armoradd;
		}
		if (armtier >= 3)
		{
			armoradd = ((ActualLevel * 0.15625) + (TruePlayerDEF * 0.15625));
			
			ArmorDefValue += (random[statitem](9,14) + armoradd);
			ArmorDefValueCrush += randompick[statitem](2,3,3,4,4);
			ArmorDefValueDmgFlr += randompick[statitem](0,0,0,0,0,1,1,2,2,3,3,4,4);
			ArmorDefValueHUD = 14 + armoradd;
		}
		double GuardVal = 2;
		if (owner.CountInv("PowerGuard"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 0.50;
		if (owner.CountInv("PowerWeaken"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.125;
		if (owner.CountInv("EWShieldIdleMode"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.375;
		if (owner.CountInv("EWShieldDefendMode"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.25;
		if (owner.CountInv("EWShieldDefendModeExtra"))
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		GuardVal = 1.1;
		if (berserked)
		{
			ArmorDefValue *= GuardVal;
			ArmorDefValueCrush *= GuardVal;
			ArmorDefValueDmgFlr *= GuardVal;
			ArmorDefValueHUD *= GuardVal;
		}
		ArmorDefValue *= kc_armflatdeffactor;
		ArmorDefValue *= kc_flatdefensefactor;
		ArmorDefValueCrush *= kc_armflatdeffactor;
		ArmorDefValueCrush *= kc_flatdefensefactor;
		ArmorDefValueDmgFlr *= kc_armflatdeffactor;
		ArmorDefValueDmgFlr *= kc_flatdefensefactor;
		ArmorDefValueHUD *= kc_armflatdeffactor;
		ArmorDefValueHUD *= kc_flatdefensefactor;
	}
	
	void EndStuff()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		HandleDynamicMusic();
		
		ClassCheck++;
		itemtimer++;
		
		// Heiwa-Unique Interaction with Daisy Rescue Card Effect: gives a random permanent stat
		// bonus upon completion. Luck to you if you get it as a perma card due to this. V:
		string nm = "CCards_Actor_DaisyFound";
		if (owner.CountInv("CCards_Actor_DaisyFound") > 0)
		{
			owner.A_SetInventory("CCards_Actor_DaisyFound",0);
			int boost = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
			string DaisySaveQuote = "Saving Daisy has boosted your ";
			if (random(1,16) <= 13) // Gives 1-3 ATK/DEF/SPD/GUT/LUK [mpre often 2]
			{
				int randroll = random(1,5);
				boost = randompick(1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3);
				
				if (randroll <= 1) // ATK
				{
					PlayerATK += boost;
					globalvars.PlayerATK += boost;
					owner.A_GiveInventory("PlayerATK",boost);
					DaisySaveQuote.AppendFormat("\c[brick]Attack\c- ");
				}
				else
				if (randroll == 2) // DEF
				{
					PlayerDEF += boost;
					globalvars.PlayerDEF += boost;
					owner.A_GiveInventory("PlayerDEF",boost);
					DaisySaveQuote.AppendFormat("\c[olive]Defense\c- ");
				}
				else
				if (randroll == 3) // SPD
				{
					PlayerSPD += boost;
					globalvars.PlayerSPD += boost;
					owner.A_GiveInventory("PlayerSPD",boost);
					DaisySaveQuote.AppendFormat("\c[sapphire]Speed\c- ");
				}
				else
				if (randroll == 4) // GUT
				{
					PlayerGUTS += boost;
					globalvars.PlayerGUTS += boost;
					owner.A_GiveInventory("PlayerGUTS",boost);
					DaisySaveQuote.AppendFormat("\c[orange]Guts\c- ");
				}
				else
				if (randroll >= 5) // LUK
				{
					PlayerLUCK += boost;
					globalvars.PlayerLUCK += boost;
					owner.A_GiveInventory("PlayerLUCK",boost);
					DaisySaveQuote.AppendFormat("\c[gold]Luck\c- ");
				}
			}
			else // Gives 1-3 VIT/IQ/SEN [more often 1]
			{
				int randroll = random(1,3);
				boost = randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3);
				
				if (randroll <= 1) // VIT
				{
					VitalityPieces++;
					globalvars.VitalityPieces++;
					DaisySaveQuote.AppendFormat("\c[brick]Vitality\c- ");
				}
				else
				if (randroll == 2) // IQ
				{
					IQPieces++;
					globalvars.IQPieces++;
					DaisySaveQuote.AppendFormat("\c[purple]IQ\c- ");
				}
				else
				if (randroll >= 3) // SEN
				{
					SensesPieces++;
					globalvars.SensesPieces++;
					DaisySaveQuote.AppendFormat("\c[lightblue]Senses\c- ");
				}
			}
			DaisySaveQuote.AppendFormat("by %d!", boost);
			owner.A_StartSound("Capsule/Pickup",1440,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			owner.A_StartSound("Capsule/Pickup",1441,CHANF_DEFAULT,1.0,ATTN_NORM,0.9);
			owner.A_StartSound("Capsule/Pickup",1442,CHANF_DEFAULT,1.0,ATTN_NORM,1.1);
			owner.A_PrintBold(String.Format("%s", DaisySaveQuote), frandom(3.25,3.75));
		}
		
		if (IsMorphed > 0)
		{
			if (IsMorphed == 1 && MorphTimer == 0) 
			{
				owner.health = MaxHealthTrue * 0.3;
				if (owner.CountInv("HitByMorphProj"))
				{
					WasMorphProj = 1;
					owner.A_SetInventory("HitByMorphProj",0);
					ArmorTier = 0;
				}
			}
			MorphTimer++;
		}
		else
		{
			if (WasMorphed == 1 && MorphTimer > 0) 
			{
				owner.health = MaxHealthTrue;
				if (skill <= 1) armsav *= 0.75;
				if (skill == 1) armsav *= 0.625;
				if (skill == 2) armsav *= 0.5;
				if (skill == 3) armsav *= 0.375;
				if (skill >= 4) armsav *= 0.25;
				if (WasMorphProj) 
				{
					armsav *= 0.5;
					WasMorphProj = 0;
				}
				if (armsav > 0)
				{
					ArmorTier = armtier;
					if (ArmorTier == 1) owner.A_GiveInventory("KCGreenArmor",1);
					if (ArmorTier == 2) owner.A_GiveInventory("KCBlueArmor",1);
					if (ArmorTier == 3) owner.A_GiveInventory("KCHeavyArmor",1);
					if (ArmorTier > 0) 
					{
						owner.A_TakeInventory("KCArmor",(armsav-1));
						if (kcdebug_morphdisplays) Console.Printf("armsav: %d, ArmorTier: %d, armtier: %d [%d]", armsav, ArmorTier, armtier, gametic);
						for (int i; i < (armsav-1); i++) 
						{
							owner.A_GiveInventory("ArmorBonusSilent",1); 
							if (kcdebug_morphdisplays) Console.Printf("i: %d, armamt: %d, armsav: %d [%d]", i, owner.CountInv("KCArmor"), armsav, gametic);
						}
					}
				}
			}
			else
			{
				armsav = owner.CountInv("KCArmor");
				armtier = ArmorTier;
			}
			MorphTimer = 0;
		}
		if (kcdebug_morphdisplays) Console.Printf("armsav: %d, armtier: %d [%d]", armsav, armtier, gametic);
		WasMorphed = IsMorphed;
		
		owner.player.mo.maxhealth = MaxHealthTrue;
		// Set Global Vars [End]
		globalvars.heiwavhardmodifier = heiwavhardmodifier;
		globalvars.BaseStartMaxHealth = BaseStartMaxHealth;
		globalvars.HealthLevelAdd = HealthLevelAdd;
		globalvars.HealthNoRPGADD = HealthNoRPGADD;
		globalvars.HealthNoRPGADD2 = HealthNoRPGADD2;
		globalvars.HealthBonusAdd = HealthBonusAdd;
		globalvars.VitalityPieces = VitalityPieces;
		globalvars.VitalityCurrHPBoosts = VitalityCurrHPBoosts;
		globalvars.VitalityCurrHPBoosts2 = VitalityCurrHPBoosts2;
		globalvars.PPLevelAdd = PPLevelAdd;
		globalvars.PPNoRPGADD = PPNoRPGADD;
		globalvars.PPNoRPGADD2 = PPNoRPGADD2;
		globalvars.PPBonusAdd = PPBonusAdd;
		globalvars.IQPieces = IQPieces;
		globalvars.IQCurrPPBoosts = IQCurrPPBoosts;
		globalvars.IQCurrPPBoosts2 = IQCurrPPBoosts2;
		globalvars.MPLevelAdd = MPLevelAdd;
		globalvars.MPNoRPGADD = MPNoRPGADD;
		globalvars.MPNoRPGADD2 = MPNoRPGADD2;
		globalvars.MPBonusAdd = MPBonusAdd;
		globalvars.SensesPieces = SensesPieces;
		globalvars.SensesCurrMPBoosts = SensesCurrMPBoosts;
		globalvars.SensesCurrMPBoosts2 = SensesCurrMPBoosts2;
		globalvars.MassLevelAdd = MassLevelAdd;
		globalvars.MassNoRPGAdd = MassNoRPGAdd;
		globalvars.MassNoRPGAdd2 = MassNoRPGAdd2;
		globalvars.MassBonusAdd = MassBonusAdd;
		globalvars.AirLevelAdd = AirLevelAdd;
		globalvars.AirNoRPGAdd = AirNoRPGAdd;
		globalvars.AirNoRPGAdd2 = AirNoRPGAdd2;
		globalvars.AirBonusAdd = AirBonusAdd;
		globalvars.MaxHealthTrue = MaxHealthTrue;
		globalvars.MaxPsychicPoints = MaxPsychicPoints;
		globalvars.MaxMagicPoints = MaxMagicPoints;
		globalvars.Experience = Experience;
		globalvars.PlayerLevel = PlayerLevel;
		globalvars.TruePlayerLevel = TruePlayerLevel;
		globalvars.ClassCheck = ClassCheck;
		globalvars.atkfct = atkfct;
		globalvars.deffct = deffct;
		globalvars.spdfct = spdfct;
		globalvars.jmpfct = jmpfct;
		globalvars.suvfct = suvfct;
		globalvars.mssfct = mssfct;
		globalvars.evdfct = evdfct;
		globalvars.PlayerATK = PlayerATK;
		globalvars.PlayerDEF = PlayerDEF;
		globalvars.PlayerSPD = PlayerSPD;
		globalvars.PlayerVIT = PlayerVIT;
		globalvars.PlayerIQ = PlayerIQ;
		globalvars.PlayerGUTS = PlayerGUTS;
		globalvars.PlayerLUCK = PlayerLUCK;
	}
	
	void MiscModCheckStuff1()
	{
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		string type;
		
		// Bloom
		if (Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true) != -1)
		{
			int firemax = random[statitem](3,6);
			string type = "PlayerBurner";
			string type2 = "TFireTrail";
			int dmgint = 8;
			int fireint = random[statitem](3,5);
			int fireburners = owner.CountInv(type);
			if (fireburners > 0)
			{
				//Console.Printf("fireburners: %d", fireburners);
				if (owner.waterlevel >= 2)
				{
					owner.A_SetInventory(type,0);
				}
				else
				{
					if (owner.GetAge() % fireint == 0)
					{
						for (int i; i < firemax; i++)
						{
							type2 = "TFireTrail";
							actor FSpawn;
							bool spawned;
							[spawned, FSpawn] = owner.A_SpawnItemEx(type2,frandom[statitem](-owner.radius,owner.radius),frandom[statitem](-owner.radius,owner.radius),frandom[statitem]((owner.height*0.375),(owner.height*0.875)),frandom[statitem](-0.5,0.5),frandom[statitem](-0.5,0.5),frandom[statitem](0.5,2.0),frandom[statitem](0.0,360.0),SXF_NOCHECKPOSITION,random[statitem](24,32));
							if (spawned && FSpawn)
							{
								FSpawn.A_SetRenderStyle(frandom[statitem](0.625,0.875),STYLE_Add);
								FSpawn.A_SetScale((FSpawn.default.scale.x*frandom[statitem](0.625,0.875)),(FSpawn.default.scale.y*frandom[statitem](0.625,0.875)));
							}
						}
					}
					if (owner.GetAge() % dmgint == 0)
					{
						int burndmg = randompick[statitem](1,1,1,1,1,1,1,1,1,2);
						let firact = owner.FindInventory(type);
						if (owner.health > burndmg && firact) 
						{
							if (!(owner.CountInv("PowerIronFeet") || 
										owner.CountInv("PowerIronFeet2") || 
										owner.CountInv("PowerMask") ||
										owner.CountInv("PowerInvulnerable") ||
										owner.CountInv("KCPowerInvuln") ||
										owner.player.cheats & CF_GODMODE ||
										owner.player.cheats & CF_GODMODE2 ||
										owner.bINVULNERABLE))
							{
								owner.DamageMobj(firact, firact, burndmg, "Fire", DMG_NO_ARMOR|DMG_NO_FACTOR|DMG_NO_PROTECT|DMG_NO_ENHANCE|DMG_THRUSTLESS|DMG_NO_DODGE|DMG_CANTKILL|DMG_NODASHAVOID|DMG_IGNOREDEF|DMG_NO_SARMOR, owner.angle);
							}
						}
						owner.A_TakeInventory(type,1);
					}
				}
			}
		}
	}
	
	bool CheckMeleeDamageTypes(Name damageType)
	{
		bool check = false;
		if (damageType == 'Melee' || 
				damageType == 'Trample' || 
				damageType == 'Stomp' || 
				damageType == 'Fist' || 
				damageType == 'Kick' || 
				damageType == 'Knife' || 
				damageType == 'Chainsaw' ||
				damageType == 'Bonk' || 
				damageType == 'Bap' || 
				damageType == 'Chop') check = true;
		return check;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		if (owner && (Owner.CountInv("PowerStrength") || owner.CountInv("KCPowerStrength"))) berserked = true;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		double BerserkFactorblock, BerserkFactorSwing;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		double baseatkfct = 0.00625;
		if (skill <= 0) baseatkfct = 0.0075;
		if (skill == 1) baseatkfct = 0.006875;
		if (skill == 2) baseatkfct = 0.00625;
		if (skill == 3) baseatkfct = 0.005625;
		if (skill >= 4) baseatkfct = 0.005;
		if (kc_expgains) baseatkfct *= 1.0;
		if (IsMorphed == 1) baseatkfct *= 0.334;
		baseatkfct *= kc_patkfactor;
		double tempmax;
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (pre-attack MiscItem): %d", damage);
			double tempatkfactor = baseatkfct;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("    (\czPlayerStatItem input [STEP 5 (\cwsuper.DamageMobj\cz)]\c-: \cydmg = %d\c-)", damage);
			
			// Level
			double LVLFactor = 1.00;
			tempatkfactor = baseatkfct;
			if (A_CheckForHeiwa()) tempatkfactor *= 0.334;
			if (kc_expgains) LVLFactor = (1.00 + (TruePlayerLevel * tempatkfactor));
			if (IsMorphed == 1) tempmax = 2.334;
										 else tempmax = 5.00;
			if (kc_expgains) tempmax *= 1.0;
			if (LVLFactor >= tempmax) LVLFactor = tempmax;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - Level): %.8f", LVLFactor);
			
			// Attack
			double ATKFactor = 1.00;
			tempatkfactor = baseatkfct;
			if (A_CheckForHeiwa()) tempatkfactor *= frandom(0.875,1.125);
			if (kc_extraatkdefspd && kc_expgains) ATKFactor = (1.00 + (TruePlayerATK * tempatkfactor) + (random[statitem](1,PlayerLUCK) * frandompick[statitem](0,0,0,0,0,0,(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.125),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.25),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*0.5),(baseatkfct*1),(baseatkfct*1),(baseatkfct*2))));
			if (IsMorphed == 1) tempmax = 2.334;
										 else tempmax = 5.00;
			if (kc_extraatkdefspd && kc_expgains) tempmax *= 1.0;
			if (ATKFactor >= tempmax) ATKFactor = tempmax;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - EAttack): %.8f", ATKFactor);
			
			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 0.75;
			if (Skill == SKILL_HARD) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_EASY) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 1.25;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - Skill): %.8f", SkillFactor);
			
			// Landing Bonus
			double LandingFactor = 1.0;
			if (CheckMeleeDamageTypes(damageType))
			{
				if (landdmgbonus == 1) 
				{
					owner.A_StopSound(601);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					LandingFactor = 1.5;
				}
				if (landdmgbonus == 2) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					LandingFactor = 2.25;
				}
				if (landdmgbonus == 3) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StopSound(603);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",603,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					LandingFactor = 3.78125;
				}
				if (landdmgbonus == 4) 
				{
					owner.A_StopSound(601);
					owner.A_StopSound(602);
					owner.A_StopSound(603);
					owner.A_StopSound(604);
					owner.A_StartSound("crit/critical",601,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",602,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",603,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					owner.A_StartSound("crit/critical",604,CHANF_DEFAULT,1.0,ATTN_NORM,frandom[statitem](0.9,1.1));
					LandingFactor = 7.47265625;
				}
			}
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - Landing): %.8f", LandingFactor);
			
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerGuard")) BuffFactor *= 2;
			if (Owner.CountInv("PowerWeaken")) BuffFactor *= 0.5;
			if (Owner.CountInv("PowerInvisibility") || 
					Owner.CountInv("KCPowerInvisibility") || 
					Owner.CountInv("PowerGhost"))
			{
				BuffFactor *= frandompick[statitem](1.00,1.00,1.125,1.125,1.25);
				if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0) BuffFactor *= frandompick[statitem](1.00,1.00,1.125,1.125,1.25);
			}

			double foodbufffactor = 1.0;
			if (owner.CountInv("PowerLMPieBuff")) foodbufffactor += 0.20;
			BuffFactor *= foodbufffactor;
			
			double KCFactor = 1.0;
			if (owner.CountInv("KCPowerKampoul")) KCFactor *= 2.5;
			if (MercyInvulnOnSiel) KCFactor *= 2.5;

			double TSAFactor = 1.0;
			if (TimeArmorRelicsUsedBits & 4) TSAFactor *= 1.1667;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - TSA): %.8f", TSAFactor);
			
			double KillComboFct = 1.0;
			KillComboFct -= (KillComboCount * 0.002);
			if (KillComboFct >= 4.0) KillComboFct = 4.0;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - KillComboFct): %.8f", KillComboFct);
			
			double NewAtkFct = atkfct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewAtkFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewAtkFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				if (NewAtkFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
				/*
				if (owner.health <= (MaxHealthTrue * frandom(0.3,0.4)))
				{
					basemult = frandom(0.2,0.3);
					NewAtkFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
					if (NewAtkFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
					if (NewAtkFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
					if (owner.health <= (MaxHealthTrue * frandom(0.09,0.16)))
					{
						basemult = frandom(0.15,0.35);
						NewAtkFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
						if (NewAtkFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
						if (NewAtkFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
						if (owner.health <= (MaxHealthTrue * frandom(0.027,0.064)))
						{
							basemult = frandom(0.1,0.4);
							NewAtkFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
							if (NewAtkFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
							if (NewAtkFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
							if (owner.health <= (MaxHealthTrue * frandom(0.0081,0.016)))
							{
								basemult = frandom(0.05,0.45);
								NewAtkFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
								if (NewAtkFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
								if (NewAtkFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewAtkFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
							}
						}
					}
				}
				*/
				if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("Damage (!passive - atkfct): %.8f [%.8f]", NewAtkFct, atkfct);
			}

			double TOTALFactor = 1.0
												 * LVLFactor
												 * ATKFactor
												 * SkillFactor
												 * LandingFactor
												 * BuffFactor
												 * KCFactor
												 * TSAFactor
												 * KillComboFct
												 * NewAtkFct;
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("\c[gold]Damage (!passive - Total): %.8f", TOTALFactor);

			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (kcdebug_attackcalcs || kcdebug_actordmgdisplays) Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		double basedeffct = 0.0025;
		if (skill <= 0) basedeffct = 0.0030;
		if (skill == 1) basedeffct = 0.00275;
		if (skill == 2) basedeffct = 0.0025;
		if (skill == 3) basedeffct = 0.00225;
		if (skill >= 4) basedeffct = 0.0020;
		if (kc_expgains) basedeffct *= 1.0;
		if (IsMorphed == 1) basedeffct *= 0.334;
		basedeffct *= kc_pdeffactor;
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int origdmg = damage;
			//playtookhealthdmgtsa
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (pre-defense MiscItem): %d", damage);
			bool dmgflrtype = false;
			if ((damageType == 'Slime' || 
					damageType == 'Lava' || 
					damageType == 'Magma' || 
					(playeractor && playeractor.tookflrdmg) || 
					damageType == 'Drowning' || 
					damageType == 'Falling'))
			{
				dmgflrtype = true;
			}
			
			double tempdeffactor = basedeffct;
			
			// Level
			double LVLFactor = 1.00;
			tempdeffactor = basedeffct;
			if (A_CheckForHeiwa()) tempdeffactor *= 0.334;
			if (kc_expgains) LVLFactor = (1.00 - (TruePlayerLevel * tempdeffactor));
			if (IsMorphed == 1) tempmax = 0.60;
										 else tempmax = 0.20;
			if (kc_expgains) tempmax *= 1.0;
			if (LVLFactor <= tempmax) LVLFactor = tempmax;
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - Level): %.8f", LVLFactor);
			
			// Defense
			double DEFFactor = 1.00;
			tempdeffactor = basedeffct;
			if (A_CheckForHeiwa()) tempdeffactor *= frandom(0.875,1.125);
			if (kc_extraatkdefspd && kc_expgains) DEFFactor = (1.00 - (TruePlayerDEF * tempdeffactor) - (random[statitem](1,PlayerLUCK) * frandompick[statitem](0,0,0,0,0,0,(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.125),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.25),(basedeffct*0.5),(basedeffct*0.5),(basedeffct*0.5),(basedeffct),(basedeffct),(basedeffct*2))));
			if (IsMorphed == 1) tempmax = 0.60;
										 else tempmax = 0.20;
			if (kc_extraatkdefspd && kc_expgains) tempmax *= 1.0;
			if (DEFFactor <= tempmax) DEFFactor = tempmax;
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - EDefense): %.8f", DEFFactor);
			
			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			int BerserkFactorblock = frandompick[statitem2](0.334,0.5,0.667);
			int HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
			double temp1 = 0.00;
			double temp2 = 0.00;
			double temp3 = 0.00;
			If (weapon is "EvilWarriorShield") 
			{
				temp1 = ((0.1667 + (HellWarriorShieldLevel * 0.01667)) + (HellWarriorShieldLevel * 0.00625));
				if (Owner.CountInv("EWShieldDefendMode")) temp2 = ((0.433 + (HellWarriorShieldLevel * 0.0433)) + (HellWarriorShieldLevel * 0.005));
				if (Owner.CountInv("EWShieldDefendModeExtra")) temp3 = ((0.4866 + (HellWarriorShieldLevel * 0.04866)) + (HellWarriorShieldLevel * 0.001));
				
				if (dmgflrtype)
				{
					double rand = (random[statitem](0,5) * 0.05);
					if (berserked) rand = (random[statitem](2,5) * 0.05);
					temp1 *= rand;
					temp2 *= rand;
					temp3 *= rand;
					BerserkFactorblock *= rand;
				}
				temp1 = (1.0 - temp1);
				temp2 = (1.0 - temp2);
				temp3 = (1.0 - temp3);
				BerserkFactorblock = (1.0 - BerserkFactorblock);
				EWShieldFactor *= temp1;
				EWShieldFactor *= temp2;
				EWShieldFactor *= temp3;
				if (EWShieldFactor < 1.00 && 
						(berserked)) 
				{
					EWShieldFactor *= (1.0 - BerserkFactorblock);
				}
			}
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - HellWarrior Shield): %.8f, \c[blue]temp1: %.8f, temp2: %.8f, temp3: %.8f, BerserkFactorblock: %.8f", EWShieldFactor, temp1, temp2, temp3, BerserkFactorblock);
		
			double PlayerFistBlockFactor = 1.00;
			int UsingFistBlock = 0;
			BerserkFactorblock = frandompick[statitem2](0.25,0.334,0.334,0.334,0.5,0.5,0.5,0.5,0.5,0.5,0.667,0.667,0.667,0.75);
			double BaseBlockFactor1 = 0.5;
			double BaseBlockFactor2 = 0.5;
			if (!dmgflrtype)
			{
				if (Owner.CountInv("FistPlayerBlock")) 
				{
					UsingFistBlock++;
					if (UsingFistBlock) 
					{
						if (A_CheckForHeiwa())
						{
							BaseBlockFactor1 = 0.25;
							BaseBlockFactor2 = 0.25;
						}
						else
						{
							BaseBlockFactor1 = 0.5;
							BaseBlockFactor2 = 0.5;
						}
						PlayerFistBlockFactor *= BaseBlockFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					}
				}
				if (Owner.CountInv("FistPlayerBlock2")) 
				{
					UsingFistBlock++;
					if (UsingFistBlock)
					{
						if (A_CheckForHeiwa())
						{
							BaseBlockFactor1 = 0.1875;
							BaseBlockFactor2 = 0.1875;
						}
						else
						{
							BaseBlockFactor1 = 0.375;
							BaseBlockFactor2 = 0.375;
						}
						PlayerFistBlockFactor *= BaseBlockFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					}
				}
				if (Owner.CountInv("FistPlayerBlock3")) 
				{
					UsingFistBlock++;
					if (UsingFistBlock) 
					{
						if (A_CheckForHeiwa())
						{
							BaseBlockFactor1 = 0.125;
							BaseBlockFactor2 = 0.125;
						}
						else
						{
							BaseBlockFactor1 = 0.25;
							BaseBlockFactor2 = 0.25;
						}
						PlayerFistBlockFactor *= BaseBlockFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					}
				}
				if (Owner.CountInv("FistPlayerBlock4")) 
				{
					UsingFistBlock++;
					if (UsingFistBlock) 
					{
						if (A_CheckForHeiwa())
						{
							BaseBlockFactor1 = 0.06125;
							BaseBlockFactor2 = 0.06125;
						}
						else
						{
							BaseBlockFactor1 = 0.125;
							BaseBlockFactor2 = 0.125;
						}
						PlayerFistBlockFactor *= BaseBlockFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					}
				}
				if (Owner.CountInv("FistPlayerBlockExtra") && UsingFistBlock) 
				{
					if (A_CheckForHeiwa())
					{
						BaseBlockFactor1 = 0.05;
						BaseBlockFactor2 = 0.05;
					}
					else
					{
						BaseBlockFactor1 = 0.1;
						BaseBlockFactor2 = 0.1;
					}
					PlayerFistBlockFactor *= BaseBlockFactor1;
					if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					if (Owner.CountInv("FistPlayerBlockExtra2"))
					{
						PlayerFistBlockFactor *= BaseBlockFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerFistBlockFactor *= BaseBlockFactor2;
					}
				}
				if (PlayerFistBlockFactor < 1.00 && UsingFistBlock && Owner.CountInv("PowerStrength") || owner.CountInv("KCPowerStrength")) PlayerFistBlockFactor *= BerserkFactorblock;
				if (!UsingFistBlock) PlayerFistBlockFactor = 1.00;
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - FistBlock): %.8f", PlayerFistBlockFactor);
			}
			else
			{
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - FistBlock): [IGNORED - dmgflrtype]");
			}
			
			double PlayerKnifeSwingFactor = 1.00;
			int UsingKnifeSwing = 0;
			BerserkFactorSwing = frandompick[statitem2](0.25,0.334,0.334,0.334,0.5,0.5,0.5,0.5,0.5,0.5,0.667,0.667,0.667,0.75);
			double BaseSwingFactor1 = 0.5;
			double BaseSwingFactor2 = 0.5;
			if (!dmgflrtype)
			{
				if (Owner.CountInv("KnifePlayerSwing")) 
				{
					UsingKnifeSwing++;
					if (UsingKnifeSwing) 
					{
						if (A_CheckForHeiwa())
						{
							BaseSwingFactor1 = 0.25;
							BaseSwingFactor2 = 0.25;
						}
						else
						{
							BaseSwingFactor1 = 0.5;
							BaseSwingFactor2 = 0.5;
						}
						PlayerKnifeSwingFactor *= BaseSwingFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					}
				}
				if (Owner.CountInv("KnifePlayerSwing2")) 
				{
					UsingKnifeSwing++;
					if (UsingKnifeSwing)
					{
						if (A_CheckForHeiwa())
						{
							BaseSwingFactor1 = 0.1875;
							BaseSwingFactor2 = 0.1875;
						}
						else
						{
							BaseSwingFactor1 = 0.375;
							BaseSwingFactor2 = 0.375;
						}
						PlayerKnifeSwingFactor *= BaseSwingFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					}
				}
				if (Owner.CountInv("KnifePlayerSwing3")) 
				{
					UsingKnifeSwing++;
					if (UsingKnifeSwing) 
					{
						if (A_CheckForHeiwa())
						{
							BaseSwingFactor1 = 0.125;
							BaseSwingFactor2 = 0.125;
						}
						else
						{
							BaseSwingFactor1 = 0.25;
							BaseSwingFactor2 = 0.25;
						}
						PlayerKnifeSwingFactor *= BaseSwingFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					}
				}
				if (Owner.CountInv("KnifePlayerSwing4")) 
				{
					UsingKnifeSwing++;
					if (UsingKnifeSwing) 
					{
						if (A_CheckForHeiwa())
						{
							BaseSwingFactor1 = 0.06125;
							BaseSwingFactor2 = 0.06125;
						}
						else
						{
							BaseSwingFactor1 = 0.125;
							BaseSwingFactor2 = 0.125;
						}
						PlayerKnifeSwingFactor *= BaseSwingFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					}
				}
				if (Owner.CountInv("KnifePlayerSwingExtra") && UsingKnifeSwing) 
				{
					if (A_CheckForHeiwa())
					{
						BaseSwingFactor1 = 0.05;
						BaseSwingFactor2 = 0.05;
					}
					else
					{
						BaseSwingFactor1 = 0.1;
						BaseSwingFactor2 = 0.1;
					}
					PlayerKnifeSwingFactor *= BaseSwingFactor1;
					if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					if (Owner.CountInv("KnifePlayerSwing2"))
					{
						PlayerKnifeSwingFactor *= BaseSwingFactor1;
						if (CheckMeleeDamageTypes(damageType)) PlayerKnifeSwingFactor *= BaseSwingFactor2;
					}
				}
				if (PlayerKnifeSwingFactor < 1.00 && UsingKnifeSwing && Owner.CountInv("PowerStrength") || owner.CountInv("KCPowerStrength")) PlayerKnifeSwingFactor *= BerserkFactorSwing;
				if (!UsingKnifeSwing) PlayerKnifeSwingFactor = 1.00;
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - KnifeSwing): %.8f", PlayerKnifeSwingFactor);
			}
			else
			{
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - KnifeSwing): [IGNORED - dmgflrtype]");
			}
			
			// Buffs
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerGuard")) BuffFactor *= 0.5;
			if (Owner.CountInv("PowerWeaken")) BuffFactor *= 2;
			if (berserked) BuffFactor *= frandompick[statitem](0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility") || 
					Owner.CountInv("KCPowerInvisibility") || 
					Owner.CountInv("PowerGhost"))
			{
				BuffFactor *= frandompick[statitem](1.00,1.00,0.875,0.875,0.75);
				if (owner.CountInv("UOHInCL") > 0 || owner.CountInv("UOHInBR") > 0) BuffFactor *= frandompick[statitem](1.00,1.00,0.875,0.875,0.75);
			}
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - Buff): %.8f", BuffFactor);
			
			double foodbufffactor = 1.0;
			if (owner.CountInv("PowerLMPieBuff")) foodbufffactor += 0.20;
			foodbufffactor = (1 / foodbufffactor);
			BuffFactor *= foodbufffactor;

			// Translocatior
			double TranslocatorFactor = 1.00;
			if (tfcooldown > 0)
			{
				TranslocatorFactor = frandompick(0.0625,0.125,0.125,0.125,0.125,0.125,0.125,0.25);
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - TranslocatorFactor): %.8f", TranslocatorFactor);
			}
			
			// Weapons
			double WeaponFactor = 1.00;
			if (!dmgflrtype)
			{
				if (weapon is "FistMarine" ||
						weapon is "FistHeiwa")
				{
					if (!UsingFistBlock)
					{
						if (berserked) WeaponFactor = 1.125;
											else WeaponFactor = 1.25;
					}
					else
					{
						if (weapon is "FistHeiwa")
						{
							if (berserked) WeaponFactor = 0.125;
												else WeaponFactor = 0.5;
						}
						else
						{
							if (berserked) WeaponFactor = 0.625;
												else WeaponFactor = 0.75;
						}
					}
				}
				if (weapon is "KnifeHeiwa")
				{
					if (berserked) WeaponFactor = 1.125;
										else WeaponFactor = 1.25;
				}
				nm = "ImpalerXBow"; if (weapon is nm) 
				{
					double temp = (0.875 - (TruePlayerLevel * 0.005));
					if (temp < 0.625) temp = 0.625;
					WeaponFactor = temp;
				}
				nm = "DualImpalerXBow"; if (weapon is nm) 
				{
					double temp = (0.75 - (TruePlayerLevel * 0.01));
					if (temp < 0.25) temp = 0.25;
					WeaponFactor = temp;
				}
				nm = "ScepterOfSouls"; if (weapon is nm) WeaponFactor = 1.125;
				nm = "DualScepterOfSouls"; if (weapon is nm) WeaponFactor = 1.25;
				
				nm = "PopcornGunNew"; if (weapon is nm) WeaponFactor = 0.9375;
				nm = "GoreBalloonNew"; if (weapon is nm) WeaponFactor = 1.25;
				nm = "ClownGrenadeNew"; if (weapon is nm) WeaponFactor = 1.125;
				nm = "GutFlingerNew"; if (weapon is nm) WeaponFactor = 0.96875;
				nm = "GasRocketLauncherNew"; if (weapon is nm) WeaponFactor = 0.875;
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - WeaponEquipped): %.8f", WeaponFactor);
			}
			else
			{
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - WeaponEquipped): [IGNORED - dmgflrtype]");
			}

			// Difficulty Level
			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 0.75;
			if (Skill == SKILL_EASY) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_HARD) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 1.25;
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - Skill): %.8f", SkillFactor);

			double KCFactor = 1.0;
			if (owner.CountInv("KCPowerKampoul")) KCFactor *= 0.4;
			if (MercyInvulnOnSiel) KCFactor *= 0.4;

			double TSAFactor = 1.0;
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - TSAFactor): %.8f", TSAFactor);
			
			double KillComboFct = 1.0;
			KillComboFct -= (KillComboCount * 0.001);
			if (KillComboFct <= 0.25) KillComboFct = 0.25;
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - KillComboFct): %.8f", KillComboFct);
			
			double NewDefFct = deffct;
			if (sielsgracetrueactivations > 0)
			{
				double basemult = 1.0;
				NewDefFct *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
				if (NewDefFct <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
				if (NewDefFct >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
				/*
				if (owner.health <= (MaxHealthTrue * frandom(0.3,0.4)))
				{
					basemult = frandom(0.4,0.6);
					NewDefFct *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
					if (NewDefFct <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
					if (NewDefFct >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
					if (owner.health <= (MaxHealthTrue * frandom(0.09,0.16)))
					{
						basemult = frandom(0.3,0.7);
						NewDefFct *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
						if (NewDefFct <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
						if (NewDefFct >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
						if (owner.health <= (MaxHealthTrue * frandom(0.027,0.064)))
						{
							basemult = frandom(0.2,0.8);
							NewDefFct *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
							if (NewDefFct <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
							if (NewDefFct >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
							if (owner.health <= (MaxHealthTrue * frandom(0.0081,0.016)))
							{
								basemult = frandom(0.1,0.9);
								NewDefFct *= (1.0 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
								if (NewDefFct <= (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT2 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
								if (NewDefFct >= (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewDefFct = (SIELGRACESTATBOOSTBASELIMIT1 - (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
							}
						}
					}
				}
				*/
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("Damage (passive - NewDefFct): %.8f (%.8f)", NewDefFct, deffct);
			}
			
			double TOTALFactor = 1.0
												 * LVLFactor
												 * DEFFactor
												 * EWShieldFactor
												 * PlayerFistBlockFactor
												 * PlayerKnifeSwingFactor
												 * WeaponFactor
												 * BuffFactor
												 * TranslocatorFactor
												 * SkillFactor
												 * KCFactor
												 * TSAFactor
												 * KillComboFct
												 * NewDefFct;
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("\c[gold]Damage (passive - Total): %.8f", TOTALFactor);
			
			// Locks in the reduced amount of damage taken if you still received some damage to
			// HP through the Time Seraph's Armor, but prevents the native super.DamageMobj from
			// increasing said HP damage above its original calculation from earlier. This 
			// basically nulls the above calculations as well. :P
			if (playeractor && playeractor.playtookhealthdmgtsa)
			{
				if (newdamage > playeractor.playtookhealthdmgtsa) newdamage = playeractor.playtookhealthdmgtsa;
				if (kcdebug_defensecalcs || kcdebug_playerdamagemobj) Console.Printf("\c[gold]Damage (detected TSA health damage taken): %d vs [%d], olddmg: %d vs [%d]", newdamage, playeractor.playtookhealthdmgtsa, damage, origdmg);
			}
			
			if (playeractor && newdamage <= 0) 
			{
				playeractor.A_CheckNeverBleed(1, newdamage, playeractor.DmgFlags);
				if (playeractor.DmgFlags & DMG_INFLICTOR_IS_PUFF && playeractor.DmgInflictor)
				{
					playeractor.DmgInflictor.bPUFFONACTORS = true;
				}
			}
		}
	}
	
	double HUDSpeed;
	override double GetSpeedFactor() 
	{
		name armorclasstype = "KCArmor";
		let weapon = owner.player.ReadyWeapon;
		let globalvars = KCGlobalVariables.Get();
		let playeractor = KCPlayerPawn(owner);
		
		CurrentHealth = owner.health;
		
		Speed = 1.00;
		HUDSpeed = Speed;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [base]: %.8f", Speed);
		
		double BaseFactor = 1.0;
		double BaseMul = 0.004375;
		double tempspdfactor = BaseMul;
		if (A_CheckForHeiwa()) tempspdfactor *= 0.334;
		BaseMul *= 1.0;
		if (IsMorphed == 1) BaseMul *= 3;
		BaseMul *= kc_pspdfactor;
		if (kc_expgains)
		{
			if (kc_extraatkdefspd) BaseFactor *= (1.00 + (TruePlayerLevel * tempspdfactor) + (TruePlayerSPD * BaseMul));
												else BaseFactor *= (1.00 + (TruePlayerLevel * tempspdfactor));
		}
		double tempmax;
		if (IsMorphed == 1) tempmax = 7.5;
									 else tempmax = 2.5;
		if (kc_expgains) tempmax *= 1.0;
		if (BaseFactor >= tempmax) BaseFactor = tempmax;
		Speed *= BaseFactor;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [base (level+extra)]: %.8f, BaseMul: %.8f (tempspdfactor: %.8f), kc_pspdfactor: %.8f, TPLBase: %.8f, TPLBaseS: %.8f", BaseFactor, BaseMul, tempspdfactor, kc_pspdfactor, (TruePlayerLevel * tempspdfactor), (TruePlayerSPD * BaseMul));
		
		double HealthFactor = 1.0;
		if (CurrentHealth >= (MaxHealthTrue * 3)) 
		{
			if (skill <= 0) HealthFactor *= 1.5;
			if (skill == 1) HealthFactor *= 1.375;
			if (skill == 2) HealthFactor *= 1.25;
			if (skill == 3) HealthFactor *= 1.125;
			if (skill >= 4) HealthFactor *= 1.0625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.75))
		{
			if (skill <= 0) HealthFactor *= 1.4375;
			if (skill == 1) HealthFactor *= 1.328125;
			if (skill == 2) HealthFactor *= 1.21875;
			if (skill == 3) HealthFactor *= 1.109375;
			if (skill >= 4) HealthFactor *= 1.0546875;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) 
		{
			if (skill <= 0) HealthFactor *= 1.375;
			if (skill == 1) HealthFactor *= 1.28125;
			if (skill == 2) HealthFactor *= 1.1875;
			if (skill == 3) HealthFactor *= 1.09375;
			if (skill >= 4) HealthFactor *= 1.046875;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) 
		{
			if (skill <= 0) HealthFactor *= 1.3125;
			if (skill == 1) HealthFactor *= 1.234375;
			if (skill == 2) HealthFactor *= 1.15625;
			if (skill == 3) HealthFactor *= 1.078125;
			if (skill >= 4) HealthFactor *= 1.0390625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) 
		{
			if (skill <= 0) HealthFactor *= 1.25;
			if (skill == 1) HealthFactor *= 1.1875;
			if (skill == 2) HealthFactor *= 1.125;
			if (skill == 3) HealthFactor *= 1.0625;
			if (skill >= 4) HealthFactor *= 1.03125;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) 
		{
			if (skill <= 0) HealthFactor *= 1.1875;
			if (skill == 1) HealthFactor *= 1.140625;
			if (skill == 2) HealthFactor *= 1.09375;
			if (skill == 3) HealthFactor *= 1.046875;
			if (skill >= 4) HealthFactor *= 1.0234375;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) 
		{
			if (skill <= 0) HealthFactor *= 1.125;
			if (skill == 1) HealthFactor *= 1.09375;
			if (skill == 2) HealthFactor *= 1.0625;
			if (skill == 3) HealthFactor *= 1.03125;
			if (skill >= 4) HealthFactor *= 1.015625;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) 
		{
			if (skill <= 0) HealthFactor *= 1.09375;
			if (skill == 1) HealthFactor *= 1.0625;
			if (skill == 2) HealthFactor *= 1.03125; 
			if (skill == 3) HealthFactor *= 1.015625;
			if (skill >= 4) HealthFactor *= 1.0078125;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) 
		{
			HealthFactor *= 1.00;
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) 
		{
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				if (skill <= 0) HealthFactor *= 0.984375;
				if (skill == 1) HealthFactor *= 0.96875;
				if (skill == 2) HealthFactor *= 0.9375;
				if (skill == 3) HealthFactor *= 0.90625;
				if (skill >= 4) HealthFactor *= 0.875;
			}
		}
		else if (CurrentHealth >= (MaxHealthTrue * 0.25))
		{
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				if (skill <= 0) HealthFactor *= 0.96875;
				if (skill == 1) HealthFactor *= 0.9375;
				if (skill == 2) HealthFactor *= 0.875;
				if (skill == 3) HealthFactor *= 0.8125;
				if (skill >= 4) HealthFactor *= 0.75;
			}
		}
		else if (CurrentHealth > 1)
		{
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				if (skill <= 0) HealthFactor *= 0.9375;
				if (skill == 1) HealthFactor *= 0.875;
				if (skill == 2) HealthFactor *= 0.75;
				if (skill == 3) HealthFactor *= 0.625;
				if (skill >= 4) HealthFactor *= 0.5;
			}
		}
		else if (CurrentHealth == 1)
		{
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				if (skill <= 0) HealthFactor *= 0.46875;
				if (skill == 1) HealthFactor *= 0.4375;
				if (skill == 2) HealthFactor *= 0.375;
				if (skill == 3) HealthFactor *= 0.3125;
				if (skill >= 4) HealthFactor *= 0.25;
			}
		}
		else if (CurrentHealth <= 0)
		{
			HealthFactor *= 0.0;
		}
		
		Speed *= HealthFactor;
		HUDSpeed *= HealthFactor;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [health]: %.8f", HealthFactor);
		
		double BerserkFactor = 1.0;
		if (berserked) 
		{
			if (skill <= 0) BerserkFactor *= 1.1875;
			if (skill == 1) BerserkFactor *= 1.15625;
			if (skill == 2) BerserkFactor *= 1.125;
			if (skill == 3) BerserkFactor *= 1.09375;
			if (skill >= 4) BerserkFactor *= 1.0625;
			Speed *= BerserkFactor;
			HUDSpeed *= BerserkFactor;
			if (kcdebug_speedcalcs) Console.Printf("SpeedX [Berserk]: %.8f", BerserkFactor);
		}
		
		double BuffFactor = 1.0;
		if (Owner.CountInv("PowerNoDrown")) 
		{
			if (owner.waterlevel >= 3) BuffFactor *= 0.875;
														else BuffFactor *= 0.9875;
		}
		if (Owner.CountInv("PowerHaste")) BuffFactor *= 1.3334;
		if (Owner.CountInv("PowerSlow")) BuffFactor *= 0.6667;
		
		double foodbufffactor = 1.0;
		if (owner.CountInv("PowerLMPieBuff")) foodbufffactor += 0.20;
		BuffFactor *= foodbufffactor;
		
		Speed *= BuffFactor;
		HUDSpeed *= BuffFactor;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [Buffs]: %.8f", BuffFactor);
		
		//
		double stopbase = 1.00;
		if (Owner.CountInv("IsKicking") && owner.player.onground)
		{
			double KickingFactor = 1.0;
			KickingFactor = frandompick[statitem](0.10,0.1112,0.1112,0.125,0.125,0.125,0.125,0.125,0.125,0.14285,0.14285,0.1667);
			if (random[statitem](1,8) <= randompick[statitem](5,5,5,5,6,6,7)) KickingFactor *= 0.5;
			double crouch = (1.0 + ((1.0 - owner.player.crouchfactor) * 10.0));
			if (kcdebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			KickingFactor *= crouch;
			double remainder = (1.00 - KickingFactor);
			double extra = (ActualLevel * double(remainder / ((kc_kickspdlvlint * 8) * stopbase)));
			if (extra >= remainder) extra = remainder;
			KickingFactor += extra;
			if (KickingFactor >= 1.000) KickingFactor = 1.000;
			if (kcdebug_speedcalcs) Console.Printf("KickingFactor: %.8f, extra: %.8f, remainder: %.8f", KickingFactor, extra, remainder);
			
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				Speed *= KickingFactor;
				HUDSpeed *= KickingFactor;
				if (kcdebug_speedcalcs) Console.Printf("SpeedX [kicking]: %.8f", KickingFactor);
			}
		}

		if (Owner.CountInv("IsUppercutting") && owner.player.onground)
		{
			double UppercutFactor = 1.0;
			UppercutFactor = frandompick[statitem](0.1667,0.2,0.2,0.25,0.25,0.25,0.25,0.25,0.25,0.334,0.334,0.5);
			double crouch = (1.0 - ((1.0 - owner.player.crouchfactor) * 1.96875));
			if (kcdebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			UppercutFactor *= crouch;
			double remainder = (1.00 - UppercutFactor);
			double extra = (ActualLevel * double(remainder / ((kc_upcutspdlvlint * 8) * stopbase)));
			if (extra >= remainder) extra = remainder;
			UppercutFactor += extra;
			if (UppercutFactor >= 1.000) UppercutFactor = 1.000;
			if (kcdebug_speedcalcs) Console.Printf("UppercutFactor: %.8f, extra: %.8f, remainder: %.8f", UppercutFactor, extra, remainder);
			
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				Speed *= UppercutFactor;
				HUDSpeed *= UppercutFactor;
				if (kcdebug_speedcalcs) Console.Printf("SpeedX [uppercut]: %.8f", UppercutFactor);
			}
		}

		if (Owner.CountInv("IsPunching") && owner.player.onground)
		{
			double PunchFactor = 1.0;
			PunchFactor = frandompick[statitem](0.6667,0.75,0.75,0.8,0.8,0.8,0.8,0.8,0.8,0.8334,0.8334,0.8572);
			//double crouch = (1.0 + ((1.0 - owner.player.crouchfactor) * 0.1));
			//if (kcdebug_speedcalcs) Console.Printf("crouch: %.8f [%.8f]", crouch, owner.player.crouchfactor);
			//PunchFactor *= crouch;
			double remainder = (1.00 - PunchFactor);
			double extra = (ActualLevel * double(remainder / ((kc_punchspdlvlint * 8) * stopbase)));
			if (extra >= remainder) extra = remainder;
			PunchFactor += extra;
			if (PunchFactor >= 1.000) PunchFactor = 1.000;
			if (kcdebug_speedcalcs) Console.Printf("PunchFactor: %.8f, extra: %.8f, remainder: %.8f", PunchFactor, extra, remainder);
			
			if (!owner.CountInv("KCPowerKampoul")) 
			{
				Speed *= PunchFactor;
				HUDSpeed *= PunchFactor;
				if (kcdebug_speedcalcs) Console.Printf("SpeedX [uppercut]: %.8f", PunchFactor);
			}
		}
		
		double PlayerFistBlockFactor = 1.0;
		if (Owner.CountInv("FistPlayerBlockItem"))
		{
			if (A_CheckForHeiwa()) 
			{
				if (Owner.CountInv("FistPlayerBlock")) PlayerFistBlockFactor *= frandom[statitem](0.25,0.5);
				if (Owner.CountInv("FistPlayerBlock2")) PlayerFistBlockFactor *= frandom[statitem](0.5,0.625);
				if (Owner.CountInv("FistPlayerBlock3")) PlayerFistBlockFactor *= frandom[statitem](0.625,0.667);
				if (Owner.CountInv("FistPlayerBlock4")) PlayerFistBlockFactor *= frandom[statitem](0.667,0.75);
			}
			else
			{
				if (Owner.CountInv("FistPlayerBlock")) PlayerFistBlockFactor *= frandom[statitem](0.625,0.667);
				if (Owner.CountInv("FistPlayerBlock2")) PlayerFistBlockFactor *= frandom[statitem](0.667,0.75);
				if (Owner.CountInv("FistPlayerBlock3")) PlayerFistBlockFactor *= frandom[statitem](0.75,0.8334);
				if (Owner.CountInv("FistPlayerBlock4")) PlayerFistBlockFactor *= frandom[statitem](0.8334,0.925);
			}
			Speed *= PlayerFistBlockFactor;
			HUDSpeed *= PlayerFistBlockFactor;
			if (kcdebug_speedcalcs) Console.Printf("SpeedX [Fist Block]: %.8f", PlayerFistBlockFactor);
		}
		
		double PlayerKnifeSwingFactor = 1.0;
		if (Owner.CountInv("KnifePlayerSwingItem"))
		{
			if (Owner.CountInv("KnifePlayerSwing")) PlayerKnifeSwingFactor *= frandom[statitem](1.0625,1.125);
			if (Owner.CountInv("KnifePlayerSwing2")) PlayerKnifeSwingFactor *= frandom[statitem](1.125,1.1875);
			if (Owner.CountInv("KnifePlayerSwing3")) PlayerKnifeSwingFactor *= frandom[statitem](1.1875,1.25);
			if (Owner.CountInv("KnifePlayerSwing4")) PlayerKnifeSwingFactor *= frandom[statitem](1.25,1.375);
			Speed *= PlayerKnifeSwingFactor;
			HUDSpeed *= PlayerKnifeSwingFactor;
			if (kcdebug_speedcalcs) Console.Printf("SpeedX [Knife Swing]: %.8f", PlayerKnifeSwingFactor);
		}
		
		//
		int ArmorAmt = owner.CountInv(armorclasstype);
		double ArmorRatio = 0.0;
		int BMaxArmor = MaxHealthTrue;
		double fact = (owner.CountInv("SpecialBackpackBonus") * spbkpkarmorbonus);
		BMaxArmor *= (1.0 + fact);
		if (BMaxArmor > 0) ArmorRatio = double((ArmorAmt * 1.0) / (BMaxArmor * 1.0));
		double armordiffmod = 1.00;
		double ArmorFactor = 1.0;
		double ArmorWeight;
		ArmorEnc = 0.00;
		if (owner.CountInv("TSArmorTier3Plus"))
		{
			if (A_CheckForHeiwa())
			{
				ArmorWeight = 0.01875;
				if (berserked) ArmorWeight *= 0.25;
			}
			else
			{
				ArmorWeight = 0.075;
				if (berserked) ArmorWeight *= 0.875;
			}
			ArmorWeight *= ArmorHealthFactor;
			ArmorWeight *= armordiffmod;
			ArmorEnc = ArmorWeight;
		}
		else
		if (owner.CountInv("TSArmorTier2"))
		{
			if (A_CheckForHeiwa())
			{
				ArmorWeight = 0.015625;
				if (berserked) ArmorWeight *= 0.25;
			}
			else
			{
				ArmorWeight = 0.0625;
				if (berserked) ArmorWeight *= 0.875;
			}
			ArmorWeight *= ArmorHealthFactor;
			ArmorWeight *= armordiffmod;
			ArmorEnc = ArmorWeight;
		}
		else
		if (owner.CountInv("TSArmorTier1"))
		{
			if (A_CheckForHeiwa())
			{
				ArmorWeight = 0.0125;
				if (berserked) ArmorWeight *= 0.25;
			}
			else
			{
				ArmorWeight = 0.05;
				if (berserked) ArmorWeight *= 0.875;
			}
			ArmorWeight *= ArmorHealthFactor;
			ArmorWeight *= armordiffmod;
			ArmorEnc = ArmorWeight;
		}
		else
		{
			if (A_CheckForHeiwa())
			{
				if (darmortype == 1) // Green Armor [Doom-type] (100% of HP max)
				{
					ArmorWeight = HARMORWEIGHTGREEN;
					if (berserked) ArmorWeight *= 0.4;
					if (ArmorRatio >= GREENARMORVALDOUBLE) ArmorRatio = GREENARMORVALDOUBLE;
				}
				if (darmortype == 2) // Blue Armor [Doom-type] (200% of HP max)
				{
					ArmorWeight = HARMORWEIGHTBLUE;
					if (berserked) ArmorWeight *= 0.4;
					if (ArmorRatio >= BLUEARMORVALDOUBLE) ArmorRatio = BLUEARMORVALDOUBLE;
				}
				if (darmortype == 3) // Blue Armor [Doom-type] (350% of HP max)
				{
					ArmorWeight = HARMORWEIGHTRED;
					if (berserked) ArmorWeight *= 0.4;
					if (ArmorRatio >= REDARMORVALDOUBLE) ArmorRatio = REDARMORVALDOUBLE;
				}
			}
			else
			{
				if (darmortype == 1) // Green Armor [Doom-type] (100% of HP max)
				{
					ArmorWeight = MARMORWEIGHTGREEN;
					if (berserked) ArmorWeight *= 0.6;
					if (ArmorRatio >= GREENARMORVALDOUBLE) ArmorRatio = GREENARMORVALDOUBLE;
				}
				if (darmortype == 2) // Blue Armor [Doom-type] (200% of HP max)
				{
					ArmorWeight = MARMORWEIGHTBLUE;
					if (berserked) ArmorWeight *= 0.6;
					if (ArmorRatio >= BLUEARMORVALDOUBLE) ArmorRatio = BLUEARMORVALDOUBLE;
				}
				if (darmortype == 3) // Red Armor [Doom-type] (350% of HP max)
				{
					ArmorWeight = MARMORWEIGHTRED;
					if (berserked) ArmorWeight *= 0.6;
					if (ArmorRatio >= REDARMORVALDOUBLE) ArmorRatio = REDARMORVALDOUBLE;
				}
			}
			ArmorWeight *= ArmorHealthFactor;
			ArmorWeight *= armordiffmod;
			ArmorWeight *= (1.00 - (owner.CountInv("SpecialBackpackBonus") * 0.025));
			ArmorEnc = (ArmorWeight * ArmorRatio);
		}
		if (kcdebug_speedcalcs) Console.Printf("ArmorEnc: %.8f, ArmorWeight: %.8f, ArmorHealthFactor: %.8f, ArmorRatio: %.8f (%d / %d)", ArmorEnc, ArmorWeight, ArmorHealthFactor, ArmorRatio, ArmorAmt, BMaxArmor);
		
		ArmorEnc *= kc_armorencumbrance;
		ArmorEncL = ArmorEnc;
		if (owner.waterlevel >= 3) ArmorEnc *= 1.25;
		else if (owner.waterlevel == 2) ArmorEnc *= 1.08334;
		else if (owner.waterlevel == 1) ArmorEnc *= 1.025;
		
		double ArmorEncEft = (1.00 - (TruePlayerLevel * LVLfactArmr) - (TruePlayerATK * ATKfactArmr));
		if (ArmorEncEft <= 0.25) ArmorEncEft = 0.25;
		if (ArmorEncEft > 1.0) ArmorEncEft = 1.0;
		ArmorEnc *= ArmorEncEft;
		if (kcdebug_speedcalcs) Console.Printf("ArmorEncEft: %.8f", ArmorEncEft);

		if (kcdebug_speedcalcs) Console.Printf("%.8f (%.8f), kc_armorencumbrance: %.8f, armordiffmod: %.8f", ArmorEnc, ArmorEncL, kc_armorencumbrance, armordiffmod);
		if (ArmorEnc < 0.0) ArmorEnc = 0.0;
		ArmorFactor = (1.0 - ArmorEnc);
		if (ArmorFactor > 1.00) ArmorFactor = 1.00;
		if (!owner.CountInv("KCPowerKampoul")) 
		{
			Speed *= ArmorFactor;
			HUDSpeed *= ArmorFactor;
			if (kcdebug_speedcalcs) Console.Printf("SpeedX [Armor]: %.8f", ArmorFactor);
		}

		double WeaponFactor = 1.0;
		double WeaponFactorEx = 0.0;
		double MarineWeapLevel = 16;
		double HeiwaWeapLevel = 40;
		double MarineLowFact2 = 0.5;
		double HeiwaLowFact2 = 0.3125;
		double tempfactor1;
		double tempfactor2;
		// Weapon Checks
		if (weapon is "FistMarine" || 
				weapon is "FistHeiwa" ||
				weapon is "KnifeHeiwa")
		{
			tempfactor1 = 0.125;
			if (berserked) tempfactor1 *= 2;
			if (A_CheckForHeiwa())
			{
				tempfactor2 = (0.50 + (TruePlayerLevel * double(1.0 / HeiwaWeapLevel) ));
				if (tempfactor2 <= 0.5) tempfactor2 = 0.5;
				if (tempfactor2 >= 1.5) tempfactor2 = 1.5;
				tempfactor1 *= tempfactor2;
			}
		}
		if (weapon is "Glock21")
		{
			if (A_CheckForHeiwa()) tempfactor1 = -0.0125;
												else tempfactor1 = -0.00078125;
			if (berserked) tempfactor1 *= 0.25;
			
			tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 0.75)) ));
			if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "BlasterPistol")
		{
			bool dualbpistols = false;
			if (owner.CountInv("DualBlasterPistols") && !owner.CountInv("DualBlasterPistolsDisabled")) dualbpistols = true;

			if (A_CheckForHeiwa()) tempfactor1 = -0.016875;
												else tempfactor1 = -0.0010546875;
			if (berserked) tempfactor1 *= 0.25;
			
			if (dualbpistols) tempfactor1 *= 1.75;
			if (owner.CountInv("BlasterPistolUpgrade"))
			{
				if (dualbpistols) tempfactor1 *= 0.667;
										 else tempfactor1 *= 0.75;
			}
			tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 0.75)) ));
			if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "RiotGun")
		{
			if (A_CheckForHeiwa())
			{
				tempfactor1 = -0.125;
				if (berserked) tempfactor1 *= 0.25;
				if (owner.CountInv("RiotGunUpgrade")) tempfactor1 *= 0.75;
				
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 0.75)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor1 = -0.01953125;
				if (berserked) tempfactor1 *= 0.25;
				if (owner.CountInv("RiotGunUpgrade")) tempfactor1 *= 0.75;
				
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (MarineWeapLevel * 1.334)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "TommyGun")
		{
			bool dualtommys = false;
			if (owner.CountInv("DualTommyGuns") && !owner.CountInv("DualTommyGunsDisabled")) dualtommys = true;
			
			if (A_CheckForHeiwa())
			{
				if (dualtommys) tempfactor1 = -0.225;
									 else tempfactor1 = -0.1;
				
				if (berserked) tempfactor1 *= 0.25;
				
				if (owner.CountInv("TommyGunUpgrade"))
				{
					if (dualtommys) tempfactor1 *= 0.667;
										 else tempfactor1 *= 0.75;
				}
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / HeiwaWeapLevel) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				if (dualtommys) tempfactor1 = -0.1125;
									 else tempfactor1 = -0.05;
				
				if (berserked) tempfactor1 *= 0.25;
				
				if (owner.CountInv("TommyGunUpgrade"))
				{
					if (dualtommys) tempfactor1 *= 0.667;
										 else tempfactor1 *= 0.75;
				}
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (MarineWeapLevel * 0.834)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "BlasterRifle")
		{
			if (A_CheckForHeiwa())
			{
				tempfactor1 = -0.1;
				if (berserked) tempfactor1 *= 0.25;
				
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / HeiwaWeapLevel) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor1 = -0.05;
				if (berserked) tempfactor1 *= 0.25;

				if (owner.CountInv("BlasterRifleUpgrade")) tempfactor1 *= 0.667;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (MarineWeapLevel * 0.834)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "Deviation")
		{
			if (A_CheckForHeiwa())
			{
				tempfactor1 = -0.3;

				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(HeiwaWeapLevel * 2)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor1 = -0.2;
									
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "Devastator")
		{
			bool dualdevs = false;
			if (owner.CountInv("DualDevastators") && !owner.CountInv("DualDevastatorsDisabled")) dualdevs = true;
			
			if (A_CheckForHeiwa())
			{
				if (dualdevs) tempfactor1 = -0.45;
								 else tempfactor1 = -0.2;
				
				if (berserked) tempfactor1 *= 0.25;
				
				if (owner.CountInv("DevastatorUpgrade"))
				{
					if (dualdevs) tempfactor1 *= 0.5834;
									 else tempfactor1 *= 0.667;
				}
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 2))));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				if (dualdevs) tempfactor1 = -0.225;
								 else tempfactor1 = -0.1;
				
				if (berserked) tempfactor1 *= 0.25;
				
				if (owner.CountInv("DevastatorUpgrade"))
				{
					if (dualdevs) tempfactor1 *= 0.5834;
									 else tempfactor1 *= 0.667;
				}
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "TeslaCannon")
		{
			bool dualteslas = false;
			if (owner.CountInv("DualTeslaCannons") && !owner.CountInv("DualTeslaCannonsDisabled")) dualteslas = true;

			if (A_CheckForHeiwa())
			{
				if (dualteslas) tempfactor1 = -0.2;
									 else tempfactor1 = -0.125;
				
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 1.25)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				if (dualteslas) tempfactor1 = -0.05;
									 else tempfactor1 = -0.01953125;
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "Incinerator")
		{
			tempfactor1 = -0.1875;
			
			if (berserked) tempfactor1 *= 0.25;
			tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 / (HeiwaWeapLevel * 1.25)) ));
			if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "BHGen")
		{
			if (A_CheckForHeiwa())
			{
				tempfactor1 = -0.5;
				
				if (berserked) tempfactor1 *= 0.25;

				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(HeiwaWeapLevel * 2.5)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor1 = -0.375;
				
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		if (weapon is "CalamityBlade")
		{
			if (A_CheckForHeiwa())
			{
				tempfactor1 = -0.334;
				if (owner.CountInv("CalamityBladeUpgrade")) tempfactor1 *= 0.25;
				
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(HeiwaWeapLevel * 1.5)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor1 = -0.375;
				
				if (berserked) tempfactor1 *= 0.25;
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		If (weapon is "EvilWarriorShield")
		{
			if (Owner.CountInv("HWShieldBlockHold")) tempfactor1 = (-0.25 * (1.0 + (HellWarriorShieldLevel * 0.0015625)));
																					else tempfactor1 = (-0.10 * (1.0 + (HellWarriorShieldLevel * 0.00625)));
			if (A_CheckForHeiwa()) tempfactor1 *= 1.334;
			if (berserked) tempfactor1 *= 0.5;
			if (A_CheckForHeiwa())
			{
				double basebonus = 0.875;
				if (berserked) basebonus = 0.8125;
				if (TruePlayerLevel >= 10) tempfactor1 *= basebonus;
				if (TruePlayerLevel >= 20) tempfactor1 *= basebonus;
				if (TruePlayerLevel >= 30) tempfactor1 *= basebonus;
				if (TruePlayerLevel >= 40) tempfactor1 *= basebonus;
				if (TruePlayerLevel >= 50) tempfactor1 *= basebonus;
				if (TruePlayerLevel >= 60) tempfactor1 *= (basebonus*basebonus);
				if (TruePlayerLevel >= 70) tempfactor1 *= (basebonus*basebonus);
				if (TruePlayerLevel >= 80) tempfactor1 *= (basebonus*basebonus);
				if (TruePlayerLevel >= 90) tempfactor1 *= (basebonus*basebonus);
				if (TruePlayerLevel >= 100) tempfactor1 *= (basebonus*basebonus);
				if (TruePlayerLevel >= 120) tempfactor1 *= (basebonus*basebonus*basebonus);
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(HeiwaWeapLevel * 2.5)) ));
				if (tempfactor2 <= HeiwaLowFact2) tempfactor2 = HeiwaLowFact2;
			}
			else
			{
				tempfactor2 = (1.00 - (TruePlayerLevel * double(1.0 /(MarineWeapLevel * 1.667)) ));
				if (tempfactor2 <= MarineLowFact2) tempfactor2 = MarineLowFact2;
			}
			if (tempfactor2 >= 1.0) tempfactor2 = 1.0;
			tempfactor1 *= tempfactor2;
		}
		
		double WeaponEncEft = (1.00 - (TruePlayerLevel * LVLfactWeap) - (TruePlayerATK * ATKfactWeap));
		if (WeaponEncEft <= 0.25) WeaponEncEft = 0.25;
		if (WeaponEncEft > 1.0) WeaponEncEft = 1.0;
		if (tempfactor1 < 0.0) tempfactor1 *= WeaponEncEft;
		WeaponFactorEx += tempfactor1;
		
		WeaponFactorEx *= kc_weaponencumbrance;
		WeaponFactor += WeaponFactorEx;
		
		Speed *= WeaponFactor;
		HUDSpeed *= WeaponFactor;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [WeaponFactor]: %.8f, [WeaponFactorEx]: %.8f, tempfactor1: %.8f, tempfactor2: %.8f, WeaponEncEft: %.8f", WeaponFactor, WeaponFactorEx, tempfactor1, tempfactor2, WeaponEncEft);
		//
		double NewSpdFct = spdfct;
		if (sielsgracetrueactivations > 0)
		{
			double basemult = 1.0;
			NewSpdFct *= (1.0 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASE * basemult)));
			if (NewSpdFct >= (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)))) NewSpdFct = (SIELGRACESTATBOOSTBASELIMIT1 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT1BASE * basemult)));
			if (NewSpdFct <= (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)))) NewSpdFct = (SIELGRACESTATBOOSTBASELIMIT2 + (sielsgracetrueactivations * (SIELGRACESTATBOOSTBASELIMIT2BASE * basemult)));
		}
		Speed *= NewSpdFct;
		if (kcdebug_speedcalcs) Console.Printf("SpeedX [NewSpdFct]: %.8f (%.8f)", NewSpdFct, spdfct);

		if (kcdebug_speedcalcs) Console.Printf("SpeedX [Final]: %.8f, HUDSpeed: %.2f", Speed, HUDSpeed);
		return Speed;
	}
}


/////////////////////////////////////////////////////////////DASH
// Dash and double jump code by TheCamaleonMaligno ( https://www.youtube.com/watch?v=mTfGxY_Afhs )
// This code is heavily modified from the "Hell Crusher" variation of it :V
class PlayerDashJump : Inventory
{
	mixin TimerCheck;

	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	int itemtimer;
	string nm, nn, no, np, nq, nr;
	
	int IsMorphed, WasMorphed, WasMorphProj;
	int DashTimer;
	int TrueGameSkill;
	actor weapon;
	int HellWarriorShieldLevel;
	Double DashDir, DashSpeed, DashVSpeed, DashPitch;
	Int DashTics, DashCharge, AirTics, DashCost, DashCooldown, MaxDashCooldown;
	Bool DJump, Waiting;
	string dashgruntsound;
	int dashgruntchance;
	int dashtype;
	int airdashtype;
	Int DashMaxCharge, MaxDashes, MaxDashTics;
	bool slownthres1, slownthres2, slownthres3;
	bool berserked;
	int PlayerLevel;
	int TruePlayerLevel;
	int BaseDashChargeMax;
	int ExtraDashCharge;
	int firsttic;
	int input, oldInput, taps, taptics, last;
	
	Default
	{
		+Inventory.PERSISTENTPOWER
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.UNCLEARABLE;
	}
	
	bool A_CheckForHeiwa()
	{
		bool result = false;
		if (owner.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(owner)) result = true;
		return result;
	}
	
	bool A_CheckTimeFreeze()
	{
		bool check = false;
		string nm, nn, no;
		nm = "KCTimeFreezer1";
		nn = "KCTimeFreezer2";
		no = "KCTimeFreezer3";
		if (owner)
		{
			if (owner.CountInv(nm) || 
					owner.CountInv(nn) || 
					owner.CountInv(no)) 
			{
				check = true;
			}
		}
		return check;
	}
	
	int A_CheckActualLevel(int type = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) Level = MiscItem.PlayerLevel;
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_CheckActualLevel - PlayerDashJump)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	int IsButtonPressed (int input, int oldInput, int mask)
	{
		return (input & ~oldInput) & mask;
	}
	
	override void Tick()
	{
		Super.Tick();
		if (!Owner || Owner && (!Owner.Player || Owner.Health < 1)) Return;
		
		let globalvars = KCGlobalVariables.Get();
		let MiscItem = PlayerStatItem(Owner.FindInventory("PlayerStatItem"));
		weapon = owner.player.ReadyWeapon;
		if (Owner.CountInv("PowerStrength") || Owner.CountInv("KCPowerStrength")) berserked = true;
		else berserked = false;
		
		bool heiwavhardmodifier = false;
		if (MiscItem && MiscItem.heiwavhardmodifier) heiwavhardmodifier = true;
		
		TrueGameSkill = kc_gendifficultycurve + Skill;
		HellWarriorShieldLevel = owner.CountInv("HellWarriorShieldLevel");
		
		PlayerInfo PlayDash = Owner.Player;
		Int BTInput = PlayDash.cmd.buttons;
		dashgruntchance = randompick[statitem](66,66,67);
		MaxDashes = 1;
		double dashsndvol = 0.67;
		double dashgruntsndvol = 1.0;
		PlayerLevel = owner.CountInv("PlayerLevel");
		if (kc_expgains) TruePlayerLevel = PlayerLevel; else TruePlayerLevel = 0;
		int ActualLevel;
		int TruePlayerATK;
		int TruePlayerDEF;
		int TruePlayerSPD;
		int TruePlayerVIT;
		int TruePlayerIQ;
		int TruePlayerGUTS;
		int TruePlayerLUCK;
		if (MiscItem)
		{
			ActualLevel = MiscItem.PlayerLevel;
			TruePlayerATK = MiscItem.PlayerATK;
			TruePlayerDEF = MiscItem.PlayerDEF;
			TruePlayerSPD = MiscItem.PlayerSPD;
			TruePlayerVIT = MiscItem.PlayerVIT;
			TruePlayerIQ = MiscItem.PlayerIQ;
			TruePlayerGUTS = MiscItem.PlayerGUTS;
			TruePlayerLUCK = MiscItem.PlayerLUCK;
		}
		MaxDashTics = randompick[statitem](6,6,7,7,7) + (TruePlayerLevel / 20);
		if (A_CheckForHeiwa())
		{
			if (heiwavhardmodifier) MaxDashTics = (randompick[statitem](8,8,9,9,10) + (TruePlayerSPD / 24));
												 else MaxDashTics = (randompick[statitem](7,7,8,8,9) + (TruePlayerSPD / 32));
		}
		else
		{
			MaxDashTics = randompick[statitem](9,9,10,10,10) + (TruePlayerSPD / 48);
		}
		
		if (berserked) 
		{
			if (A_CheckForHeiwa()) MaxDashTics *= (1.125 + (TruePlayerLevel * 0.00625));
												else MaxDashTics *= (1.34 + (TruePlayerLevel * 0.002));
		}

		double baseAddDashLevel = 1.25;
		double baseAddDashSpeed = 0;
		int AddDashLevel = (TruePlayerLevel * baseAddDashLevel);
		int AddDashSpeed = (TruePlayerSPD * baseAddDashSpeed);
		double ADashFactor = 1.5;
		baseAddDashLevel = 1.0;
		if (skill <= SKILL_VERY_EASY) baseAddDashLevel += 0.625;
		if (skill == SKILL_EASY) baseAddDashLevel += 0.5;
		if (skill == SKILL_NORMAL) baseAddDashLevel += 0.375;
		if (skill == SKILL_HARD) baseAddDashLevel += 0.25;
		if (skill >= SKILL_VERY_HARD) baseAddDashLevel += 0.125;
		if (A_CheckForHeiwa()) 
		{
			baseAddDashLevel *= 0.334;

			baseAddDashSpeed = 1.0;
			if (skill <= SKILL_VERY_EASY) baseAddDashSpeed += 0.625;
			if (skill == SKILL_EASY) baseAddDashSpeed += 0.5;
			if (skill == SKILL_NORMAL) baseAddDashSpeed += 0.375;
			if (skill == SKILL_HARD) baseAddDashSpeed += 0.25;
			if (skill >= SKILL_VERY_HARD) baseAddDashSpeed += 0.125;
			if (heiwavhardmodifier) 
			{
				baseAddDashLevel *= 1.125;
				baseAddDashSpeed *= 1.125;
			}
			else 
			{
				baseAddDashLevel *= 1.0625;
				baseAddDashSpeed *= 1.0625;
			}
		}

		AddDashLevel = (TruePlayerLevel * (baseAddDashLevel * ADashFactor));
		AddDashSpeed = (TruePlayerSPD * (baseAddDashSpeed * ADashFactor));
		
		if (itemtimer <= 2)
		{
			if (globalvars)
			{
				if (kc_deathexitaffectsstats) 
				{
					BaseDashChargeMax = random[statitem](27,30);
					if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random[statitem](32,35);
					if (skill == SKILL_EASY) BaseDashChargeMax = random[statitem](30,32);
					if (skill == SKILL_NORMAL) BaseDashChargeMax = random[statitem](27,30);
					if (skill == SKILL_HARD) BaseDashChargeMax = random[statitem](25,27);
					if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random[statitem](22,25);
					
					if (A_CheckForHeiwa())
					{
						if (heiwavhardmodifier) BaseDashChargeMax += random(2,4);
															 else BaseDashChargeMax -= random(2,3);
					}
				}
				else
				{
					if (globalvars.ClassCheck <= 2)
					{
						BaseDashChargeMax = random[statitem](27,30);
						if (skill == SKILL_VERY_EASY) BaseDashChargeMax = random[statitem](32,35);
						if (skill == SKILL_EASY) BaseDashChargeMax = random[statitem](30,32);
						if (skill == SKILL_NORMAL) BaseDashChargeMax = random[statitem](27,30);
						if (skill == SKILL_HARD) BaseDashChargeMax = random[statitem](25,27);
						if (skill >= SKILL_VERY_HARD) BaseDashChargeMax = random[statitem](22,25);
						
						if (A_CheckForHeiwa())
						{
							if (heiwavhardmodifier) BaseDashChargeMax += random(2,4);
																 else BaseDashChargeMax -= random(2,3);
						}
					}
					else
					{
						BaseDashChargeMax = globalvars.BaseDashChargeMax;
					}
				}
			}
		}
		else
		{
			if (BaseDashChargeMax == 0) BaseDashChargeMax = globalvars.BaseDashChargeMax;
		}
		
		double ExDashCharge2 = ExtraDashCharge;
		double AddDashLevel2 = AddDashLevel;
		double PerkFactor2 = 0;
		if (!kc_expgains) 
		{
			if (skill <= 0) ExDashCharge2 *= 4.0;
			if (skill == 1) ExDashCharge2 *= 3.5;
			if (skill == 2) ExDashCharge2 *= 3.0;
			if (skill == 3) ExDashCharge2 *= 2.5;
			if (skill >= 4) ExDashCharge2 *= 2.0;
			AddDashLevel2 = 0;
			if (MiscItem)
			{
				if (A_CheckForHeiwa())
				{
					if (heiwavhardmodifier)
					{
						AddDashLevel2 += (MiscItem.totalcompleted * 1.75);
						AddDashLevel2 += (MiscItem.totalallkills * 0.5833334);
						AddDashLevel2 += (MiscItem.totalallitems * 0.5833334);
						AddDashLevel2 += (MiscItem.totalallsecrets * 0.5833334);
					}
					else
					{
						AddDashLevel2 += (MiscItem.totalcompleted * 1.25);
						AddDashLevel2 += (MiscItem.totalallkills * 0.416667);
						AddDashLevel2 += (MiscItem.totalallitems * 0.416667);
						AddDashLevel2 += (MiscItem.totalallsecrets * 0.416667);
					}
				}
				else
				{
					AddDashLevel2 += (MiscItem.totalcompleted * 1.0);
					AddDashLevel2 += (MiscItem.totalallkills * 0.3334);
					AddDashLevel2 += (MiscItem.totalallitems * 0.3334);
					AddDashLevel2 += (MiscItem.totalallsecrets * 0.3334);
				}
				if (berserked) AddDashLevel2 *= 1.25;
			}
		}
		DashMaxCharge = BaseDashChargeMax + AddDashLevel2 + AddDashSpeed + ExDashCharge2 + PerkFactor2;
		if (kcdebug_showdashinformation) Console.Printf("DashMaxCharge: %d (BaseDashChargeMax: %d, AddDashLevel2: %d (%d), AddDashSpeed: %d, ExtraDashCharge2: %d (%d), PerkFactor2: %d", DashMaxCharge, BaseDashChargeMax, AddDashLevel2, AddDashLevel, AddDashSpeed, ExDashCharge2, ExtraDashCharge, PerkFactor2);
		
		if (berserked) 
		{
			if (A_CheckForHeiwa())
			{
				double extchargemult = (1.0325 + (TruePlayerLevel * 0.004625));
				if (extchargemult > 1.25) extchargemult = 1.25;
				DashMaxCharge *= extchargemult; // Stars Less, But reaches/exceeds 1.125x by Level 20+ :V
			}
			else
			{
				DashMaxCharge *= 1.125;
			}
			if (kcdebug_showdashinformation) Console.Printf("DashMaxCharge: %d (post-berserk)", DashMaxCharge);
		}
		if (itemtimer == 0) DashCharge = DashMaxCharge;

		//******************
		//*Check Dash Timer*
		//******************
		int dashtrailinterval = level.time % random[statitem](1,4);
		int dashveltimer;
		int dashveltimer2;
		double dashtimermulti = 1.0;
		//
		
		double trueanglecos = abs(cos(angle));
		double trueanglesin = abs(sin(angle));
		if (kcdebug_showdashinformation) Console.Printf("[angle] cos: %.8f, sin: %.8f", trueanglecos, trueanglesin);
		
		MaxDashTics = 9;
		double shldmdtmult = frandompick[statitem](1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);;
		if (kc_allowdashing > 0)
		{
			if (A_CheckForHeiwa())
			{
				if (heiwavhardmodifier) MaxDashTics = (randompick[statitem](8,8,9,9,10) + (TruePlayerSPD / 24));
													 else MaxDashTics = (randompick[statitem](7,7,8,8,9) + (TruePlayerSPD / 32));
				if (berserked) MaxDashTics *= (1.125 + (TruePlayerLevel * 0.06125));
			}
			else
			{
				MaxDashTics = randompick[statitem](9,9,10,10,10) + (TruePlayerSPD / 48);
				if (berserked) MaxDashTics *= (1.34 + (TruePlayerLevel * 0.002));
			}
			if (CountInv("HWShieldBlockHold")) MaxDashTics *= shldmdtmult;
		}
		MaxDashTics *= dashtimermulti;
		dashveltimer = DashTimer % 2;
		dashveltimer2 = DashTimer % 1;
		
		int MDTicCeiling = 24;
		if (kc_allowdashing > 2) 
		{
			MaxDashTics *= 0.5;
			MDTicCeiling *= 0.5;
		}
		MDTicCeiling *= shldmdtmult;
		if (MaxDashTics > MDTicCeiling) MaxDashTics = MDTicCeiling;
		
		double BaseFactor = 1.0;
		double BaseMul = 0.004375;
		double tempspdfactor = BaseMul;
		if (A_CheckForHeiwa()) tempspdfactor *= 0.334;
		BaseMul *= 1.0;
		if (IsMorphed == 1) BaseMul *= 3;
		BaseMul *= kc_pspdfactor;
		if (kc_expgains)
		{
			if (kc_extraatkdefspd) BaseFactor *= (1.00 + (TruePlayerLevel * tempspdfactor) + (TruePlayerSPD * BaseMul));
												else BaseFactor *= (1.00 + (TruePlayerLevel * tempspdfactor));
		}

		double DashSpdMul = (1.00 * BaseFactor);
		DashSpeed = (25 + (ActualLevel * 0.03125));
		if (Owner.waterlevel == 1) DashSpdMul *= 0.9375;
		if (Owner.waterlevel == 2) DashSpdMul *= 0.875;
		if (Owner.waterlevel >= 3) DashSpdMul *= 0.75;
		
		if (owner.CountInv("PowerLMPieBuff")) DashSpdMul += 0.16;
		
		UserCmd cmd = Owner.player.cmd;
		if (Owner.vel.z <= -0.0001)
		{
			if (Owner.CountInv("TSArmorTier3Plus") || 
					Owner.CountInv("TSArmorTier2")) 
			{
				if (cmd.buttons & BT_JUMP || cmd.buttons & BT_CROUCH) 
				{
					if (cmd.buttons & BT_JUMP && cmd.buttons & BT_CROUCH) DashSpdMul *= 2.0;
																													 else DashSpdMul *= 1.5;
				}
			}
		}
		bool istsagliding = false;
		if (Owner.CountInv("TSArmorTier3Plus") || 
				Owner.CountInv("TSArmorTier2")) 
		{
			if (Owner.vel.z <= -0.0001)
			{
				if (cmd.buttons & BT_CROUCH) istsagliding = true;
			}
		}
		
		if (weapon is "FistHeiwa" &&
				owner.CountInv("FistPlayerBlockItem")) 
		{
			double fistboost = 1.0;
			if (berserked) fistboost = frandom(0.9375,1.0);
								else fistboost = frandom(0.46875,0.53125);

			double fistboostext = (1.0 - fistboost);
			if (TruePlayerLevel >= 120) fistboostext *= 1.0;
			else if (TruePlayerLevel >= 90) fistboostext *= 0.75;
			else if (TruePlayerLevel >= 60) fistboostext *= 0.5;
			else if (TruePlayerLevel >= 30) fistboostext *= 0.25;
			else fistboostext *= 0.0;
			fistboost += fistboostext;
			if (fistboost > 1.000) fistboost = 1.000;
			
			DashSpdMul *= fistboost;
		}

		DashSpeed *= DashSpdMul;
		if (berserked) 
		{
			if (A_CheckForHeiwa())
			{
				if (heiwavhardmodifier) DashSpeed *= 1.1875;
													 else DashSpeed *= 1.0625;
			}
			else DashSpeed *= 1.03125;
		}
		
		if (A_CheckForHeiwa())
		{
			DashCost = 35;
			MaxDashCooldown = randompick[statitem](9,10,11);
			if (skill <= 0) MaxDashCooldown -= randompick[statitem](4,4,5);
			if (skill == 1) MaxDashCooldown -= randompick[statitem](2,3,4);
			if (skill == 2) MaxDashCooldown += randompick[statitem](-1,0,1);
			if (skill == 3) MaxDashCooldown += randompick[statitem](2,3,4);
			if (skill >= 4) MaxDashCooldown += randompick[statitem](4,4,5);
			MaxDashCooldown *= (1.0 - (ActualLevel * 0.025));
			
			if (MiscItem.MercyInvulnOnSiel)
			{
				DashCost *= 0.5;
				MaxDashCooldown *= 0.5;
			}
		}
		else
		{
			DashCost = 35;
			MaxDashCooldown = randompick[statitem](10,10,11);
			if (skill <= 0) MaxDashCooldown -= randompick[statitem](2,2,3);
			if (skill == 1) MaxDashCooldown -= randompick[statitem](1,1,2);
			if (skill == 2) MaxDashCooldown += randompick[statitem](-1,0,1);
			if (skill == 3) MaxDashCooldown += randompick[statitem](1,1,2);
			if (skill >= 4) MaxDashCooldown += randompick[statitem](2,2,3);
			MaxDashCooldown *= (1.0 - (ActualLevel * 0.00625));
		}
		
		if (owner.CountInv("PowerHaste"))
		{
			DashSpeed *= 1.334;
			DashCost *= 0.75;
			MaxDashCooldown *= 0.375;
		}
		if (owner.CountInv("PowerSlow"))
		{
			DashSpeed *= 0.75;
			DashCost *= 1.3334;
			MaxDashCooldown *= 1.6667;
		}
		
		if (owner.CountInv("NormalHealth")) 
		{
			DashSpeed *= 1.0;
			DashCost *= 1.0;
			MaxDashCooldown *= 1.0;
		}
		if (owner.CountInv("DecentHealth")) 
		{
			DashSpeed *= 0.8888888888888889;
			DashCost *= 1.125;
			MaxDashCooldown *= 1.1875;
		}
		if (owner.CountInv("LowHealth")) 
		{
			DashSpeed *= 0.8;
			DashCost *= 1.25;
			MaxDashCooldown *= 1.375;
		}
		if (owner.CountInv("CriticalHealth"))
		{
			DashSpeed *= 0.67;
			DashCost *= 1.5;
			MaxDashCooldown *= 1.75;
		}
		if (owner.CountInv("PowerLMPieBuff"))
		{
			DashCost -= 10;
			MaxDashCooldown -= 5;
		}
		if (kcdebug_showdashinformation) Console.Printf("DashSpeed: %.8f", DashSpeed);
		if (kcdebug_showdashinformation) Console.Printf("DashCost [post powerup/health checks]: %d", DashCost);
		
		if (weapon is "FistMarine" || 
				weapon is "FistHeiwa" ||
				weapon is "KnifeHeiwa")
		{
			if (!owner.CountInv("FistPlayerBlockItem")) 
			{
				if (kc_expgains)
				{
					if (berserked) 
					{
						DashCost -= 4;
						MaxDashCooldown -= randompick[statitem](1,1,2);
						if (weapon is "FistHeiwa" ||
								weapon is "KnifeHeiwa") 
						{
							DashCost -= 5;
							MaxDashCooldown -= randompick[statitem](2,2,3);
						}
					}
					else 
					{
						DashCost -= 3;
						MaxDashCooldown -= 1;
						if (weapon is "FistHeiwa" ||
								weapon is "KnifeHeiwa") 
						{
							DashCost -= 3;
							MaxDashCooldown -= randompick[statitem](0,1,1);
						}
					}
				}
				else
				{
					if (berserked) 
					{
						DashCost -= 7;
						MaxDashCooldown -= randompick[statitem](2,2,3);
						if (weapon is "FistHeiwa" ||
								weapon is "KnifeHeiwa") 
						{
							DashCost -= 8;
							MaxDashCooldown -= randompick[statitem](3,4,5);
						}
					}
					else 
					{
						DashCost -= 5;
						MaxDashCooldown -= randompick[statitem](1,2,2);
						if (weapon is "FistHeiwa" ||
								weapon is "KnifeHeiwa") 
						{
							DashCost -= 5;
							MaxDashCooldown -= randompick[statitem](1,2,3);
						}
					}
				}
			}
		}
		
		if (weapon is "RiotGun")
		{
			if (A_CheckForHeiwa())
			{
				if (!berserked) 
				{
					DashCost *= 1.125;
					MaxDashCooldown *= 1.0416666666666667;
				}
				else
				{
					DashCost *= 1.0625;
					MaxDashCooldown *= 1.020833333333333;
				}
			}
			else
			{
				if (!berserked) 
				{
					DashCost *= 1.0625;
					MaxDashCooldown *= 1.020833333333333;
				}
				else
				{
					DashCost *= 1.03125;
					MaxDashCooldown *= 1.020833333333333;
				}
			}
		}
		if (weapon is "TommyGun")
		{
			bool dualtommys = false;
			if (owner.CountInv("DualTommyGuns") && !owner.CountInv("DualTommyGunsDisabled")) dualtommys = true;

			if (A_CheckForHeiwa())
			{
				if (dualtommys)
				{
					if (!berserked)
					{
						DashCost *= 1.13334;
						MaxDashCooldown *= 1.04445;
					}
					else 
					{
						DashCost *= 1.06667;
						MaxDashCooldown *= 1.02223;
					}
				}
				else
				{
					if (!berserked)
					{
						DashCost *= 1.06667;
						MaxDashCooldown *= 1.02223;
					}
					else 
					{
						DashCost *= 1.03334;
						MaxDashCooldown *= 1.01112;
					}
				}
			}
			else
			{
				if (dualtommys)
				{
					if (!berserked)
					{
						DashCost *= 1.06667;
						MaxDashCooldown *= 1.02223;
					}
					else 
					{
						DashCost *= 1.03334;
						MaxDashCooldown *= 1.01112;
					}
				}
				else
				{
					if (!berserked)
					{
						DashCost *= 1.03334;
						MaxDashCooldown *= 1.01112;
					}
					else 
					{
						DashCost *= 1.01667;
						MaxDashCooldown *= 1.00556;
					}
				}
			}
		}
		if (weapon is "BlasterRifle")
		{
			if (A_CheckForHeiwa())
			{
				if (!berserked)
				{
					DashCost *= 1.06667;
					MaxDashCooldown *= 1.02223;
				}
				else 
				{
					DashCost *= 1.03334;
					MaxDashCooldown *= 1.01112;
				}
			}
			else
			{
				if (!berserked)
				{
					DashCost *= 1.03334;
					MaxDashCooldown *= 1.01112;
				}
				else 
				{
					DashCost *= 1.01667;
					MaxDashCooldown *= 1.00556;
				}
			}
		}
		if (weapon is "Deviation")
		{
			if (A_CheckForHeiwa())
			{
				if (!berserked) 
				{
					DashCost *= 1.1875;
					MaxDashCooldown *= 1.0625;
				}
				else
				{
					DashCost *= 1.09375;
					MaxDashCooldown *= 1.03125;
				}
			}
			else
			{
				if (!berserked) 
				{
					DashCost *= 1.09375;
					MaxDashCooldown *= 1.03125;
				}
				else
				{
					DashCost *= 1.046875;
					MaxDashCooldown *= 1.015625;
				}
			}
		}
		if (weapon is "Devastator")
		{
			bool dualdevs = false;
			if (owner.CountInv("DualDevastators") && !owner.CountInv("DualDevastatorsDisabled")) dualdevs = true;
			
			if (dualdevs)
			{
				if (A_CheckForHeiwa())
				{
					if (!berserked) 
					{
						DashCost *= 1.25;
						MaxDashCooldown *= 1.0833333333333334;
					}
					else
					{
						DashCost *= 1.125;
						MaxDashCooldown *= 1.0416666666666667;
					}
				}
				else
				{
					if (!berserked) 
					{
						DashCost *= 1.125;
						MaxDashCooldown *= 1.0416666666666667;
					}
					else
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
				}
			}
			else
			{
				if (A_CheckForHeiwa())
				{
					if (!berserked) 
					{
						DashCost *= 1.125;
						MaxDashCooldown *= 1.0416666666666667;
					}
					else
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
				}
				else
				{
					if (!berserked) 
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
					else
					{
						DashCost *= 1.03125;
						MaxDashCooldown *= 1.010416666666667;
					}
				}
			}
		}
		if (weapon is "TeslaCannon")
		{
			bool dualteslas = false;
			if (owner.CountInv("DualTeslaCannons") && !owner.CountInv("DualTeslaCannonsDisabled")) dualteslas = true;
			
			if (dualteslas)
			{
				if (A_CheckForHeiwa())
				{
					if (!berserked) 
					{
						DashCost *= 1.125;
						MaxDashCooldown *= 1.0416666666666667;
					}
					else
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
				}
				else
				{
					if (!berserked) 
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
					else
					{
						DashCost *= 1.03125;
						MaxDashCooldown *= 1.010416666666667;
					}
				}
			}
			else
			{
				if (A_CheckForHeiwa())
				{
					if (!berserked) 
					{
						DashCost *= 1.125;
						MaxDashCooldown *= 1.0416666666666667;
					}
					else
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
				}
				else
				{
					if (!berserked) 
					{
						DashCost *= 1.0625;
						MaxDashCooldown *= 1.020833333333333;
					}
					else
					{
						DashCost *= 1.03125;
						MaxDashCooldown *= 1.020833333333333;
					}
				}
			}
		}
		if (weapon is "Incinerator")
		{
			if (!berserked) 
			{
				DashCost *= 1.40625;
				MaxDashCooldown *= 1.171874999999999;
			}
			else
			{
				DashCost *= 1.203125;
				MaxDashCooldown *= 1.0859375;
			}
		}
		if (weapon is "BHGen")
		{
			if (A_CheckForHeiwa())
			{
				if (!berserked) 
				{
					DashCost *= 1.375;
					MaxDashCooldown *= 1.125;
				}
				else
				{
					DashCost *= 1.1875;
					MaxDashCooldown *= 1.0625;
				}
			}
			else
			{
				if (!berserked) 
				{
					DashCost *= 1.1875;
					MaxDashCooldown *= 1.0625;
				}
				else
				{
					DashCost *= 1.09375;
					MaxDashCooldown *= 1.03125;
				}
			}
		}
		if (weapon is "CalamityBlade")
		{
			if (!berserked) 
			{
				DashCost *= 1.25;
				MaxDashCooldown *= 1.0833333333333333;
			}
			else
			{
				DashCost *= 1.125;
				MaxDashCooldown *= 1.0416666666666667;
			}
		}
		if (weapon is "EvilWarriorShield")
		{
			if (A_CheckForHeiwa())
			{
				if (!berserked)
				{
					if (Owner.CountInv("HWShieldBlockHold")) 
					{
						DashCost *= (1.40 * (1.0 + (HellWarriorShieldLevel * 0.025)));
						MaxDashCooldown *= (1.133334 * (1.0 + (HellWarriorShieldLevel * 0.0083334)));
					}
					else 
					{
						DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
						MaxDashCooldown *= (1.066667 * (1.0 + (HellWarriorShieldLevel * 0.00416667)));
					}
				}
				else
				{
					if (Owner.CountInv("HWShieldBlockHold")) 
					{
						DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
						MaxDashCooldown *= (1.066667 * (1.0 + (HellWarriorShieldLevel * 0.00416667)));
					}
					else 
					{
						DashCost *= (1.10 * (1.0 + (HellWarriorShieldLevel * 0.00625)));
						MaxDashCooldown *= (1.033334 * (1.0 + (HellWarriorShieldLevel * 0.00208334)));
					}
				}
			}
			else
			{
				if (!berserked)
				{
					if (Owner.CountInv("HWShieldBlockHold")) 
					{
						DashCost *= (1.40 * (1.0 + (HellWarriorShieldLevel * 0.025)));
						MaxDashCooldown *= (1.133334 * (1.0 + (HellWarriorShieldLevel * 0.0083334)));
					}
					else 
					{
						DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
						MaxDashCooldown *= (1.066667 * (1.0 + (HellWarriorShieldLevel * 0.00416667)));
					}
				}
				else
				{
					if (Owner.CountInv("HWShieldBlockHold")) 
					{
						DashCost *= (1.20 * (1.0 + (HellWarriorShieldLevel * 0.0125)));
						MaxDashCooldown *= (1.066667 * (1.0 + (HellWarriorShieldLevel * 0.00416667)));
					}
					else 
					{
						DashCost *= (1.10 * (1.0 + (HellWarriorShieldLevel * 0.00625)));
						MaxDashCooldown *= (1.033334 * (1.0 + (HellWarriorShieldLevel * 0.00208334)));
					}
				}
			}
		}
		
		if (berserked) 
		{
			if (A_CheckForHeiwa())
			{
				if (heiwavhardmodifier) MaxDashCooldown *= 0.3125;
													 else MaxDashCooldown *= 0.50;
			}
			else MaxDashCooldown *= 0.625;
		}
		double ssa = 1.0;
		// Future Placement for Perm Items
		DashCost *= ssa;
		ssa = 1.0;
		// Future Placement for Perm Items
		MaxDashCooldown *= ssa;
		if (owner.CountInv("KCTimeFreezer1") ||
				owner.CountInv("KCTimeFreezer2") ||
				owner.CountInv("KCTimeFreezer3"))
		{
			if (A_CheckForHeiwa()) 
			{
				if (heiwavhardmodifier) DashCost *= 0.04;
													 else DashCost *= 0.25;
			}
			else DashCost *= 0.10;
			if (skill <= 0 && DashCost <= 1) DashCost = 1;
			if (skill == 1 && DashCost <= 1) DashCost = 1;
			if (skill == 2 && DashCost <= 2) DashCost = 2;
			if (skill == 3 && DashCost <= 3) DashCost = 3;
			if (skill >= 4 && DashCost <= 4) DashCost = 4;
		}
		else
		{
			if (A_CheckForHeiwa()) 
			{
				if (skill <= 0 && DashCost <= 4) DashCost = 4;
				if (skill == 1 && DashCost <= 8) DashCost = 8;
				if (skill == 2 && DashCost <= 12) DashCost = 12;
				if (skill == 3 && DashCost <= 16) DashCost = 16;
				if (skill >= 4 && DashCost <= 20) DashCost = 20;
			}
			else
			{
				if (skill <= 0 && DashCost <= 8) DashCost = 8;
				if (skill == 1 && DashCost <= 16) DashCost = 16;
				if (skill == 2 && DashCost <= 24) DashCost = 24;
				if (skill == 3 && DashCost <= 32) DashCost = 32;
				if (skill >= 4 && DashCost <= 40) DashCost = 40;
			}
		}
		if (A_CheckForHeiwa()) 
		{
			if (skill <= 0 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill == 1 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill == 2 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill == 3 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill >= 4 && MaxDashCooldown <= 2) MaxDashCooldown = 2;
		}
		else
		{
			if (skill <= 0 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill == 1 && MaxDashCooldown <= 1) MaxDashCooldown = 1;
			if (skill == 2 && MaxDashCooldown <= 2) MaxDashCooldown = 2;
			if (skill == 3 && MaxDashCooldown <= 2) MaxDashCooldown = 2;
			if (skill >= 4 && MaxDashCooldown <= 3) MaxDashCooldown = 3;
		}
		if (owner.CountInv("KCPowerKampoul"))
		{
			DashCost *= 0.2;
			MaxDashCooldown *= 0.4;
			
			if (DashCost <= 1) DashCost = 1;
			if (MaxDashCooldown <= 1) MaxDashCooldown = 1;
		}
		
		bool doubletapdash = GetCVar("kc_doubledash");
		if (kcdebug_showdashinformation) Console.Printf("DashCost [start]: %d, DashCooldown: %d", DashCost, MaxDashCooldown);
		airdashtype = 0;
		// 0 = No loss of altitude
		// 1 = Start with a short "hop" but fall to the ground afterwards.
		
		double settings[2][4];
		settings[0][0] = BT_FORWARD;
		settings[1][0] = 0.00;
		settings[0][1] = BT_MOVELEFT;
		settings[1][1] = 0.25;
		settings[0][2] = BT_BACK;
		settings[1][2] = 0.50;
		settings[0][3] = BT_MOVERIGHT;
		settings[1][3] = 0.75;
		oldInput = owner.GetPlayerInput(INPUT_OLDBUTTONS);

		int pushingdirection = 0;
		If (BTInput & BT_FORWARD) pushingdirection += 1;
		If (BTInput & BT_BACK) pushingdirection += 2;
		If (BTInput & BT_MOVELEFT) pushingdirection += 4;
		If (BTInput & BT_MOVERIGHT) pushingdirection += 8;
		
		int dashtapwindow = 8;
		bool dashactivated = false;
		if (doubletapdash)
		{
			if (kcdebug_showdashinformation) Console.Printf("\cy[double-tap dashing enabled]:\c- doubletapdash: %d, taps: %d, BTInput: %d", doubletapdash, taps, BTInput);
			for (int i = 0; i < 4; i++)
			{
				input = BTInput;
				if (IsButtonPressed(input, oldInput, settings[0][i]) && DashCharge >= DashCost && kc_allowdashing > 0) // DV-DS version also requires a minimal amount of Stamina and the Dash option on to perform
				{
					taps++;
					taptics = dashtapwindow;

					if (taps >= 2 && last == i)
					{
						taps = 0;
						input = 0;
						oldinput = 0;
						dashactivated = true;
					}
					last = i;
				}
			}
			
			If (taptics)
			{
				taptics--;
				If (!taptics)
				{
					taps = 0;
				}
			}
		}
		else
		{
			if (!doubletapdash && (BTInput & BT_USER3)) dashactivated = true;
		}
		
		nm = "CCards_ControlSwapper";
		bool CCards_CTRLSwap = false;
		if (owner.CountInv(nm)) CCards_CTRLSwap = true;
		if (!Waiting &&
				!owner.CountInv("NoDashing") &&
				dashactivated && 
				DashCharge >= DashCost && 
				kc_allowdashing > 0 &&
				pushingdirection &&
				!DashTics &&
				DashCooldown == 0)
		{
			taptics = 0;
			taps = 0;
			//Console.Printf("OnGround: %d", PlayDash.OnGround);
			DashDir = 0;
			If (BTInput & BT_FORWARD) DashDir = 0;
			If (BTInput & BT_BACK) DashDir = 180;
			If (BTInput & BT_MOVELEFT) 
			{
				if (CCards_CTRLSwap) DashDir = -90;
												else DashDir = 90;
			}
			If (BTInput & BT_MOVERIGHT)
			{
				if (CCards_CTRLSwap) DashDir = 90;
												else DashDir = -90;
			}
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVELEFT)) 
			{
				if (CCards_CTRLSwap) DashDir = -45;
												else DashDir = 45;
			}
			If ((BTInput & BT_FORWARD) && (BTInput & BT_MOVERIGHT)) 
			{
				if (CCards_CTRLSwap) DashDir = 45;
												else DashDir = -45;
			}
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVELEFT)) 
			{
				if (CCards_CTRLSwap) DashDir = (180 - -45);
												else DashDir = (180 - 45);
			}
			If ((BTInput & BT_BACK) && (BTInput & BT_MOVERIGHT)) 
			{
				if (CCards_CTRLSwap) DashDir = (180 + -45);
												else DashDir = (180 + 45);
			}
			DashDir += Owner.Angle;
			DashPitch = Owner.Pitch;
			if (BTInput & BT_FORWARD) DashPitch *= 1.0;
			else if (BTInput & BT_BACK) DashPitch *= -1.0;

			DashCharge -= DashCost;
			if (DashCharge <= 0) 
			{
				Waiting = True;
				DashCharge = 0;
			}
			
			// Dash "Speed"
			DashTics = MaxDashTics;
			if (PlayDash.OnGround)
			{
				DashTics = MaxDashTics;
				dashtype = 0;
				Owner.A_StartSound("player/dash",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			else
			{
				if (airdashtype != 1) DashSpeed *= 0.8;
				DashVSpeed = (5 * (ActualLevel * 0.025));
				if (berserked) DashVSpeed *= 1.04;
				DashTics = MaxDashTics;
				dashtype = 1; // Airdash
				Owner.A_StartSound("player/airjump",CHAN_BODY,CHANF_OVERLAP,dashsndvol);
			}
			
			if (owner.CountInv("FistPlayerBlockHold")) 
			{
				Owner.A_StartSound("stackledash", randompick[statitem](180,181), CHANF_OVERLAP, frandom[statitem](0.825,0.975), ATTN_NORM, frandom[statitem](1.125,1.25));
			}
			
			if (owner.CountInv("HWShieldBlockHold")) 
			{
				Owner.A_StartSound("shielddash1", randompick[statitem](180,181), CHANF_OVERLAP, frandom[statitem](0.65,0.95), ATTN_NORM, frandom[statitem](0.667,1.333));
			}
			
			if (random[statitem](1,100) <= dashgruntchance)
			{
				int dashgruntrand = 0;
				if (A_CheckForHeiwa())
				{
					dashgruntrand = random[statitem](1,6);
					if (kc_heiwaextravoices)
					{
						if (dashgruntrand >= 1 && dashgruntrand <= 3) dashgruntsound = "HeiwaJumpSND";
						if (dashgruntrand == 4) dashgruntsound = "HeiwaKiai1";
						if (dashgruntrand == 5) dashgruntsound = "HeiwaKiai4";
						if (dashgruntrand == 6) dashgruntsound = "HeiwaKiai5";
					}
					else
					{
						dashgruntsound = "HeiwaJumpSND";
					}
				}
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					double maskpitch = 1.00;
					if (Owner.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					Owner.A_StopSound(CHAN_VOICE);
					Owner.A_StartSound(dashgruntsound,CHAN_VOICE,CHANF_DEFAULT,(dashgruntsndvol * frandom[statitem](1.25,1.375)),ATTN_NORM,maskpitch);
				}
			}

			bool CollisonSpawn = false;
			if (CollisonSpawn)
			{
				Actor CollDash = Spawn("DashCollisionChecker", Owner.Pos);
				CollDash.bSOLID = True;
				CollDash.Master = Self;
				CollDash.Target = Owner;
				CollDash.A_SetSize(Owner.Radius, Owner.Height);
				CollDash.bNOTIMEFREEZE = True;
			}
		}
		
		if (DashTics)
		{
			DashCooldown = -MaxDashCooldown;
			owner.bFORCERADIUSDMG = false;
			
			//if (PlayDash.OnGround) { PlayDash.OnGround = False; Owner.AddZ(1); }
			if (PlayDash.OnGround && 
					DashTics % 2 && 
					!A_CheckTimeFreeze()) 
			{
				Owner.A_SpawnItemEx("DashPuff",0,0,8,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION);
			}
			if (PlayDash.OnGround) firsttic = 1; else firsttic = 0;
			
			if (DashTics > (MaxDashTics - 2))
			{
				if (firsttic == 0) // On the Ground when Dashing began
				{
					if (dashveltimer == 0) 
					{
						owner.vel.x *= 1.0125; 
						owner.vel.y *= 1.0125; 
					}
				}
				else // In the Air when Dashing began
				{
					if ((kc_allowdashing == 2 || kc_allowdashing == 4) && dashveltimer2 == 0) 
					{
						owner.vel.z = 0.0; 
					}
				}
			}

			if (!PlayDash.OnGround && 
					(DashTics > (MaxDashTics - 2)) 
					&& airdashtype == 1) 
			{
				Owner.Vel.Z += DashVSpeed;
			}
			else
			{
				if ((kc_allowdashing == 2 || kc_allowdashing == 4) && dashveltimer2 == 0) 
				{
					Owner.Vel.Z = 0.0;
				}
			}

			Owner.A_SetBlend("78447E",frandom[statitem](0.08,0.12),random[statitem](2,3));
			Owner.A_SetInventory("PlayerDashing",1);
			//
			Owner.bSHOOTABLE = false;
			Owner.bVISIBILITYPULSE = true;
			Owner.bTHRUACTORS = true;
			DashTics--;
			
			Owner.A_SetInventory("DashTimeFreezer",0);
			
			if (DashTics >= (MaxDashTics - 8)) 
			{
				if (kc_flightswimpitchdash && 
						(owner.waterlevel >= 3 || 
						 (owner.bNOGRAVITY || 
						  owner.bFLY) ||
							istsagliding))
				{
					if (kcdebug_showdashinformation) Console.Printf("DashSpeed: %.8f, DashDir: %.8f, DashPitch: %.8f", DashSpeed, DashDir, DashPitch);
					Owner.Vel3DFromAngle(DashSpeed, DashDir, DashPitch);
				}
				else 
				{
					if (kcdebug_showdashinformation) Console.Printf("DashSpeed: %.8f, DashDir: %.8f", DashSpeed, DashDir);
					Owner.VelFromAngle(DashSpeed, DashDir);
				}
			}
			string dashtype;

			double DashDmg;
			double DashRad;
			double DashFullRad;
			if (berserked)
			{
				if (DashTics > (MaxDashTics * 0.75)) DashSpeed *= 1.025;
				
				// Hand to Hand [Shoulder Tackle] (berserked)
				if (DashTics % 2) 
				{
					owner.bFORCERADIUSDMG = true;
					
					// Dashing Without a Specific Weapon
					DashDmg = random[statitem](8,12);
					if ((weapon is "FistHeiwa" || 
							weapon is "FistMarine") &&
							owner.CountInv("FistPlayerBlockItem"))
					{
						if (weapon is "FistHeiwa") 
						{
							DashDmg += (random[statitem](4,6) + ((TruePlayerATK * 1.25) + (TruePlayerSPD * 0.3125) + (ActualLevel * 0.625)) * frandom(1.25,1.6667));
							DashDmg *= random[statitem](1,3);
							if (TruePlayerLevel >= 120) DashDmg *= 1.5;
							else if (TruePlayerLevel >= 90) DashDmg *= 1.375;
							else if (TruePlayerLevel >= 60) DashDmg *= 1.25;
							else if (TruePlayerLevel >= 30) DashDmg *= 1.125;
						}
						if (weapon is "FistMarine") 
						{
							DashDmg += (random[statitem](6,9) + (((TruePlayerATK * 1.25) + (TruePlayerSPD * 0.3125) + (ActualLevel * 0.625)) * frandom(0.625,0.8334)));
							DashDmg *= random[statitem](1,3);
						}
					}
					if (owner.waterlevel == 1) DashDmg *= 1.125;
					if (owner.waterlevel == 2) DashDmg *= 1.25;
					if (owner.waterlevel >= 3) DashDmg *= 1.375;
					DashRad = (owner.radius * 2.25) + frandom[statitem](-1.5,1.5);
					if ((weapon is "FistHeiwa" || 
							weapon is "FistMarine") &&
							owner.CountInv("FistPlayerBlockItem"))
					{
						if (weapon is "FistHeiwa") 
						{
							DashRad += (owner.radius * 1.375) + frandom[statitem](-0.15,0.15);
							if (TruePlayerLevel >= 120) DashRad *= 1.25;
							else if (TruePlayerLevel >= 90) DashRad *= 1.1875;
							else if (TruePlayerLevel >= 60) DashRad *= 1.125;
							else if (TruePlayerLevel >= 30) DashRad *= 1.0625;
						}
						if (weapon is "FistMarine") DashRad += (owner.radius * 1.125) + frandom[statitem](-0.05,0.05);
					}
					if (owner.waterlevel == 1) DashRad *= 1.25;
					if (owner.waterlevel == 2) DashRad *= 1.5;
					if (owner.waterlevel >= 3) DashRad *= 1.75;
					dashtype = "Dashing";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
				
				// HW Shield [Berserked]
				if (Owner.CountInv("HWShieldBlockHold"))
				{
					owner.bFORCERADIUSDMG = true;

					DashDmg = ((random[statitem](4,10) + random[statitem](3,6)) * random[statitem](2,4));
					DashDmg += ((TruePlayerSPD * 1.25) + (TruePlayerATK * 0.3125) + (ActualLevel * 0.625));
					DashDmg *= (0.5 + (MiscItem.HellWarriorShieldLevel * 0.125));
					if (owner.waterlevel == 1) DashDmg *= 1.125;
					if (owner.waterlevel == 2) DashDmg *= 1.25;
					if (owner.waterlevel >= 3) DashDmg *= 1.375;
					DashRad = (owner.radius * 4.5) + frandom[statitem](-6.0,6.0);
					DashRad *= (0.75 + (MiscItem.HellWarriorShieldLevel * 0.0625));
					if (owner.waterlevel == 1) DashRad *= 1.25;
					if (owner.waterlevel == 2) DashRad *= 1.5;
					if (owner.waterlevel >= 3) DashRad *= 1.75;
					dashtype = "DashingSD";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
			}
			else // Not Berserked
			{
				bool shtackle = false;
				if (DashTics % 2) 
				{
					if (weapon is "FistHeiwa" &&
							owner.CountInv("FistPlayerBlockItem"))
					{
						int chance = 60;
						if (TruePlayerLevel >= 120) chance = 64;
						else if (TruePlayerLevel >= 90) chance = 63;
						else if (TruePlayerLevel >= 60) chance = 62;
						else if (TruePlayerLevel >= 30) chance = 61;
						if (random[statitem](1,64) <= chance)
						{
							shtackle = true;
						}
					}
				}
				if (DashTics % 2 == 1) 
				{
					if (weapon is "FistHeiwa" &&
							owner.CountInv("FistPlayerBlockItem"))
					{
						int chance = random[statitem](192,216);
						if (TruePlayerLevel >= 120) chance = random[statitem](224,248);
						else if (TruePlayerLevel >= 90) chance = random[statitem](216,240);
						else if (TruePlayerLevel >= 60) chance = random[statitem](208,232);
						else if (TruePlayerLevel >= 30) chance = random[statitem](200,224);

						if (random[statitem](1,256) <= chance)
						{
							shtackle = true;
						}
					}
				}
				
				// Hand to Hand [Shoulder Tackle]
				if (shtackle)
				{
					owner.bFORCERADIUSDMG = true;
					
					// Dashing Without a Specific Weapon
					DashDmg = random[statitem](4,6);
					if (weapon is "FistHeiwa") 
					{
						DashDmg += (random[statitem](2,3) + ((TruePlayerATK * 1.25) + (TruePlayerSPD * 0.3125) + (ActualLevel * 0.625)) * frandom(0.125,0.16675));
						DashDmg *= random[statitem](1,3);
						if (TruePlayerLevel >= 120) DashDmg *= 1.5;
						else if (TruePlayerLevel >= 90) DashDmg *= 1.375;
						else if (TruePlayerLevel >= 60) DashDmg *= 1.25;
						else if (TruePlayerLevel >= 30) DashDmg *= 1.125;
					}
					if (weapon is "FistMarine") 
					{
						DashDmg += (random[statitem](3,4) + (((TruePlayerATK * 1.25) + (TruePlayerSPD * 0.3125) + (ActualLevel * 0.625)) * frandom(0.0625,0.08334)));
						DashDmg *= random[statitem](1,3);
					}
					if (owner.waterlevel == 1) DashDmg *= 1.0625;
					if (owner.waterlevel == 2) DashDmg *= 1.125;
					if (owner.waterlevel >= 3) DashDmg *= 1.1875;
					DashRad = (owner.radius * 1.3125) + frandom[statitem](-0.375,0.375);
					if ((weapon is "FistHeiwa" || 
							weapon is "FistMarine") &&
							owner.CountInv("FistPlayerBlockItem"))
					{
						if (weapon is "FistHeiwa") 
						{
							DashRad += (owner.radius * 1.09375) + frandom[statitem](-0.0375,0.0375);
							if (TruePlayerLevel >= 120) DashRad *= 1.25;
							else if (TruePlayerLevel >= 90) DashRad *= 1.1875;
							else if (TruePlayerLevel >= 60) DashRad *= 1.125;
							else if (TruePlayerLevel >= 30) DashRad *= 1.0625;
						}
						if (weapon is "FistMarine") DashRad += (owner.radius * 1.03125) + frandom[statitem](-0.0125,0.0125);
					}
					if (owner.waterlevel == 1) DashRad *= 1.125;
					if (owner.waterlevel == 2) DashRad *= 1.25;
					if (owner.waterlevel >= 3) DashRad *= 1.375;
					dashtype = "Dashing";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
				
				// HW Shield
				if (Owner.CountInv("HWShieldBlockHold"))
				{
					owner.bFORCERADIUSDMG = true;

					DashDmg = (random[statitem](3,6) * random[statitem](2,4));
					DashDmg += ((TruePlayerSPD * 0.625) + (TruePlayerATK * 0.15625) + (ActualLevel * 0.3125));
					DashDmg *= (0.5 + (MiscItem.HellWarriorShieldLevel * 0.125));
					if (owner.waterlevel == 1) DashDmg *= 1.125;
					if (owner.waterlevel == 2) DashDmg *= 1.25;
					if (owner.waterlevel >= 3) DashDmg *= 1.375;
					DashRad = (owner.radius * 4.5) + frandom[statitem](-6.0,6.0);
					DashRad *= (0.75 + (MiscItem.HellWarriorShieldLevel * 0.0625));
					if (owner.waterlevel == 1) DashRad *= 1.25;
					if (owner.waterlevel == 2) DashRad *= 1.5;
					if (owner.waterlevel >= 3) DashRad *= 1.75;
					dashtype = "DashingSD";
					Owner.A_Explode(Dashdmg,DashRad,XF_NOTMISSILE,false,(DashRad*0.5),0,0,"",dashtype);
				}
			}
			
			if (DashTics <= (MaxDashTics * 0.25))
			{
				if (!slownthres1)
				{
					slownthres1 = true;
					DashSpeed *= 0.85;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.5)) 
			{
				if (!slownthres2)
				{
					slownthres2 = true;
					DashSpeed *= 0.9;
				}
			}
			else if (DashTics <= (MaxDashTics * 0.75))
			{
				if (!slownthres3)
				{
					slownthres3 = true;
					DashSpeed *= 0.95;
				}
			}
			
			if (kcdebug_showdashinformation) Console.Printf("DashTics: %d / %d", DashTics, MaxDashTics);
		}
		else
		{
			if (DashCooldown < 0) DashCooldown = MaxDashCooldown;
			else if (DashCooldown > 0) DashCooldown--;
			firsttic = -1;
			Owner.A_SetInventory("DashTimeFreezer",0);
			Owner.A_SetInventory("PlayerDashing",0);
			//
			Owner.bSHOOTABLE = true;
			Owner.bVISIBILITYPULSE = false;
			Owner.bTHRUACTORS = false;
			dashtype = -1;
			slownthres1 = false;
			slownthres2 = false;
			slownthres3 = false;
			owner.bFORCERADIUSDMG = false; 
		}
		if (kcdebug_showdashinformation) Console.Printf("DashCost [end]: %d, DashCooldown: %d", DashCost, DashCooldown);
		
		if (DashCharge < DashMaxCharge)
		{
			int basecharge = 0;
			if (!DashTics)
			{
				if (kcdebug_showdashinformation) Console.Printf("(!DashTics)");
				if (berserked)
				{
					if (level.time % 16 == 0)
					{
						basecharge += 1; 
					}
					if (level.time % 8 == 0)
					{
						basecharge += 1; 
					}
					if (level.time % 4 == 0)
					{
						basecharge += 2; 
					}
					else
					{
						basecharge += 1; 
					}
				}
				else
				{
					if (A_CheckForHeiwa())
					{
						if (heiwavhardmodifier) 
						{
							if (level.time % 24 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 12 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 6 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 3 == 0) 
							{
								basecharge += 1; 
							}
						}
						else
						{
							if (level.time % 40 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 20 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 10 == 0) 
							{
								basecharge += 1; 
							}
							if (level.time % 5 == 0) 
							{
								basecharge += 1; 
							}
						}
					}
					if (level.time % 40 == 0) 
					{
						basecharge += 2; 
					}
					else
					{
						basecharge += 1; 
					}
				}
				double basechargeint = 0.0025;
				if (pushingdirection != 0) basechargeint *= 0.25;
				basecharge *= (1.0 + (TruePlayerLevel * basechargeint) + (TruePlayerSPD * basechargeint));
				if (kcdebug_showdashinformation) Console.Printf("basecharge [dash]: %d, basechargeint: %.8f", basecharge, basechargeint);
				
				if (owner.CountInv("KCPowerKampoul")) basecharge *= 4;
				if (owner.CountInv("PoisonCount")) basecharge = floor(basecharge * 0.667);
				
				if (kcdebug_dashcheat) basecharge *= 4;
				DashCharge += basecharge;
				if (DashCharge > DashMaxCharge) DashCharge = DashMaxCharge;
			}
			
			if (DashCharge >= DashMaxCharge)
			{
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (kcdebug_showdashinformation) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		else
		{
			if (DashCharge > DashMaxCharge)
			{
				DashCharge = DashMaxCharge;
				Waiting = False;
				//Owner.A_StartSound("Player/DashReady",69,CHANF_OVERLAP);
			}
			if (kcdebug_showdashinformation) Console.Printf("DashCharge: %d / %d", DashCharge, DashMaxCharge);
		}
		
		int dashcharges = (DashCharge / DashCost);
		int dashgauge;
		if (DashMaxCharge) dashgauge = DashCharge * 100 / DashMaxCharge;
		if (dashgauge > 100) dashgauge = 100;
		owner.A_SetInventory("DashGauge",dashgauge);
		owner.A_SetInventory("DashMaxCharge",DashMaxCharge);
		owner.A_SetInventory("DashCharges",dashcharges);
		owner.A_SetInventory("DashCharge",DashCharge);
		owner.A_SetInventory("DashTics",DashTics);
		owner.A_SetInventory("DashCost",DashCost);
		owner.A_SetInventory("DashCooldown",DashCooldown);

		if (Waiting) owner.A_SetInventory("DashReady",0);
						else owner.A_SetInventory("DashReady",1);
		
		itemtimer++;
		if (globalvars)
		{
			globalvars.BaseDashChargeMax = BaseDashChargeMax;
		}
	}
}
Class DashCollisionChecker : Actor
{
	PlayerDashJump je;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let sas = PlayerDashJump(Master);
		je = sas;
	}

	Override bool CanCollideWith(Actor other, bool passive) // DashCollisionChecker
	{
		if (Other == target || Other.bMissile)
		Return False;
		if (Pos.Z > (Other.Pos.Z + Other.Height) || Other.Pos.Z > (Pos.Z + Height)) Return False;
		if (Other.bSolid && Other.bShootable && Other.CanCollideWith(Self,0))
		Tracer = Other;
		Return False;
	}

	Override Void Tick()
	{
		Super.Tick();
		if (!target || !je || je && !je.dashtics) { Destroy(); Return; }
		SetOrigin((Target.Pos + (Target.Vel * 0.1)),0);
		Vel = Target.Vel;
		if (Tracer)
		{
			bThruActors = True;
			je.DashSpeed = 0;
			Destroy();
		}
	}
}
