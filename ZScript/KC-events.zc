class KC_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	bool A_CheckForHeiwaPlayer()
	{
		bool isHeiwa = false;
		actor playera = players[0].mo;
		if (HeiwaPlayer(playera) || playera.GetClassName() == "HeiwaPlayer") isHeiwa = true;
		return isHeiwa;
	}

	bool A_CheckBerserk(actor checked)
	{
		bool check = false;
		if (checked)
		{
			if (checked.CountInv("PowerStrength") ||
					checked.CountInv("KCPowerStrength")) check = true;
		}
		return check;
	}

	bool A_CheckKCTimeFreeze()
	{
		bool freeze = false;
		actor playera = players[0].mo;
		if ((playera.CountInv("KCTimeFreezer1") ||
				 playera.CountInv("KCTimeFreezer2") ||
				 playera.CountInv("KCTimeFreezer3"))) freeze = true;
		return freeze;
	}

	bool A_CheckUOHYM()
	{
		bool UOHYM = false;
		if (Wads.CheckNumForName("KC-UOHYM", Wads.ns_global, -1, true) != -1) UOHYM = true;
		return UOHYM;
	}

	bool A_CheckBlooM()
	{
		bool BlooM = false;
		if (Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true) != -1) BlooM = true;
		return BlooM;
	}

	int A_GetPlayerLevel(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains)
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLevel - EventHandler)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}

	void A_TmFrzCCardWTick_TF(string nm, string nn)
	{
		//Console.Printf("A_TmFrzCCardWTick_TF - \c[fire]%s\c- : \c[green]%s\c-", nm, nn);
		Actor mo;
		ThinkerIterator it;
		it = ThinkerIterator.Create("Actor");
		while (mo = Actor(it.Next()))
		{
			if (mo &&
					mo.bISMONSTER &&
					mo.health > 0 &&
					mo.CountInv(nm) &&
					mo.CountInv(nn))
			{
				mo.SetInventory(nm,0);
			}
		}
	}

	void A_TmFrzCCardWTick_NTF(string nm, string nn)
	{
		//Console.Printf("A_TmFrzCCardWTick_NTF - \c[fire]%s\c- : \c[green]%s\c-", nm, nn);
		Actor mo;
		ThinkerIterator it;
		it = ThinkerIterator.Create("Actor");
		while (mo = Actor(it.Next()))
		{
			if (mo &&
					mo.bISMONSTER &&
					mo.health > 0 &&
					mo.CountInv(nn))
			{
				if (mo.CountInv(nm) <= 0)
				{
					mo.SetInventory(nm,1);
				}
			}
		}
	}

	void A_TmFrzCCardWTick_Giver(string nm, string nn)
	{
		//Console.Printf("A_TmFrzCCardWTick_Giver - \c[fire]%s\c- : \c[green]%s\c-", nm, nn);
		Actor mo;
		ThinkerIterator it;
		it = ThinkerIterator.Create("Actor");
		while (mo = Actor(it.Next()))
		{
			if (mo &&
					mo.bISMONSTER &&
					mo.health > 0 &&
					mo.CountInv(nm))
			{
				mo.SetInventory(nn,mo.CountInv(nm));
			}
		}
	}
	
	void A_TmFrzCCardWTick_General(string nm, string nn, int type)
	{
		//Console.Printf("A_TmFrzCCardWTick_General - \c[fire]%s\c- : \c[green]%s\c-, type: %d", nm, nn, type);
		if (type <= 0) A_TmFrzCCardWTick_Giver(nm,nn);
		if (type == 1) A_TmFrzCCardWTick_TF(nm,nn);
		if (type >= 2) A_TmFrzCCardWTick_NTF(nm,nn);
	}
	
	void A_TmFrzCCardWTick_G3n(int type)
	{
		A_TmFrzCCardWTick_General("CCards_Actor_Cannibalism","KC_CCards_Actor_Cannibalism",type);
		A_TmFrzCCardWTick_General("CCards_Actor_FrankensteinTools","KC_CCards_Actor_FrankensteinTools",type);
		A_TmFrzCCardWTick_General("CCards_Actor_EnlightenmentThrower","KC_CCards_Actor_EnlightenmentThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_GrenadeThrower","KC_CCards_Actor_GrenadeThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_SurgeBombThrower","KC_CCards_Actor_SurgeBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_EggThrower","KC_CCards_Actor_EggThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_UnholyWaterThrower","KC_CCards_Actor_UnholyWaterThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_SmokeBombThrower","KC_CCards_Actor_SmokeBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_BlastBombThrower","KC_CCards_Actor_BlastBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_NoxiousBombThrower","KC_CCards_Actor_NoxiousBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_PumpkinBombThrower","KC_CCards_Actor_PumpkinBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_MoldingClayThrower","KC_CCards_Actor_MoldingClayThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_BarrelToss","KC_CCards_Actor_BarrelToss",type);
		A_TmFrzCCardWTick_General("CCards_Actor_WebBombThrower","KC_CCards_Actor_WebBombThrower",type);
		A_TmFrzCCardWTick_General("CCards_Actor_HighVoltage","KC_CCards_Actor_HighVoltage",type);
		A_TmFrzCCardWTick_General("CCards_Actor_Rocketeer","KC_CCards_Actor_Rocketeer",type);
		A_TmFrzCCardWTick_General("CCards_Actor_LethalityCurse","KC_CCards_Actor_LethalityCurse",type);
		A_TmFrzCCardWTick_General("CCards_Actor_ResurrectionCurse","KC_CCards_Actor_ResurrectionCurse",type);
		A_TmFrzCCardWTick_General("CCards_Actor_IncinerateCurse","KC_CCards_Actor_IncinerateCurse",type);
		A_TmFrzCCardWTick_General("CCards_Actor_NinjaBuff","KC_CCards_Actor_NinjaBuff",type);
		A_TmFrzCCardWTick_General("CCards_Actor_ForbiddenGaze","KC_CCards_Actor_ForbiddenGaze",type);
	}

	override void WorldTick()
	{
		actor player = players[0].mo;

		// LDL
		ThinkerIterator ldlit = ThinkerIterator.Create("Actor");
		Actor ldlmo;
		while (ldlmo = Actor(ldlit.Next()))
		{
			if (ldlmo.bISMONSTER && ldlmo.health > 0)
			{
				if (ldlmo.CountInv("LDLegendaryMonsterTracker"))
				{
					if (ldlmo.CountInv("LDLegendaryMonsterTransformed"))
					{
						ldlmo.A_GiveInventory("LDLegendaryMonsterVisualEffectMaker",1);
					}
					if (kcdebug_worldtick) Console.Printf("LDL Check [%p, %s]", ldlmo, ldlmo.GetClassName());
				}
			}
		}

		// TimeFreezeTargetChecker
		ThinkerIterator tftit = ThinkerIterator.Create("Actor");
		Actor tftmo;
		while (tftmo = Actor(tftit.Next()))
		{
			if (tftmo.bISMONSTER && tftmo.health > 0)
			{
				if (A_CheckKCTimeFreeze())
				{
					if (player.GetClassName() == "HeiwaPlayer")
					{
						if (tftmo.target == player)
						{
							if (tftmo.CountInv("TimeFreezeHasAPlayerTarget") <= 0) 
							{
								tftmo.A_SetInventory("TimeFreezeHasAPlayerTarget",1);
								if (kcdebug_timefreezeafterimage) Console.Printf("tftmo: %p [%s], given TimeFreezeHasAPlayerTarget item!", tftmo, tftmo.GetClassName());
							}
						}
					}
					else
					{
						if (tftmo.CountInv("TimeFreezeHasAPlayerTarget") > 0) 
						{
							tftmo.A_SetInventory("TimeFreezeHasAPlayerTarget",0);
						}
					}
				}
				else
				{
					if (tftmo.target)
					{
						if (tftmo.CountInv("TimeFreezeHasNoTarget") > 0) tftmo.A_SetInventory("TimeFreezeHasNoTarget",0);
						if (tftmo.target != player)
						{
							tftmo.A_SetInventory("TimeFreezeHasATarget",1);
						}
						else
						{
							if (tftmo.CountInv("TimeFreezeHasATarget") > 0) 
							{
								tftmo.A_SetInventory("TimeFreezeHasATarget",0);
							}
						}
					}
					else
					{
						tftmo.A_SetInventory("TimeFreezeHasNoTarget",1);
					}
				}
			}
		}

		// CCards
		int d = Wads.CheckNumForName("CCARDS", Wads.ns_global, -1, true);
		if (d != -1)
		{
			if (kcdebug_worldtick) Console.Printf("[CCards lump found] d: %d [time: %d]", d, level.time);
			let globalvars = KCGlobalVariables.Get();
			globalvars.PlayingCCards = true;
			actor player = players[0].mo;
			if (player && !player.CountInv("PlayingCCards")) player.A_SetInventory("PlayingCCards",1);

			Actor mo;
			string nm, nn, no, np, nq, nr, ns, nt;
			ThinkerIterator it;


			if (A_CheckKCTimeFreeze())
			{
				A_TmFrzCCardWTick_G3n(1);

				nm = "CCards_Actor_Shockwave";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}
				}

				nm = "CCards_Actor_AttentionDebuff";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.target) mo.target == null;
						if (mo.tracer) mo.tracer == null;
						for (int i = 0; i < 12; i++)
						{
							mo.A_StopSound(i);
						}
						mo.Destroy();
					}
				}

				nm = "CCards_Actor_RainDamager";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.target) mo.target == null;
						if (mo.tracer) mo.tracer == null;
						for (int i = 0; i < 12; i++)
						{
							mo.A_StopSound(i);
						}
						mo.Destroy();
					}
				}

				nm = "CCards_Actor_BladeTrap";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
						if (mo.CountInv("KC_CCards_Actor_BladeTrap") <= 0)
						{
							mo.A_StopSound(6);
							mo.A_SetInventory("KC_CCards_Actor_BladeTrap",1);
						}
					}
				}
				nm = "KC_CCards_Actor_BladeTrap2";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
						if (mo.CountInv("KC_CCards_Actor_BladeTrap") <= 0)
						{
							mo.A_StopSound(6);
							mo.A_SetInventory("KC_CCards_Actor_BladeTrap",1);
						}
					}
				}

				nm = "CCards_Actor_Confetti";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE == false;
				}

				nm = "CCards_Actor_AttentionNoise";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
						if (mo.CountInv("KC_CCards_Actor_AttentionNoise") <= 0)
						{
							mo.A_StopSound(7);
							mo.A_SetInventory("KC_CCards_Actor_AttentionNoise",1);
						}
					}
				}
			}
			else
			{
				A_TmFrzCCardWTick_G3n(2);

				nm = "CCards_Actor_AttentionNoise";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (!mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = true;
						if (mo.CountInv("KC_CCards_Actor_AttentionNoise"))
						{
							mo.A_StartSound("corruptioncards/parade", CHAN_7, CHANF_LOOPING, 0.2, 0.7);
							mo.A_SetInventory("KC_CCards_Actor_AttentionNoise",0);
						}
					}
				}

				nm = "CCards_Actor_BladeTrap";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (!mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = true;
						if (mo.CountInv("KC_CCards_Actor_BladeTrap"))
						{
							mo.A_StartSound("corruptioncards/bladetrap", slot:CHAN_6, flags:CHANF_LOOP, volume:0.5);
							mo.A_SetInventory("KC_CCards_Actor_BladeTrap",0);
						}
					}
				}

				nm = "KC_CCards_Actor_BladeTrap2";
				it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo)
					{
						if (!mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = true;
						if (mo.CountInv("KC_CCards_Actor_BladeTrap"))
						{
							mo.A_StartSound("corruptioncards/bladetrap", slot:CHAN_6, flags:CHANF_LOOP, volume:0.5);
							mo.A_SetInventory("KC_CCards_Actor_BladeTrap",0);
						}
					}
				}
			}

			if (level.time >= 3)
			{
				bool CardsPlaceHolderCheck = false;
				if (level.time >= 3 && level.time <= 35) CardsPlaceHolderCheck = true;

				// 0.057 Sec TimeFreeze Checks
				if ((((level.time - 35) % 2) == 0))
				{
					nm = "CCards_Actor_JewelEnchantment";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo) 
						{
							if (player.CountInv("TimeSeraphVisor") &&
									player.CountInv("TimeSeraphBangle"))
							{
								mo.health = 1;
								mo.bSHOOTABLE = true;
							}
							else
							{
								mo.health = 1000;
								mo.bSHOOTABLE = false;
							}
						}
					}
				}
				
				// 1 Sec TimeFreeze Checks
				if ((((level.time - 35) % 35) == 0))
				{
					nm = "CCards_Actor_GasPod";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_NoxiousBurst";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_SafeSpawner";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_HotStartSpawner";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_AnnoyingDevil";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_HauntedGround";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_SpawnPod";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_Confetti";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_FairyLight";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_AngelWings";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}

					nm = "CCards_Actor_MiasmaEffect";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo && mo.bNOTIMEFREEZE) mo.bNOTIMEFREEZE = false;
					}
				}

				// 2 Second Checks
				if ((((level.time - 35) % 70) == 0))
				{
					CardsPlaceHolderCheck = true;

					nm = "CCards_Actor_PlushWeapon1";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx1",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon2";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx2",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon3";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx3",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon4";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx4",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon5";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx5",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon6";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx6",1);
						player.A_SetInventory(nm,0);
					}
					nm = "CCards_Actor_PlushWeapon7";
					if (player.CountInv(nm))
					{
						player.A_SetInventory("CCards_Actor_PlushWeaponEx7",1);
						player.A_SetInventory(nm,0);
					}
				}

				// 5 second checks
				if ((((level.time - 35) % 175) == 0))
				{
					CardsPlaceHolderCheck = true;

					nm = "CCards_Actor_BigStomach";
					nm = "CCards_Actor_SwapCurse";
					//
					nm = "CCards_Actor_PriestPorridge";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						mo.A_SpawnItemEx("KC_CCards_Actor_PriestPorridge",flags:SXF_NOCHECKPOSITION,tid:mo.tid);
						mo.Destroy();
					}
					nm = "CCards_Actor_HotPriestPorridge";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						mo.A_SpawnItemEx("KC_CCards_Actor_HotPriestPorridge",flags:SXF_NOCHECKPOSITION,tid:mo.tid);
						mo.Destroy();
					}

					nm = "CCards_Actor_MonsterDisguise";
					it = ThinkerIterator.Create(nm);
					while (mo = Actor(it.Next()))
					{
						if (mo.bNORADIUSDMG) mo.bNORADIUSDMG = false; // hahahaha V:<
						if (!mo.bISMONSTER) mo.bISMONSTER = true; // hehehehe >:V
						if (kcdebug_worldtick) Console.Printf("LOLE [%p, %s]", mo, mo.GetClassName());
					}
				}

				if (CardsPlaceHolderCheck)
				{
					A_TmFrzCCardWTick_Giver("CCards_Actor_9LivesCurse","KC_CCards_Actor_9LivesCurse");
					A_TmFrzCCardWTick_Giver("CCards_Actor_9LivesCounter","KC_CCards_Actor_9LivesCounter");
					A_TmFrzCCardWTick_Giver("CCards_Actor_MonsterGodMode","KC_CCards_Actor_MonsterGodMode");
					A_TmFrzCCardWTick_Giver("CCards_Actor_QuadDamage","KC_CCards_Actor_QuadDamage");
					A_TmFrzCCardWTick_G3n(0);
				}
				
			}
		}
	}

	override void NewGame()
	{
		let globalvars = KCGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		if (kcdebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (KC_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}

	void ProjSetSpeed(actor spawnee)
	{
		double spdfactor, oldspdfactor;
		int TrueGameSkill = skill;

		if (Level.MapName != "TITLEMAP")
		{
			if (!spawnee.accuracy)
			{
				if (spawnee)
				{
					if (spawnee.target)
					{
						if (spawnee.target.bISMONSTER &&
								!PlayerPawn(spawnee.target) &&
								spawnee.target.default.speed != 0)
						{
							spdfactor = spawnee.target.speed / spawnee.target.default.speed;
							oldspdfactor = spdfactor;
							if (spdfactor >= 1.00)
							{
								spdfactor -= 1.00;
								if (skill <= 0) spdfactor *= 0.25;
								if (skill == 1) spdfactor *= 0.375;
								if (skill == 2) spdfactor *= 0.5;
								if (skill == 3) spdfactor *= 0.625;
								if (skill >= 4) spdfactor *= 0.75;
								spdfactor *= frandom(0.875,1.125);
								spdfactor *= kc_mprojectilevelmulti;
								if (spdfactor < 0.00) spdfactor = 0.00;
								spdfactor += 1.00;
								spawnee.A_ScaleVelocity(spdfactor);
							}
							if (kcdebug_projectilespawns) Console.Printf("(%s) spdfactor: %.8f (%.8f), spawnee.target.speed: %.8f, spawnee.target.default.speed: %.8f", spawnee.GetClassName(), spdfactor, oldspdfactor, spawnee.target.speed, spawnee.target.default.speed);
						}
					}
					spawnee.accuracy++;
				}
			}
		}
	}

	actor, int, int AddLevelSpecials(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (kc_monsterlevelenabledflags)
		{
			if (monsterlevel >= (10 * levelmulfact))
			{
			}

			if (monsterlevel >= (15 * levelmulfact))
			{
				if (Cyberdemon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CyberdemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SpiderMasterMind(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SpiderMastermindNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (UltraMastermind(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Minotaur(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDMELEE = true;

				if (IceGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Korax(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Inquisitor(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Programmer(spawnee)) spawnee.bAVOIDMELEE = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDMELEE = true;
			}

			if (monsterlevel >= (20 * levelmulfact))
			{
				if (Zombieman(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ZombiemanNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PlasmaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (RepeaterZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				if (KarasawaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ShotgunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ShotgunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FemaleRailZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ChaingunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ChaingunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Minigunner(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BFGGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (WolfensteinSS(spawnee)) spawnee.bAVOIDMELEE = true;
				if (WolfensteinSSNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FlyingBalrog(spawnee)) spawnee.bAVOIDMELEE = true;

				if (IronLich(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Snake(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Bishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Acolyte(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Rebel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Reaver(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Templar(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDMELEE = true;

				// AVOIDHAZARDS
			}

			if (monsterlevel >= (25 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (NetherDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				// AVOIDMELEE
				if (NetherDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Fatso(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MancubusNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Daedabus(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Arachnotron(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Archvile(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ArchvileNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BaronOfHell(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BaronOfHellNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Wizard(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Beast(spawnee)) spawnee.bAVOIDMELEE = true;

				if (FireDemon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Wraith(spawnee)) spawnee.bAVOIDMELEE = true;

				if (Sentinel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Crusader(spawnee)) spawnee.bAVOIDMELEE = true;
			}

			if (monsterlevel >= (30 * levelmulfact))
			{
				if (Abaddon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Hectebus(spawnee)) spawnee.bAVOIDMELEE = true;

				// AVOIDHAZARDS
				if (Abaddon(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Cyberdemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CyberdemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SpiderMasterMind(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SpiderMastermindNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (UltraMastermind(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Minotaur(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (IceGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Korax(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Inquisitor(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Programmer(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}

			if (monsterlevel >= (35 * levelmulfact))
			{
				if (DoomImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (DoomImpNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Cacodemon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CacodemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PainElemental(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PainElementalNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Revenant(spawnee) && random(1,2) <= 1) spawnee.bAVOIDMELEE = true;
				if (RevenantNew(spawnee) && random(1,2) <= 1) spawnee.bAVOIDMELEE = true;
				if (HellKnight(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HellKnightNew(spawnee)) spawnee.bAVOIDMELEE = true;

				if (HereticImpLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Knight(spawnee)) spawnee.bAVOIDMELEE = true;
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}

	actor, int, int AddLevelSpecials2(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (kc_monsterlevelenabledflags)
		{
			if (monsterlevel >= (40 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (Zombieman(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ZombiemanNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PlasmaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (RepeaterZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (KarasawaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ShotgunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ShotgunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FemaleRailZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ChaingunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ChaingunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Minigunner(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BFGGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (WolfensteinSS(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (WolfensteinSSNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FlyingBalrog(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (IronLich(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Snake(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Bishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Acolyte(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Rebel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Reaver(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Templar(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}

			if (monsterlevel >= (45 * levelmulfact))
			{
				if (HadesElemental(spawnee)) spawnee.bAVOIDMELEE = true;
				if (HadesOverlord(spawnee)) spawnee.bAVOIDMELEE = true;
			}

			if (monsterlevel >= (50 * levelmulfact))
			{
				// AVOIDMELEE
				if (Cacolantern(spawnee)) spawnee.bAVOIDMELEE = true;
				// AVOIDHAZARDS
				if (Cacolantern(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Fatso(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MancubusNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Daedabus(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Arachnotron(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Archvile(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ArchvileNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BaronOfHell(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BaronOfHellNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Wizard(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Beast(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (FireDemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Wraith(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (Sentinel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Crusader(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}

			if (monsterlevel >= (60 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (Hectebus(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}

			if (monsterlevel >= (70 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (DoomImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (DoomImpNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Cacodemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CacodemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PainElemental(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PainElementalNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Revenant(spawnee) && spawnee.bAVOIDMELEE && random(1,2) <= 1) spawnee.bAVOIDHAZARDS = true;
				if (RevenantNew(spawnee) && spawnee.bAVOIDMELEE && random(1,2) <= 1) spawnee.bAVOIDHAZARDS = true;
				if (HellKnight(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HellKnightNew(spawnee)) spawnee.bAVOIDHAZARDS = true;

				if (HereticImpLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Knight(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}

			if (monsterlevel >= (80 * levelmulfact))
			{
				// AVOIDHAZARDS
			}

			if (monsterlevel >= (90 * levelmulfact))
			{
				if (HadesElemental(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (HadesOverlord(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}

	actor, int, int AddLevelSpecials3(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (kc_monsterlevelenabledflags)
		{
			int fastchance = 0;
			if (monsterlevel >= (25 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (50 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (75 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (100 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
					if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bALWAYSFAST = true;
					if (Demon(spawnee)) spawnee.bALWAYSFAST = true;
					if (DemonNew(spawnee)) spawnee.bALWAYSFAST = true;
					if (LostSoul(spawnee)) spawnee.bALWAYSFAST = true;
 					if (LostSoulNew(spawnee) || LostSoulAnnoying(spawnee) || BetaLostSoul(spawnee)) spawnee.bALWAYSFAST = true;
					if (HereticImp(spawnee)) spawnee.bALWAYSFAST = true;
					if (Mummy(spawnee)) spawnee.bALWAYSFAST = true;
					if (Clink(spawnee)) spawnee.bALWAYSFAST = true;

					if (Ettin(spawnee)) spawnee.bALWAYSFAST = true;
					if (Centaur(spawnee)) spawnee.bALWAYSFAST = true;
					if (Serpent(spawnee)) spawnee.bALWAYSFAST = true;

					if (Stalker(spawnee)) spawnee.bALWAYSFAST = true;
				}
			}
			if (monsterlevel >= (50 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (100 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (150 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (200 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
				}
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}

	actor, string, int CheckLevelTweaks(actor spawnee, string spawnname, int LevelCheck)
	{
		// Level Tweaks
		// Micro-Boss

		// Mini-Boss
		if (spawnname ~== "SpiderMastermind") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "SpiderMastermindNew") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "SpiderMastermindClassic") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "Demolisher") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "Cyberdemon") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "CyberdemonNew") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "CyberdemonClassic") LevelCheck += random(random(1,2),3);
		if (spawnname ~== "Annihilator") LevelCheck += random(random(1,2),3);

		// Tier 1 Boss

		// Tier 2 Boss

		if (Peasant(spawnee)) LevelCheck /= 4;
		else
		{
			if (random(1,32) <= 1)
			{
				if (random(1,32) <= 1)
				{
					if (random(1,32) <= 1)
					{
						if (spawnname ~== "ClayDevilNew") LevelCheck += random(4,6);
						else if (spawnname ~== "Skeleton") LevelCheck += random(8,12);
						else LevelCheck += random(16,24);
					}
					else
					{
						if (spawnname ~== "ClayDevilNew") LevelCheck += random(1,2);
						else if (spawnname ~== "Skeleton") LevelCheck += random(2,3);
						else LevelCheck += random(8,12);
					}
				}
				else
				{
					if (spawnname ~== "ClayDevilNew") LevelCheck += randompick(0,0,0,0,0,0,0,0,0,1);
					else if (spawnname ~== "Skeleton") LevelCheck += random(0,1);
					else LevelCheck += random(2,3);
				}
			}

			// Rare Chance for a Level Quadruplication [i.e. Aetherius]
			int basechance = 128;
			if (random(1,basechance) <= (1 + (skill * 0.25)))
			{
				if (spawnname ~== "ClayDevilNew") LevelCheck *= 1.25;
				else if (spawnname ~== "Skeleton") LevelCheck *= 1.5;
				else LevelCheck *= 2;

				basechance = 128;
				if (random(1,basechance) <= (1 + (skill * 0.25)))
				{
					if (spawnname ~== "ClayDevilNew") LevelCheck *= 1.25;
					else if (spawnname ~== "Skeleton") LevelCheck *= 1.5;
					else LevelCheck *= 2;
				}
			}
		}

		return spawnee, spawnname, LevelCheck;
	}

	bool CheckExceptions(actor checkee)
	{
		string nm, nn, no, np, nq, nr, ns, nt;
		bool exception = false;
		if (checkee)
		{
			string spawnname = checkee.GetClassName();
			if (Wads.CheckNumForName("KC-EXDAY", Wads.ns_global, -1, true) != -1)
			{
				nm = "Toilet"; if (spawnname == nm) exception = true;
				nm = "Shower"; if (spawnname == nm) exception = true;
				nm = "FaucetWater"; if (spawnname == nm) exception = true;
				nm = "WaterActivation"; if (spawnname == nm) exception = true;
				nm = "LoveTrainSounds"; if (spawnname == nm) exception = true;
				nm = "VaseBrown"; if (spawnname == nm) exception = true;
				nm = "ReflectionStaticGreen"; if (spawnname == nm) exception = true;
				nm = "PalmTreeTop"; if (spawnname == nm) exception = true;
				nm = "PalmTreeWood1"; if (spawnname == nm) exception = true;
				nm = "JungleTreePart"; if (spawnname == nm) exception = true;
				nm = "SeekingThunder"; if (spawnname == nm) exception = true;
				nm = "MeteorCaster"; if (spawnname == nm) exception = true;
				nm = "DecorativeSkullA"; if (spawnname == nm) exception = true;
				nm = "DecorativeSkullB"; if (spawnname == nm) exception = true;
				nm = "DecorativeSkullC"; if (spawnname == nm) exception = true;
				nm = "DecorativeSkullD"; if (spawnname == nm) exception = true;
				nm = "GreenCar"; if (spawnname == nm) exception = true;
				nm = "BlueCar"; if (spawnname == nm) exception = true;
				nm = "RedCar"; if (spawnname == nm) exception = true;
				nm = "GrayCar"; if (spawnname == nm) exception = true;
				nm = "RandomCarSP"; if (spawnname == nm) exception = true;
				nm = "FuckedUpCar"; if (spawnname == nm) exception = true;
				nm = "CarColisionExtra"; if (spawnname == nm) exception = true;
				nm = "EndFirstLevel"; if (spawnname == nm) exception = true;
				nm = "ImpaledSkulls"; if (spawnname == nm) exception = true;
				nm = "BDECRedLightWall1"; if (spawnname == nm) exception = true;
				nm = "BDECBlueLightWall"; if (spawnname == nm) exception = true;
				nm = "BDECBlueLightWall1"; if (spawnname == nm) exception = true;
				nm = "BDECyellowLightWall"; if (spawnname == nm) exception = true;
				nm = "BDECyellowLightWall1"; if (spawnname == nm) exception = true;
				nm = "BDECwhiteLightWall"; if (spawnname == nm) exception = true;
				nm = "BDECwhiteLightWall1"; if (spawnname == nm) exception = true;
				nm = "BDecMap16SecretExit"; if (spawnname == nm) exception = true;
				nm = "BDecMap20SecretExit"; if (spawnname == nm) exception = true;
				nm = "D2MAP13SecretExit"; if (spawnname == nm) exception = true;
				nm = "BDECSpecimenTank"; if (spawnname == nm) exception = true;
			}
		}
		return exception;
	}

	void MonsterStatsSet(actor spawnee, int basemonsterrating, bool practicetarget, bool specialenemy, bool ispeasant)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = KCGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			string spawnname = spawnee.GetClassName();
			string nm, nn, no, np, nq, nr, ns, nt;
			bool isCCardsMini = false;
			bool isCCardsMiniAv = false;
			nm = "CCards_Actor_MiniMonsterPowerup";
			nn = "CCards_Token_MiniAvenger";
			if (spawnee.CountInv(nm)) isCCardsMini = true;
			if (spawnee.CountInv(nn)) isCCardsMiniAv = true;
			bool ninelivescurse;
			int nineliveslifecount;
			nm = "CCards_Actor_9LivesCurse";
			nn = "CCards_Actor_9LivesCounter";
			if (spawnee.CountInv(nm)) ninelivescurse = true;
			if (ninelivescurse && spawnee.CountInv(nn)) nineliveslifecount = (spawnee.CountInv(nn) + 1);

			double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
			double hpmulti2, atkmulti2, defmulti2, spdmulti2, massmulti2;

			// Monster "Scaling"
			bool e1m8exitroommon = false;
			bool e1m8baron = false;
			bool e2m8cyber = false;
			bool e34m8spider = false;
			bool exception = CheckExceptions(spawnee);
			if (spawnee.bISMONSTER && !practicetarget && !exception)
			{
				double baselinelevel = 0;
				if (spawnee.CountInv("E1M8ExitRoomMonster") &&
						level.mapname == "E1M8" &&
						level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1') e1m8exitroommon = true;
				if (level.mapname == "E1M8" &&
						level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1' &&
						(spawnname ~== "BaronOfHell" ||
						 spawnname ~== "BaronOfHellNew" ||
						 spawnname ~== "BaronOfHellClassic" ||
						 spawnname ~== "Belphegor" ||
						 spawnname ~== "BruiserDemon" ||
						 spawnname ~== "CyBruiser" ||
						 spawnname ~== "ArchonOfHell" ||
						 spawnname ~== "PyroDemon" ||
						 spawnname ~== "FlyingBalrogDVDS" ||
						 spawnname ~== "Hierophant")) e1m8baron = true;
				if (level.mapname == "E2M8" &&
						level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' &&
						(spawnname ~== "Cyberdemon" ||
						 spawnname ~== "CyberdemonNew" ||
						 spawnname ~== "CyberdemonClassic" ||
						 spawnname ~== "Annihilator")) e2m8cyber = true;
				if ((level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' ||
						 level.GetChecksum() == '2DC939E508AB8EB68AF79D5B60568711') &&
						 (level.mapname == "E3M8" ||
							level.mapname == "E4M8") &&
						(spawnname ~== "SpiderMastermind" ||
						 spawnname ~== "SpiderMastermindNew" ||
						 spawnname ~== "SpiderMastermindClassic" ||
						 spawnname ~== "Demolisher")) e34m8spider = true;

				if (A_CheckUOHYM() && level.mapname == "MAP01")
				{
					baselinelevel += randompick(0,1,1,1,2,2,2,2,2,2,2,2,3,3,3,4);
					nm = "Blot"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Shadow"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Mite"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Vampyr"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Striga"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Putrefier"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Hemodemon"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Wight1"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "KDiZDNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "MirrorArchvile"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "KevCerberus"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "ChildhoodNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "Hellfish"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "SkinStealer"; if (spawnname == nm) baselinelevel *= random(16,24);
					if (random(1,16) <= 1) baselinelevel *= 2.5;
					else
					{
						if (random(1,8) <= 1) baselinelevel *= 1.75;
						else
						{
							if (random(1,4) <= 1) baselinelevel *= 1.375;
							else
							{
								if (random(1,2) <= 1) baselinelevel *= 1.1875;
							}
						}
					}
				}
				nm = "ArchangelusA"; if (spawnname == nm) baselinelevel += random(15,25);
				nm = "ArchangelusB"; if (spawnname == nm) baselinelevel += random(15,25);
				nm = "EviternatusAnta"; if (spawnname == nm) baselinelevel += random(15,25);
				nm = "EviternatusBete"; if (spawnname == nm) baselinelevel += random(15,25);
				nm = "EviternatusCeph"; if (spawnname == nm) baselinelevel += random(15,25);
				nm = "IconOfSinBoss"; if (spawnname == nm) baselinelevel += random(30,50);
				if (e1m8exitroommon) baselinelevel += random(10,15);
				if (e1m8baron) baselinelevel += random(20,30);
				if (e2m8cyber || e34m8spider) baselinelevel += random(40,50);

				if (kcdebug_monsterscaling) Console.Printf("ninelivescurse: %d, nineliveslifecount: %d", ninelivescurse, nineliveslifecount);
				if (kcdebug_monsterscaling) Console.Printf("\c[gold][MonsterStatsSet], tic: %d, actor: %p [%s]\c-", gametic, spawnee, spawnname);
				int LevelErrorRange;
				int LevelCheck;
				int LevelChecker = 1;
				int MapDifficultyInflation = clamp(kc_mapdifficultyinflation, -2000, 2000);
				int MapDifficultyInflationPercent = clamp(kc_mapdifficultyinflation2,  1, 5000);
				int MapErrorRange;
				int LevelDifficultyInflation = clamp(kc_leveldifficultyinflation, -2000, 2000);
				int LevelDifficultyInflationPercent = clamp(kc_leveldifficultyinflation2, -100, 2000);
				int MapCheck;
				double monsterrating = 0;
				double monsterlevel = 0;
				double leveltemp = 0;
				double luckmult = 0;
				double origSpd = spawnee.Speed;
				double origDmgMul = spawnee.DamageMultiply;
				double origDmgFct = spawnee.DamageFactor;
				double origHealth = spawnee.health;
				double origMass = spawnee.Mass;
				KCCreature KCC;
				KCC = KCCreature(spawnee);

				hpmulti = 0.00;
				atkmulti = 0.00;
				defmulti = 0.00;
				spdmulti = 0.00;
				massmulti = 0.00;
				if (!specialenemy || !ispeasant)
				{
					double mult;
					double mult2;
					double multbase = 1;
					int basedivfactor = 16;
					if (skill <= 0) basedivfactor = 22;
					if (skill == 1) basedivfactor = 19;
					if (skill == 2) basedivfactor = 16;
					if (skill == 3) basedivfactor = 11;
					if (skill >= 4) basedivfactor = 6;
					if (e1m8exitroommon) basedivfactor *= 0.334;
					if (e1m8baron) basedivfactor *= 0.334;
					if (e2m8cyber || e34m8spider) basedivfactor *= 0.1667;

					if (ninelivescurse)
					{
						if (nineliveslifecount >= 9)
						{
							basedivfactor *= (1.00 - (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.0625,0.08334)));
						}
						else
						if (nineliveslifecount >= 4 && nineliveslifecount <= 8)
						{
							basedivfactor *= (1.00 - (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.03125,0.04167)));
						}
						else
						{
							basedivfactor *= (1.00 - (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.015625,0.020834)));
						}
					}

					if (random(1,basedivfactor) <= 8)
					{
						if (random(1,basedivfactor) <= 4)
						{
							if (random(1,basedivfactor) <= 2)
							{
								if (random(1,basedivfactor) <= 1)
								{
									if (random(1,(basedivfactor*1.25)) <= 1)
									{
										if (random(1,(basedivfactor*1.5)) <= 1)
										{
											if (random(1,(basedivfactor*2)) <= 1)
											{
												if (random(1,(basedivfactor*3)) <= 1) monsterrating = 8; // <SSS>
												else monsterrating = 7; // <SS>
											}
											else monsterrating = 6; // [S]
										}
										else monsterrating = 5; // [A]
									}
									else monsterrating = 4; // [B]
								}
								else monsterrating = 3; // [C]
							}
							else monsterrating = 2; // [D]
						}
						else monsterrating = 1; // [E]
					}

					if (monsterrating < basemonsterrating) monsterrating = basemonsterrating;
					multbase = 1.0;
					double baseadd = 0.0;
					if (monsterrating == 1) baseadd = 0.5; // [E]
					if (monsterrating == 2) baseadd = 1.125; // [D]
					if (monsterrating == 3) baseadd = 2.2; // [C]
					if (monsterrating == 4) baseadd = 3.25; // [B]
					if (monsterrating == 5) baseadd = 4.334; // [A]
					if (monsterrating == 6) baseadd = 5.4; // [S]
					if (monsterrating == 7) baseadd = 6.5; // <SS>
					if (monsterrating >= 8) baseadd = 7.75; // <SSS>
					baseadd *= frandompick(0.4375,0.5,0.5,0.5,0.5,0.5,0.5,0.5625);
					multbase += baseadd;
					if (e1m8exitroommon) multbase *= 2.5;
					if (e1m8baron) basedivfactor *= 3.25;
					if (e2m8cyber || e34m8spider) basedivfactor *= 4.0;

					if (kcdebug_monsterscaling) Console.Printf("multbase: %.8f, monsterrating: %d", multbase, monsterrating);

					if (random(1,128) <= (monsterrating * 0.25))
					{
						multbase *= 2;
						if (kcdebug_monsterscaling) Console.Printf("Boosted [1] - multbase: %.8f, monsterrating: %d", multbase, monsterrating);
						if (random(1,128) <= (monsterrating * 0.125))
						{
							multbase *= 2;
							if (kcdebug_monsterscaling) Console.Printf("Boosted [2] - multbase: %.8f, monsterrating: %d", multbase, monsterrating);
						}
					}

					bool levelee = false;
					KCCreature spawnee2;
					spawnee2 = KCCreature(spawnee);
					if (spawnee2)
					{
						int presetlevel = spawnee2.user_presetleveladd + random(spawnee2.user_presetlevelrand1,spawnee2.user_presetlevelrand2);
						if (presetlevel > 0)
						{
							LevelCheck += presetlevel;
							if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [presetlevel]: %d, monsterrating: %d", presetlevel, monsterrating);
						}
					}
					//***********************
					//* PlayerLevel Scaling *
					//***********************
					if (kc_enemyscalingplevel && globalvars && MiscItem)
					{
						int TruePlayerLevel = A_GetPlayerLevel(1);
						TruePlayerLevel += baselinelevel;
						LevelCheck += TruePlayerLevel;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [PlayerLevel Check]: %d (PlayLvl: +%d), monsterrating: %d", LevelCheck, TruePlayerLevel, monsterrating);

						if (KCC)
						{
							LevelCheck += KCC.user_ressurrectstr; // Checks the "Resurrect" strength of a monster [Clay Devils in TCOTD:A get stronger each time they resurrect]
							if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [ResurrectStr Check]: %d (ResStr: +%d), monsterrating: %d", LevelCheck, KCC.user_ressurrectstr, monsterrating);
						}

						LevelCheck += LevelDifficultyInflation;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d), monsterrating: %d", LevelCheck, LevelDifficultyInflation, monsterrating);

						LevelCheck = LevelCheck * (100 + LevelDifficultyInflationPercent) / 100;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%), monsterrating: %d", LevelCheck, (100 + LevelDifficultyInflationPercent), monsterrating);

						LevelErrorRange = LevelCheck * 0.1667;
						if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
						LevelCheck += random(-LevelErrorRange,LevelErrorRange);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [error-range]: %d (Error Range: +-%d), monsterrating: %d", LevelCheck, LevelErrorRange, monsterrating);

						int PreviousLevelCheck = LevelCheck;

						// Specific Monsters
						if (SpiderMastermind(spawnee)) LevelCheck += random(3,6);
						if (SpiderMastermindNew(spawnee)) LevelCheck += random(3,6);
						if (Cyberdemon(spawnee)) LevelCheck += random(3,6);
						if (CyberdemonNew(spawnee)) LevelCheck += random(3,6);
						if (Annihilator(spawnee) || Demolisher(spawnee)) LevelCheck += random(3,6);
						if (Minotaur(spawnee) || MinotaurFriend(spawnee)) LevelCheck += random(3,6);

						// Specific Bosses
						// Tier 1 Boss
						if (Sorcerer1(spawnee)) LevelCheck += random(9,18);
						if (DSparilMountedNew(spawnee)) LevelCheck += random(9,18);
						if (FighterBoss(spawnee)) LevelCheck += random(9,18);
						if (ClericBoss(spawnee)) LevelCheck += random(9,18);
						if (MageBoss(spawnee)) LevelCheck += random(9,18);
						// Tier 2 Boss
						if (Sorcerer2(spawnee)) LevelCheck += random(15,30);
						if (DSparilUnmountedNew(spawnee)) LevelCheck += random(15,30);
						if (Korax(spawnee)) LevelCheck += random(15,30);
						if (KoraxNew(spawnee)) LevelCheck += random(15,30);
						if (spawnname ~== "ThamuzNew" || spawnname ~== "TchernobogNew") LevelCheck += random(15,30);
						// Tier 3 Boss
						if (spawnname ~== "PennywiseBoss") LevelCheck += random(23,45);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [actor-check: %s]: %d (Previous: %d), monsterrating: %d", spawnname, LevelCheck, PreviousLevelCheck, monsterrating);

						if (gameinfo.GameType == GAME_Doom)
						{
							if (Wads.CheckNumForName("KC-UNFAM", Wads.ns_global, -1, true) != -1 && level.GetChecksum() == "c50823f3e0b0504a403e0574af3f68e3")
							{
								if (spawnee.TID == 251)
								{
									PreviousLevelCheck = LevelCheck;
									LevelCheck *= 2;
									if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [Unfamiliar E3M8 boss]: %d (Previous: %d), monsterrating: %d", LevelCheck, PreviousLevelCheck, monsterrating);
								}
							}
						}
						PreviousLevelCheck = LevelCheck;
						LevelCheck = clamp(LevelCheck, 0, 2000);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [final calc]: %d (Previous: %d), monsterrating: %d", LevelCheck, PreviousLevelCheck, monsterrating);
						levelee = true;
					}

					//
					if (A_CheckBlooM())
					{
					}
					//

					[spawnee, spawnname, LevelCheck] = CheckLevelTweaks(spawnee,spawnname,LevelCheck);

					if (levelee)
					{
						spawnee.A_SetInventory("MonsterLevel",LevelCheck);
						KCCreature spawnee2;
						spawnee2 = KCCreature(spawnee);
						//
						double truemultbase = multbase *= kc_enemyscalelevelmultiplier;
						if (kcdebug_monsterscaling) Console.Printf("truemultbase: %.8f, kc_enemyscalelevelmultiplier: %.8f, monsterrating: %d", truemultbase, kc_enemyscalelevelmultiplier, monsterrating);
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult = 0.00275;
							if (skill == 1) mult = 0.002625;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002375;
							if (skill >= 4) mult = 0.00225;
						}
						else
						{
							if (skill <= 0) mult = 0.00225;
							if (skill == 1) mult = 0.002375;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002625;
							if (skill >= 4) mult = 0.00275;
						}
						mult *= 0.9;
						mult *= (1.0 + (0.125 * monsterrating));
						mult *= truemultbase;
						if (isCCardsMini)
						{
							if (isCCardsMiniAv) mult *= 0.875;
														 else mult *= 0.5;
						}
						if (kcdebug_monsterscaling) Console.Printf("\c[red]mult [pre-attack]: %.8f\c-, FRIENDLY?: %d, monsterrating: %d", mult, spawnee.bFRIENDLY, monsterrating);

						// Attack
						double baseatkmulti = (LevelCheck * mult);
						if (LevelCheck >= 1 && LevelCheck <= 20) baseatkmulti *= frandom(1.0025,1.005);
						if (LevelCheck >= 21 && LevelCheck <= 40) baseatkmulti *= frandom(1.0075,1.015);
						if (LevelCheck >= 41 && LevelCheck <= 60) baseatkmulti *= frandom(1.015,1.03);
						if (LevelCheck >= 61 && LevelCheck <= 80) baseatkmulti *= frandom(1.025,1.05);
						if (LevelCheck >= 81 && LevelCheck <= 100) baseatkmulti *= frandom(1.0375,1.075);
						if (LevelCheck >= 101 && LevelCheck <= 120) baseatkmulti *= frandom(1.0525,1.105);
						if (LevelCheck >= 121 && LevelCheck <= 140) baseatkmulti *= frandom(1.07,1.14);
						if (LevelCheck >= 141 && LevelCheck <= 160) baseatkmulti *= frandom(1.09,1.18);
						if (LevelCheck >= 161 && LevelCheck <= 180) baseatkmulti *= frandom(1.1125,1.225);
						if (LevelCheck >= 181 && LevelCheck <= 199) baseatkmulti *= frandom(1.1375,1.275);
						if (LevelCheck >= 200) baseatkmulti *= frandom(1.165,1.33);

						if (ninelivescurse)
						{
							if (nineliveslifecount >= 9)
							{
								baseatkmulti *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.125,0.1667)));
							}
							else
							if (nineliveslifecount >= 4 && nineliveslifecount <= 8)
							{
								baseatkmulti *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.0625,0.08334)));
							}
							else
							{
								baseatkmulti *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.03125,0.041667)));
							}
						}
						atkmulti = baseatkmulti;
						//
						if (kcdebug_monsterscaling) Console.Printf("atkmulti: %.8f", atkmulti);

						// Defense
						defmulti = 1.0 / (baseatkmulti + 1.0);
						//
						defmulti -= 1.0;
						if (kcdebug_monsterscaling) Console.Printf("defmulti: %.8f", defmulti);

						// Speed
						spdmulti = (baseatkmulti * 0.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("spdmulti: %.8f", spdmulti);

						// Mass
						massmulti = (baseatkmulti / 1.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("massmulti: %.8f", massmulti);

						// Health
						hpmulti = (baseatkmulti / 1.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("hpmulti: %.8f", hpmulti);
					}

					//*********************
					//* Map-Based Scaling *
					//*********************
					if (kc_enemyscalingmaps && globalvars && MiscItem)
					{
						double truemultbase = multbase *= kc_enemyscalemapmultiplier;
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult2 = 0.00275;
							if (skill == 1) mult2 = 0.002625;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002375;
							if (skill >= 4) mult2 = 0.00225;
						}
						else
						{
							if (skill <= 0) mult2 = 0.00225;
							if (skill == 1) mult2 = 0.002375;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002625;
							if (skill >= 4) mult2 = 0.00275;
						}
						mult2 *= (random(2,4) * 0.9);
						mult2 *= (1.0 + ((random(5,10) * 0.0125) * monsterrating));
						mult2 *= truemultbase;
						if (isCCardsMini)
						{
							if (isCCardsMiniAv) mult2 *= 0.875;
														 else mult2 *= 0.5;
						}

						MapCheck = globalvars.MapsFinished;

						MapCheck += MapDifficultyInflation;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d), monsterrating: %d", MapCheck, MapDifficultyInflation, monsterrating);

						MapCheck = MapCheck * (100 + MapDifficultyInflationPercent) / 100;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%), monsterrating: %d", MapCheck, (100 + MapDifficultyInflationPercent), monsterrating);

						// Attack
						double baseatkmulti2 = (MapCheck * mult2);
						if (MapCheck >= 1 && MapCheck <= 6) baseatkmulti2 *= 1.0125;
						if (MapCheck >= 7 && MapCheck <= 11) baseatkmulti2 *= 1.025;
						if (MapCheck >= 12 && MapCheck <= 20) baseatkmulti2 *= 1.0375;
						if (MapCheck >= 21 && MapCheck <= 30) baseatkmulti2 *= 1.05;
						if (MapCheck >= 31 && MapCheck <= 40) baseatkmulti2 *= 1.0625;
						if (MapCheck >= 41 && MapCheck <= 50) baseatkmulti2 *= 1.075;
						if (MapCheck >= 51 && MapCheck <= 60) baseatkmulti2 *= 1.0875;
						if (MapCheck >= 61 && MapCheck <= 70) baseatkmulti2 *= 1.10;
						if (MapCheck >= 71 && MapCheck <= 80) baseatkmulti2 *= 1.125;
						if (MapCheck >= 81 && MapCheck <= 90) baseatkmulti2 *= 1.25;
						if (MapCheck >= 91 && MapCheck <= 100) baseatkmulti2 *= 1.375;
						if (MapCheck >= 101 && MapCheck <= 125) baseatkmulti2 *= 1.5;
						if (MapCheck >= 126 && MapCheck <= 150) baseatkmulti2 *= 1.625;
						if (MapCheck >= 151 && MapCheck <= 175) baseatkmulti2 *= 1.75;
						if (MapCheck >= 176 && MapCheck <= 200) baseatkmulti2 *= 1.875;
						if (MapCheck >= 201) baseatkmulti2 *= 2.0;

						if (ninelivescurse)
						{
							if (nineliveslifecount >= 9)
							{
								baseatkmulti2 *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.125,0.1667)));
							}
							else
							if (nineliveslifecount >= 4 && nineliveslifecount <= 8)
							{
								baseatkmulti2 *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.0625,0.08334)));
							}
							else
							{
								baseatkmulti2 *= (1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.03125,0.041667)));
							}
						}
						atkmulti2 = baseatkmulti2;
						//
						if (kcdebug_monsterscaling) Console.Printf("atkmulti2: %.8f", atkmulti2);

						// Defense
						defmulti2 = 1.0 / (atkmulti2 + 1.0);
						//
						defmulti2 -= 1.0;
						if (kcdebug_monsterscaling) Console.Printf("defmulti2: %.8f", defmulti2);

						// Speed
						spdmulti2 = (atkmulti2 * 0.3125);
						//
						if (kcdebug_monsterscaling) Console.Printf("spdmulti2: %.8f", spdmulti2);

						// Mass
						massmulti2 = atkmulti2 * 0.667;
						//
						if (kcdebug_monsterscaling) Console.Printf("massmulti2: %.8f", massmulti2);

						// Health
						hpmulti2 = atkmulti2 * 0.667;
						//
						if (kcdebug_monsterscaling) Console.Printf("hpmulti2: %.8f", hpmulti2);
					}

					// Final Calcs
					double tempfinmulti = 1.0;
					if (spdmulti || spdmulti2)
					{
						tempfinmulti = 1.0;
						double SpeedErrorRange = (spdmulti * 0.125);
						spdmulti += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti);

						SpeedErrorRange = (spdmulti2 * 0.0625);
						spdmulti2 += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti2);

						double maxtempfin = 5.00 + (monsterrating * (1.25 * 0.500));
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						spawnee.Speed *= tempfinmulti;

						if (kcdebug_monsterscaling) Console.Printf("\c[lightblue]Speed: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.Speed, origSpd, spdmulti, spdmulti2);
					}
					if (atkmulti || atkmulti2)
					{
						tempfinmulti = 1.0;
						double AttackErrorRange = (atkmulti * 0.125);
						atkmulti += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti);

						AttackErrorRange = (atkmulti2 * 0.0625);
						atkmulti2 += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti2);

						double maxtempfin = 15.0 + (monsterrating * 1.875);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;

						spawnee.DamageMultiply = tempfinmulti;
						if (kcdebug_monsterscaling) Console.Printf("\c[red]DamageMultiply: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageMultiply, origDmgMul, atkmulti, atkmulti2);
					}
					if (defmulti || defmulti2)
					{
						tempfinmulti = 1.0;
						double DefenseErrorRange = (defmulti * 0.125);
						defmulti += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti);

						DefenseErrorRange = (defmulti2 * 0.0625);
						defmulti2 += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti2);
						double maxtempfin = (0.0667 - (monsterrating * 0.00334));
						if (tempfinmulti < maxtempfin) maxtempfin = maxtempfin;

						spawnee.DamageFactor = tempfinmulti;
						if (kcdebug_monsterscaling) Console.Printf("\c[olive]DamageFactor: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageFactor, origDmgFct, defmulti, defmulti2);
					}
					if (hpmulti || hpmulti2)
					{
						tempfinmulti = 0;
						double MaxHPErrorRange = (hpmulti * 0.125);
						hpmulti += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti;

						MaxHPErrorRange = (hpmulti2 * 0.0625);
						hpmulti2 += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.SpawnHealth() * maxtempfin)) tempfinmulti = (spawnee.SpawnHealth() * maxtempfin);

						spawnee.health *= (1.0 + tempfinmulti);
						spawnee.Stamina = (spawnee.health - spawnee.SpawnHealth());
						if (kcdebug_monsterscaling) Console.Printf("\c[brick]Health: %d (stam: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.health, spawnee.Stamina, origHealth, hpmulti, hpmulti2);
					}
					if (massmulti || massmulti2)
					{
						tempfinmulti = 0;
						double MassErrorRange = (massmulti * 0.125);
						massmulti += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti;

						MassErrorRange = (massmulti2 * 0.0625);
						massmulti2 += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.default.mass * maxtempfin)) tempfinmulti = (spawnee.default.mass * maxtempfin);

						spawnee.mass *= (1.0 + tempfinmulti);
						spawnee.Accuracy = (spawnee.mass - spawnee.default.mass);
						if (kcdebug_monsterscaling) Console.Printf("\c[brown]Mass: %d (Acc: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.Mass, spawnee.Accuracy, origMass, massmulti, massmulti2);
					}
				}
				if (kcdebug_monsterscaling) Console.Printf("\c[orange]monsterlevel: %d, monsterrating: %d", monsterlevel, monsterrating);

				if (LevelCheck)
				{
					if (random(1,100) <= random(11,13))
					{
						if (skill <= 0) LevelCheck *= frandompick(1.00,1.0078125,1.0078125,1.0078125,1.0078125,1.0078125,1.015625);
						if (skill == 1) LevelCheck *= frandompick(1.00,1.015625,1.015625,1.015625,1.015625,1.015625,1.03125);
						if (skill == 2) LevelCheck *= frandompick(1.00,1.03125,1.03125,1.03125,1.03125,1.03125,1.0625);
						if (skill == 3) LevelCheck *= frandompick(1.00,1.0625,1.0625,1.0625,1.0625,1.0625,1.125);
						if (skill >= 4) LevelCheck *= frandompick(1.00,1.125,1.125,1.125,1.125,1.125,1.25);
					}

					spawnee.A_SetInventory("MonsterLevel",LevelCheck);
					spawnee.A_SetInventory("MonsterRating",monsterrating);
					monsterlevel = spawnee.CountInv("MonsterLevel");
					monsterrating = spawnee.CountInv("MonsterRating");
					if (kcdebug_monsterscaling) Console.Printf("Actor's Level: %d [%d], Actor's Rating: %d [%d]", LevelCheck, spawnee.CountInv("MonsterLevel"), monsterrating, spawnee.CountInv("MonsterRating"));
				}
				string montag = spawnee.GetTag();
				if (e1m8baron ||
						e2m8cyber ||
						e34m8spider)
				{
					if (e1m8baron) montag.AppendFormat(" Ascendant", monsterlevel);
					if (e2m8cyber) montag.AppendFormat(" Lord", monsterlevel);
					if (e34m8spider) montag.AppendFormat(" Queen", monsterlevel);
				}
				montag = spawnee.GetTag();
				montag.AppendFormat(" \c[gold](L%d)\c-", monsterlevel);
				spawnee.SetTag(montag);

				KCCreature spawnee2;
				spawnee2 = KCCreature(spawnee);
				if (spawnee2 && spawnee2.user_rankpreset)
				{
					spawnee2.A_SetInventory("MonsterRating",spawnee2.user_rankpreset);
					monsterrating = spawnee2.CountInv("MonsterRating");
					monsterrating = spawnee2.user_rankpreset;
				}
				if (monsterrating)
				{
					spawnee.A_SetInventory("MonsterRating",monsterrating);
					string montag = spawnee.GetTag();
					if (monsterrating == 8) montag.AppendFormat(" \c[purple]<SSS>\c-");
					else if (monsterrating == 7) montag.AppendFormat(" \c[fire]<SS>\c-");
					else if (monsterrating == 6) montag.AppendFormat(" \c[red][S]\c-");
					else if (monsterrating == 5) montag.AppendFormat(" \c[brick][A]\c-");
					else if (monsterrating == 4) montag.AppendFormat(" \c[orange][B]\c-");
					else if (monsterrating == 3) montag.AppendFormat(" \c[yellow][C]\c-");
					else if (monsterrating == 2) montag.AppendFormat(" \c[green][D]\c-");
					else if (monsterrating == 1) montag.AppendFormat(" \c[sapphire][E]\c-");
					spawnee.SetTag(montag);
				}

				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials(spawnee,monsterlevel,monsterrating);
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials2(spawnee,monsterlevel,monsterrating);
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials3(spawnee,monsterlevel,monsterrating);
				if (!LD_nomonsters) A_LegendaryCheck(spawnee);
				//if (!A_CheckUOHYM()) [spawnee, monsterlevel, monsterrating] = SetUpMiracles(spawnee,monsterlevel,monsterrating);
			}
		}
		KCCreature spawnee2;
		spawnee2 = KCCreature(spawnee);
		if (spawnee2)
		{
			spawnee2.A_SetInventory("ActorMaxHP",spawnee2.user_MaxHP);
			if (spawnee2.isasummonedclone)
			{
				spawnee2.user_MaxHP *= 0.25;
				spawnee2.health *= 0.25;
			}

			spawnee2.user_MaxHP = spawnee2.SpawnHealth() + spawnee2.Stamina;
			double RangeVar;
			int Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPBuffRange = Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			RangeVar /= 3;
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPLowBuffRange = Temp;

			spawnee2.user_HPXDeathRange = (spawnee2.user_MaxHP * -1.0);
			if (spawnee2.GetClassName() == "BloodZombieNew") spawnee2.user_HPXDeathRange2 = (spawnee2.user_MaxHP * -0.5);

			if (skill <= 0) RangeVar = 0.080; // 8.0%
			if (skill == 1) RangeVar = 0.120; // 12.0%
			if (skill == 2) RangeVar = 0.160; // 16.0%
			if (skill == 3) RangeVar = 0.200; // 20.0%
			if (skill >= 4) RangeVar = 0.240; // 24.0%
			spawnee2.user_HPLowRange = (spawnee2.user_MaxHP * RangeVar);

			if (skill <= 0) RangeVar = 0.010; // 1.0%
			if (skill == 1) RangeVar = 0.015; // 1.5%
			if (skill == 2) RangeVar = 0.020; // 2.0%
			if (skill == 3) RangeVar = 0.025; // 2.5%
			if (skill >= 4) RangeVar = 0.030; // 3.0%
			spawnee2.user_HPCritRange = (spawnee2.user_MaxHP * RangeVar);
		}
	}

	int CountPlayers()
	{
		int count = 0, i;

		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i]) count++;
		}
		return count;
	}

	void A_LegendaryCheck(actor spawnee)
	{
		class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
		string spawnname = spawnee.GetClassName();
		KCCreature spawnee2;
		spawnee2 = KCCreature(spawnee);

		bool NoLegendary;
		bool boo;
		bool LEGENDARIFY;
		bool LEGENDARIFYSuccess;
		bool BOSSTIEM;
		bool BOSSACTIVAAAATE;

		if (spawnee)
		{
			String nm = "LDLegendaryMonsterTracker";
			LDLPreload = nm;

			if (!(spawnname ~== "PeasantNew" ||
						spawnname ~== "Peasant1New" ||
						spawnname ~== "Peasant2New" ||
						spawnname ~== "Peasant3New" ||
						spawnname ~== "Peasant4New" ||
						spawnname ~== "Peasant5New" ||
						spawnname ~== "Peasant6New" ||
						spawnname ~== "Peasant7New" ||
						spawnname ~== "Peasant8New" ||
						spawnname ~== "Peasant9New" ||
						spawnname ~== "Peasant10New" ||
						spawnname ~== "Peasant11New" ||
						spawnname ~== "Peasant12New" ||
						spawnname ~== "Peasant13New" ||
						spawnname ~== "Peasant14New" ||
						spawnname ~== "Peasant15New" ||
						spawnname ~== "Peasant16New" ||
						spawnname ~== "Peasant17New" ||
						spawnname ~== "Peasant18New" ||
						spawnname ~== "Peasant19New" ||
						spawnname ~== "Peasant20New" ||
						spawnname ~== "Peasant21New" ||
						spawnname ~== "Peasant22New" ||
						spawnname ~== "BeggarNew" ||
						spawnname ~== "Beggar1New" ||
						spawnname ~== "Beggar2New" ||
						spawnname ~== "Beggar3New" ||
						spawnname ~== "Beggar4New" ||
						spawnname ~== "Beggar5New" ||
						spawnname ~== "MerchantNew" ||
						spawnname ~== "WeaponSmithNew" ||
						spawnname ~== "BarKeepNew" ||
						spawnname ~== "ArmorerNew" ||
						spawnname ~== "MedicNew"))
			{
				String nn;
				if (A_CheckUOHYM())
				{
					nn = "MirrorArchvile"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "ChildhoodNightmare"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "KevCerberus"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "Hellfish"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "SkinStealer"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "BabyFish"; if (spawnname == nn)

					{
						if (random(1,2) == 1) NoLegendary = true;
														 else LEGENDARIFYSuccess = true;
					}
					nn = "BestBuddy"; if (spawnname == nn) NoLegendary = true;
					nn = "BestBuddyLayingDown"; if (spawnname == nn) NoLegendary = true;
				}

				if (!NoLegendary && !BOSSACTIVAAAATE && !LEGENDARIFYSuccess)
				{
					KCCreature KCC;
					KCC = KCCreature(spawnee);
					if (KCC && KCC.user_ldlautolegendary)
					{
						if (KCC.bBOSS) BOSSACTIVAAAATE = true;
						else LEGENDARIFYSuccess = true;
					}
				}

				int ldlchance = ((CountPlayers() * 4) + (LD_legendarychance * 5));
				if (kcLDL_newldlchances) // uses the chances from LDL 4.1
				{
					if (skill <= 0) ldlchance = (random(0,4) + (CountPlayers() * 4) + (LD_legendarychance * 5)); // Very Easy
					if (skill == 1) ldlchance = (random(0,6) + (CountPlayers() * 6) + (LD_legendarychance * 5)); // Easy
					if (skill == 2) ldlchance = (random(0,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(0,10) + (CountPlayers() * 10) + (LD_legendarychance * 5)); // Hard
					if (skill == 4) ldlchance = (random(0,20) + (CountPlayers() * 20) + (LD_legendarychance * 5)); // Very Hard
					if (skill == 5) ldlchance = (random(0,25) + (CountPlayers() * 25) + (LD_legendarychance * random(4,6))); // Extreme
					if (skill == 6) ldlchance = (random(0,30) + (CountPlayers() * 30) + (LD_legendarychance * random(4,6))); // Horrible
					if (skill == 7) ldlchance = (random(0,35) + (CountPlayers() * 35) + (LD_legendarychance * random(3,7))); // Impossible
					if (skill >= 8) ldlchance = (random(0,40) + (CountPlayers() * 40) + (LD_legendarychance * random(2,8))); // Omega
				}
				else // uses the older-skool chances of EE/Aetherius [which is based on LDL 3.0]
				{
					if (skill <= 0) ldlchance = (random(2,4) + (CountPlayers() * 4) + (LD_legendarychance * 3)); // Very Easy
					if (skill == 1) ldlchance = (random(3,6) + (CountPlayers() * 6) + (LD_legendarychance * 4)); // Easy
					if (skill == 2) ldlchance = (random(4,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(5,10) + (CountPlayers() * 10) + (LD_legendarychance * 6)); // Hard
					if (skill == 4) ldlchance = (random(7,14) + (CountPlayers() * 14) + (LD_legendarychance * 7)); // Very Hard
					if (skill == 5) ldlchance = (random(8,18) + (CountPlayers() * 18) + (LD_legendarychance * 8)); // Extreme
					if (skill == 6) ldlchance = (random(11,22) + (CountPlayers() * 22) + (LD_legendarychance * 9)); // Horrible
					if (skill == 7) ldlchance = (random(13,27) + (CountPlayers() * 27) + (LD_legendarychance * 10)); // Impossible
					if (skill >= 8) ldlchance = (random(16,32) + (CountPlayers() * 32) + (LD_legendarychance * 11)); // Omega
				}
				if (LD_legendarydebug) Console.Printf("[%s @ %p] chance: %d / 256", spawnname, spawnee, ldlchance);

				if (NoLegendary || LEGENDARIFYSuccess || BOSSACTIVAAAATE) { }
				else
				{
					if (LD_nomonsters == 1)
					{
						if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nomonsters == 1", spawnname, spawnee);
						NoLegendary = true; // NoLegendary
					}
					else
					{
						if (LD_nobosses == 2) // BOSSCheckeroonie
						{
							if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nobosses == 2", spawnname, spawnee);
							if (spawnee.bBOSS) BOSSACTIVAAAATE = true; // BOSSACTIVAAAATE
														else LEGENDARIFY = true; // DifficultyChance
						}
						else
						{
							if (LD_legendarydebug) Console.Printf("\c[darkgreen][%s @ %p] LD_nobosses != 2", spawnname, spawnee);
							if (LD_diemode == 1) LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
															else LEGENDARIFY = true; // DifficultyChance
						}
					}

					// bool checks
					if (LEGENDARIFY)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] LEGENDARIFY", spawnname, spawnee);
						if (random(1,256) <= ldlchance) // LEGENDARIFY
						{
							if (spawnee.bSPECIAL) NoLegendary = true;
							else
							{
								if (LD_monstercheck == 0) // Makes it ignore the next check if disabled
								{
									int chance2 = 160;
									if (kcLDL_newldlchances) chance2 = 240;
									if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																					else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
								}
								else boo = true; // Added to stop stuff like legendary trees
							}
						}
					}
					if (BOSSTIEM)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] BOSSTIEM", spawnee.GetClassName(), spawnee);
						if (LD_nobosses == 1) NoLegendary = true; // NoLegendary
						else
						{
							int chance2 = 120;
							if (kcLDL_newldlchances) chance2 = 180;
							if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																			else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
						}
					}

					if (boo)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] boo", spawnee.GetClassName(), spawnee);
						if (spawnee.bCOUNTKILL || A_CheckUOHYM()) // Boo
						{
							if (spawnee.bBOSS) BOSSTIEM = true; // BOSSTIEM
							else
							{
								int chance2 = 160;
								if (kcLDL_newldlchances) chance2 = 240;
								if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																				else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
							}
						}
					}
				}

				// bool checks
				if (BOSSACTIVAAAATE)
				{
					if (LD_legendarydebug) Console.Printf("\c[sapphire][%s @ %p] BOSSACTIVAAAATE", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterBossMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION);
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // BRING THE PAIN
					return;
				}
				else
				if (LEGENDARIFYSuccess)
				{
					if (LD_legendarydebug) Console.Printf("\c[gold][%s @ %p] LEGENDARIFYSuccess", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION);
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // POWER UP TIME
					return;
				}
				else
				if (NoLegendary)
				{
					if (LD_legendarydebug) Console.Printf("\c[red][%s @ %p] NoLegendary", spawnee.GetClassName(), spawnee);
					return;
				}
			}
		}
	}


	void A_BloomMonsterNames(actor spawnee)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();

		//Console.Printf("@!# [%s]", spawnname);
		if (A_CheckBlooM())
		{
			if (spawnname ~== "PlayerBurner") spawnee.SetTag("Being Lit On Fire");

			//Console.Printf("bn24 [%s]", spawnname);
			if (spawnname ~== "Zombieman_") spawnee.SetTag("Zombieman");
			if (spawnname ~== "ShotgunGuy_") spawnee.SetTag("Shotgun Guy");
			if (spawnname ~== "ChaingunGuy_") spawnee.SetTag("Chaingun Guy");
			if (spawnname ~== "DoomImp_") spawnee.SetTag("Imp");
			if (spawnname ~== "Demon_") spawnee.SetTag("Pinky Demon");
			if (spawnname ~== "Spectre_") spawnee.SetTag("Pinky Spectre");
			if (spawnname ~== "LostSoul_") spawnee.SetTag("Lost Soul");
			if (spawnname ~== "Cacodemon_") spawnee.SetTag("Cacodemon");
			if (spawnname ~== "PainElemental_") spawnee.SetTag("Pain Elemental");
			if (spawnname ~== "Arachnotron_") spawnee.SetTag("Arachnotron");
			if (spawnname ~== "Revenant_") spawnee.SetTag("Revenant");
			if (spawnname ~== "Fatso_") spawnee.SetTag("Mancubus");
			if (spawnname ~== "Archvile_") spawnee.SetTag("Archvile");
			if (spawnname ~== "HellKnight_") spawnee.SetTag("Hell Knight");
			if (spawnname ~== "BaronOfHell_") spawnee.SetTag("Baron of Hell");
			if (spawnname ~== "SpiderMastermind_") spawnee.SetTag("Spider Mastermind");
			if (spawnname ~== "Cyberdemon_") spawnee.SetTag("CyberDemon");

			if (spawnname ~== "BloodGargoyle") spawnee.SetTag("Flesh Gargoyle");
			if (spawnname ~== "BloatedButcher") spawnee.SetTag("Bloated Butcher");
			if (spawnname ~== "BrownCultist") spawnee.SetTag("Cabal Cultist");
			if (spawnname ~== "GreyCultist") spawnee.SetTag("Cabal Fanatic");
			if (spawnname ~== "GreenCultist") spawnee.SetTag("Cabal Ackolyte");
			if (spawnname ~== "BlueCultist") spawnee.SetTag("Cabal Zealot");
			if (spawnname ~== "RedCultist") spawnee.SetTag("Cabal Priest");
			if (spawnname ~== "BloodZombie") spawnee.SetTag("Axe Zombie");
			if (spawnname ~== "BuriedZombie") spawnee.SetTag("Axe Zombie");
			if (spawnname ~== "GillBeast") spawnee.SetTag("Gill Beast");
			if (spawnname ~== "HellFish") spawnee.SetTag("Bone Eel");
			if (spawnname ~== "ChokingHand") spawnee.SetTag("Hell Hand");
			if (spawnname ~== "Phantasm") spawnee.SetTag("Phantasm");
			if (spawnname ~== "HellHound") spawnee.SetTag("Hellhound");
			if (spawnname ~== "BloodBeast") spawnee.SetTag("Stone Beast");
			if (spawnname ~== "Cheogh") spawnee.SetTag("Cheogh");
			if (spawnname ~== "SpiderMother") spawnee.SetTag("Shial");
			if (spawnname ~== "Cerberus") spawnee.SetTag("Cerberus");
			if (spawnname ~== "Tchernobog") spawnee.SetTag("Tchernobog");
			if (spawnname ~== "ChrysalidPod") spawnee.SetTag("Chrysalid Pod");
			if (spawnname ~== "LavaPod") spawnee.SetTag("Magma Pod");
			if (spawnname ~== "BatFamiliar") spawnee.SetTag("Bat");
			if (spawnname ~== "BloodRat") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatBlack") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatGrey") spawnee.SetTag("Rat");
			if (spawnname ~== "BloodRatWhite") spawnee.SetTag("Rat");
			if (spawnname ~== "NewSpiderRed") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "NewRedSpider") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "SpiderClimber") spawnee.SetTag("Spider [Red]");
			if (spawnname ~== "SpiderGreen") spawnee.SetTag("Spider [Green]");
			if (spawnname ~== "GreenSpider") spawnee.SetTag("Spider [Green]");
			if (spawnname ~== "YellowSpider") spawnee.SetTag("Spider [Yellow]");
			if (spawnname ~== "SpiderYellow") spawnee.SetTag("Spider [Yellow]");
			if (spawnname ~== "BlackSpider") spawnee.SetTag("Spider [Black]");
			if (spawnname ~== "SpiderBlack") spawnee.SetTag("Spider [Black]");
			if (spawnname ~== "BlueSpider") spawnee.SetTag("Spider [Blue]");
			if (spawnname ~== "SpiderBlue") spawnee.SetTag("Spider [Blue]");
			if (spawnname ~== "CyanSpider") spawnee.SetTag("Spider [Cyan]");
			if (spawnname ~== "SpiderCyan") spawnee.SetTag("Spider [Cyan]");
			if (spawnname ~== "PurpleSpider") spawnee.SetTag("Spider [Purple]");
			if (spawnname ~== "SpiderPurple") spawnee.SetTag("Spider [Purple]");
			if (spawnname ~== "WhiteSpider") spawnee.SetTag("Spider [White]");
			if (spawnname ~== "SpiderWhite") spawnee.SetTag("Spider [White]");

			A_BloomMonsterNames2(spawnee);

			//Console.Printf("bn24- [%s]", spawnee.GetTag());
		}
	}

	void A_BloomMonsterNames2(actor spawnee)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();

		//Console.Printf("@!# [%s]", spawnname);
		if (A_CheckBlooM())
		{
			//Console.Printf("bn24 [%s]", spawnname);
			if (spawnname ~== "PossessedZombieMan") spawnee.SetTag("Possessed Zombieman");
			if (spawnname ~== "PossessedShotgunGuy") spawnee.SetTag("Possessed Shotgun Guy");
			if (spawnname ~== "PossessedChaingunGuy") spawnee.SetTag("Possessed Chaingun Guy");
			if (spawnname ~== "Cacoyle") spawnee.SetTag("Cacoyle");
			if (spawnname ~== "Cacoyle_Variant") spawnee.SetTag("Cacoyle");
			if (spawnname ~== "GargoylSoul") spawnee.SetTag("Gargoyle Soul");
			if (spawnname ~== "Elemental_Gargoyle") spawnee.SetTag("Gargoyle Elemental");
			if (spawnname ~== "Gargovile") spawnee.SetTag("Gargovile");
			if (spawnname ~== "Flying_Gargovile") spawnee.SetTag("Gargovile [Flying]");
			if (spawnname ~== "ArchZombie") spawnee.SetTag("ArchZombie");

			if (spawnname ~== "KingCacoyle") spawnee.SetTag("Cacoyle King");
			if (spawnname ~== "CyberCheogh") spawnee.SetTag("Cyber-Cheogh");
			if (spawnname ~== "Sloth") spawnee.SetTag("Sloth");
			if (spawnname ~== "Pinkberus") spawnee.SetTag("Pinkberus Demon");
			if (spawnname ~== "TchernoDemon") spawnee.SetTag("Tcherno-Demon");
			if (spawnname ~== "Cyberbog") spawnee.SetTag("Cyber-Bog");
			if (spawnname ~== "HandMastermind") spawnee.SetTag("Hell-Hand Mastermind");
			if (spawnname ~== "HandSlavedmind") spawnee.SetTag("Hand Slavedmind");
			if (spawnname ~== "Cerbcubus") spawnee.SetTag("Cerbcubus");
			if (spawnname ~== "ShialMastermind") spawnee.SetTag("Shial Mothermind");
			if (spawnname ~== "Eeldercubus") spawnee.SetTag("Eeldercubus");
			if (spawnname ~== "Jojo") spawnee.SetTag("Jojo the Idiot Circus Boy");
			if (spawnname ~== "HoundKnightOfHell") spawnee.SetTag("Hound-Knight of Hell");
			if (spawnname ~== "HoundBaronOfHell") spawnee.SetTag("Hound-Baron of Hell");
			if (spawnname ~== "Arachnoid") spawnee.SetTag("Arachnoid");
			if (spawnname ~== "Green_Arachnopod") spawnee.SetTag("Green Arachnopod");
			if (spawnname ~== "Magma_Arachnopod") spawnee.SetTag("Magma Arachnopod");
			if (spawnname ~== "Ice_Arachnopod") spawnee.SetTag("Glacial Arachnopod");
			if (spawnname ~== "RomeroTron") spawnee.SetTag("RomeroTron v0.616");
			if (spawnname ~== "HellButcher") spawnee.SetTag("Butcher of Hell");
			if (spawnname ~== "HellButcherAlt") spawnee.SetTag("Butcher of Hell");
			if (spawnname ~== "ZombaronOfHell") spawnee.SetTag("ZomBaron of Hell");
			if (spawnname ~== "AxeZombaronOfHell") spawnee.SetTag("ZomBaron of Hell [w/ axe]");
			if (spawnname ~== "BuriedZombaronOfHell") spawnee.SetTag("ZomBaron of Hell");
			if (spawnname ~== "BuriedAxeZombaronOfHell") spawnee.SetTag("ZomBaron of Hell [w/ axe]");
			if (spawnname ~== "WereWolfOfHell") spawnee.SetTag("Stone-Beast of Hell");
			if (spawnname ~== "WereWolfOfHellAlt") spawnee.SetTag("Stone-Beast of Hell");
			if (spawnname ~== "Cvltimp") spawnee.SetTag("Imp Cultist");
			if (spawnname ~== "CvltimpAlt") spawnee.SetTag("Imp Cultist");
			if (spawnname ~== "DeepOneShot") spawnee.SetTag("Deelp One [Shotgun]");
			if (spawnname ~== "DeepOneChain") spawnee.SetTag("Deelp One [Chaingun]");
			if (spawnname ~== "DeepOneTri") spawnee.SetTag("Deelp One [Trident]");
			if (spawnname ~== "DemonHound") spawnee.SetTag("Pinky Hellhound");
			if (spawnname ~== "DemonHoundAlt") spawnee.SetTag("Pinky Hellhound");
			if (spawnname ~== "SpectreHoundHound") spawnee.SetTag("Spectre Hellhound");
			if (spawnname ~== "SpectreHoundHoundAlt") spawnee.SetTag("Spectre Hellhound");
			if (spawnname ~== "GargoDemon") spawnee.SetTag("Gargo-Demon");
			if (spawnname ~== "PinkGargoyle") spawnee.SetTag("Pinky Gargoyle");
			if (spawnname ~== "Eelcubus") spawnee.SetTag("Eelcubus");
			if (spawnname ~== "Gillcubus") spawnee.SetTag("Gillcubus");
			if (spawnname ~== "Fanatic_Chaingunner") spawnee.SetTag("Chaingunner Fanatic");
			if (spawnname ~== "Fanatic_ChaingunnerAlt") spawnee.SetTag("Chaingunner Fanatic");
			if (spawnname ~== "Ghost_Revenant") spawnee.SetTag("Phantasmal Revenant");
			if (spawnname ~== "Ghost_Revenant_Alt") spawnee.SetTag("Phantasmal Revenant");
			if (spawnname ~== "Shielded_Ghost_Revenant") spawnee.SetTag("Phantasmal Revenant [Shielded]");
			if (spawnname ~== "Shielded_Ghost_Revenant_Alt") spawnee.SetTag("Phantasmal Revenant [Shielded]");
			if (spawnname ~== "GhostRevenantTerrain") spawnee.SetTag("Ghostly Revenant");
			if (spawnname ~== "GhostRevenantTerrainAlt") spawnee.SetTag("Ghostly Revenant");
			if (spawnname ~== "RevenantMoron") spawnee.SetTag("Revenant??");
			if (spawnname ~== "RevenantMoronAlt") spawnee.SetTag("Revenant??");
			if (spawnname ~== "RevenantMoronAlt2") spawnee.SetTag("Revenant??");
			if (spawnname ~== "Ghoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "Ghoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "BuriedGhoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul1") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul2") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul3") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul4") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul5") spawnee.SetTag("Ghoul");
			if (spawnname ~== "FastBuriedGhoul6") spawnee.SetTag("Ghoul");
			if (spawnname ~== "RevenantMime") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "RevenantMimeAlt") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "RevenantMimeAlt2") spawnee.SetTag("Revenant Mime");
			if (spawnname ~== "Apocalyptic_NeoCvltist") spawnee.SetTag("NeoCultist");
			if (spawnname ~== "NeoCvltist") spawnee.SetTag("NeoCultist");
			if (spawnname ~== "PossessedApocalypticNeoCultist") spawnee.SetTag("NeoCultist [Possessed]");
			if (spawnname ~== "PossessedNeoCultist") spawnee.SetTag("NeoCultist [Possessed]");
			if (spawnname ~== "ShotgunMonk") spawnee.SetTag("Shotgunner Monk");
			if (spawnname ~== "RatDemon_Brown") spawnee.SetTag("Pinky Rat [Brown]");
			if (spawnname ~== "RatDemon_Grey") spawnee.SetTag("Pinky Rat [Grey]");
			if (spawnname ~== "RatDemon_Black") spawnee.SetTag("Pinky Rat [Black]");
			if (spawnname ~== "RatDemon_White") spawnee.SetTag("Pinky Rat [White]");
			if (spawnname ~== "ZombImp1") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp2") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp3") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp4") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ZombImp5") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp1") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp2") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp3") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp4") spawnee.SetTag("Zombimp");
			if (spawnname ~== "BuriedZombImp5") spawnee.SetTag("Zombimp");
			if (spawnname ~== "ChtonBloom") spawnee.SetTag("Chthon");
			if (spawnname ~== "AberrationMoron") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron2") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron3") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron4") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "AberrationMoron5") spawnee.SetTag("Aberrational Civilian");
			if (spawnname ~== "Moron") spawnee.SetTag("Civilian");
			//Console.Printf("bn24- [%s]", spawnee.GetTag());
		}
	}

	void A_SetMonsterProjNameTags(actor spawnee)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();

		A_BloomMonsterNames(spawnee);

		if (spawnname ~== "Zombieman") spawnee.SetTag("Zombieman");
		if (spawnname ~== "ShotgunGuy") spawnee.SetTag("Shotgun Guy");
		if (spawnname ~== "ChaingunGuy") spawnee.SetTag("Chaingun Guy");
		if (spawnname ~== "WolfensteinSS") spawnee.SetTag("Schutzstaffel");
		if (spawnname ~== "DoomImp") spawnee.SetTag("Imp");
		if (spawnname ~== "Demon") spawnee.SetTag("Pinky Demon");
		if (spawnname ~== "Spectre") spawnee.SetTag("Pinky Spectre");
		if (spawnname ~== "LostSoul") spawnee.SetTag("Lost Soul");
		if (spawnname ~== "Cacodemon") spawnee.SetTag("Cacodemon");
		if (spawnname ~== "PainElemental") spawnee.SetTag("Pain Elemental");
		if (spawnname ~== "Arachnotron") spawnee.SetTag("Arachnotron");
		if (spawnname ~== "Revenant") spawnee.SetTag("Revenant");
		if (spawnname ~== "Fatso") spawnee.SetTag("Mancubus");
		if (spawnname ~== "Archvile") spawnee.SetTag("Archvile");
		if (spawnname ~== "HellKnight") spawnee.SetTag("Hell Knight");
		if (spawnname ~== "BaronOfHell") spawnee.SetTag("Baron of Hell");
		if (spawnname ~== "SpiderMastermind") spawnee.SetTag("Spider Mastermind");
		if (spawnname ~== "Cyberdemon") spawnee.SetTag("CyberDemon");
		if (spawnname ~== "ZombiemanClassic") spawnee.SetTag("Zombieman");
		if (spawnname ~== "ShotgunGuyClassic") spawnee.SetTag("Shotgun Guy");
		if (spawnname ~== "ChaingunGuyClassic") spawnee.SetTag("Chaingun Guy");
		if (spawnname ~== "WolfensteinSSClassic") spawnee.SetTag("Schutzstaffel");
		if (spawnname ~== "DoomImpClassic") spawnee.SetTag("Imp");
		if (spawnname ~== "DemonClassic") spawnee.SetTag("Pinky Demon");
		if (spawnname ~== "SpectreClassic") spawnee.SetTag("Pinky Spectre");
		if (spawnname ~== "LostSoulClassic") spawnee.SetTag("Lost Soul");
		if (spawnname ~== "CacodemonClassic") spawnee.SetTag("Cacodemon");
		if (spawnname ~== "PainElementalClassic") spawnee.SetTag("Pain Elemental");
		if (spawnname ~== "ArachnotronClassic") spawnee.SetTag("Arachnotron");
		if (spawnname ~== "RevenantClassic") spawnee.SetTag("Revenant");
		if (spawnname ~== "FatsoClassic") spawnee.SetTag("Mancubus");
		if (spawnname ~== "ArchvileClassic") spawnee.SetTag("Archvile");
		if (spawnname ~== "HellKnightClassic") spawnee.SetTag("Hell Knight");
		if (spawnname ~== "BaronOfHellClassic") spawnee.SetTag("Baron of Hell");
		if (spawnname ~== "SpiderMastermindClassic") spawnee.SetTag("Spider Mastermind");
		if (spawnname ~== "CyberdemonClassic") spawnee.SetTag("CyberDemon");

		if (spawnname == "DoomImpBall")
		{
			spawnee.SetTag("Imp Fireball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "CacodemonBall")
		{
			spawnee.SetTag("Lightning Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "RevenantTracer")
		{
			spawnee.SetTag("Tracer Missile");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArachnotronPlasma")
		{
			spawnee.SetTag("Plasma Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArchvileFire")
		{
			spawnee.SetTag("Vile FireHex");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "BaronBall")
		{
			spawnee.SetTag("HellNoble Plasma");
			if (spawnee.target && HellKnight(spawnee.target))
			{
				spawnee.SetDamage((spawnee.Damage * 0.5));
				spawnee.scale.x *= 0.75;
				spawnee.scale.y *= 0.75;
			}
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "FatShot")
		{
			spawnee.SetTag("Flamer Shot");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "Rocket")
		{
			spawnee.SetTag("Rocket");
			ProjSetSpeed(spawnee);
		}
	}

	void A_SpawnerSetUp(actor spawnee, string spawnertype)
	{
		if (spawnee)
		{
			bool spawned;
			actor mo;
			if (kcdebug_monsterspawns) Console.Printf("\c[gold][pre] spawnee [%p]\c-: %s, total_monsters: %d", spawnee, spawnee.GetClassName(), level.total_monsters);
			if (spawnee.bSOLID) spawnee.bSOLID = false;
			[spawned, mo] = spawnee.A_SpawnItemEx(spawnertype,flags:SXF_TRANSFERAMBUSHFLAG|SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL,tid:spawnee.tid);
			if (mo)
			{
				mo.ChangeTID(spawnee.tid);
				if (spawnee.tid) spawnee.ChangeTID(0);
				mo.spawnflags = spawnee.spawnflags;
				mo.special = spawnee.special;
				mo.args[0] = spawnee.args[0];
				mo.args[1] = spawnee.args[1];
				mo.args[2] = spawnee.args[2];
				mo.args[3] = spawnee.args[3];
				mo.args[4] = spawnee.args[4];
				mo.bCOUNTSECRET = spawnee.bCOUNTSECRET;
				if (spawnee.bCOUNTSECRET) level.total_secrets -= 1;
				mo.bCOUNTKILL = spawnee.bCOUNTKILL;
				if (spawnee.bCOUNTKILL) level.total_monsters -= 1;
				mo.bCOUNTITEM = spawnee.bCOUNTITEM;
				if (spawnee.bCOUNTITEM) level.total_items -= 1;
				if (spawnee.bBOSSDEATH)
				{
					mo.bBOSSDEATH = spawnee.bBOSSDEATH;
					spawnee.bBOSSDEATH = false;
				}
				if (spawnee.bE1M8BOSS)
				{
					mo.bE1M8BOSS = spawnee.bE1M8BOSS;
					spawnee.bE1M8BOSS = false;
				}
				if (spawnee.bE2M8BOSS)
				{
					mo.bE2M8BOSS = spawnee.bE2M8BOSS;
					spawnee.bE2M8BOSS = false;
				}
				if (spawnee.bE3M8BOSS)
				{
					mo.bE3M8BOSS = spawnee.bE3M8BOSS;
					spawnee.bE3M8BOSS = false;
				}
				if (spawnee.bE4M8BOSS)
				{
					mo.bE4M8BOSS = spawnee.bE4M8BOSS;
					spawnee.bE4M8BOSS = false;
				}
				if (spawnee.bMAP07BOSS1)
				{
					mo.bMAP07BOSS1 = spawnee.bMAP07BOSS1;
					spawnee.bMAP07BOSS1 = false;
				}
				if (spawnee.bMAP07BOSS2)
				{
					mo.bMAP07BOSS2 = spawnee.bMAP07BOSS2;
					spawnee.bMAP07BOSS2 = false;
				}
				if (kcdebug_monsterspawns)
				{
					Console.Printf("spawnflags: %d, spawnee.spawnflags: %d", mo.spawnflags, spawnee.spawnflags);
					Console.Printf("special: %d, spawnee.special: %d", mo.special, spawnee.special);
					Console.Printf("tid: %d, spawnee.tid: %d", mo.tid, spawnee.tid);
					Console.Printf("args[0/1/2/3/4]: %d/%d/%d/%d/%d, spawnee.args[0/1/2/3/4]: %d/%d/%d/%d/%d", mo.args[0],mo.args[1],mo.args[2],mo.args[3],mo.args[4], spawnee.args[0],spawnee.args[1],spawnee.args[2],spawnee.args[3],spawnee.args[4]);
				}
			}
			//spawnee.A_BossDeath();
			spawnee.Destroy();
			if (kcdebug_monsterspawns) Console.Printf("\c[fire][post] spawnee [%p]\c-: %s, total_monsters: %d", spawnee, spawnee.GetClassName(), level.total_monsters);
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PLuck;
		if (MiscItem) PLuck = MiscItem.PlayerLUCK;
		KCCreature KCC;
		int TrueGameSkill = skill;

		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np, nq, nr, ns, nt;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		int user_base = 0;
		string usertype = "";
		double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
		int TruePlayerLevel = 0;
		if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

		if (spawnee)
		{
			string targname;

			if (spawnee.target) targname = spawnee.target.GetClassName();

			if (spawnee.bCOUNTITEM ||
					Ammo(spawnee) ||
					Weapon(spawnee) ||
					Medikit(spawnee) ||
					Stimpack(spawnee) ||
					Berserk(spawnee)) spawnee.bDONTGIB = true;

			if (level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1' &&
					level.mapname == "E1M8")
			{
				if (spawnee.bISMONSTER &&
						!spawnee.bCOUNTKILL)
				{
					Console.Printf("spawnee: %s", spawnee.GetClassName());
					spawnee.A_GiveInventory("E1M8ExitRoomMonster",1);
				}
			}

			bool exception = CheckExceptions(spawnee);
			if (!KCBaseZSC(spawnee) &&
					(spawnee.bISMONSTER ||
					spawnee.bSHOOTABLE) &&
					!exception)
			{
				if (spawnee.bISMONSTER)
				{
					if (A_CheckForHeiwaPlayer()) spawnee.bNOTIMEFREEZE = false;
				}

				if (ShieldPartBase(spawnee) ||
						TSArtifactSpawner(spawnee) ||
						BaseTimeSeraphArtifact(spawnee)) spawnee.bNOTIMEFREEZE = true;

				if (!(PlayerPawn(spawnee) ||
						 ExplosiveBarrel(spawnee) ||
						 ExplosiveBarrel2(spawnee) ||
						 ShieldPartBase(spawnee) ||
						 Pod(spawnee) ||
						 BossBrainNew(spawnee)))
					{
						spawnee.A_SetInventory("CompatVulnItem",1);
					}
			}

			if (ExplosiveBarrel(spawnee) ||
					ExplosiveBarrel2(spawnee) ||
					Pod(spawnee)) spawnee.bPUSHABLE = true;

			if (KCCreature(spawnee))
			{
				KCC = KCCreature(spawnee);
				if (KCC && KCC.bISMONSTER) KCC.ActorRandomBits = random();
			}

			if (HellCleric(spawnee))
			{
				spawnee.A_SpawnItemEx("HellClericDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
				spawnee.Destroy();
			}

			if (FlyingBalrog(spawnee))
			{
				spawnee.A_SpawnItemEx("FlyingBalrogDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
				spawnee.Destroy();
			}

			if (DoomImpBall(spawnee) ||
					FatShot(spawnee)) spawnee.DamageType = 'Fire';
			if (CacodemonBall(spawnee)) spawnee.DamageType = 'Lightning';
			if (ArachnotronPlasma(spawnee) ||
					PlasmaBall(spawnee)) spawnee.DamageType = 'Plasma';
			if (Rocket(spawnee)) spawnee.DamageType = 'Explosive';
			if (PlasmaBall1(spawnee) ||
					PlasmaBall2(spawnee)) spawnee.DamageType = 'BFG';
			if (ExplosiveBarrel(spawnee))
			{
				spawnee.DamageType = 'Explosive';
				spawnee.ProjectilePassHeight = 32;
			}
			nm = "CCards_Actor_EscapePortal";
			if (spawnname == nm)
			{
				bool spawned;
				actor escapeportal;
				[spawned, escapeportal] = spawnee.A_SpawnItemEx("KC_CCards_Actor_EscapePortal",flags:SXF_NOCHECKPOSITION,tid:spawnee.tid);
				if (escapeportal)
				{
					escapeportal.target = spawnee.target;
					spawnee.Destroy();
				}
			}

			nm = "CCards_Actor_BladeTrap";
			if (spawnname == nm)
			{
				spawnee.A_SpawnItemEx("KC_CCards_Actor_BladeTrap2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
				spawnee.Destroy();
			}

			nm = "CCards_Actor_CardExplosiveBarrel";
			if (spawnname == nm)
			{
				spawnee.DamageType = 'Explosive';
				spawnee.ProjectilePassHeight = 32;
			}
			nm = "CCards_Actor_MaestroBuster"; if (spawnname == nm) spawnee.DamageType = 'Plasma';
			nm = "CCards_Actor_PilotedMechPlasma"; if (spawnname == nm) spawnee.DamageType = 'Plasma';

			nm = "CCards_Actor_AngelWings";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_FairyLight";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_GasPod";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_NoxiousBurst";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_SafeSpawner";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_HotStartSpawner";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_AnnoyingDevil";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_HauntedGround";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_SpawnPod";
			if (spawnname == nm)
			{
				if (spawnee && spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
			}

			nm = "CCards_Actor_PriestPorridge";
			if (spawnname == nm)
			{
				spawnee.A_SpawnItemEx("KC_CCards_Actor_PriestPorridge",flags:SXF_NOCHECKPOSITION,tid:spawnee.tid);
				spawnee.Destroy();
			}
			nm = "CCards_Actor_HotPriestPorridge";
			if (spawnname == nm)
			{
				spawnee.A_SpawnItemEx("KC_CCards_Actor_HotPriestPorridge",flags:SXF_NOCHECKPOSITION,tid:spawnee.tid);
				spawnee.Destroy();
			}

			if (A_CheckKCTimeFreeze())
			{
				nm = "CCards_Actor_Shockwave";
				{
					if (spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
				}
				nm = "CCards_Actor_Cannibalism";
				{
					if (spawnee.bNOTIMEFREEZE) spawnee.bNOTIMEFREEZE = false;
				}
				nm = "CCards_Actor_AttentionDebuff";
				if (spawnname == nm)
				{
					if (spawnee.target) spawnee.target == null;
					if (spawnee.tracer) spawnee.tracer == null;
					for (int i = 0; i < 12; i++)
					{
						spawnee.A_StopSound(i);
					}
					spawnee.Destroy();
				}

				nm = "CCards_Actor_RainDamager";
				if (spawnname == nm)
				{
					if (spawnee.target) spawnee.target == null;
					if (spawnee.tracer) spawnee.tracer == null;
					for (int i = 0; i < 12; i++)
					{
						spawnee.A_StopSound(i);
					}
					spawnee.Destroy();
				}

				nm = "CCards_Actor_Confetti";
				if (spawnname == nm) spawnee.Destroy();
			}

			//
			Inventory invspawnee;
			invspawnee = Inventory(spawnee);
			if (invspawnee)
			{
				if (A_CheckBlooM())
				{
					if (YellowCard(invspawnee) || BlueCard(invspawnee) || RedCard(invspawnee)) invspawnee.PickupSound = "getkeycard";
					if (YellowSkull(invspawnee) || BlueSkull(invspawnee) || RedSkull(invspawnee)) invspawnee.PickupSound = "getskullkey";
				}
				string invspawnname = invspawnee.GetClassName();

				nm = "KDIZDGreenKey";
				nn = "KDIZDSilverKey";
				no = "KDIZDOrangeKey";
				np = "KDIZDRedKey";
				nq = "KDIZDBlueKey";
				nr = "KDIZDYellowKey";
				if (invspawnname == nm ||
						invspawnname == nn ||
						invspawnname == no ||
						invspawnname == np ||
						invspawnname == nq ||
						invspawnname == nr) invspawnee.PickupSound = "getkeycard";

				if (invspawnname == "RedCard" ||
						invspawnname == "BlueCard" ||
						invspawnname == "YellowCard")
				{
					invspawnee.Pickupsound = "getkeycard";
				}
				if (invspawnname == "RedSkull" ||
						invspawnname == "BlueSkull" ||
						invspawnname == "YellowSkull")
				{
					invspawnee.Pickupsound = "getskullkey";
				}
				if (invspawnname == "Clip")
				{
					invspawnee.Pickupsound = "getbulletclip";
					//invspawnee.PickupMessage() = "Picked up \cua clip of bullets\c-!";
				}
				if (invspawnname == "ClipBox")
				{
					invspawnee.Pickupsound = "getbulletbox";
					//invspawnee.PickupMessage() = "Picked up \cua box of bullets\c-!";
				}
				if (invspawnname == "Shell")
				{
					invspawnee.Pickupsound = "getfourshells";
				}
				if (invspawnname == "ShellBox")
				{
					invspawnee.Pickupsound = "getshellbox";
				}
				if (invspawnname == "RocketAmmo")
				{
					invspawnee.Pickupsound = "getsinglerocket";
				}
				if (invspawnname == "RocketBox")
				{
					invspawnee.Pickupsound = "getrocketbox";
				}
				if (invspawnname == "Cell")
				{
					invspawnee.Pickupsound = "getsmallcells";
				}
				if (invspawnname == "CellPack")
				{
					invspawnee.Pickupsound = "getcellpack";
				}
				if (invspawnname == "GreenArmor" ||
						invspawnname == "BlueArmor")
				{
					invspawnee.Pickupsound = "GetArmorFull";
				}
				if (invspawnname == "Stimpack" ||
						invspawnname == "Medikit")
				{
					invspawnee.Pickupsound = "gethealthkit";
				}
				if (invspawnname == "HealthBonus")
				{
					invspawnee.Pickupsound = "gethealthbonus";
				}
				if (invspawnname == "ArmorBonus")
				{
					invspawnee.Pickupsound = "getarmorbonus";
				}
			}

			if (true)
			{
				int basemonsterrating = spawnee.CountInv("MonsterRating");
				bool practicetarget;
				if (PracticeTarget(spawnee) || PracticeTarget2(spawnee)) practicetarget = true;

				KCCreature NightmareCreature;
				NightmareCreature = KCCreature(spawnee);
				if (NightmareCreature)
				{
					// Nightmare Monster Controls
					if (NightmareSpectre(NightmareCreature) ||
							NightmareBloodSpectre(NightmareCreature))
					{
						NightmareCreature.nightmarealphatimeroffset = random(-34,34);
						NightmareCreature.nightmarephaserand = random(0,6);
					}
				}

				// Tags
				double spdfactor;

				// Hell Ground
				if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && spawnname == "TechPillar") spawnee.SetTag("Netherhell Imp");

				// BlooM
				if (A_CheckBlooM()) spawnee.A_SetInventory("PlayingBlooM",1);

				// StrangeAeons
				if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1) spawnee.A_SetInventory("PlayingStrangeAeons",1);

				// SiGiL
				if (level.GetChecksum() == '61b546375618d619ab39eafd28f03c87' ||
						level.GetChecksum() == '0742076f6c57ed4d1174ebf8f0933b76' ||
						level.GetChecksum() == '3417a4859c8fece797c9daa715d14d63' ||
						level.GetChecksum() == 'aebf219bf02aaec549ba3ef8cb3f715b' ||
						level.GetChecksum() == '4e5d482364f6f787cb8efc17bde5d64d' ||
						level.GetChecksum() == '8e3fe80ae1440b38747853dab05dd62d' ||
						level.GetChecksum() == '8c35efba700537035c84f5e1ad35c064' ||
						level.GetChecksum() == '6ead80da1f30b4b3546fa294eef9f87c' ||
						level.GetChecksum() == '2a6b4d277f526bfb3adb122609feead7')
				{
					if (EvilEye(spawnee)) spawnee.bSOLID = false;
				}

				A_SetMonsterProjNameTags(spawnee);

				//

				if (KCProjectile(spawnee)) ProjSetSpeed(spawnee);
				else if (spawnee.bMISSILE) ProjSetSpeed(spawnee);

				// Changes
				int basehealth = spawnee.SpawnHealth();
				if (basehealth <= 0) Console.Printf("\c[red]WARNING: %s has 0 base health!\c-", spawnname);
				double healthmulfactor = 0.01;

				nm = "Balloon_Red"; extracheck = nm;
				nn = "Balloon_Red2"; extracheck2 = nn;
				if (spawnname == extracheck || spawnname == extracheck2)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Green";
						if (user_base == 3) usertype = "Balloon_Yellow";
					}
				}
				nm = "Balloon"; extracheck = nm;
				nn = "BallTarg"; extracheck2 = nn;
				if (spawnname == extracheck || spawnname == extracheck2)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallGreen";
						if (user_base == 2) usertype = "BallYel";
					}
				}

				nm = "Balloon_Yellow"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Green";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				nm = "BallYel"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallGreen";
						if (user_base == 2) usertype = "Balloon";
					}
				}

				nm = "Balloon_Green"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Yellow";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				nm = "BallGreen"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallYel";
						if (user_base == 2) usertype = "Balloon";
					}
				}

				nm = "Balloon_Blue"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Green";
						if (user_base == 2) usertype = "Balloon_Yellow";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				if (user_base)
				{
					//Console.Printf("%s [2]", spawnname);
					spawnee.A_SpawnItemEx(usertype,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
					spawnee.Destroy();
				}

				bool specialenemy = false;
				bool ispeasant = false;
				// Strife Peasants
				if (Peasant(spawnee)) ispeasant = true;

				nm = "IconOfSinBoss"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (Skill <= 0) healthmulfactor = 0.0075;
					if (Skill == 1) healthmulfactor = 0.00875;
					if (Skill == 2) healthmulfactor = 0.01;
					if (Skill == 3) healthmulfactor = 0.01125;
					if (Skill >= 4) healthmulfactor = 0.0125;
					basehealth *= (1.0 + (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 0.8;
					if (Skill == 1) basehealth *= 0.9;
					if (Skill == 2) basehealth *= 1;
					if (Skill == 3) basehealth *= 1.2;
					if (Skill >= 4) basehealth *= 1.4;
					//spawnee.health = basehealth;
				}

				// Eviternity's Archangelus Boss
				nm = "ArchangelusA"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (Skill <= 0) healthmulfactor = 0.0075;
					if (Skill == 1) healthmulfactor = 0.00875;
					if (Skill == 2) healthmulfactor = 0.01;
					if (Skill == 3) healthmulfactor = 0.01125;
					if (Skill >= 4) healthmulfactor = 0.0125;
					basehealth *= (1.0 + (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 12;
					if (Skill == 1) basehealth *= 14;
					if (Skill == 2) basehealth *= 16;
					if (Skill == 3) basehealth *= 18;
					if (Skill >= 4) basehealth *= 20;
					spawnee.health = basehealth;
				}

				nn = "ArchangelusB"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (Skill <= 0) healthmulfactor = 0.01125;
					if (Skill == 1) healthmulfactor = 0.013125;
					if (Skill == 2) healthmulfactor = 0.015;
					if (Skill == 3) healthmulfactor = 0.016875;
					if (Skill >= 4) healthmulfactor = 0.01875;
					basehealth *= (1.0 + (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 12;
					if (Skill == 1) basehealth *= 14;
					if (Skill == 2) basehealth *= 16;
					if (Skill == 3) basehealth *= 18;
					if (Skill >= 4) basehealth *= 20;
					spawnee.health = basehealth;
				}

				// ?????????? ??'s ???????????
				nm = "EviternatusAnta"; extracheck = nm;
				nm = "EviternatusBete"; extracheck = nm;
				nm = "EviternatusCeph"; extracheck = nm;

				nm = "Apocalipsist"; extracheck = nm;
				if (spawnname == extracheck && A_CheckForHeiwaPlayer()) spawnee.bNOTIMEFREEZE = false;

				// TUTNT's Source Boss
				nm = "TheSource"; extracheck = nm;
				if (spawnname == extracheck)
				{
					if (Skill <= 0) healthmulfactor = 0.005625;
					if (Skill == 1) healthmulfactor = 0.0065625;
					if (Skill == 2) healthmulfactor = 0.0075;
					if (Skill == 3) healthmulfactor = 0.0084375;
					if (Skill >= 4) healthmulfactor = 0.009375;
					basehealth *= (1.0 + (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 6;
					if (Skill == 1) basehealth *= 7;
					if (Skill == 2) basehealth *= 8;
					if (Skill == 3) basehealth *= 9;
					if (Skill >= 4) basehealth *= 10;
					//spawnee.health = basehealth;
					specialenemy = true;
				}

				if (basehealth <= 0) Console.Printf("\c[red]POST-WARNING: %s has 0 base health!\c-", spawnname);

				// Keeps the Romero Heads in AUGER ZENITH, which can't be attacked directly by the player, from being able to gain extra HP/Stats so they can be killed properly on MAP21
				if (playera.CountInv("PlayingAugerZenith") && (BossBrain(spawnee) || BossBrainNew(spawnee))) specialenemy = true;
				// Keeps the Romero Heads in Hell Ground MAP07 from being too strong. :P
				if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && (BossBrain(spawnee))) specialenemy = true;

				if (DoomImp(spawnee)) spawnee.PainSound = "imp/pain";
				if (LostSoul(spawnee))
				{
					spawnee.PainSound = "skull/pain";
					spawnee.bONLYSLAMSOLID = true;
				}
				if (WolfensteinSS(spawnee)) spawnee.PainSound = "nazi/pain";
				if (Cacodemon(spawnee)) spawnee.PainSound = "caco/pain";
				if (Revenant(spawnee))
				{
					spawnee.PainSound = "revenant/pain";
					spawnee.ProjectilePassHeight = 84;
				}
				if (RevenantNew(spawnee)) spawnee.ProjectilePassHeight = 84;
				if (Arachnotron(spawnee)) spawnee.PainSound = "arachnotron/pain";
				if (BaronOfHell(spawnee)) spawnee.PainSound = "baron/pain";
				if (HellKnight(spawnee)) spawnee.PainSound = "knight/pain";
				if (Cyberdemon(spawnee)) spawnee.PainSound = "cyberdemon/pain";
				if (SpiderMastermind(spawnee)) spawnee.PainSound = "mastermind/pain";

				if (Demon1(spawnee) || Demon2(spawnee)) spawnee.ProjectilePassHeight = 104;

				if (ArchvileFire(spawnee)) spawnee.A_SetRenderStyle(frandompick(0.50,0.625,0.75),STYLE_Add);

				// Monster "Scaling"
				MonsterStatsSet(spawnee, basemonsterrating, practicetarget, specialenemy, ispeasant);
			}

			//
			if (kc_usealteredmonsters)
			{
				// Custom
				if (spawnname ~== "ScriptedMarine") A_SpawnerSetUp(spawnee,"KCScriptedMarine");
				if (spawnname ~== "MarineFist") A_SpawnerSetUp(spawnee,"KCMarineFist");
				if (spawnname ~== "MarineBerserk") A_SpawnerSetUp(spawnee,"KCMarineBerserk");
				if (spawnname ~== "MarineBerserk") A_SpawnerSetUp(spawnee,"KCMarineChainsaw");
				if (spawnname ~== "MarineChainsaw") A_SpawnerSetUp(spawnee,"KCMarineChainsaw");
				if (spawnname ~== "MarinePistol") A_SpawnerSetUp(spawnee,"KCMarinePistol");
				if (spawnname ~== "MarineShotgun") A_SpawnerSetUp(spawnee,"KCMarineShotgun");
				if (spawnname ~== "MarineSSG") A_SpawnerSetUp(spawnee,"KCMarineSSG");
				if (spawnname ~== "MarineChaingun") A_SpawnerSetUp(spawnee,"KCMarineChaingun");
				if (spawnname ~== "MarineRocket") A_SpawnerSetUp(spawnee,"KCMarineRocket");
				if (spawnname ~== "MarinePlasma") A_SpawnerSetUp(spawnee,"KCMarinePlasma");
				if (spawnname ~== "MarineRailgun") A_SpawnerSetUp(spawnee,"KCMarineRailgun");
				if (spawnname ~== "MarineBFG") A_SpawnerSetUp(spawnee,"KCMarineBFG");
				// Doom
				//if (spawnname ~== "Zombieman") A_SpawnerSetUp(spawnee,"ZombiemanSpawner");
				//if (spawnname ~== "StealthZombieman") A_SpawnerSetUp(spawnee,"StealthZombiemanSpawner");
				//if (spawnname ~== "ShotgunGuy") A_SpawnerSetUp(spawnee,"ShotgunGuySpawner");
				//if (spawnname ~== "StealthShotgunGuy") A_SpawnerSetUp(spawnee,"StealthShotgunGuySpawner");
				//if (spawnname ~== "ChaingunGuy") A_SpawnerSetUp(spawnee,"ChaingunGuySpawner");
				//if (spawnname ~== "StealthChaingunGuy") A_SpawnerSetUp(spawnee,"StealthChaingunGuySpawner");
				//if (spawnname ~== "WolfensteinSS") A_SpawnerSetUp(spawnee,"WolfensteinSSSpawner");
				//if (spawnname ~== "DoomImp") A_SpawnerSetUp(spawnee,"DoomImpSpawner");
				//if (spawnname ~== "StealthDoomImp") A_SpawnerSetUp(spawnee,"StealthDoomImpSpawner");
				//if (spawnname ~== "Demon") A_SpawnerSetUp(spawnee,"DemonSpawner");
				//if (spawnname ~== "Spectre") A_SpawnerSetUp(spawnee,"SpectreSpawner");
				//if (spawnname ~== "StealthDemon") A_SpawnerSetUp(spawnee,"StealthDemonSpawner");
				//if (spawnname ~== "Cacodemon") A_SpawnerSetUp(spawnee,"CacodemonSpawner");
				//if (spawnname ~== "StealthCacodemon") A_SpawnerSetUp(spawnee,"StealthCacodemonSpawner");
				//if (spawnname ~== "LostSoul") A_SpawnerSetUp(spawnee,"LostSoulSpawner");
				//if (spawnname ~== "PainElemental") A_SpawnerSetUp(spawnee,"PainElementalSpawner");
				//if (spawnname ~== "HellKnight") A_SpawnerSetUp(spawnee,"HellKnightSpawner");
				//if (spawnname ~== "StealthHellKnight") A_SpawnerSetUp(spawnee,"StealthHellKnightSpawner");
				//if (spawnname ~== "BaronOfHell") A_SpawnerSetUp(spawnee,"BaronOfHellSpawner");
				//if (spawnname ~== "StealthBaron") A_SpawnerSetUp(spawnee,"StealthBaronSpawner");
				//if (spawnname ~== "Revenant") A_SpawnerSetUp(spawnee,"RevenantSpawner");
				//if (spawnname ~== "StealthRevenant") A_SpawnerSetUp(spawnee,"StealthRevenantSpawner");
				//if (spawnname ~== "Arachnotron") A_SpawnerSetUp(spawnee,"ArachnotronSpawner");
				//if (spawnname ~== "StealthArachnotron") A_SpawnerSetUp(spawnee,"StealthArachnotronSpawner");
				//if (spawnname ~== "Fatso") A_SpawnerSetUp(spawnee,"MancubusSpawner");
				//if (spawnname ~== "StealthFatso") A_SpawnerSetUp(spawnee,"StealthMancubusSpawner");
				//if (spawnname ~== "Archvile") A_SpawnerSetUp(spawnee,"ArchvileSpawner");
				//if (spawnname ~== "Cyberdemon") A_SpawnerSetUp(spawnee,"CyberdemonSpawner");
				//if (spawnname ~== "SpiderMastermind") A_SpawnerSetUp(spawnee,"SpiderMastermindSpawner");
				//if (spawnname ~== "BossBrain") A_SpawnerSetUp(spawnee,"BossBrainNew");
				//if (spawnname ~== "BossEye") A_SpawnerSetUp(spawnee,"BossEyeNew");
				//if (spawnname ~== "SpawnShot") A_SpawnerSetUp(spawnee,"SpawnShotNew");
				// Heretic
				if (spawnname ~== "Chicken") A_SpawnerSetUp(spawnee,"ChickenNew");
				if (spawnname ~== "HereticImp") A_SpawnerSetUp(spawnee,"GargoyleSpawner");
				if (spawnname ~== "HereticImpLeader") A_SpawnerSetUp(spawnee,"GargoyleLeaderSpawner");
				if (spawnname ~== "Mummy") A_SpawnerSetUp(spawnee,"GolemSpawner");
				if (spawnname ~== "MummyGhost") A_SpawnerSetUp(spawnee,"GolemGhostSpawner");
				if (spawnname ~== "MummyLeader") A_SpawnerSetUp(spawnee,"NitroGolemSpawner");
				if (spawnname ~== "MummyLeaderGhost") A_SpawnerSetUp(spawnee,"NitroGolemGhostSpawner");
				if (spawnname ~== "Knight") A_SpawnerSetUp(spawnee,"KnightSpawner");
				if (spawnname ~== "KnightGhost") A_SpawnerSetUp(spawnee,"KnightGhostSpawner");
				if (spawnname ~== "Wizard") A_SpawnerSetUp(spawnee,"WizardSpawner");
				if (spawnname ~== "IronLich") A_SpawnerSetUp(spawnee,"LichSpawner");
				if (spawnname ~== "Clink") A_SpawnerSetUp(spawnee,"ClinkSpawner");
				if (spawnname ~== "Beast") A_SpawnerSetUp(spawnee,"WeredragonSpawner");
				if (spawnname ~== "Minotaur") A_SpawnerSetUp(spawnee,"MaulotaurNew");
				if (spawnname ~== "Snake") A_SpawnerSetUp(spawnee,"SnakeSpawner");
				if (spawnname ~== "Sorcerer1") A_SpawnerSetUp(spawnee,"DSparilMountedNew");
				if (spawnname ~== "Sorcerer2") A_SpawnerSetUp(spawnee,"DSparilUnmountedNew");
				// Hexen
				if (spawnname ~== "Pig") A_SpawnerSetUp(spawnee,"PigNew");
				if (spawnname ~== "Ettin") A_SpawnerSetUp(spawnee,"EttinSpawner");
				if (spawnname ~== "FireDemon") A_SpawnerSetUp(spawnee,"AfritSpawner");
				if (spawnname ~== "Bishop") A_SpawnerSetUp(spawnee,"BishopSpawner");
				if (spawnname ~== "Serpent") A_SpawnerSetUp(spawnee,"StalkerSpawner");
				if (spawnname ~== "SerpentLeader") A_SpawnerSetUp(spawnee,"StalkerLeaderSpawner");
				if (spawnname ~== "Demon1") A_SpawnerSetUp(spawnee,"Demon1Spawner");
				if (spawnname ~== "Demon2") A_SpawnerSetUp(spawnee,"Demon2Spawner");
				if (spawnname ~== "Centaur") A_SpawnerSetUp(spawnee,"CentaurNew");
				if (spawnname ~== "CentaurLeader") A_SpawnerSetUp(spawnee,"SlaughtaurNew");
				if (spawnname ~== "IceGuy") A_SpawnerSetUp(spawnee,"IceGuyNew");
				if (spawnname ~== "Wraith") A_SpawnerSetUp(spawnee,"WraithNew");
				if (spawnname ~== "WraithBuried") A_SpawnerSetUp(spawnee,"WraithBuriedNew");
				if (spawnname ~== "Dragon") A_SpawnerSetUp(spawnee,"DragonNew");
				if (spawnname ~== "Heresiarch") A_SpawnerSetUp(spawnee,"HeresiarchNew");
				if (spawnname ~== "ClericBoss") A_SpawnerSetUp(spawnee,"ClericBossNew");
				if (spawnname ~== "FighterBoss") A_SpawnerSetUp(spawnee,"FighterBossNew");
				if (spawnname ~== "MageBoss") A_SpawnerSetUp(spawnee,"MageBossNew");
				if (spawnname ~== "Korax") A_SpawnerSetUp(spawnee,"KoraxNew");
			}

			if (TSArtifactSpawner(spawnee) ||
					BaseTimeSeraphArtifact(spawnee) ||
					ShieldPartBase(spawnee))
			{
				spawnee.bNOTIMEFREEZE = true;
				//Console.Printf("spawnee: \c[fire]%s", spawnee.GetClassName());
			}
		}

		Super.WorldThingSpawned(e);

		if (A_CheckUOHYM())
		{
			if (level.mapname == "MAP01" ||
					level.mapname == "20PAM" ||
					level.mapname == "MAP02")
			{
				// Billboarder
				// Written by Nash Muhandes
				bool isProjectile = e.Thing.bMissile;
				bool isPuff = (e.Thing is "BulletPuff" || e.Thing is "StrifePuff");
				bool isBlood = (e.Thing is "Blood");
				bool isSmokeTrail = (e.Thing is "RocketSmokeTrail" || e.Thing is "GrenadeSmokeTrail" || e.Thing is "RocketTrail");
				if (isProjectile || isPuff || isBlood || isSmokeTrail)
				{
					e.Thing.bForceXYBillboard = true;
				}
			}
		}
	}

	override void WorldThingRevived(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = KCGlobalVariables.Get();
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np, nq, nr, ns, nt;
			actor spawnee = e.thing;
			string spawnname = spawnee.GetClassName();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;


			if (spawnee)
			{
				if (KCCreature(spawnee) ||
						PlayerPawn(spawnee))
				{
				}
				else
				{
					string sndname = "Resurrection/Evil";
					if (spawnee.bISMONSTER && !spawnee.bFRIENDLY)
					{
						sndname = "Resurrection/Evil";
						if (spawnee.bBOSS) sndname = "Resurrection/EvilBig";
					}
					spawnee.A_StopSound(15);
					spawnee.A_StartSound(sndname,15,CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NONE,frandom(0.8,1.2));
					Console.Printf("\c[red]*\c- \c[purple]%s\c[red] has resurrected!\c-", spawnee.GetTag());
				}
				spawnee.A_SetInventory("LDLegendaryWasLegendary",0);

				DedMonsterFlag dedcheckitem;
				dedcheckitem = DedMonsterFlag(spawnee.FindInventory("DedMonsterFlag"));
				if (dedcheckitem)
				{
					spawnee.A_SetRenderStyle(dedcheckitem.ownerorigalpha,dedcheckitem.ownerorigrender);
					dedcheckitem.Destroy();
				}

				nm = "ClayDevilNew"; extracheck = nm;
				if (spawnname == extracheck)
				{
					spawnee.speed = spawnee.default.speed;
					spawnee.DamageMultiply = spawnee.default.DamageMultiply;
					spawnee.DamageFactor = spawnee.default.DamageFactor;
					spawnee.health = spawnee.SpawnHealth();
					spawnee.Mass = spawnee.default.mass;
					spawnee.SetTag(spawnee.default.GetTag());
					MonsterStatsSet(spawnee, 0, false, false, false);
				}

				if (kcdebug_ressurrectdisplays) Console.Printf("Res: Max Health - %d (%d + %d)", (spawnee.SpawnHealth() + spawnee.Stamina), spawnee.SpawnHealth(), spawnee.Stamina);
				if (spawnee.bISMONSTER && spawnee.Stamina > 0)
				{
					spawnee.A_SetInventory("JustRevived",1);
				}
			}
		}
		Super.WorldThingRevived(e);
	}

	override void WorldThingDamaged(WorldEvent e)
	{
		int TrueGameSkill = skill;
		if (Level.MapName != "TITLEMAP")
		{
			if (kcdebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			let globalvars = KCGlobalVariables.Get();
			//
			//
			actor victim = e.Thing;
			actor source = e.DamageSource;
			actor inflicter = e.inflictor;
			int dmg = e.damage;
			int initdmg = e.damage;
			string mod = e.damagetype;
			int flags = e.DamageFlags;
			int PLuck;
			int TrueLuck;
			int TruePlayerLevel = 0;
			bool isCCardsIllusion = false;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

			if (kcdebug_worlddamaged)
			{
				string debugmsg = "WorldThingDamaged";
				debugmsg.AppendFormat(" [gametic: %d]:", gametic);
				if (victim) debugmsg.AppendFormat(" %p [%s],", victim, victim.GetClassName());
				if (source) debugmsg.AppendFormat(" source: %p [%s]", source, source.GetClassName()); else debugmsg.AppendFormat("\c[red] no source\c-");
				if (inflicter) debugmsg.AppendFormat(" inflicter: %p [%s]", inflicter, inflicter.GetClassName()); else debugmsg.AppendFormat("\c[orange] no inflicter\c-");
				debugmsg.AppendFormat(", damage: %d, damagetype: %s, flags: %d", dmg, mod, flags);
				Console.Printf(debugmsg);
			}

			if (MiscItem)
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}

			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np, nq, nr, ns, nt;

			if (victim)
			{
				if (victim.bNOBLOOD == true &&
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false &&
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;

				if (kcdebug_hitsounds) Console.Printf("hitsounds (victim check)");
				int oldhealth = victim.health;
				string victname = victim.GetTag();
				string atkrname = "(?)";
				int user_type;
				string vict = "NONE";
				string infl = "NONE";
				string sour = "NONE";
				int landdamagebonus;

				if (victim) vict = victim.GetClassName();
				if (inflicter) infl = inflicter.GetClassName();
				if (source) sour = source.GetClassName();

				bool showdmglog;
				bool practicetarget;

				int specialtype, specialtype2;
				nm = "CCardGhostMarker"; if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker"; if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker"; if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne"; if (victim.GetClassName() == nm) specialtype += 8;
				nm = "KC_CCards_Actor_9LivesCurse"; if (victim.CountInv(nm)) specialtype += 16;
				nm = "CCards_Actor_PilotedMech"; if (victim.CountInv(nm)) specialtype += 32;
				nm = "CCards_Actor_Spider"; if (victim.GetClassName() == nm) specialtype += 128;
				nm = "CCards_SpookySkeleton"; if (victim.GetClassName() == nm) specialtype += 256;
				nm = "CCards_Boss_Romero"; if (victim.GetClassName() == nm) specialtype += 512;
				nm = "CCards_Actor_Bane"; if (victim.GetClassName() == nm) specialtype += 1024;
				nm = "CCards_Actor_Maestro"; if (victim.GetClassName() == nm) specialtype += 2048;
				nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) specialtype += 4096;
				nm = "CCards_Actor_HasRespawned"; if (victim.CountInv(nm)) specialtype += 8192;
				nm = "LostSoulEvit2"; if (victim.GetClassName() == nm) specialtype += 16384;
				nm = "CCards_Actor_Horror"; if (victim.GetClassName() == nm) specialtype += 32768;
				nm = "CCards_Actor_Cursed"; if (victim.CountInv(nm)) specialtype += 65536;
				nm = "CCards_Actor_FleaCurse"; if (victim.CountInv(nm)) specialtype += 131072;
				if (Wads.CheckNumForName("KC-STAEONS", Wads.ns_global, -1, true) != -1)
				{
					nm = "PurpleTentacle"; if (victim.GetClassName() == nm) specialtype2 += 4;
					nm = "Skeleton"; if (victim.GetClassName() == nm) specialtype2 += 8;
				}
				if (A_CheckUOHYM())
				{
					nm = "Mite"; if (victim.GetClassName() == nm) specialtype2 += 16;
					nm = "SkinStealer"; if (victim.GetClassName() == nm) specialtype2 += 32;
					if (victim.bISMONSTER) specialtype2 += 64;
				}
				if (kcdebug_worlddamaged) Console.Printf("[%s] SpecialType [WorldDamaged]: %d, %d", vict, specialtype, specialtype2);

				if (victim.bCOUNTKILL || specialtype || specialtype2) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim))
				{
					practicetarget = true;
					showdmglog = true;
				}
				if (BossBrainNew(victim)) showdmglog = true;
				if (KCPlayerPawn(victim)) showdmglog = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				nm = "CCards_Actor_StoneDeath"; if (vict == nm) showdmglog = false;
				nm = "CCards_Actor_MysteryEgg"; if (vict == nm) showdmglog = false;
				if (showdmglog)
				{
					if (kcdebug_worlddamaged) Console.Printf("showdmglog");

					if (kcdebug_worlddamaged) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);

					if (victim.health > 0 && victim.bISMONSTER)
					{
						if (source && KCPlayerPawn(source)) //
						{
							if (MiscItem) landdamagebonus = MiscItem.landdmgbonus;
							if (kcdebug_worlddamaged) Console.Printf("landdamagebonus: %d", landdamagebonus);
						}
						if (!practicetarget)
						{
							if (infl == "PlayerWhistle")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(13.75,15,16.25);
								force *= 0.25;
								if (inflicter && (source && A_CheckBerserk(source))) force *= frandompick(1.5,2,2.5);

								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-3,-1.5,-1.5,0,0,0,0,0,1.5,1.5,3)));
								}
							}
							if (infl == "UppercutPuff")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.25;
								if (source)
								{
									if (A_CheckBerserk(source)) force *= frandompick(1.125,1.25,1.375);
									if (PlayerPawn(source))
									{
										if (source.CountInv("KCTimeFreezer1")) force *= frandompick(0.2,0.25);
										else if (source.CountInv("KCTimeFreezer2")) force *= frandompick(4,5);
									}
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-6,-3,-3,0,0,0,0,0,3,3,6)));
								}
							}
							if (KickPuff(inflicter) || KickPuffNoThrust(inflicter))
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.05;
								if (random(1,2) <= 1) force *= -1;
								if (source)
								{
									if (A_CheckBerserk(source)) force *= frandompick(1.125,1.25,1.375);
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.Thrust(force, (ang + (frandompick(-6,-3,-3,0,0,0,0,0,3,3,6) * 0.25)));
								}
							}
						}

						if (!victim.bINVULNERABLE || !practicetarget || !isCCardsIllusion)
						{
						}
					}
				}

				if (victim.health <= 0 && mod == 'Ice') victim.bCANTSEEK = true;

				string attkernam;
				if (!victim.GetTag()) victname = vict;
				if (source)
				{
					if (source.GetTag()) attkernam = source.GetTag();
					else if (source.GetClassName()) attkernam = source.GetClassName();
					else attkernam = "??!?";
				}
				if (inflicter)
				{
					if (inflicter.GetTag()) atkrname = inflicter.GetTag();
					else if (inflicter.GetClassName()) atkrname = inflicter.GetClassName();
					else atkrname = "????";
				}
				string comblog = "";
				comblog.AppendFormat("\c[red]*\c- ");
				showdmglog = false;
				if (victim.bCOUNTKILL || specialtype || specialtype2) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) showdmglog = true;
				if (BossBrainNew(victim)) showdmglog = true;
				if (KCPlayerPawn(victim)) showdmglog = false;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				nm = "CCards_Actor_StoneDeath"; if (vict == nm) showdmglog = false;
				nm = "CCards_Actor_MysteryEgg"; if (vict == nm) showdmglog = false;
				if (kc_combatlog && showdmglog)
				{
					//Console.Printf("showdmglog 2");
					if (mod == 'NONE') mod = 'Typeless';
					if (dmg)
					{
						comblog.AppendFormat("\c[brick]%d\c-", dmg);
						if (victim.CountInv("JustSurprised") > 0) comblog.AppendFormat(" \c[sapphire]SURPRISE\c-");
						if (victim.CountInv("TookCriticalHit") > 0) comblog.AppendFormat(" \c[orange]CRITICAL\c-");
						comblog.AppendFormat(" damage dealt to \c[red]%s\c- by", victname);
						if (source && !inflicter) comblog.AppendFormat(" \c[purple]%s\c-", attkernam);
						else if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's\c-", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
						if (flags & DMG_EXPLOSION) comblog.AppendFormat(" \c[brick][AOE]\c-");
						if (victim.health <= 0)
						{
							comblog.AppendFormat(" \c[brick]%s dies!\c-", victname);
						}
					}
					else
					{
						comblog.AppendFormat("\c[red]%s\c- took \c[purple]no damage\c- from", victname);
						if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
					}
					if (kcdebug_showgametic) comblog.AppendFormat(" [%d]", gametic);

					Console.Printf(comblog);
				}

				if (kcdebug_hitsounds) Console.Printf("hitsounds");
				bool makesound;
				string playedsound = "";
				PlayerPawn playpawn;
				Actor othermon;
				int playweaksound = 0;
				//*******************
				//* Weakness Sounds *
				//*******************
				int tempdmgval = 10000;
				double tempdmgfactor = victim.damagefactor;
				victim.damagefactor = 1.0;
				int moddedDMG = victim.ApplyDamageFactor(mod, tempdmgval);
				let SpecVuln = CompatVulnItem(victim.FindInventory("CompatVulnItem"));
				if (SpecVuln) moddedDMG *= SpecVuln.lastTOTALFactor;
				victim.damagefactor = tempdmgfactor;
				double outputdmgfactor = 1.0;
				outputdmgfactor *= moddedDMG;
				outputdmgfactor /= tempdmgval;
				bool playwsounds = true;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2" || vict != "BowlingPin" || vict != "OldPipe") playwsounds = true;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playwsounds = false;
				nm = "CCards_Actor_StoneDeath"; if (vict == nm) playwsounds = false;
				nm = "CCards_Actor_MysteryEgg"; if (vict == nm) playwsounds = false;
				if (isCCardsIllusion) playwsounds = false;
				if (kcdebug_hitsounds) Console.Printf("playwsounds: %d", playwsounds);

				if (playwsounds)
				{
					if (initdmg > 0 && !(flags & DMG_NO_FACTOR))
					{
						if (!(mod == '' || mod == 'Normal' || mod == 'Crush' || mod == 'Falling' || mod == 'Drowning'))
						{
							if (moddedDMG <= (tempdmgval * 0.25)) playweaksound = -3;
							if (moddedDMG >= (tempdmgval * 0.25) && moddedDMG <= (tempdmgval * 0.3999999)) playweaksound = -2;
							if (moddedDMG >= (tempdmgval * 0.4) && moddedDMG <= (tempdmgval * 0.6666667)) playweaksound = -1;
							if (moddedDMG >= (tempdmgval * 1.5) && moddedDMG <= (tempdmgval * 2.4999999)) playweaksound = 1;
							if (moddedDMG >= (tempdmgval * 2.5) && moddedDMG <= (tempdmgval * 3.9999999)) playweaksound = 2;
							if (moddedDMG >= (tempdmgval * 4.0)) playweaksound = 3;
							if (kcdebug_hitsounds) Console.Printf("moddedDMG: %d (%.8f) (%s), playweaksound: %d, damagefactor: %.8f", moddedDMG, outputdmgfactor, mod, playweaksound, victim.damagefactor);
						}
					}
					if (kcdebug_hitsounds) Console.Printf("playweaksound: %d", playweaksound);

					string weakplayedsound = "";
					if (kc_hitweaksounds && victim.bISMONSTER && playweaksound != 0 && victim.CountInv("TempNoWeakSound") <= 0)
					{
						victim.A_SetInventory("TempNoWeakSound",1);

						if (playweaksound == -3) weakplayedsound = "Misc/ResistanceHitHigh";
						if (playweaksound == -2) weakplayedsound = "Misc/ResistanceHitMid";
						if (playweaksound == -1) weakplayedsound = "Misc/ResistanceHit";
						if (playweaksound == 1) weakplayedsound = "Misc/WeaknessHit";
						if (playweaksound == 2) weakplayedsound = "Misc/WeaknessHitMid";
						if (playweaksound == 3) weakplayedsound = "Misc/WeaknessHitHigh";

						if (initdmg > 0) makesound = true;
						//if (oldhealth > 0 && oldhealth > health) makesound = true;
						if (makesound)
						{
							if (source)
							{
								if (kcdebug_hitsounds) Console.Printf("[weaksounds] source: %s", source.GetClassName());
								playpawn = PlayerPawn(source);
								if (victim.bFRIENDLY)
								{
									victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
								}
								else
								if (playpawn)
								{
									if (kcdebug_hitsounds) Console.Printf("[weaksounds] playpawn: %s", playpawn.GetClassName());
									if (!victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.0);
								}
								else
								{
									othermon = Actor(source);
									if (othermon)
									{
										if (kcdebug_hitsounds) Console.Printf("[weaksounds] othermon: %s", othermon.GetClassName());
										if (othermon.bFRIENDLY && !victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.5);
									}
								}
							}
						}
					}
				}

				bool playdthsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdthsounds = true;
				if (BossBrainNew(victim)) playdthsounds = true;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdthsounds = false;
				if (mod == 'SilentMassacre') playdthsounds = false;
				nm = "CCards_Actor_StoneDeath"; if (vict == nm) playdthsounds = false;
				nm = "CCards_Actor_MysteryEgg"; if (vict == nm) playdthsounds = false;
				if (isCCardsIllusion) playdthsounds = false;

				if (playdthsounds)
				{
					if (victim.health <= 0 && kc_q3aqckillsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype || specialtype2))
					{
						if (source || inflicter)
						{
							if (kcdebug_hitsounds && source) Console.Printf("[deathsound] source: %s", source.GetClassName());
							if (kcdebug_hitsounds && inflicter) Console.Printf("[deathsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (kcdebug_hitsounds) Console.Printf("[deathsound] victim is friendly: %s", victim.GetClassName());
								/*
								if (?(victim))
								{
									if (kcdebug_hitsounds) Console.Printf("[deathsound] victim is DDAFDNPC Type: %s", victim.GetClassName());
									playedsound = "misc/whoops";
									if (kc_q3aqchitsoundtype >= 0)
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
									}
								}
								else
								{
								*/
									if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsndAlly";
									if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDEDAlly";
									if (kc_q3aqckillsoundtype >= 0)
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
							//}
							}
							else
							if (playpawn)
							{
								if (kcdebug_hitsounds) Console.Printf("[deathsound] playpawn: %s", playpawn.GetClassName());
								/*
								if (?(victim))
								{
									playedsound = "misc/whoops";
									if (kc_q3aqchitsoundtype >= 0)
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(1.25,1.5));
									}
								}
								else
								*/
								if (!victim.bFRIENDLY)
								{
									if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsnd";
									if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED";
									if (kc_q3aqckillsoundtype == 2) playedsound = "misc/EBFoeDie";
									if (kc_q3aqckillsoundtype >= 0)
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon)
								{
									if (kcdebug_hitsounds) Console.Printf("[deathsound] othermon: %s", othermon.GetClassName());
									/*
									if (?(victim))
									{
										playedsound = "misc/whoops";
										if (kc_q3aqchitsoundtype >= 0)
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
										}
									}
									else
									*/
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (kcdebug_hitsounds) Console.Printf("[deathsound] othermon: %s kills %s (ally kills)", othermon.GetClassName(), victim.GetClassName());
										if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsnd2";
										if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED2";
										if (kc_q3aqckillsoundtype == 2) playedsound = "misc/EBFoeDie";
										if (kc_q3aqckillsoundtype >= 0)
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && kc_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.334,1.0);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										playedsound = "misc/killinfight"; //"misc/killsndduck";
										if (kcdebug_hitsounds) Console.Printf("[deathsound ('%s': %.8f)] othermon: %s kills %s (full infighting)", playedsound, rndpitch, othermon.GetClassName(), victim.GetClassName());
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandompick(1.5,2.5)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}

				bool playdmgsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdmgsounds = true;
				if (BossBrainNew(victim)) playdmgsounds = true;
				nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playdmgsounds = false;
				if (mod == 'SilentMassacre') playdmgsounds = false;
				nm = "CCards_Actor_StoneDeath"; if (vict == nm) playdmgsounds = false;
				nm = "CCards_Actor_MysteryEgg"; if (vict == nm) playdmgsounds = false;
				if (isCCardsIllusion) playdmgsounds = false;

				if (playdmgsounds)
				{
					if (kc_q3aqchitsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype || specialtype2 || BossBrainNew(victim)) && victim.CountInv("TempNoHitSound") <= 0)
					{
						victim.A_SetInventory("TempNoHitSound",1);

						if (source || inflicter)
						{
							if (kcdebug_hitsounds && source) Console.Printf("[hitsound] source: %s", source.GetClassName());
							if (kcdebug_hitsounds && inflicter) Console.Printf("[hitsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hitally";
								if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpally";
								if (kc_q3aqchitsoundtype >= 0)
								{
									victim.A_StopSound(13);
									victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
								}
							}
							else
							if (playpawn)
							{
								if (kcdebug_hitsounds) Console.Printf("[hitsound] playpawn: %s", playpawn.GetClassName());
								if (!victim.bFRIENDLY)
								{
									if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hit";
									if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch";
									if (kc_q3aqchitsoundtype == 2) playedsound = "misc/EBFoeHit";
									if (kc_q3aqchitsoundtype >= 0)
									{
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon)
								{
									if (kcdebug_hitsounds) Console.Printf("[hitsound] othermon: %s", othermon.GetClassName());
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hit2";
										if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch2";
										if (kc_q3aqchitsoundtype == 2) playedsound = "misc/EBFoeHit";
										if (kc_q3aqchitsoundtype >= 0)
										{
											victim.A_StopSound(13);
											victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && kc_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.50,1.00);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										if (random(1,2) <= 1) playedsound = "misc/hitmine2";
																		 else playedsound = "misc/hitmine";
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_hitsoundsvol * frandompick(0.75,1.25)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}
			}

			// Adding in Argv's SingleDamageRipper code :V
			if (inflicter is "SingleDamageRipper")
			{
				SingleDamageRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageRipper(inflicter).timesrippedoverall++;
				if (SingleDamageRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}

			if (inflicter is "SingleDamageFastRipper")
			{
				SingleDamageFastRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageFastRipper(inflicter).timesrippedoverall++;
				if (SingleDamageFastRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}
		}
		Super.WorldThingDamaged(e);
	}

	int A_DropCheckMiscGames(int basechance)
	{
		if (A_CheckUOHYM()) basechance *= 4;
		return basechance;
	}

	int A_UOHYMDropCheck(int droptimes)
	{
		if (A_CheckUOHYM() && random(1,6) <= 1 && droptimes > 1)
		{
			droptimes *= 0.25;
			if (droptimes < 1 && random(1,6) <= 5) droptimes = 1;
		}
		return droptimes;
	}

	int, int, actor, actor, actor, actor, int, int, bool, bool A_KillDropTables(int PLuck, int TrueLuck, actor victim, actor inflicter, actor source, actor mastor, int specialtype, int monsterrating, bool playerkill, bool allykill)
	{
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np, nq, nr, ns, nt;

		int TrueGameSkill = skill;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			if (inflicter && inflicter.target) source = inflicter.target;
			if (inflicter && inflicter.master) mastor = inflicter.master;
			string mod = "NONE";
			if (victim && victim.damagetype)
			{
				mod = victim.damagetype; // = e.damagetype;
				if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (inflicter)
				{
					mod = inflicter.damagetype; // = e.damagetype;
					if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
				}
				else
				{
					if (source)
					{
						mod = source.damagetype; // = e.damagetype;
						if (kcdebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
					}
				}
			}
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			string mast = "NONE";
			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();
			if (mastor) mast = mastor.GetClassName();
			let globalvars = KCGlobalVariables.Get();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			int user_type;
			KCCreature KCCVict;
			if (victim) KCCVict = KCCreature(victim);
			bool waslegendary = false;
			if (victim)
			{
				let LDLItem = LDLegendaryMonsterTracker(victim.FindInventory("LDLegendaryMonsterTracker"));
				if (LDLItem)
				{
					waslegendary = true;
					LDLItem.condemned = true;
					victim.A_SetInventory("LDLegendaryWasLegendary",1);
				}
				KCCVict = KCCreature(victim);
			}

			bool ninelivescurse;
			int nineliveslifecount;
			nm = "KC_CCards_Actor_9LivesCurse";
			nn = "KC_CCards_Actor_9LivesCounter";
			if (victim)
			{
				if (victim.CountInv(nm)) ninelivescurse = true;
				if (ninelivescurse && victim.CountInv(nn)) nineliveslifecount = (victim.CountInv(nn) + 1);
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[brick]ninelivescurse:\c- %d, \c[blue]nineliveslifecount:\c- %d", ninelivescurse, nineliveslifecount);
			}

			double sielgraceluckboost = 1.0;
			if (MiscItem)
			{
				if (MiscItem.sielsgraceluckcooldown > 0) sielgraceluckboost *= frandompick(2.5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7.5);
				if (MiscItem.sielsgracetrueactivations > 0) sielgraceluckboost *= (1.0 + (MiscItem.sielsgracetrueactivations * 0.1));
			}

			int Kills = playera.CountInv("KillsCount");
			// Drop Tables
			string dropname;
			int basedropdiv;
			double luckbase;
			double skillmult = 1;
			double allcompletefactor = 0.0234375;
			double allkillsfactor = 0.0078125;
			double allsecretsfactor = 0.0078125;
			double allitemsfactor = 0.0078125;
			if (skill <= 0) skillmult = 0.667;
			if (skill == 1) skillmult = 0.8;
			if (skill == 2) skillmult = 1;
			if (skill == 3) skillmult = 1.25;
			if (skill >= 4) skillmult = 1.5;
			int droptimes;
			int lvldivider;
			int basechance;
			int maxchance;
			int armorbonusrolls;
			int healthbonusrolls;
			int bossdropmulti = randompick(randompick(1,2,2),3,3,3,3,3,3,3,3,randompick(4,4,5));
			if (specialtype & 8 || // CCards' Ancient One Boss V:
					specialtype & 256 || // CCards' Agitated Revenant V:
					specialtype & 512) // CCards' ROM3R-0.666
			{
				bossdropmulti *= 4;
				skillmult *= 0.25;
			}
			if (specialtype & 128) // CCards Exploding Spooder
			{
				bossdropmulti *= 0.25;
				skillmult *= 4;
			}
			if (specialtype & 65536) // CCards_Actor_Cursed
			{
				bossdropmulti *= 1.125;
				skillmult *= 0.8888888888888889;
			}
			if (specialtype & 131072) // CCards_Actor_FleaCurse
			{
				bossdropmulti *= 8;
				skillmult *= 0.125;
			}

			if (ninelivescurse)
			{
				double base9livesmult = 1.00;
				if (nineliveslifecount >= 9)
				{
					base9livesmult = 1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.25,0.3334));
				}
				else
				if (nineliveslifecount >= 4 && nineliveslifecount <= 8)
				{
					base9livesmult = 1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.125,0.1667));
				}
				else
				{
					base9livesmult = 1.00 + (random(nineliveslifecount/2,nineliveslifecount) * frandom(0.0625,0.0834));
				}
				bossdropmulti *= (base9livesmult / 1.00);
				skillmult *= (1.00 / base9livesmult);
				if (kcdebug_worlddiedmonsterdrops)
				{
					Console.Printf("\c[brick]base9livesmult:\c- %.8f", base9livesmult);
				}
			}

			nm = "CCards_Actor_NuclearCurse"; 
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_ClownCarCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_DuplicationCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_MiasmaCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(8,10);
				skillmult *= frandom(0.1,0.125);
			}
			nm = "CCards_Actor_LethalityCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(2,2.5);
				skillmult *= frandom(0.4,0.5);
			}
			nm = "CCards_Actor_SpiderCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(2,2.5);
				skillmult *= frandom(0.4,0.5);
			}
			nm = "CCards_Actor_ResurrectionCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_IncinerateCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_InvisibilityCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(4,5);
				skillmult *= frandom(0.2,0.25);
			}
			nm = "CCards_Actor_OverpoweredCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(8,10);
				skillmult *= frandom(0.1,0.125);
			}
			nm = "CCards_Actor_RabbitCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(8,10);
				skillmult *= frandom(0.1,0.125);
			}
			nm = "CCards_Actor_AttentionCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(1.25,1.5);
				skillmult *= frandom(0.667,0.8);
			}
			nm = "CCards_Actor_TachyonCurse";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(1.5,2);
				skillmult *= frandom(0.5,0.667);
			}
			
			nm = "CCards_Actor_NinjaBuff";
			if (victim.CountInv(nm))
			{
				bossdropmulti *= frandom(1.5,2);
				skillmult *= frandom(0.5,0.667);
			}
			nm = "CCards_Actor_AssassinBuff";
			if (waslegendary ||
					victim.CountInv(nm))
			{
				bossdropmulti *= frandom(2.5,3.25);
				skillmult *= frandom(0.3076923076923077,0.4);
			}
			if (kcdebug_worlddiedmonsterdrops)
			{
				Console.Printf("\c[brick]bossdropmulti:\c- %.8f", bossdropmulti);
				Console.Printf("\c[brick]skillmult:\c- %.8f", skillmult);
				Console.Printf("\c[brick]sielgraceluckboost:\c- %.8f", sielgraceluckboost);
			}

			if (waslegendary) skillmult *= frandom(0.334,0.4585);
			bool candropitems = false;
			if (specialtype) candropitems = true;
			if (!victim.bFRIENDLY && (victim.bCOUNTKILL || specialtype)) candropitems = true;
			if (PracticeTarget(victim) ||
					PracticeTarget2(victim) ||
					Computer(victim) ||
					ExplosiveBarrel(victim) ||
					Pod(victim) ||
					Piston(victim) ||
					Pottery1(victim) ||
					Pottery2(victim) ||
					Pottery3(victim) ||
					PowerCoupling(victim) ||
					PowerCrystal(victim) ||
					TreeDestructible(victim) ||
					WoodenBarrel(victim) ||
					ZCorpseSitting(victim) ||
					ZSuitOfArmor(victim) ||
					ZShrub1(victim) ||
					ZShrub2(victim) ||
					ZXmasTree(victim) ||
					ZPoisonShroom(victim) ||
					victim.CountInv("E1M8ExitRoomMonster")) candropitems = false;
			nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) candropitems = false;
			nm = "ClayDevilNew"; extracheck = nm; if (vict == extracheck) candropitems = false;
			if (!(playerkill || allykill))
			{
				if (!victim.CountInv("E1M8ExitRoomMonster"))
				{
					if (random(1,256) <= 1) candropitems = true;
														 else candropitems = false;
				}
			}
			if (A_CheckUOHYM() && random(1,6) <= 1) candropitems = false;
			if (kcdebug_worlddied) Console.Printf("candropitems: %d", candropitems);

			double minmultlevel = 0.25;
			if (A_CheckUOHYM()) minmultlevel *= 2;
			if (victim.bBOSS) minmultlevel /= bossdropmulti;
			if (waslegendary) minmultlevel *= frandompick(0.334,0.5,0.5,0.5,0.5,0.5,0.5,0.667);
			if (minmultlevel <= 0.0125) minmultlevel = 0.0125;

			if (candropitems)
			{
				if (kcdebug_worlddied) Console.Printf("candropitems [post]: %d", candropitems);
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);

				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 35;
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= bossdropmulti;
				for (int i; i < droptimes; i++)
				{
					// Specific Drops from Specific Monsters
					let monsterp = Actor(victim);

					// Doom Monsters
					basedropdiv = 512;
					basedropdiv *= skillmult;
					if (A_CheckUOHYM()) basechance *= 4;
					luckbase = 0.25 + (monsterrating * 0.0625);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) basedropdiv *= random(4,8);

					double rand = 2.0;
					string droptype;
					if (vict ~== "Zombieman" ||
							vict ~== "ZombiemanNew" ||
							vict ~== "ZombiemanClassic" ||
							vict ~== "ShotgunGuy" ||
							vict ~== "ShotgunGuyNew" ||
							vict ~== "ShotgunGuyClassic" ||
							vict ~== "ChaingunGuy" ||
							vict ~== "ChaingunGuyNew" ||
							vict ~== "ChaingunGuyClassic" ||
							vict ~== "WolfensteinSS" ||
							vict ~== "WolfensteinSSNew" ||
							vict ~== "WolfensteinSSClassic")
					{
						if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("RadSuit2",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (vict ~== "Cacodemon" ||
							vict ~== "CacodemonNew" ||
							vict ~== "CacodemonClassic" ||
							vict ~== "Cacolantern" ||
							vict ~== "Abaddon")
					{
						int itemdropbase = random(2,3);
						if (A_CheckForHeiwaPlayer()) itemdropbase *= 4;
						if (random(1,basedropdiv) <= itemdropbase) victim.A_SpawnItemEx("DoubleSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (vict ~== "Demon" ||
							vict ~== "DemonNew" ||
							vict ~== "DemonClassic" ||
							vict ~== "Spectre" ||
							vict ~== "SpectreNew" ||
							vict ~== "SpectreClassic" ||
							vict ~== "NightmareSpectre" ||
							vict ~== "BloodDemon" ||
							vict ~== "BloodSpectre" ||
							vict ~== "NightmareBloodSpectre" ||
							vict ~== "ChaingunDemon" ||
							vict ~== "ChaingunSpectre")
					{
						int itemdropbase = 1;
						if (A_CheckForHeiwaPlayer()) itemdropbase *= 4;
						if (random(1,basedropdiv) <= itemdropbase) victim.A_SpawnItemEx("GuardSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (vict ~== "Archvile" ||
							vict ~== "ArchvileNew" ||
							vict ~== "ArchvileClassic" ||
							vict ~== "Diabloist")
					{
						int itemdropbase = random(4,5);
						if (A_CheckForHeiwaPlayer()) itemdropbase *= 4;
						if (random(1,basedropdiv) <= itemdropbase) victim.A_SpawnItemEx("HasteSphere",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (vict ~== "HellKnight" ||
							vict ~== "HellKnightNew" ||
							vict ~== "HellKnightClassic" ||
							vict ~== "BaronOfHell" ||
							vict ~== "BaronOfHellNew" ||
							vict ~== "BaronOfHellClassic" ||
							vict ~== "Belphegor" ||
							vict ~== "BruiserDemon" ||
							vict ~== "Cybruiser" ||
							vict ~== "ArchonOfHell" ||
							vict ~== "PyroDemon" ||
							vict ~== "FlyingBalrogDVDS" ||
							vict ~== "Hierophant")
					{
						int itemdropbase = basedropdiv;
						if (vict ~== "HellKnight" ||
								vict ~== "HellKnightNew" ||
								vict ~== "HellKnightClassic") basedropdiv *= 3;
						if (A_CheckForHeiwaPlayer()) basedropdiv *= 4;
						if (random(1,basedropdiv) <= 1) victim.A_SpawnItemEx("Berserk",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}

					if (vict ~== "Zombieman" ||
							vict ~== "ZombiemanNew" ||
							vict ~== "ZombiemanClassic" ||
							vict ~== "ChaingunGuy" ||
							vict ~== "ChaingunGuyNew" ||
							vict ~== "ChaingunGuyClassic" ||
							vict ~== "Minigunner" ||
							vict ~== "WolfensteinSS" ||
							vict ~== "WolfensteinSSNew" ||
							vict ~== "WolfensteinSSClassic" ||
							vict ~== "SpiderMastermind" ||
							vict ~== "SpiderMastermindNew" ||
							vict ~== "SpiderMastermindClassic" ||
							vict ~== "Demolisher")
					{
						if (random(1,(basedropdiv*0.015625)) <= random(2,3))
						{
							droptype = "ClipNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.03125)) <= random(2,3))
						{
							droptype = "ClipNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.0625)) <= random(2,3))
						{
							droptype = "ClipNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}

						if (vict ~== "Zombieman" ||
								vict ~== "ZombiemanNew" ||
								vict ~== "ZombiemanClassic")
						{
							string droptypeammo = "ClipNew";
							string droptypeammobig = "ClipBoxNew";
							if (A_CheckForHeiwaPlayer())
							{
								if (random(1,(basedropdiv*0.03125)) <= 1)
								{
									if (random(1,16) <= 1)
									{
										droptype = "BlasterPickup";
										droptypeammo = "CellNew";
										droptypeammobig = "CellPackNew";
									}
									else
									{
										droptype = "Glock21";
										droptypeammo = "ClipNew";
										droptypeammobig = "ClipBoxNew";
									}
									if (!(playera.CountInv("Glock21") ||
												playera.CountInv("BlasterPickup") ||
												playera.CountInv("RiotGun") ||
												playera.CountInv("ImpalerXBow") ||
												playera.CountInv("TommyGun") ||
												playera.CountInv("BlasterRifle")))
									{
										double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
										double raredropsndvol = frandom(1.75,2.25);
										int raredropsndchannel = randompick(191,192,222,223,264,265);
										victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										droptype = droptypeammo;
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										if (random(1,2) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,4) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,8) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,16) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,32) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
									}
								}
							}
							if (random(1,basedropdiv) <= 1)
							{
								droptype = "PistolMarine";
								if (A_CheckForHeiwaPlayer())
								{
									if (random(1,64) <= randompick(1,1,1,1,1,2,2,3))
									{
										if (random(1,16) <= 1)
										{
											droptype = "BlasterPickup";
											droptypeammo = "CellNew";
											droptypeammobig = "CellPackNew";
										}
										else
										{
											droptype = "Glock21";
											droptypeammo = "ClipNew";
											droptypeammobig = "ClipBoxNew";
										}
									}
								}
								else
								{
									if (random(1,64) <= randompick(1,1,1,1,1,2,2,3))
									{
										droptype = "Glock21";
										droptypeammo = "ClipNew";
										droptypeammobig = "ClipBoxNew";
									}
								}
								double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

								// Ammo
								if (random(1,(basedropdiv*0.015625)) <= random(2,3))
								{
									droptype = droptypeammo;
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.03125)) <= random(2,3))
								{
									droptype = droptypeammo;
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.0625)) <= random(2,3))
								{
									droptype = droptypeammo;
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
							}
						}
						if (vict ~== "ShotgunGuy" ||
								vict ~== "ShotgunGuyNew" ||
								vict ~== "ShotgunGuyClassic")
						{
							droptype = "RiotGun";
							string droptypeammo = "ShellNew";
							string droptypeammobig = "ShellBoxNew";
							if (A_CheckForHeiwaPlayer())
							{
								if (random(1,16) <= 1)
								{
									droptype = "RiotGun";
									droptypeammo = "ShellNew";
									droptypeammobig = "ShellBoxNew";
								}
								else
								{
									droptype = "ImpalerXBow";
									droptypeammo = "ImpalerBolts";
									droptypeammobig = "ImpalerBoltsBig";
								}
								if (random(1,(basedropdiv*0.03125)) <= 1)
								{
									if (!(playera.CountInv("Glock21") ||
												playera.CountInv("BlasterPickup") ||
												playera.CountInv("RiotGun") ||
												playera.CountInv("ImpalerXBow") ||
												playera.CountInv("TommyGun") ||
												playera.CountInv("BlasterRifle")))
									{
										double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
										double raredropsndvol = frandom(1.75,2.25);
										int raredropsndchannel = randompick(191,192,222,223,264,265);
										victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										droptype = droptypeammo;
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										if (random(1,2) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,4) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,8) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,16) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,32) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
									}
								}
							}
						}
						if (vict ~== "ChaingunGuy" ||
								vict ~== "ChaingunGuyNew" ||
								vict ~== "ChaingunGuyClassic" ||
								vict ~== "Minigunner")
						{
							string droptypeammo = "ClipNew";
							string droptypeammobig = "ClipBoxNew";
							if (A_CheckForHeiwaPlayer())
							{
								if (random(1,(basedropdiv*0.03125)) <= 1)
								{
									if (random(1,16) <= 1)
									{
										droptype = "BlasterRifle";
										droptypeammo = "CellNew";
										droptypeammobig = "CellPackNew";
									}
									else
									{
										droptype = "TommyGun";
										droptypeammo = "TommAmmo";
										droptypeammobig = "TommAmmoBig";
									}
									if (!(playera.CountInv("Glock21") ||
												playera.CountInv("BlasterPickup") ||
												playera.CountInv("RiotGun") ||
												playera.CountInv("ImpalerXBow") ||
												playera.CountInv("TommyGun") ||
												playera.CountInv("BlasterRifle")))
									{
										double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
										double raredropsndvol = frandom(1.75,2.25);
										int raredropsndchannel = randompick(191,192,222,223,264,265);
										victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										droptype = droptypeammo;
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

										if (random(1,2) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,4) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,8) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,16) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
										if (random(1,32) <= random(1,4))
										{
											droptype = droptypeammo;
											if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
											victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
										}
									}
								}
							}

							if (random(1,basedropdiv) <= 1)
							{
								int chancebase = randompick(1,1,1,1,1,2,2,3);
								if (A_CheckForHeiwaPlayer()) chancebase *= 4;
								if (random(1,64) <= chancebase)
								{
									droptype = "TommyGun";
									double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
									double raredropsndvol = frandom(1.75,2.25);
									int raredropsndchannel = randompick(191,192,222,223,264,265);
									victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									// Ammo
									if (random(1,(basedropdiv*0.015625)) <= random(2,3))
									{
										droptype = "TommAmmo";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
									if (random(1,(basedropdiv*0.03125)) <= random(2,3))
									{
										droptype = "TommAmmo";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
									if (random(1,(basedropdiv*0.0625)) <= random(2,3))
									{
										droptype = "TommAmmo";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
								}
								else
								{
									droptype = "ChaingunMarine";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									if (random(1,(basedropdiv*0.015625)) <= random(2,3))
									{
										droptype = "ClipNew";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
									if (random(1,(basedropdiv*0.03125)) <= random(2,3))
									{
										droptype = "ClipNew";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
									if (random(1,(basedropdiv*0.0625)) <= random(2,3))
									{
										droptype = "ClipNew";
										if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
										victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
									}
								}
							}
						}
						if (vict ~== "WolfensteinSS" ||
								vict ~== "WolfensteinSSNew" ||
								vict ~== "WolfensteinSSClassic")
						{
							int chancebase = randompick(1,1,1,1,1,2,2,3);
							if (A_CheckForHeiwaPlayer()) chancebase *= 4;
							if (random(1,256) <= chancebase)
							{
								droptype = "TommyGun";
								double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

								if (random(1,(basedropdiv*0.015625)) <= random(2,3))
								{
									droptype = "TommAmmo";
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.03125)) <= random(2,3))
								{
									droptype = "TommAmmo";
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.0625)) <= random(2,3))
								{
									droptype = "TommAmmo";
									if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "TommAmmoBig";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
							}
						}
						if (vict ~== "SpiderMastermind" ||
								vict ~== "SpiderMastermindNew" ||
								vict ~== "SpiderMastermindClassic" ||
								vict ~== "Demolisher")
						{
							droptype = "ChaingunMarine";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							droptype = "ClipNew";
							if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";

							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = "ChaingunMarine";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = "ClipNew";
								if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								droptype = "ClipNew";
								if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								droptype = "ClipNew";
								if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								droptype = "ClipNew";
								if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								droptype = "ClipNew";
								if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
					}
					if (vict ~== "ShotgunGuy" ||
							vict ~== "ShotgunGuyNew" ||
							vict ~== "ShotgunGuyClassic")
					{
						if (A_CheckForHeiwaPlayer())
						{
							if (random(1,256) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "RiotGun";
								double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*0.015625)) <= random(2,3))
						{
							droptype = "ShellNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBox";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.03125)) <= random(2,3))
						{
							droptype = "ShellNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.0625)) <= random(2,3))
						{
							droptype = "ShellNew";
							if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,basedropdiv) <= 1)
						{
							droptype = "ShotgunMarine";
							if (random(1,64) <= randompick(1,1,1,1,1,2,2,3)) droptype = "SuperShotgunMarine";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(basedropdiv*0.015625)) <= random(2,3))
							{
								droptype = "ShellNew";
								if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.03125)) <= random(2,3))
							{
								droptype = "ShellNew";
								if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.0625)) <= random(2,3))
							{
								droptype = "ShellNew";
								if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
					}
					if (vict ~== "Revenant" ||
							vict ~== "RevenantNew" ||
							vict ~== "RevenantClassic")
					{
						if (random(1,(basedropdiv*0.125)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "Bolts";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "CellNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*0.5)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "Bolts";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "CellNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*1.75)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "Bolts";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "CellNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*0.125)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "MiniRockets";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "MiniRocketBox";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "RocketNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*0.5)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "MiniRockets";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "MiniRocketBox";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "RocketNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						if (random(1,(basedropdiv*1.75)) <= random(2,3))
						{
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "MiniRockets";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "MiniRocketBox";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{
								droptype = "RocketNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
					}
					if (vict ~== "Arachnotron" ||
							vict ~== "ArachnotronNew" ||
							vict ~== "ArachnotronClassic" ||
							vict ~== "RailArachnotron" ||
							vict ~== "FusionArachnotron" ||
							vict ~== "ArachnotronMK2")
					{
						if (random(1,(basedropdiv*0.0625)) <= random(2,3))
						{
							droptype = "CellNew";
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.25)) <= random(2,3))
						{
							droptype = "CellNew";
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.875)) <= random(2,3))
						{
							droptype = "CellNew";
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,basedropdiv) <= 1)
						{
							if (random(1,64) <= randompick(1,1,1,1,1,2,2,3))
							{
								droptype = "TeslaCannon";
								double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);

								if (random(1,(basedropdiv*0.0625)) <= random(2,3))
								{
									droptype = "Bolts";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.25)) <= random(2,3))
								{
									droptype = "Bolts";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.875)) <= random(2,3))
								{
									droptype = "Bolts";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "BoltsLarge";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
							}
							else
							{
								droptype = "PlasmaRifleMarine";
								double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (random(1,(basedropdiv*0.0625)) <= random(2,3))
								{
									droptype = "CellNew";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.25)) <= random(2,3))
								{
									droptype = "CellNew";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
								if (random(1,(basedropdiv*0.875)) <= random(2,3))
								{
									droptype = "CellNew";
									if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPackNew";
									victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								}
							}
						}
					}
					if (vict ~== "HellKnight" ||
							vict ~== "HellKnightNew" ||
							vict ~== "HellKnightClassic" ||
							vict ~== "BaronOfHell" ||
							vict ~== "BaronOfHellNew" ||
							vict ~== "BaronOfHellClassic" ||
							vict ~== "Belphegor" ||
							vict ~== "BruiserDemon" ||
							vict ~== "CyBruiser" ||
							vict ~== "ArchonOfHell" ||
							vict ~== "PyroDemon" ||
							vict ~== "FlyingBalrogDVDS" ||
							vict ~== "Hierophant")
					{
						int dropdiv = 64;
						if (vict ~== "BaronOfHell" ||
								vict ~== "BaronOfHellNew" ||
								vict ~== "BaronOfHellClassic") dropdiv = 32;
						if (vict ~== "Belphegor") dropdiv = 40;
						if (vict ~== "BruiserDemon" ||
								vict ~== "CyBruiser" ||
								vict ~== "ArchonOfHell") dropdiv = 24;
						if (vict ~== "PyroDemon") dropdiv = 16;
						if (vict ~== "FlyingBalrogDVDS") dropdiv = 28;
						if (vict ~== "Hierophant") dropdiv = 20;
						if (random(1,(basedropdiv*0.25)) <= random(2,3))
						{
							droptype = "BackPack2";
							if (random(1,dropdiv) <= 1) droptype = "CombatPack";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
						if (random(1,(basedropdiv*0.5)) <= random(2,3))
						{
							droptype = "BackPack2";
							if (random(1,dropdiv) <= 1) droptype = "CombatPack";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
					}
					if (vict ~== "Cyberdemon" ||
							vict ~== "CyberdemonNew" ||
							vict ~== "Annihilator")
					{
						if (random(1,64) <= randompick(1,1,1,1,1,2,2,3))
						{
							string droptype1 = "Devastator";
							string droptypeammo = "MiniRockets";
							string droptypeammobig = "MiniRocketBox";
							if (A_CheckForHeiwaPlayer())
							{
								if (random(1,2) <= 1)
								{
									droptype1 = "Deviation";
									droptypeammo = "RocketAmmoNew";
									droptypeammobig = "RocketBoxNew";
								}
							}
							droptype = droptype1;
							double raredropsndpitch = (frandompick(0.75,0.875,1.0,1.125,1.25) + 0.5);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(191,192,222,223,264,265);
							victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							droptype = droptypeammo;
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = droptype1;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.015625)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.03125)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.0625)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.125)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.5)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*1.0)) <= random(2,3))
							{
								droptype = droptypeammo;
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
						else
						{
							droptype = "RocketLauncherMarine";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							droptype = "RocketAmmoNew";
							if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = "RocketLauncherMarine";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.015625)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.03125)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.0625)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.125)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.25)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*0.5)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							if (random(1,(basedropdiv*1.0)) <= random(2,3))
							{
								droptype = "RocketAmmoNew";
								if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBoxNew";
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Monster Specific Drop [Doom] (\c[brick]%s\c-): %d", vict, basedropdiv);

					// Heretic Monsters
					basedropdiv = 512;
					basedropdiv *= skillmult;
					if (A_CheckUOHYM()) basechance *= 4;
					luckbase = 0.25 + (monsterrating * 0.0625);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) basedropdiv *= random(4,8);


					// Hexen Monsters
					basedropdiv = 512;
					basedropdiv *= skillmult;
					if (A_CheckUOHYM()) basechance *= 4;
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) basedropdiv *= random(4,8);

					// Strife Monsters
					basedropdiv = 512;
					basedropdiv *= skillmult;
					if (A_CheckUOHYM()) basechance *= 4;
					luckbase = 0.25 + (monsterrating * 0.0625);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) basedropdiv *= random(4,8);
				}

				// Mana
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,1,1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(1,1,2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(1,2,2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,2,2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 50;
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= bossdropmulti;
				for (int i; i < droptimes; i++)
				{
					// Mana [Type 14]
					basechance = kc_inventorydroprate14;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.5;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 0.5 + (monsterrating * 0.125);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 0.4;
					if (maxchance < (kc_inventorydroprate14 * minmultlevel)) maxchance = (kc_inventorydroprate14 * minmultlevel);

					int rollrand = random(1,maxchance);
					if (rollrand <= 1) // Main Drop Chance
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Mana Drop Roll Success");

						double rand = 1.0;
						string droptype = "ManaCube";
						user_type = random(1,13);
						if (user_type >= 1 && user_type <= 7) droptype = "ManaCube";
						if (user_type >= 8 && user_type <= 11) droptype = "ManaCube2";
						if (user_type >= 12 && user_type <= 13) droptype = "ManaCube3";
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(4191,4192,4222,4223,4264,4265);
						victim.A_StartSound("mana/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						raredropsndvol = frandom(1.75,2.25);
						raredropsndchannel = randompick(4291,4292,4322,4323,4364,4365);
						victim.A_StartSound("mana/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [mana]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
				}

				// Ammo/Weapons
				string droptype;
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 50;
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= bossdropmulti;
				for (int i; i < droptimes; i++)
				{
					// Weapons/Backpacks [Type 6]
					basechance = kc_inventorydroprate6;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.75;
					if (A_CheckUOHYM()) basechance *= 8;
					luckbase = 0.25 + (monsterrating * 0.0625);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 2.5;
					if (maxchance < (kc_inventorydroprate6 * minmultlevel)) maxchance = (kc_inventorydroprate6 * minmultlevel);

					int rollrand = random(1,maxchance);
					if (rollrand <= 1) // Main Drop Chance
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Weapon/Ammo Drop Roll Success");
						int temp = 1;
						if (MiscItem)
						{
							temp = (1 + (TrueLuck * 0.08334));
							temp *= 2.5;
						}
						int randrollmax = 32;
						nm = "CCards_Actor_Maestro"; if (vict == nm) randrollmax /= 16;
						nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= 8;
						nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) randrollmax *= 4;

						int randroll = random(1,randrollmax);
						if (randroll <= temp) // Weapons
						{
							double rand = 1.0;
							int minval = 1;
							int maxval = 13;
							if (!(playera.CountInv("Translocator") || playera.CountInv("DustBlower"))) minval = 0;
							if (A_CheckForHeiwaPlayer()) maxval = 18;

							user_type = random(minval,maxval);
							droptype = "BackPack2";
							if (user_type == 0)
							{
								if (!playera.CountInv("Translocator"))
								{
									if (!playera.CountInv("DustBlower"))
									{
										int usertype = randompick(1,1,1,1,1,1,1,1,1,2);
										if (usertype <= 1) droptype = "Translocator";
										if (usertype <= 2) droptype = "DustBlower";
									}
									else droptype = "Translocator";
									if (playera.CountInv(droptype)) droptype = "SpecialBackpack";
								}
								else
								{
									if (!playera.CountInv("Translocator"))
									{
										int usertype = randompick(1,1,1,1,1,1,1,1,1,2);
										if (usertype <= 1) droptype = "DustBlower";
										if (usertype <= 2) droptype = "Translocator";
									}
									else droptype = "DustBlower";
									if (playera.CountInv(droptype)) droptype = "SpecialBackpack";
								}
							}
							if (user_type == 1)
							{
								droptype = "Pistol";
								if (playera.GetClassName() == "KCPlayer") droptype = "PistolMarine";
								if (random(1,4) <= 1 && playera.CountInv(droptype)) droptype = "Glock21";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 2)
							{
								droptype = "Chaingun";
								if (playera.GetClassName() == "KCPlayer") droptype = "ChaingunMarine";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 3)
							{
								droptype = "Shotgun";
								if (playera.GetClassName() == "KCPlayer") droptype = "ShotgunMarine";
								if (playera.CountInv(droptype))
								{
									if (random(1,32) <= 1) droptype = "SuperShotgunMarine";
									if (playera.CountInv(droptype)) droptype = "BackPack2";
								}
							}
							if (user_type == 4)
							{
								droptype = "TommyGun";
								if (playera.CountInv(droptype))
								{
									droptype = "DualTommyGuns";
									if (playera.CountInv(droptype)) droptype = "BackPack2";
																						 else droptype = "TommyGun";
								}
								else droptype = "TommyGun";
							}
							if (user_type == 5)
							{
								droptype = "SuperShotgun";
								if (playera.GetClassName() == "KCPlayer") droptype = "SuperShotgunMarine";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 6)
							{
								droptype = "RocketLauncher";
								if (playera.GetClassName() == "KCPlayer") droptype = "RocketLauncherMarine";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 7)
							{
								droptype = "BFG9000";
								if (playera.GetClassName() == "KCPlayer") droptype = "BFG9000Marine";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 8)
							{
								droptype = "PlasmaRifle";
								if (playera.GetClassName() == "KCPlayer") droptype = "PlasmaRifleMarine";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 9)
							{
								droptype = "Devastator";
								if (playera.CountInv(droptype))
								{
									droptype = "DualDevastators";
									if (playera.CountInv(droptype)) droptype = "BackPack2";
																						 else droptype = "DevastatorGenerator";
								}
								else droptype = "DevastatorGenerator";
							}
							if (user_type == 10)
							{
								droptype = "SawThrower";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 11)
							{
								droptype = "ImpalerXBow";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 12)
							{
								droptype = "TeslaCannon";
								if (playera.CountInv(droptype))
								{
									if (playera.CountInv("DualTeslaCannons")) droptype = "BackPack2";
								}
							}
							if (user_type == 13)
							{
								droptype = "BHGen";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 14)
							{
								droptype = "Deviation";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 15)
							{
								droptype = "BlasterPickup";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 16)
							{
								droptype = "RiotGun";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 17)
							{
								droptype = "BlasterRifle";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (user_type == 18)
							{
								droptype = "EvilWarriorShield";
								if (playera.CountInv(droptype)) droptype = "BackPack2";
							}
							if (droptype == "BackPack2" && random(1,16) <= 1) droptype = "CombatPack";
							if (!(droptype == "BackPack2" ||
									droptype == "CombatPack"))
							{
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(191,192,222,223,264,265);
								victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
							else
							{

							}
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[green]Weapon Drop\c- - user_type: %d [%s]", user_type, droptype);
						}
						else // Ammo
						{
							double rand = 3.0;
							int temp = 48;
							if (MiscItem) temp = (48 + (TrueLuck * 0.25));
							int randroll2 = random(1,256);
							int ammodrops = randompick(1,1,1,1,1,1,1,2,2,3);
							if (MiscItem) ammodrops += (TrueLuck * frandompick(0,0,0,0,0,0,0,0.0125,0.0125,0.025));
							nm = "CCards_Actor_Maestro";
							if (vict == nm)
							{
								temp *= random(2,3);
								ammodrops *= random(2,4);
								if (random(1,4) <= 1) randroll2 = random(1,128);
							}
							nm = "CCards_Actor_Horror";
							if (vict == nm)
							{
								temp *= randompick(2,2,2,3);
								ammodrops *= random(1,2);
								if (random(1,4) <= 1) randroll2 = random(1,128);
							}
							nm = "CCards_Actor_MiniMonsterPowerup";
							if (victim.CountInv(nm))
							{
								temp /= random(2,3);
								ammodrops /= random(2,4);
								if (random(1,4) <= 1) randroll2 = random(1,128);
							}
							for (int i2; i2 < ammodrops; i2++)
							{
								if (kcdebug_worlddiedmonsterdrops) Console.Printf("Ammo Drop [Attempt]: %d / 16 [%d]", temp, randroll2);
								if (randroll2 <= temp)
								{
									int minval = 1;
									int maxval = 13;
									if (A_CheckForHeiwaPlayer()) maxval = 17;

									user_type = random(minval,maxval);
									if (user_type == 1) droptype = "ClipBoxNew";
									if (user_type == 2) droptype = "ClipBoxNew";
									if (user_type == 3) droptype = "ShellBoxNew";
									if (user_type == 4) droptype = "TommAmmoBig";
									if (user_type == 5) droptype = "ShellBoxNew";
									if (user_type == 6) droptype = "RocketBoxNew";
									if (user_type == 7) droptype = "CellPackNew";
									if (user_type == 8) droptype = "CellPackNew";
									if (user_type == 9) droptype = "MiniRocketBox";
									if (user_type == 10) droptype = "SawBox";
									if (user_type == 11) droptype = "ImpalerBoltsBig";
									if (user_type == 12) droptype = "BoltsLarge";
									if (user_type == 13) droptype = "CellPackNew";
									if (user_type == 14) droptype = "RocketBoxNew";
									if (user_type == 15) droptype = "CellPackNew";
									if (user_type == 16) droptype = "ShellBoxNew";
									if (user_type == 17) droptype = "CellPackNew";
									if (user_type == 18) droptype = "PikeAmmoBig";
								}
								else
								{
									int minval = 1;
									int maxval = 13;
									if (A_CheckForHeiwaPlayer()) maxval = 17;

									user_type = random(minval,maxval);
									if (A_CheckForHeiwaPlayer()) user_type = random(1,17);
									if (user_type == 1) droptype = "ClipNew";
									if (user_type == 2) droptype = "ClipNew";
									if (user_type == 3) droptype = "ShellNew";
									if (user_type == 4) droptype = "TommAmmo";
									if (user_type == 5) droptype = "ShellNew";
									if (user_type == 6) droptype = "RocketAmmoNew";
									if (user_type == 7) droptype = "CellNew";
									if (user_type == 8) droptype = "CellNew";
									if (user_type == 9) droptype = "MiniRockets";
									if (user_type == 10) droptype = "Saws";
									if (user_type == 11) droptype = "ImpalerBolts";
									if (user_type == 12) droptype = "Bolts";
									if (user_type == 13) droptype = "CellNew";
									if (user_type == 14) droptype = "RocketNew";
									if (user_type == 15) droptype = "CellNew";
									if (user_type == 16) droptype = "ShellNew";
									if (user_type == 17) droptype = "CellNew";
									if (user_type == 18) droptype = "PikeAmmo";
								}
								victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[darkgreen]Ammo Drop\c- - user_type: %d [%s] [%d / %d]", user_type, droptype, (i2+1), ammodrops);
							}
						}
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Weapon/Ammo Drop [Attempt]: %d / 16 [%d]", temp, randroll);
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [weapon/ammo]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
				}


				// Heal Items
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 35;

				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= (bossdropmulti * 2);
				for (int i; i < droptimes; i++)
				{
					double rand = 2.0;
					// Health Items [Type 7]
					basechance = kc_inventorydroprate7;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.875;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 0.5 + (monsterrating * 0.125);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 1.75;
					if (maxchance < (kc_inventorydroprate7 * minmultlevel)) maxchance = (kc_inventorydroprate7 * minmultlevel);

					if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("Stimpack",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(maxchance*3)) == 1) victim.A_SpawnItemEx("Medikit",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (A_CheckForHeiwaPlayer()) maxchance *= 4;
					if (random(1,(maxchance*9)) == 1)
					{
						string bname = "Berserk";
						victim.A_SpawnItemEx(bname,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [heal]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);
				}

				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 70;
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= bossdropmulti;
				for (int i; i < droptimes; i++)
				{
					double rand = 2.0;
					// Armor Items [Type 8]
					basechance = kc_inventorydroprate8;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.625;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 1.0 + (monsterrating * 0.25);
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 2.5;
					if (i > 0) maxchance *= 5;
					if (maxchance < (kc_inventorydroprate8 * minmultlevel)) maxchance = (kc_inventorydroprate8 * minmultlevel);

					int rollrand = random(1,maxchance);
					if (rollrand <= 1)
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Full Armor Drop Roll Success");
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						//Full Armor Drops
						user_type = random(1,100);
						if (user_type >= 1 && user_type <= 67) { victim.A_SpawnItemEx("KCGreenArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 68 && user_type <= 89) { victim.A_SpawnItemEx("KCGreenArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 90 && user_type <= 98) { victim.A_SpawnItemEx("KCBlueArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
						else if (user_type >= 99) { victim.A_SpawnItemEx("KCBlueArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					}
					else
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Armor Bonuses [Attempt]");
						armorbonusrolls = 1;

						// If Spawned via Fractal Chooks, Pain Elementals
						if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned))
						{
							armorbonusrolls /= 2;
							if (armorbonusrolls < 1)
							{
								if (random(1,4) <= 1) armorbonusrolls = 1;
																 else armorbonusrolls = 0;
							}
						}
						// Armor Bonus Drops
						if (armorbonusrolls > 0)
						{
							double rand = 2.0;
							int baseval = randompick(2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3);
							for (int i = 0; i < armorbonusrolls; i++)
							{
								if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Armor Bonuses \c[orange][Attempt %d / %d]", (i+1), armorbonusrolls);
								string armortype = "ArmorBonus2";
								if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
								if (random(1,(baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
								if (random(1,(baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
								if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
								if (random(1,(baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
								if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
								if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							}
						}
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [armor]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);

					healthbonusrolls = (randompick(0,0,0,1,1,1,1,2) + (TruePlayerLevel * 0.03125));
					// If Spawned via Fractal Chooks, Pain Elementals
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned))
					{
						healthbonusrolls /= 2;
						if (healthbonusrolls < 1)
						{
							if (random(1,4) <= 1) healthbonusrolls = 1;
															 else healthbonusrolls = 0;
						}
					}
					// Health Bonuses
					if (healthbonusrolls > 0)
					{
						double rand = 3.0;
						int baseval2 = randompick(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4);
						for (int i = 0; i < healthbonusrolls; i++)
						{
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Health Bonuses \c[orange][Attempt %d / %d]", (i+1), healthbonusrolls);
							string teatype = "HealthBonus2";
							if (random(1,(baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,(baseval2*baseval2*baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
					}
				}

				// Random Inventory Item Drops
				droptimes = 1;
				if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
				if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
				if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
				if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
				if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
				if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
				if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
				if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
				luckbase = 0.0625 + (monsterrating * 0.015625);
				luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
				luckbase *= kc_luckfactor;
				luckbase *= sielgraceluckboost;
				lvldivider = 70;
				if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
				if (A_CheckUOHYM()) droptimes = A_UOHYMDropCheck(droptimes);
				if (inflicter && ((source && KCPlayerPawn(source))))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				else
				if (inflicter && KCPlayerPawn(inflicter))
				{
					if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
				}
				if (victim.bBOSS) droptimes *= bossdropmulti;
				for (int i; i < droptimes; i++)
				{
					// Primary [Type 1]
					basechance = kc_inventorydroprate1;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.5;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 0.0625 + (monsterrating * 0.015625); // (512)
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 2.5;
					if (maxchance < (kc_inventorydroprate1 * minmultlevel)) maxchance = (kc_inventorydroprate1 * minmultlevel);
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [primaryinv]: %d (%d)", maxchance, basechance);

					int randroll = random(1,maxchance);
					if (randroll <= 1)
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Primary Drop [success]");
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [primaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", randroll, maxchance, basechance, (i+1), droptimes);

					// Secondary [Type 2]
					basechance = kc_inventorydroprate2;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.5;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 0.5 + (monsterrating * 0.125); // (512)
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 2.5;
					if (maxchance < (kc_inventorydroprate2 * minmultlevel)) maxchance = (kc_inventorydroprate2 * minmultlevel);

					int rollrand = random(1,maxchance);
					if (rollrand <= 1)
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Secondary Drop [success]");
						//
						//
						//
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);

					// Rare Powerup Drop [Type 3]
					basechance = kc_inventorydroprate3;
					basechance *= kc_inventorydropratemulti;
					basechance *= skillmult;
					if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
					if (A_CheckBlooM()) basechance *= 0.5;
					if (A_CheckUOHYM()) basechance *= 2;
					luckbase = 2.0 + (monsterrating * 0.5); // (512)
					luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
					luckbase *= kc_luckfactor;
					luckbase *= sielgraceluckboost;
					if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
					maxchance = basechance;
					nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
					nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
					nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
					if (A_CheckForHeiwaPlayer()) maxchance *= 2.5;
					if (maxchance < (kc_inventorydroprate3 * minmultlevel)) maxchance = (kc_inventorydroprate3 * minmultlevel);
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: %d (%d)", maxchance, basechance);

					rollrand = random(1,maxchance);
					if (rollrand <= 1)
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Rare Drop [success]");
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						string raredropsndname = "rareitem/spawn";
						victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						if (gameinfo.gametype & 1) // Doom Mode
						{
							user_type = random(1,22);
							if (user_type >= 1 && user_type <= 7) victim.A_SpawnItemEx("BlurSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							if (user_type >= 8 && user_type <= 13) victim.A_SpawnItemEx("Infrared",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							if (user_type >= 14 && user_type <= 19) victim.A_SpawnItemEx("RadSuit",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							if (user_type >= 20 && user_type <= 22) victim.A_SpawnItemEx("InvulnerabilitySphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						}
						if (gameinfo.gametype & 2) // Heretic Mode
						{
							user_type = random(1,13);
							if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("ArtiInvisibility",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("ArtiTomeOfPower",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
							if (user_type >= 13) victim.A_SpawnItemEx("ArtiInvulnerability",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						}
						if (gameinfo.gametype & 4) // Hexen Mode
						{
							user_type = random(1,20);
							victim.A_SpawnItemEx("ArtiInvulnerability2",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						}
						if (gameinfo.gametype & 8) // Strife Mode
						{
						}
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [tritaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", randroll, maxchance, basechance, (i+1), droptimes);

					// Extremely Rare Drops [Type 5]
					if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
					{
						int tsawarmuptier = 0;
						double tsawarmuptiermulti = 3;
						double tsaminmultlevel = minmultlevel;
						int timefreezes;
						if (MiscItem)
						{
							if (MiscItem.TSArtifactSpawnCooldown <= 0 &&
									MiscItem.TSArtifactSpawnWarmUp >= ((kc_tsadropcooldown * TICRATE) * (tsawarmuptiermulti)))
							{
								if (MiscItem.TSArtifactSpawnWarmUp >= ((kc_tsadropcooldown * TICRATE) * (tsawarmuptiermulti*tsawarmuptiermulti)))
								{
									if (MiscItem.TSArtifactSpawnWarmUp >= ((kc_tsadropcooldown * TICRATE) * (tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti)))
									{
										if (MiscItem.TSArtifactSpawnWarmUp >= ((kc_tsadropcooldown * TICRATE) * (tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti)))
										{
											if (MiscItem.TSArtifactSpawnWarmUp >= ((kc_tsadropcooldown * TICRATE) * (tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti*tsawarmuptiermulti)))
											{
												tsaminmultlevel *= 0.0;
												tsawarmuptier = 5;
											}
											else
											{
												tsaminmultlevel *= 0.00390625;
												tsawarmuptier = 4;
											}
										}
										else
										{
											tsaminmultlevel *= 0.015625;
											tsawarmuptier = 3;
										}
									}
									else
									{
										tsaminmultlevel *= 0.0625;
										tsawarmuptier = 2;
									}
								}
								else
								{
									tsaminmultlevel *= 0.25;
									tsawarmuptier = 1;
								}
							}
							timefreezes = (MiscItem.timefreeze1timesused + MiscItem.timefreeze2timesused + MiscItem.timefreeze3timesused);
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]maxchance [extremerare]: WarmupTimer: %d, \c[orange][%d / %d], timefreezes: %d", MiscItem.TSArtifactSpawnWarmUp, (i+1), droptimes, timefreezes);
						}
						basechance = kc_inventorydroprate5;
						basechance *= kc_inventorydropratemulti;
						double tsatierbasemult = 0.75;
						if (A_CheckForHeiwaPlayer())
						{
							basechance *= 0.875;
							tsatierbasemult = 0.5;
							if (tsawarmuptier >= 1) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 2) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 3) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 4) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 5) basechance *= tsatierbasemult;
						}
						else
						{
							basechance *= 1.142857142857143;
							tsatierbasemult = 0.75;
							if (tsawarmuptier >= 1) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 2) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 3) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 4) basechance *= tsatierbasemult;
							if (tsawarmuptier >= 5) basechance *= tsatierbasemult;
						}
						basechance *= skillmult;
						if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
						if (A_CheckBlooM()) basechance *= 0.5;
						if (A_CheckUOHYM()) basechance *= 2;
						double basediv = 0.5;
						double basediv2 = 0.125;
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]maxchance [extremerare, pre tf check]: (%d) (basediv: %.8f, 2: %.8f) \c[orange][%d / %d], timefreezes: %d", basechance, basediv, basediv2, (i+1), droptimes, timefreezes);
						if (timefreezes)
						{
							if (A_CheckKCTimeFreeze())
							{
								basediv = 0.5;
								basediv2 = 0.125;
								tsaminmultlevel *= 0.0625;
							}
							else
							{
								basediv = 0.9375;
								basediv2 = 0.25;
								tsaminmultlevel *= 0.25;
							}
							if (MiscItem.TimeArmorRelicsOwned >= 1)
							{
								basediv *= 1.334;
								basediv2 *= 0.67;
							}
							if (MiscItem.TimeArmorRelicsOwned >= 2)
							{
								basediv *= 1.334;
								basediv2 *= 0.67;
							}
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]maxchance [extremerare, pre artifact check]: (%d) (basediv: %.8f, 2: %.8f) \c[orange][%d / %d], timefreezes: %d", basechance, basediv, basediv2, (i+1), droptimes, timefreezes);
							if (A_CheckKCTimeFreeze())
							{
								if (timefreezes >= 20)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 40)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 80)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 160)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 320)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 640)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 1280)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 2560)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 5120)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 10240)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
								if (timefreezes >= 20480)
								{
									basechance *= basediv;
									basechance -= (timefreezes * basediv2);
								}
							}
						}
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]maxchance [extremerare, post tf check]: (%d) (basediv: %.8f, 2: %.8f) \c[orange][%d / %d], timefreezes: %d", basechance, basediv, basediv2, (i+1), droptimes, timefreezes);
						luckbase = 3.0 + (monsterrating * 0.75); // (682.66667)
						if (MiscItem.TimeArmorRelicsOwned <= 0) luckbase = 3.0 + (monsterrating * 0.75);
						if (MiscItem.TimeArmorRelicsOwned == 1) luckbase = 4.2 + (monsterrating * 1.05);
						if (MiscItem.TimeArmorRelicsOwned >= 2) luckbase = 5.6 + (monsterrating * 1.4);
						if (A_CheckForHeiwaPlayer()) luckbase *= 1.143;
						luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
						luckbase *= kc_tsaluckfactor;
						luckbase *= 1.0 + (sielgraceluckboost * 0.0625);
						if (MiscItem.TimeArmorRelicsOwned <= 2)
						{
							int TSATrueLuck;
							int PLevel = TruePlayerLevel;
							if (skill <= 0) TSATrueLuck = random((PLevel*2.25),(PLevel*3));
							if (skill == 1) TSATrueLuck = random((PLevel*1.875),(PLevel*3));
							if (skill == 2) TSATrueLuck = random((PLevel*1.5),(PLevel*3));
							if (skill == 3) TSATrueLuck = random((PLevel*1.125),(PLevel*3));
							if (skill >= 4) TSATrueLuck = random((PLevel*0.75),(PLevel*3));
							TSATrueLuck *= kc_pluckfactor;
							if (PLuck || PLevel) basechance -= ((TrueLuck + TSATrueLuck) * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
							if (basechance < 1) basechance = 1;
							maxchance = basechance;
							nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(4,8);
							nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(2,4);
							nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(8,16);
							if (i > 0) maxchance *= 16;
							if (maxchance < (kc_inventorydroprate5 * tsaminmultlevel)) maxchance = (kc_inventorydroprate5 * tsaminmultlevel);

							rollrand = random(1,maxchance);
							if (rollrand <= 1)
							{
								if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]Extremely Rare Drop [success]");
								double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								double raredropsndvol = frandom(1.75,2.25);
								int raredropsndchannel = randompick(193,194,224,225,266,267);
								string raredropsndname = "ultrarareitem/spawn";
								victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

								raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
								raredropsndvol = frandom(1.75,2.25);
								raredropsndchannel = randompick(293,294,324,325,366,367);
								raredropsndname = "tsarmor/spawn";
								victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

								bool spawned;
								actor TSArtifact;
								[spawned, TSArtifact] = victim.A_SpawnItemEx("TSArtifactSpawner",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								if (spawned &&
										TSArtifact &&
										MiscItem)
								{
									if (A_CheckForHeiwaPlayer() ||
											random(1,8) <= 7)
									{
										MiscItem.TSArtifactSpawnCooldown += (kc_tsadropcooldown * TICRATE);
												 if (random(1,8) <= 5 && !A_CheckForHeiwaPlayer()) MiscItem.TSArtifactSpawnCooldown *= 1.5;
										else if (random(1,8) <= 1 && A_CheckForHeiwaPlayer()) MiscItem.TSArtifactSpawnCooldown *= 1.5;
									}
								}
							}
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[heiwadeluge]maxchance [extremerare]: {%d vs %d} (%d) \c[orange][%d / %d], timefreezes: %d", rollrand, maxchance, basechance, (i+1), droptimes, timefreezes);
						}
					}

					// KampoulSphere [Type 10] (Heiwa Only)
					if (A_CheckForHeiwaPlayer())
					{
						double allcompletefactorkmsp = (allcompletefactor * 7.5);
						double allkillsfactorkmsp = (allkillsfactor * 2.5);
						double allsecretsfactorkmsp = (allsecretsfactor * 2.5);
						double allitemsfactorkmsp = (allitemsfactor * 2.5);
						basechance = kc_inventorydroprate10;
						basechance *= kc_inventorydropratemulti;
						basechance *= skillmult;
						if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
						if (A_CheckBlooM()) basechance *= 0.5;
						if (A_CheckUOHYM()) basechance *= 2;
						luckbase = 1.0 + (monsterrating * 0.125); // (512)
						luckbase *= (0.25 +
												 (MiscItem.totalcompleted * allcompletefactorkmsp) +
												 (MiscItem.totalcompleted * allkillsfactorkmsp) +
												 (MiscItem.totalcompleted * allsecretsfactorkmsp) +
												 (MiscItem.totalcompleted * allitemsfactorkmsp));
						luckbase *= (1.00 + (MiscItem.sielsgraceactivations * frandom(2.25,3.75)));
						luckbase *= kc_luckfactor;
						luckbase *= sielgraceluckboost;
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
						nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
						nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
						if (i > 0) maxchance *= 16;
						if (maxchance < (kc_inventorydroprate10 * minmultlevel)) maxchance = (kc_inventorydroprate10 * minmultlevel);
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [kmsphere]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);

						rollrand = random(1,maxchance);
						if (rollrand <= 1)
						{
							double raredropsndpitch = frandompick(0.50,0.75,1.0,1.0625,1.125);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(193,194,224,225,266,267);
							string raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							raredropsndpitch = frandompick(0.25,0.4375,0.5,0.5625,0.625);
							raredropsndvol = frandom(1.75,2.25);
							raredropsndchannel = randompick(293,294,324,325,366,367);
							raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

							victim.A_SpawnItemEx("KampoulSphere",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
						}
					}

					// Capsules [Type 12] (Heiwa Only)
					if (A_CheckForHeiwaPlayer())
					{
						basechance = kc_inventorydroprate12;
						basechance *= kc_inventorydropratemulti;
						basechance *= skillmult;
						if (KCCVict && (KCCVict.isPEspawned || KCCVict.isHEspawned || KCCVict.isHOspawned)) basechance *= 8;
						if (A_CheckBlooM()) basechance *= 0.5;
						if (A_CheckUOHYM()) basechance *= 2;
						luckbase = 1.9375 + (monsterrating * 0.3875); // (512)
						if (victim.bBOSS) // Boss-flagged monsters have a much higher chance to drop a Capsule as their initial drop
						{
							if (i % 8 == 0)
							{
								basechance *= 0.125;
								luckbase *= 8.0;
							}
							else
							{
								basechance *= 0.75;
								luckbase *= 1.334;
							}
						}
						luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
						luckbase *= kc_luckfactor;
						luckbase *= sielgraceluckboost;
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(16,32);
						nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(8,16);
						nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(2,4);
						if (i > 0) maxchance *= 16;
						if (maxchance < (kc_inventorydroprate12 * minmultlevel)) maxchance = (kc_inventorydroprate12 * minmultlevel);
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [capsules]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);

						rollrand = random(1,maxchance);
						if (rollrand <= 1)
						{
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(193,194,224,225,266,267);
							string raredropsndname = "Capsule/Spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							raredropsndvol = frandom(1.75,2.25);
							raredropsndchannel = randompick(293,294,324,325,366,367);
							raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							raredropsndvol = frandom(1.75,2.25);
							raredropsndchannel = randompick(393,394,424,425,466,467);
							raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

							user_type = random(1,25);
							if (user_type >= 1 && user_type <= 5) victim.A_SpawnItemEx("VitalCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							else if (user_type >= 6 && user_type <= 10) victim.A_SpawnItemEx("SpeedCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							else if (user_type >= 11 && user_type <= 15) victim.A_SpawnItemEx("IQCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							else if (user_type >= 16 && user_type <= 20) victim.A_SpawnItemEx("SensesCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							else if (user_type >= 21 && user_type <= 23) victim.A_SpawnItemEx("GutsCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
							else if (user_type >= 24 && user_type <= 25) victim.A_SpawnItemEx("LuckCapsule",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
						}
					}

					// ???????? [Type 13] (Heiwa Only)
					if (A_CheckForHeiwaPlayer() &&
							playera.CountInv("SpecialBackpackBonus") < 25)
					{
						basechance = kc_inventorydroprate13;
						if (playera.CountInv("SpecialBackpackBonus") > 20) basechance *= 0.334;
						else if (playera.CountInv("SpecialBackpackBonus") > 10) basechance *= 0.5;
						else if (playera.CountInv("SpecialBackpackBonus") > 0) basechance *= 0.667;
						basechance *= kc_inventorydropratemulti;
						basechance *= skillmult;
						luckbase = 1.0 + (monsterrating * 0.5); // (4096)
						if (playera.CountInv("SpecialBackpackBonus") > 20) luckbase = 1.75 + (monsterrating * 0.875);
						else if (playera.CountInv("SpecialBackpackBonus") > 10) luckbase = 1.5 + (monsterrating * 0.75);
						else if (playera.CountInv("SpecialBackpackBonus") > 0) luckbase = 1.25 + (monsterrating * 0.625);
						if (victim.bBOSS)
						{
							if (playera.CountInv("SpecialBackpackBonus") > 0)
							{
								basechance *= 0.5;
								luckbase *= 2.0;
							}
							else
							{
								basechance *= 0.1;
								luckbase *= 10.0;
							}
						}
						luckbase *= (1.0 + (MiscItem.totalcompleted * allcompletefactor) + (MiscItem.totalcompleted * allkillsfactor) + (MiscItem.totalcompleted * allsecretsfactor) + (MiscItem.totalcompleted * allitemsfactor));
						luckbase *= kc_luckfactor;
						luckbase *= sielgraceluckboost;
						if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
						maxchance = basechance;
						nm = "CCards_Actor_Maestro"; if (vict == nm) maxchance /= random(8,16);
						nm = "CCards_Actor_Horror"; if (vict == nm) maxchance /= random(4,8);
						nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) maxchance *= random(1,2);
						if (i > 0) maxchance *= 16;
						if (maxchance < (kc_inventorydroprate13 * minmultlevel)) maxchance = (kc_inventorydroprate13 * minmultlevel);
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [spbkpk]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);

						rollrand = random(1,maxchance);
						if (rollrand <= 1)
						{
							double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							double raredropsndvol = frandom(1.75,2.25);
							int raredropsndchannel = randompick(193,194,224,225,266,267);
							string raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							raredropsndvol = frandom(1.75,2.25);
							raredropsndchannel = randompick(293,294,324,325,366,367);
							raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
							raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
							raredropsndvol = frandom(1.75,2.25);
							raredropsndchannel = randompick(393,394,324,325,466,467);
							raredropsndname = "ultrarareitem/spawn";
							victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);

							victim.A_SpawnItemEx("SpecialBackpack",0.0,0.0,0.0,frandom(-25.0,25.0),frandom(-25.0,25.0),frandom(-12.5,12.5),SXF_NOCHECKPOSITION);
						}
					}
				}
			}

			// Special Actor Conditions
			if (vict == "ZBell")
			{
				int typesdrop = 1;
			}

			// Mapset Specific Things
			nm = "Balloon_Black"; extracheck = nm;
			if (vict == extracheck)
			{
			}
			nm = "Balloon"; extracheck = nm;
			nn = "BallTarg"; extracheck2 = nn;
			no = "Balloon_Red"; extracheck3 = no;
			np = "Balloon_Red2"; extracheck4 = np;
			if (vict == extracheck || vict == extracheck2 || vict == extracheck3 || vict == extracheck4)
			{
			}
			nm = "Balloon_Yellow"; extracheck = nm;
			nn = "BallYel"; extracheck2 = nn;
			if (vict == extracheck || vict == extracheck2)
			{
			}
			nm = "Balloon_Green"; extracheck = nm;
			nn = "BallGreen"; extracheck2 = nn;
			if (vict == extracheck || vict == extracheck2)
			{
			}
			nm = "Balloon_Blue"; extracheck = nm;
			if (vict == extracheck)
			{
			}
		}

		return PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill;
	}

	double A_GetExpLowCap(double BaseExpMultiBonus)
	{
		double BaseExpLowcap = 1;
		BaseExpLowCap *= BaseExpMultiBonus;
		BaseExpLowcap *= kc_expmultiplier;
		double xx1 = int(BaseExpLowcap / 1);
		double xx2 = BaseExpLowcap % 1.0;
		xx2 = int(xx2 * 10000);
		if (random(1,10000) <= xx2) xx1 += 1;

		int ExpLowcap = xx1;
		if (ExpLowcap < 1) ExpLowcap = 1;
		//Console.Printf("BaseExpLowCap: %.8f, xx1: %.8f, xx2: %.8f, ExpLowCap: %d", BaseExpLowCap, xx1, xx2, ExpLowcap);

		return ExpLowcap;
	}

	override void WorldThingDied(WorldEvent e)
	{
		int TrueGameSkill = skill;
		if (Level.MapName != "TITLEMAP")
		{
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			actor victim = e.Thing;
			actor inflicter = e.inflictor;
			string mod = "NONE";
			actor source;
			actor mastor;
			if (inflicter && inflicter.target) source = inflicter.target;
																		else source = e.Thing.target;
			if (inflicter && inflicter.master) mastor = inflicter.master;
																		else mastor = e.Thing.target;
			if (victim && victim.damagetype)
			{
				mod = victim.damagetype; // = e.damagetype;
				if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (inflicter)
				{
					mod = inflicter.damagetype; // = e.damagetype;
					if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
				}
				else
				{
					if (source)
					{
						mod = source.damagetype; // = e.damagetype;
						if (kcdebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
					}
				}
			}
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			string mast = "NONE";
			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();
			if (mastor) mast = mastor.GetClassName();
			int PLuck;
			int TrueLuck;
			let globalvars = KCGlobalVariables.Get();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			int user_type;
			bool giveexp = false;
			bool playerkill = false;
			bool allykill = false;
			bool waslegendary = false;
			KCCreature KCC;
			KCC = KCCreature(victim);
			bool exception = CheckExceptions(victim);

			bool isCCardsIllusion = false;
			if (victim)
			{
				victim.SetInventory("LDLegendaryMonsterTransformed", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectMaker", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectAlternator", 0);
				if (victim.CountInv("LDLegendaryMonsterTracker") > 0)
				{
					waslegendary = true;
					victim.A_SetInventory("LDLegendaryMonsterTracker",0);
				}

				if (victim.bNOBLOOD == true &&
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false &&
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
			}

			// Specific Foes [1]

			if (MiscItem)
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}
			if (kcdebug_worlddied) Console.Printf("[%p (%s)] WorldThingDied", victim, vict);

			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np, nq, nr, ns, nt;

			if (victim &&
					!victim.CountInv("E1M8ExitRoomMonster") &&
					!isCCardsIllusion &&
					!exception)
			{
				int specialtype, specialtype2;
				nm = "CCardGhostMarker"; if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker"; if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker"; if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne"; if (victim.GetClassName() == nm) specialtype += 8;
				nm = "KC_CCards_Actor_9LivesCurse"; if (victim.CountInv(nm)) specialtype += 16;
				nm = "CCards_Actor_PilotedMech"; if (victim.CountInv(nm)) specialtype += 32;
				nm = "CCards_Actor_Spider"; if (victim.GetClassName() == nm) specialtype += 128;
				nm = "CCards_SpookySkeleton"; if (victim.GetClassName() == nm) specialtype += 256;
				nm = "CCards_Boss_Romero"; if (victim.GetClassName() == nm) specialtype += 512;
				nm = "CCards_Actor_Bane"; if (victim.GetClassName() == nm) specialtype += 1024;
				nm = "CCards_Actor_Maestro"; if (victim.GetClassName() == nm) specialtype += 2048;
				nm = "CCards_Actor_MiniMonsterPowerup"; if (victim.CountInv(nm)) specialtype += 4096;
				nm = "CCards_Actor_HasRespawned"; if (victim.CountInv(nm)) specialtype += 8192;
				nm = "LostSoulEvit2"; if (victim.GetClassName() == nm) specialtype += 16384;
				nm = "CCards_Actor_Horror"; if (victim.GetClassName() == nm) specialtype += 32768;
				nm = "CCards_Actor_Cursed"; if (victim.CountInv(nm)) specialtype += 65536;
				nm = "CCards_Actor_FleaCurse"; if (victim.CountInv(nm)) specialtype += 131072;
				if (Wads.CheckNumForName("KC-STAEONS", Wads.ns_global, -1, true) != -1)
				{
					nm = "PurpleTentacle"; if (victim.GetClassName() == nm) specialtype2 += 4;
					nm = "Skeleton"; if (victim.GetClassName() == nm) specialtype2 += 8;
				}
				if (A_CheckUOHYM())
				{
					nm = "Mite"; if (victim.GetClassName() == nm) specialtype2 += 16;
					nm = "SkinStealer"; if (victim.GetClassName() == nm) specialtype2 += 32;
					if (victim.bISMONSTER) specialtype2 += 64;
				}
				if (kcdebug_worlddied) Console.Printf("[%s] SpecialType [WorldDied]: %d, %d", vict, specialtype, specialtype2);

				//
				if (!(KCPlayerPawn(victim)) ||
						 (victim.bCOUNTKILL || specialtype || specialtype2))
				{
					int monsterrating = victim.CountInv("MonsterRating");
					if (!victim.CountInv("DedMonsterFlag") && !sv_monsterrespawn) victim.A_SetInventory("DedMonsterFlag",1);

					if (kcdebug_worlddied) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					if ((victim.bCOUNTKILL || specialtype || specialtype2) && !victim.bFRIENDLY && (inflicter || source))
					{
						if (inflicter)
						{
							if (PlayerPawn(inflicter)) playerkill = true;
							else if (inflicter.bFRIENDLY) allykill = true;
							if (inflicter.bFRIENDLY || PlayerPawn(inflicter))
							{
								//
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("inflictor: %s [%d]", infl, inflicter.bFRIENDLY);
						}
						else
						if (source)
						{
							if (PlayerPawn(source)) playerkill = true;
							else if (source.bFRIENDLY) allykill = true;
							if (source.bFRIENDLY || PlayerPawn(source))
							{
								//
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("source: %s [%d]", sour, source.bFRIENDLY);
						}
						if (mastor)
						{
							if (PlayerPawn(mastor)) playerkill = true;
							else if (mastor.bFRIENDLY) allykill = true;
							//
							if (mastor.bFRIENDLY || PlayerPawn(mastor)) giveexp = true;
							if (kcdebug_worlddied) Console.Printf("mastor: %s [%d]", mast, mastor.bFRIENDLY);
						}
						if (EvilWarriorShieldBall(inflicter) && playerkill && MiscItem)
						{
							MiscItem.EWShieldKills++;
							if (kcdebug_worlddied) Console.Printf("MiscItem.EWShieldKills: %d [inflicter]", MiscItem.EWShieldKills);
						}
						nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) giveexp = false;
						if (kcdebug_worlddied) Console.Printf("playerkill: %d, allykill: %d", playerkill, allykill);

						if ((playerkill || allykill) && MiscItem)
						{
						}

						int ExpGain = (victim.SpawnHealth() + victim.Stamina);
						nm = "CCards_Actor_AssassinBuff";
						if (waslegendary ||
								victim.CountInv(nm)) ExpGain *= 1.25;
						if (A_CheckUOHYM())
						{
									 if (specialtype & 32) ExpGain *= (frandom(3.2,4.8) * frandompick(0.875,1.0,1.0,1.0,1.125));
							else if (specialtype & 16) ExpGain *= (frandom(0.8,1.2) * frandompick(0.875,1.0,1.0,1.0,1.125));
																		else ExpGain *= (frandom(0.3,0.45) * frandompick(0.75,0.875,1.0,1.125,1.25));
						}

						if (A_CheckBlooM())
						{
							if (vict == "ChtonBloom") ExpGain *= random(8,12);
							ExpGain *= frandompick(1.25,1.375,1.375,1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);
						}

						if (monsterrating)
						{
							if (waslegendary ||
									victim.CountInv(nm))
							{
								if (monsterrating == 1) ExpGain *= 1.05;
								if (monsterrating == 2) ExpGain *= 1.1;
								if (monsterrating == 3) ExpGain *= 1.2;
								if (monsterrating == 4) ExpGain *= 1.4;
								if (monsterrating == 5) ExpGain *= 1.8;
								if (monsterrating == 6) ExpGain *= 2.6;
								if (monsterrating == 7) ExpGain *= 4.2;
								if (monsterrating >= 8) ExpGain *= 7.4;
							}
							else
							{
								if (monsterrating == 1) ExpGain *= 1.0125;
								if (monsterrating == 2) ExpGain *= 1.025;
								if (monsterrating == 3) ExpGain *= 1.05;
								if (monsterrating == 4) ExpGain *= 1.1;
								if (monsterrating == 5) ExpGain *= 1.2;
								if (monsterrating == 6) ExpGain *= 1.4;
								if (monsterrating == 7) ExpGain *= 1.8;
								if (monsterrating >= 8) ExpGain *= 2.6;
							}
						}
						if (specialtype & 1) ExpGain *= 0.5; // CCardGhostMarker
						if (specialtype & 2) ExpGain *= frandompick(1.8,2.2); // CCardAssassinMarker
						if (specialtype & 4) ExpGain *= frandompick(0.625,0.875); // CCardRespawnedMarker
						if (specialtype & 8) ExpGain *= frandompick(7.5,12.5); // CCards_Actor_TheAncientOne
						if (specialtype & 16)
						{
							ExpGain *= frandompick(0.75,1.25); // KC_CCards_Actor_9LivesCurse
							nm = "KC_CCards_Actor_9LivesCounter";
							if (victim.CountInv(nm))
							{
								int lives = victim.CountInv(nm);
								if (lives >= 9)
								{
									ExpGain *= (1.00 + (lives * frandom(0.5,0.667)));
								}
								else
								if (lives >= 4 && lives <= 8)
								{
									ExpGain *= (1.00 + (lives * frandom(0.25,0.334)));
								}
								else
								{
									ExpGain *= (1.00 + (lives * frandom(0.125,0.167)));
								}
							}
						}
						if (specialtype & 32) ExpGain *= 1.5; // CCards_Actor_PilotedMech
						if (specialtype & 128) ExpGain *= 0.5; // CCards_Actor_Spider
						if (specialtype & 256) ExpGain *= 0.5; // CCards_SpookySkeleton
						if (specialtype & 512) ExpGain *= 0.5; // CCards_Boss_Romero
						if (specialtype & 1024) ExpGain *= frandompick(7.5,12.5); // CCards_Actor_Bane
						if (specialtype & 2048) ExpGain *= frandompick(7.5,12.5); // CCards_Actor_Maestro
						if (specialtype & 4096) ExpGain *= frandompick(0.125,0.25); // CCards_Actor_MiniMonsterPowerup
						if (specialtype & 8192) ExpGain *= frandompick(0.375,0.625); // CCards_Actor_HasRespawned
						if (specialtype & 32768) ExpGain *= frandompick(2.5,3.125); // CCards_Actor_Horror
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck')
						{
							if (waslegendary || victim.CountInv(nm)) ExpGain *= frandom(1.0625,1.25);
							ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
						}
						if (specialtype & 65536) if (victim.CountInv(nm)) ExpGain *= frandom(1.25,1.5); // CCards_Actor_Cursed
						if (specialtype & 131072) if (victim.CountInv(nm)) ExpGain *= frandom(9.0,10.0); // CCards_Actor_FleaCurse
						if (MiscItem && MiscItem.IQPieces > 0)
						{
							double IQBonus = (1.0 + double(MiscItem.IQPieces / 256.0));
							ExpGain *= IQBonus;
							if (kcdebug_worlddied) Console.Printf("[IQPieces] %d, [bonus: %.8f]", MiscItem.IQPieces, IQBonus);
						}
						if (MiscItem && MiscItem.SensesPieces > 0)
						{
							double SensesBonus = (1.0 + double(MiscItem.SensesPieces / 256.0));
							ExpGain *= SensesBonus;
							if (kcdebug_worlddied) Console.Printf("[SensesPieces] %d, [bonus: %.8f]", MiscItem.SensesPieces, SensesBonus);
						}
						ExpGain *= frandom(0.05,0.125);

						if ((source && source.bFRIENDLY) || (inflicter && inflicter.bFRIENDLY) || (mastor && mastor.bFRIENDLY)) ExpGain *= frandom(0.65,0.90);
						if (KCPlayerPawn(source) && infl == "PlayerWhistle") ExpGain *= frandom(1.1875,1.3125);

						double alterchance = 1.0;
						if (source)
						{
						}
						else
						if (inflicter)
						{
						}
						else
						if (mastor)
						{
						}
						ExpGain *= alterchance;

						int PLevel = playera.CountInv("PlayerLevel");
						If (PLuck)
						{
									 if (PLevel <= 11) ExpGain *= (1.00 + (TrueLuck * frandompick(0,0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02)));
							else if (PLevel <= 26) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.01,0.02,0.02)));
							else if (PLevel <= 66) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04)));
							else if (PLevel <= 101) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04)));
							else if (PLevel <= 201) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04)));
							else if (PLevel <= 401) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04)));
							else if (PLevel <= 701) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08)));
							else if (PLevel <= 1001) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08,0.08)));
						}
						double BaseExpMultiBonus = 1.0;
						if (playera)
						{
							if (A_CheckForHeiwaPlayer())
							{
								if (kcheiwa_lowlevelexpmulti)
								{
											 if (PLevel < 2)  BaseExpMultiBonus = frandompick(2.375,3.0,3.0,3.0,3.625);
									else if (PLevel < 5)  BaseExpMultiBonus = frandompick(1.625,2.0,2.0,2.0,2.375);
									else if (PLevel < 10) BaseExpMultiBonus = frandompick(1.25,1.5,1.5,1.5,1.75);
									else if (PLevel < 25) BaseExpMultiBonus = frandompick(1.0625,1.25,1.25,1.25,1.4375);
																	 else BaseExpMultiBonus = frandompick(1.03125,1.125,1.125,1.125,1.21875);
								}
								else
								{
									BaseExpMultiBonus = frandompick(1.03125,1.125,1.125,1.125,1.21875);
								}

								double BaseExpMultiBonus2 = 1.0;
								if (playera.CountInv("TimeSeraphCharm")) BaseExpMultiBonus2 += 0.125;
								if (playera.CountInv("TimeSeraphPocketWatch")) BaseExpMultiBonus2 += 0.125;
								if (playera.CountInv("TimeSeraphBangle")) BaseExpMultiBonus2 += 0.25;
								BaseExpMultiBonus *= BaseExpMultiBonus2;
							}
							else
							{
								if (playera.CountInv("TimeSeraphCharm")) BaseExpMultiBonus += 0.25;
								if (playera.CountInv("TimeSeraphPocketWatch")) BaseExpMultiBonus += 0.25;
								if (playera.CountInv("TimeSeraphBangle")) BaseExpMultiBonus += 0.5;
							}
						}
						ExpGain *= BaseExpMultiBonus;
						if (MiscItem)
						{
							int OExpGain = ExpGain;
							double tallyextra;
							tallyextra = (MiscItem.totalallkills * 0.005) + (MiscItem.totalallitems * 0.0025) + (MiscItem.totalallsecrets * 0.0025) + (MiscItem.totalcompleted * 0.01);
							ExpGain *= (1.00 + tallyextra);
							if (kcdebug_worlddied) Console.Printf("[tallyextra] x%.4f, ExpGain: %d [%d]", 1.00+tallyextra, ExpGain, OExpGain);
							if (MiscItem.KillComboCount > 0)
							{
								double combomultiplieramt;
								double based = 0.001;
								tallyextra = MiscItem.KillComboCount;
								if (tallyextra < 11) based = 0.0016;
								else if (tallyextra > 10 && tallyextra < 21) based = 0.0017;
								else if (tallyextra > 20 && tallyextra < 36) based = 0.0020;
								else if (tallyextra > 35 && tallyextra < 61) based = 0.0024;
								else if (tallyextra > 60 && tallyextra < 101) based = 0.0028;
								else if (tallyextra > 100 && tallyextra < 201) based = 0.0034;
								else if (tallyextra > 200 && tallyextra < 501) based = 0.0040;
								else if (tallyextra > 500) based = 0.0052;
								if (A_CheckForHeiwaPlayer()) based *= 0.667;
																				else based *= 1.334;
								combomultiplieramt = (tallyextra * based);
								combomultiplieramt += 1.00;
								OExpGain = ExpGain;
								ExpGain = (ExpGain * combomultiplieramt);
								if (kcdebug_worlddied) Console.Printf("[combomultiplieramt] x%.4f, tallyextra: %d, based: %.4f, ExpGain: %d [%d]", combomultiplieramt, tallyextra, based, ExpGain, OExpGain);
							}
						}
						EXPGain *= kc_expmultiplier;

						KCCreature KCC;
						KCC = KCCreature(victim);
						if ((KCC && KCC.expshare >= 0.001) && !(playerkill || allykill))
						{
							int OExpGain = ExpGain;
							ExpGain *= (KCC.expshare * frandom(0.667,1.000));
							int ExpLowCap = A_GetExpLowCap(BaseExpMultiBonus);
							if (ExpGain < ExpLowCap) ExpGain = ExpLowCap;
							if (kcdebug_worlddied && ExpGain) Console.Printf("[KCC.expshare] x%.4f, ExpGain: %d [%d]", KCC.expshare, ExpGain, OExpGain);
						}

						if (giveexp && kc_expgains && Level.MapName != "TITLEMAP")
						{
							int ExpLowCap = A_GetExpLowCap(BaseExpMultiBonus);
							if (ExpGain < ExpLowCap) ExpGain = ExpLowCap;

							Actor playera = players[0].mo;
							if (playera.health > 0 ||
									!playera.CountInv("PlayerIsDead"))
							{
								int EXPPrevReq = 0;
								if (MiscItem.PlayerLevel > 0) EXPPrevReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel-1)];
								int EXPCurrReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel)];
								int EXPFullReq = (EXPCurrReq-EXPPrevReq);
								//Console.Printf("%d / %d (%d)", EXPPrevReq, EXPCurrReq, EXPFullReq);
								playera.A_GiveInventory("KillsCount",1);
								playera.A_GiveInventory("ExpPts",ExpGain);
								int Kills = playera.CountInv("KillsCount");
								int ExpNew = playera.CountInv("ExpPts");
								int ExpNeeded = playera.CountInv("ExpPtsNeeded");
								int PlayerLevel = playera.CountInv("PlayerLevel");
								if (kc_showexpgains && ExpGain)
								{
									double fact = (1.00 + (MiscItem.KillComboCount * 0.01));
									int basegain = (105 * fact);
									int extgain = (35 * fact);
									int tier1 = (105 * fact);
									int tier2 = (175 * fact);
									int tier3 = (245 * fact);
									int tier4 = (315 * fact);
									int tier5 = (420 * fact);
									Console.Printf("\c[green]+%d EXP! \c[darkgreen][Have: %d / %d (Lvl: %d)] \c[red](Kills: %d)", ExpGain, ExpNew, ExpNeeded, PlayerLevel, Kills);
									MiscItem.KillComboCount += 1;
									MiscItem.EXPGainHUDAmt += ExpGain;
									if (MiscItem.EXPGainHUDTimer <= 0)
									{
										MiscItem.EXPGainHUDTimer = basegain;
										MiscItem.EXPGainHUDTimerMax = basegain;
									}
									else
									{
										MiscItem.EXPGainHUDTimer += extgain;
										MiscItem.EXPGainHUDTimerMax += extgain;

										if (MiscItem.EXPGainHUDTimer < tier1 && ExpGain > (EXPFullReq * 0.05))
										{
											MiscItem.EXPGainHUDTimer = tier1;
											MiscItem.EXPGainHUDTimerMax = tier1;
										}
										if (MiscItem.EXPGainHUDTimer < tier2 && ExpGain > (EXPFullReq * 0.10))
										{
											MiscItem.EXPGainHUDTimer = tier2;
											MiscItem.EXPGainHUDTimerMax = tier2;
										}
										if (MiscItem.EXPGainHUDTimer < tier3 && ExpGain > (EXPFullReq * 0.25))
										{
											MiscItem.EXPGainHUDTimer = tier3;
											MiscItem.EXPGainHUDTimerMax = tier3;
										}
										if (MiscItem.EXPGainHUDTimer > tier4 && ExpGain > (EXPFullReq * 0.5))
										{
											MiscItem.EXPGainHUDTimer = tier4;
											MiscItem.EXPGainHUDTimerMax = tier4;
										}
										if (MiscItem.EXPGainHUDTimer > tier5)
										{
											MiscItem.EXPGainHUDTimer = tier5;
											MiscItem.EXPGainHUDTimerMax = tier5;
										}
									}
								}
							}
						}
						else
						{
							Actor playera = players[0].mo;
							if (playera.health > 0 ||
									!playera.CountInv("PlayerIsDead"))
							{
								playera.A_GiveInventory("KillsCount",1);
								int Kills = playera.CountInv("KillsCount");
							}
						}

						// BUILD-style oneliner for kills [optional]
						bool playoneliner = false;
						if (inflicter == playera || source == playera || mastor == playera) playoneliner = true;
						nm = "PennywiseToy1"; extracheck = nm; if (vict == extracheck) playoneliner = false;
						if (!playerkill) playoneliner = false;

						if (kcdebug_worlddied) Console.Printf("playoneliner: %d", playoneliner);
						if (playoneliner &&
								A_CheckForHeiwaPlayer() &&
								MiscItem &&
								(playera.health > 0 ||
								 !playera.CountInv("PlayerIsDead")))
						{
							if (kcdebug_worlddied) Console.Printf("Voice Check");
							bool voicecheck = false;
							if (kc_heiwaextravoices && kc_heiwaoneliners && !MiscItem.OneLinerCooldown)
							{
								if (MiscItem.OneLinerCooldown <= 0 ||
										waslegendary ||
										victim.CountInv(nm))
								{
									voicecheck = true;
									let speakitem = PlayerTargettedMonster(victim.FindInventory("PlayerTargettedMonster"));
									if (speakitem && speakitem.spoketoboss) voicecheck = false;
								}
							}
							if (voicecheck)
							{
								int basechance = kc_heiwaonelinerbasechance; // 8
								if (basechance < 0) basechance = 0;
								if (basechance > 0)
								{
									if (playera.CountInv("DecentHealth")) basechance *= 1.25;
									if (playera.CountInv("LowHealth")) basechance *= 1.5;
									if (playera.CountInv("CriticalHealth")) basechance *= 1.875;
									if (waslegendary || victim.CountInv(nm)) basechance *= 5;

									if (infl == "FistPuff" || infl == "UppercutPuff" || infl == "KickPuff" || infl == "KickPuffNoThrust") basechance *= frandompick(3.5,4,4.5);
									if (victim.bBOSS) basechance *= 8;
									if (playera && A_CheckBerserk(playera)) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
									int maxchance = 256;
									if (waslegendary || victim.CountInv(nm)) maxchance *= 0.25;
									if (kcdebug_worlddied) Console.Printf("%d / %d", basechance, maxchance);
									if (random(1,maxchance) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
									{
										double maskpitch = 1.00;
										if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
										string voicenm;
										double voicevol = frandom(1.25,1.75);
										if (playera && A_CheckBerserk(playera))  voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
										int randvoice = random(1,9);
										if (randvoice == 1)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.000 * TICRATE));
											voicenm = "Heiwa/GoToHell"; //
											Console.Printf("\c[HeiwaChamosis]'Go to Hell!!'\c-"); //
										}
										if (randvoice == 2)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.218 * TICRATE));
											voicenm = "Heiwa/HereReward"; //
											Console.Printf("\c[HeiwaChamosis]'Here's your 'reward'!'\c-"); //
										}
										if (randvoice == 3)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.184 * TICRATE));
											voicenm = "Heiwa/HearUCry"; //
											Console.Printf("\c[HeiwaChamosis]'Let me hear you cry!'\c-"); //
										}
										if (randvoice == 4)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.077 * TICRATE));
											voicenm = "Heiwa/HowULikeThat"; //
											Console.Printf("\c[HeiwaChamosis]'How'd you like that!?'\c-"); //
										}
										if (randvoice == 5)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.15 * TICRATE));
											voicenm = "Heiwa/UWantMore"; //
											Console.Printf("\c[HeiwaChamosis]'Oh, you want more?!'\c-"); //
										}
										if (randvoice == 6)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.479 * TICRATE));
											voicenm = "Heiwa/ISaidMove"; //
											Console.Printf("\c[HeiwaChamosis]'I said -'MOVE'-!!'\c-"); //
										}
										if (randvoice == 7)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.541 * TICRATE));
											voicenm = "Heiwa/UInMyWay"; //
											Console.Printf("\c[HeiwaChamosis]'You're in my way!'\c-"); //
										}
										if (randvoice == 8)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.591 * TICRATE));
											voicenm = "Heiwa/HeyShutMouth"; //
											Console.Printf("\c[HeiwaChamosis]'Hey! Shut your mouth!'\c-"); //
										}
										if (randvoice == 9)
										{
											MiscItem.OneLinerTimerCool = ceil(int(1.117 * TICRATE));
											voicenm = "Heiwa/WontHoldBack"; //
											Console.Printf("\c[HeiwaChamosis]'I won't hold back!'\c-"); //
										}
										if (kcdebug_worlddied) Console.Printf("One-Liner: %d", randvoice);
										//
										//
										//
										if (randvoice > 0)
										{
											playera.A_StopSound(CHAN_VOICE);
											playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch);
											MiscItem.OneLinerCooldown += (frandom(1.75,3.0) * TICRATE);
										}
									}
								}
							}
						}
					}

					// Item Drop Action
					if (KCC && KCC.user_dontdroprandomstuff) { }
					else
					{
						if (mod != 'Crush' ||
								mod != 'Falling' ||
								!exception)
						{
							[PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill] = A_KillDropTables(PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill);
						}
					}

					//*******************************
					//* Killed With Certain Weapons *
					//*******************************
					if (source &&
							(KCPlayerPawn(source) || A_CheckForHeiwaPlayer()) &&
							(victim.bCOUNTKILL || specialtype || specialtype2))
					{
						//
					}

					KCCreature BossVict;
					BossVict = KCCreature(victim);
					if (BossVict)
					{
						if (kcdebug_scriptdisplays) Console.Printf("BossVict");
						BossVict.bossdeathactivate++;
					}
				}
			}
		}
		Super.WorldThingDied(e);
	}

	override void WorldLoaded(WorldEvent e)
	{
		if (kcdebug_checksumprintout) Console.Printf("\cyMapCheckSum:\cx %s", level.GetChecksum());
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();

		int levelnums = level.levelnum;


		// DynMus Reset
		if (MiscItem)
		{
			int tempdynmusictype = kc_dynamicmusic;
			int tutlevelmin = 1801;
			int tutlevelmax = 1804;
			if (level.levelnum >= tutlevelmin && level.levelnum <= tutlevelmax) tempdynmusictype = 3;

			if (tempdynmusictype == 3 && !e.IsReopen && !e.IsSaveGame) MiscItem.DynMusSetUsed = randompick(random(0,23),random(101,122),random(1001,1005));
			if (MiscItem.DynMusFightTimer > 0 || MiscItem.DynMusCalmTimer > 0 || MiscItem.DynMusActCall || MiscItem.randmusroll > -1)
			{
				MiscItem.DynMusActCall = false;
				MiscItem.DynMusFightTimer = -1;
				MiscItem.DynMusCalmTimer = -1;
				MiscItem.randmusroll = -1;
				MiscItem.playeractiontimer = 0;
				MiscItem.playeractiontimerfrag = 0;
			}
		}

		if (!e.IsReopen)
		{
			bool addmapcounttrue = true;
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (globalvars.MapNum[i] == levelnums)
				{
					addmapcounttrue = false;
					break;
				}
			}
			// Check for certain MAPs that are more of intermission maps [PSX Doom TC's "D[#]END". KDIZD'S "INTERMAP", etc]
			if (addmapcounttrue)
			{
				let IsPSXDoom = PlayingPSXDoom(playera.FindInventory("PlayingPSXDoom"));
				if (IsPSXDoom)
				{
					if (kcdebug_mapfinishcheck) Console.Printf("\c[orange]Playing PSX Doom");
					if (level.GetChecksum() == '95d8e4afa07a7e3330997a6aa5d0318d') addmapcounttrue = false;
					if (level.GetChecksum() == '17e16b88bf7f163f05a6a5c45f0dfeb6') addmapcounttrue = false;
					if (level.GetChecksum() == '39f6b93101248e39ae1af7c751647ea1') addmapcounttrue = false;
					if (level.GetChecksum() == '058234c82963c80b99a58081f829dead') addmapcounttrue = false;
					if (level.GetChecksum() == '77e33d393cb8386a13fe74391e053cd6') addmapcounttrue = false;
					if (level.GetChecksum() == '7364394e3b113aea8490d8b0b89c7e05') addmapcounttrue = false;
				}
				if (!addmapcounttrue)
				{
					if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]IS AN INTERMISSION MAP (do not add to the queue)");
				}
			}
			if (addmapcounttrue)
			{
				globalvars.MapsFinished++;
				globalvars.MapNum.push(globalvars.MapsFinished);
				globalvars.MapNum[globalvars.MapsFinished] = level.levelnum;
				globalvars.NumKills.push(globalvars.MapsFinished);
				globalvars.MaxKills.push(globalvars.MapsFinished);
				globalvars.AllKills.push(globalvars.MapsFinished);
				globalvars.AllKills[globalvars.MapsFinished] = false;
				globalvars.AllKillsSound.push(globalvars.MapsFinished);
				globalvars.AllKillsSound[globalvars.MapsFinished] = false;
				globalvars.AllKillsTimer.push(globalvars.MapsFinished);
				globalvars.AllKillsTimer[globalvars.MapsFinished];

				globalvars.NumItems.push(globalvars.MapsFinished);
				globalvars.MaxItems.push(globalvars.MapsFinished);
				globalvars.AllItems.push(globalvars.MapsFinished);
				globalvars.AllItems[globalvars.MapsFinished] = false;
				globalvars.AllItemsSound.push(globalvars.MapsFinished);
				globalvars.AllItemsSound[globalvars.MapsFinished] = false;
				globalvars.AllItemsTimer.push(globalvars.MapsFinished);
				globalvars.AllItemsTimer[globalvars.MapsFinished];

				globalvars.NumSecrets.push(globalvars.MapsFinished);
				globalvars.MaxSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets[globalvars.MapsFinished] = false;
				globalvars.AllSecretsSound.push(globalvars.MapsFinished);
				globalvars.AllSecretsSound[globalvars.MapsFinished] = false;
				globalvars.AllSecretsTimer.push(globalvars.MapsFinished);
				globalvars.AllSecretsTimer[globalvars.MapsFinished];

				globalvars.AllCompletion.push(globalvars.MapsFinished);
				globalvars.AllCompletion[globalvars.MapsFinished] = false;
				globalvars.AllCompletionSound.push(globalvars.MapsFinished);
				globalvars.AllCompletionSound[globalvars.MapsFinished] = false;
				globalvars.AllCompletionTimer.push(globalvars.MapsFinished);
				globalvars.AllCompletionTimer[globalvars.MapsFinished];
				if (kcdebug_mapfinishcheck) Console.Printf("\c[blue]Not Reopen\c- [maps in queue: %d]", globalvars.MapsFinished);
			}
			else
			{
				if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (non-hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
			}
		}
		else
		{
			if (!e.IsSaveGame) if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
		}

		string giveitem = "";
		// Post LevelPostProcess Compatibility Stuff >_>
		if (gameinfo.gametype == 1) // Doom GameMode
		{
			giveitem = "PlayingDoom1";
			if (level.GetChecksum() == 'b49f7a6c519757d390d52667db7d8793' || // doom.wad e1m1
					level.GetChecksum() == '81a4cc5136cbfa49345654190a626c09' || // doom.wad e1m2
					level.GetChecksum() == 'c7ff2282bc606ffb28ddcb90357094e6' || // doom.wad e1m3
					level.GetChecksum() == '5B26545FF21B051CA06D389CE535684C' || // doom.wad e1m4
					level.GetChecksum() == '66d8e54b173041f981a11cce766c4215' || // doom.wad e1m5
					level.GetChecksum() == '5faa25f5a6aab3409cae0af87f910341' || // doom.wad e1m6
					level.GetChecksum() == '9007f68e7f351a5758198933336f6b9f' || // doom.wad e1m7
					level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1' || // doom.wad e1m8
					level.GetChecksum() == '1dbf91738492fb0e29836a2d66406cf1' || // doom.wad e1m9
					level.GetChecksum() == '65455ac523799f8dce19f3d1968776a2' || // doom.wad e2m1
					level.GetChecksum() == 'A24FE135D5B6FD427FE27BEF89717A65' || // doom.wad e2m2
					level.GetChecksum() == '918436b3c2d0ad4f2c108183414b4612' || // doom.wad e2m3
					level.GetChecksum() == '1BC04D646B32D3A3E411DAF3C1A38FF8' || // doom.wad e2m4
					level.GetChecksum() == '99C580AD8FABE923CAB485CB7F3C5E5D' || // doom.wad e2m5
					level.GetChecksum() == '3838AB29292587A7EE3CA71E7040868D' || // doom.wad e2m6
					level.GetChecksum() == '8590F489879870C098CD7029C3187159' || // doom.wad e2m7
					level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' || // doom.wad e2m8
					level.GetChecksum() == '8A6399FAAA2E68649D4E4B16642074BE' || // doom.wad e2m9
					level.GetChecksum() == 'c4a89a481a32bfeddeb82e818f2bdec5' || // doom.wad e3m1
					level.GetChecksum() == 'BBDC4253AE277DA5FCE2F19561627496' || // doom.wad e3m2
					level.GetChecksum() == 'f951882cb5a8def910f0ed966a1054c5' || // doom.wad e3m3
					level.GetChecksum() == '2B65CB046EA40D2E44576949381769CA' || // doom.wad e3m4
					level.GetChecksum() == '100106C75157B7DECB0DCAD2A59C1919' || // doom.wad e3m5
					level.GetChecksum() == '2baf49b4cc36155b60b5330660ac0976' || // doom.wad e3m6
					level.GetChecksum() == '5AC51CA9F1B57D4538049422A5E37291' || // doom.wad e3m7
					level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' || // doom.wad e3m8
					level.GetChecksum() == 'FE97DCB9E6235FB3C52AE7C143160D73' || // doom.wad e3m9
					level.GetChecksum() == 'DA0C8281AC70EEC31127C228BCD7FE2C' || // doom.wad e4m1
					level.GetChecksum() == '771092812F38236C9DF2CB06B2D6B24F' || // doom.wad e4m2
					level.GetChecksum() == 'F6EE16F770AD309D608EA0B1F1E249FC' || // doom.wad e4m3
					level.GetChecksum() == 'AAECADD4D97970AFF702D86FAFAC7D17' || // doom.wad e4m4
					level.GetChecksum() == 'C2E09AB0BDD03925305A48AE935B71CA' || // doom.wad e4m5
					level.GetChecksum() == 'CBBFF61A8C231DFFC8E8A2A2BAEB77FF' || // doom.wad e4m6
					level.GetChecksum() == '94D4C869A0C02EF4F7375022B36AAE45' || // doom.wad e4m7
					level.GetChecksum() == '2DC939E508AB8EB68AF79D5B60568711' || // doom.wad e4m8
					level.GetChecksum() == '78556d238ffec8058cacc48b847e1fab') // doom.wad e4m9
			{
				if (!playera.FindInventory(giveitem)) playera.A_SetInventory(giveitem,1);
			}
			giveitem = "PlayingDoom2";
			if (level.GetChecksum() == '3c9902e376cca1e9c3be8763bdc21df5' || // doom2.wad map01
					level.GetChecksum() == 'AB24AE6E2CB13CBDD04600A4D37F9189' || // doom2.wad map02
					level.GetChecksum() == '5e8679670469f92e15cf4219b5b98fef' || // doom2.wad map03
					level.GetChecksum() == 'CEC791136A83EEC4B91D39718BDF9D82' || // doom2.wad map04
					level.GetChecksum() == '9E061AD7FBCD7FAD968C976CB4AA3B9D' || // doom2.wad map05
					level.GetChecksum() == '434575dcb650b4efc912efc0782c7acc' || // doom2.wad map06
					level.GetChecksum() == '291F24417FB3DD411339AE82EF9B3597' || // doom2.wad map07
					level.GetChecksum() == '66C46385EB1A23D60839D1532522076B' || // doom2.wad map08
					level.GetChecksum() == '82256f04136adb2413bfc604b5f6adf3' || // doom2.wad map09
					level.GetChecksum() == '6C620F43705BEC0ABBABBF46AC3E62D2' || // doom2.wad map10
					level.GetChecksum() == '73d9e03cee7bf1a97efd2ead86688ef8' || // doom2.wad map11
					level.GetChecksum() == '1AF4DEC2627360A55B3EB397BC15C39D' || // doom2.wad map12
					level.GetChecksum() == 'FBA6547B9FD44E95671A923A066E516F' || // doom2.wad map13
					level.GetChecksum() == '5BDA34DA60C0530794CC1EA2DA017976' || // doom2.wad map14
					level.GetChecksum() == '1A540BA717BF9EC85F8522594C352F2A' || // doom2.wad map15
					level.GetChecksum() == '6B60F37B91309DFF1CDF02E5E476210D' || // doom2.wad map16
					level.GetChecksum() == 'E1CFD5C6E60C3B6C30F8B95FC287E9FE' || // doom2.wad map17
					level.GetChecksum() == '0D491365C1B88B7D1B603890100DD03E' || // doom2.wad map18
					level.GetChecksum() == 'B5506B1E8F2FC272AD0C77B9E0DF5491' || // doom2.wad map19
					level.GetChecksum() == '8898f5ec9cbdcd98019a1bc1bf892a8a' || // doom2.wad map20
					level.GetChecksum() == 'EBDAC00E9D25D884B2C8F4B1F0390539' || // doom2.wad map21
					level.GetChecksum() == '4AA9B3CE449FB614497756E96509F096' || // doom2.wad map22
					level.GetChecksum() == '63f25c97d5b1cc174efea7f6af499960' || // doom2.wad map23
					level.GetChecksum() == '3eff15c64a03b36e8e47926c6df9ef70' || // doom2.wad map24
					level.GetChecksum() == '94893A0DC429A22ADC4B3A73DA537E16' || // doom2.wad map25
					level.GetChecksum() == '1037366026AAB4B0CF11BAB27DB90E4E' || // doom2.wad map26
					level.GetChecksum() == '110F84DE041052B59307FAF0293E6BC0' || // doom2.wad map27
					level.GetChecksum() == '84BB2C8ED2343C91136B87F1832E7CA5' || // doom2.wad map28
					level.GetChecksum() == '20251EDA21B2F2ECF6FF5B8BBC00B26C' || // doom2.wad map29
					level.GetChecksum() == '5eecd88f4491f516d590ce4bbf45f532' || // doom2.wad map30
					level.GetChecksum() == '3ff94e27423f91c1585b3396f0c03459' || // doom2.wad map31
					level.GetChecksum() == 'aa4ca3fc891d13821accabd836e29eb5') // doom2.wad map32
			{
				if (!playera.FindInventory(giveitem)) playera.A_SetInventory(giveitem,1);
			}
		}

		giveitem = "PlayingRAMP";
		if (level.GetChecksum() == '8e1d1b012a817bb8828d7096dd1ecc28' && !playera.FindInventory(giveitem)) // ramp.pk3 map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to R.A.M.P., Kiddo! :V");
		}
		giveitem = "PlayingGoingDown";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !playera.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to Going Down, Kiddo! :V");
		}
		giveitem = "PlayingPSXDoom";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !playera.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to PSX Doom TC, Kiddo! V:<");
		}
		giveitem = "PlayingAugerZenith";
		if (level.GetChecksum() == 'a130224617d892e5023ab43392f4000d' && !playera.FindInventory(giveitem)) // DBP37_AUGZEN.wad [AUGER ZENITH] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to AUGER ZENITH, Kiddo! V:<");
		}
		//if (level.GetChecksum() == 'c4f05c26410edfe5085b6f8504be47a8') // ???????.pk3

		if (!playera.CountInv("EWShieldDefendMode") && playera.bREFLECTIVE) playera.bREFLECTIVE = false;
		if (!playera.CountInv("EWShieldDefendMode") && playera.bSHIELDREFLECT) playera.bSHIELDREFLECT = false;

		Super.WorldLoaded(e);
	}

	override void PlayerDied(PlayerEvent e)
	{
		PlayerPawn player = PlayerPawn(players[consoleplayer].mo);
		if (player)
		{
			bool check1 = true;
			let kcplayer = KCPlayerPawn(player);
			if (kcplayer)

			if (A_CheckUOHYM())
			{
				if (level.mapname == "MAP01" ||
						level.mapname == "20PAM" ||
						level.mapname == "MAP02")
				{
					check1 = false;
					int randsong = random(1,2);
					if (kcplayer)
					{
						kcplayer.deathsongused = randsong;
						if (kcplayer.deathsongused <= 1) S_ChangeMusic("GAMOVR", 0, false, true);
						if (kcplayer.deathsongused >= 2) S_ChangeMusic("GAMOVR2", 0, false, true);
					}
				}
			}

			if (check1)
			{
				actor Player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (kc_deathmusic)
				{
					if (kc_deathmusic == 1) S_ChangeMusic("GAMOVR", 0, false, true);
					if (kc_deathmusic == 2) S_ChangeMusic("GAMOVR2", 0, false, true);
					if (kc_deathmusic == 3) S_ChangeMusic("RoReDead", 0, false, true);
					if (kc_deathmusic == 4) S_ChangeMusic("GaOvYe", 0, false, true);
					if (kc_deathmusic == 5) S_ChangeMusic("DRQUDEAD", 0, false, true);
					if (kc_deathmusic == 6) S_ChangeMusic("MiRiBuTi", 0, false, true);
					if (kc_deathmusic == 7) S_ChangeMusic("ToDiYoAD", 0, false, true);
					if (kc_deathmusic == 8) S_ChangeMusic("MGS2GMOV", 0, false, true);
					if (kc_deathmusic == 9) S_ChangeMusic("ShGYaheh", 0, false, true);
					if (kc_deathmusic == 10) S_ChangeMusic("AH3GMOVR", 0, false, true);
					if (kc_deathmusic == 11) S_ChangeMusic("JURPRKP2", 0, false, true);
					if (kc_deathmusic == 12) S_ChangeMusic("CUYOENTH", 0, false, true);
					if (kc_deathmusic == 13) S_ChangeMusic("", 0, false, true);
				}
			}
		}

		Super.PlayerDied(e);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		S_ChangeMusic("*", 0, true, true);
		Super.PlayerRespawned(e);
	}

	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);

		return false;
	}

	void A_SpawnTFAfterImage(actor tf, int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (type <= 0)
		{
			// Clears previous Images first
			PlayerAfterimageTimeFreeze mo;
			ThinkerIterator it;
			it = ThinkerIterator.Create("PlayerAfterimageTimeFreeze");
			while (mo = PlayerAfterimageTimeFreeze(it.Next()))
			{
				if (mo)
				{
					mo.Destroy();
				}
			}

			// Clears previous Images first
			PlayerAfterimageTimeFreezeFull mo2;
			ThinkerIterator it2;
			it2 = ThinkerIterator.Create("PlayerAfterimageTimeFreezeFull");
			while (mo2 = PlayerAfterimageTimeFreezeFull(it2.Next()))
			{
				if (mo2)
				{
					mo2.Destroy();
				}
			}
			
			if (playera.GetClassName() == "HeiwaPlayer")
			{
				// Spawns a Time-Freeze Image where the player froze time
				bool spawned;
				actor timefreezeaftimg;
				[spawned, timefreezeaftimg] = tf.A_SpawnItemEx("PlayerAfterimageTimeFreeze", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (timefreezeaftimg)
				{
					timefreezeaftimg.A_SetSize(tf.radius,tf.height,false);
					timefreezeaftimg.A_SetScale(tf.scale.x,tf.scale.y,false);
					timefreezeaftimg.master = tf;
					timefreezeaftimg.alpha = (tf.alpha * 0.75);
					
					PlayerAfterimageTimeFreeze timefreezeaftimg2;
					timefreezeaftimg2 = PlayerAfterimageTimeFreeze(timefreezeaftimg);
					if (timefreezeaftimg2)
					{
						timefreezeaftimg2.tfmaster = tf;
						timefreezeaftimg2.fadeaway = false;
						timefreezeaftimg2.basefade = MiscItem.tfaftimgbasefade;
						timefreezeaftimg2.internaltimermax = MiscItem.tfaftimgbasefade2;
						timefreezeaftimg2.basealpha2 = (tf.alpha * 0.75);
					}
				}
				[spawned, timefreezeaftimg] = tf.A_SpawnItemEx("PlayerAfterimageTimeFreezeFull", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_TRANSFERSPRITEFRAME |  SXF_TRANSFERSCALE | SXF_TRANSFERALPHA);
				if (timefreezeaftimg)
				{
					timefreezeaftimg.A_SetSize(tf.radius,tf.height,false);
					timefreezeaftimg.A_SetScale(tf.scale.x,tf.scale.y,false);
					timefreezeaftimg.master = tf;
					timefreezeaftimg.alpha = (tf.alpha * 0.375);
					
					PlayerAfterimageTimeFreezeFull timefreezeaftimg2;
					timefreezeaftimg2 = PlayerAfterimageTimeFreezeFull(timefreezeaftimg);
					if (timefreezeaftimg2)
					{
						timefreezeaftimg2.tfmaster = tf;
						timefreezeaftimg2.fadeaway = false;
						timefreezeaftimg2.basefade = MiscItem.tfaftimgbasefade;
						timefreezeaftimg2.internaltimermax = MiscItem.tfaftimgbasefade2;
						timefreezeaftimg2.basealpha2 = (tf.alpha * 0.375);
					}
				}
			}
		}
		else
		{
			PlayerAfterimageTimeFreeze mo;
			ThinkerIterator it;
			it = ThinkerIterator.Create("PlayerAfterimageTimeFreeze");
			while (mo = PlayerAfterimageTimeFreeze(it.Next()))
			{
				if (mo)
				{
					mo.SetStateLabel('Death');
					mo.fadeaway = true;
					if (!mo.basefade) mo.basefade = MiscItem.tfaftimgbasefade;
					if (!mo.internaltimermax) mo.internaltimermax = MiscItem.tfaftimgbasefade2;
				}
			}
			PlayerAfterimageTimeFreezeFull mo2;
			ThinkerIterator it2;
			it2 = ThinkerIterator.Create("PlayerAfterimageTimeFreezeFull");
			while (mo2 = PlayerAfterimageTimeFreezeFull(it2.Next()))
			{
				if (mo2)
				{
					mo2.SetStateLabel('Death');
					mo2.fadeaway = true;
					if (!mo2.basefade) mo2.basefade = MiscItem.tfaftimgbasefade;
					if (!mo2.internaltimermax) mo2.internaltimermax = MiscItem.tfaftimgbasefade2;
				}
			}
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		Actor playera = players[consoleplayer].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int buttons = playera.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")
		{
			int key1, key2;

			if (!paused)
			{
				[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (buttons & BT_SPEED) level.total_monsters += 1;
														 else level.total_monsters -= 1;
				}
				[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (buttons & BT_SPEED) level.total_items += 1;
														 else level.total_items -= 1;
				}
				[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (buttons & BT_SPEED) level.total_secrets += 1;
														 else level.total_secrets -= 1;
				}
				[key1, key2] = Bindings.GetKeysForCommand("MKeyTest4");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (level.mapname == "E1M8") Floor_LowerToLowest(666, 8);
					if (level.mapname == "MAP07") Floor_LowerToLowest(666, 8);
				}
				[key1, key2] = Bindings.GetKeysForCommand("KC_CheatClear");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (KCPlayerPawn(playera) &&
							MiscItem)
					{
						if (MiscItem.timestopstate <= 0)
						{
							if (MiscItem.timestopcooldown1tics > 0)
							{
								MiscItem.timestopcooldown1tics = 0;
								playera.A_SetInventory("KCTimeCooldown",0);
								playera.A_StartSound("TimeFreezeCooldown",219,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
								playera.A_SetBlend("264026",0.667,random(random(22,23),27));
							}
							if (MiscItem.timestopcooldown2tics > 0)
							{
								MiscItem.timestopcooldown2tics = 0;
								playera.A_SetInventory("KCTimeCooldown2",0);
								playera.A_StartSound("TimeFreezeCooldown",220,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
								playera.A_SetBlend("402626",0.667,random(random(22,23),27));
							}
							if (MiscItem.timestopcooldown3tics > 0)
							{
								MiscItem.timestopcooldown3tics = 0;
								playera.A_SetInventory("KCTimeCooldown3",0);
								playera.A_StartSound("TimeFreezeCooldown",221,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
								playera.A_SetBlend("252540",0.667,random(random(22,23),27));
							}
						}
					}
				}
				[key1, key2] = Bindings.GetKeysForCommand("Whistl");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					if (MiscItem)
					{
						if ((playera.health > 0 &&
								!playera.CountInv("PlayerIsDead"))
								&& MiscItem.whistlecooldown <= 0)
						{
							double vol = frandom(0.86,1.14);
							int basewcooldown = random(42,49);
							if (playera && A_CheckBerserk(playera))
							{
								vol *= 1.2;
								basewcooldown *= 0.67;
							}
							playera.A_StartSound("player/whistle5",CHAN_VOICE,CHANF_DEFAULT,vol,ATTN_NONE,frandom(0.76,1.24));
							if (!(playera.CountInv("KCTimeFreezer") ||
										playera.CountInv("KCTimeFreezer1") ||
										playera.CountInv("KCTimeFreezer2") ||
										playera.CountInv("KCTimeFreezer3")))
							{
								playera.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
							}
							else
							{
								basewcooldown *= 0.25;
							}
							MiscItem.whistlecooldown += basewcooldown;
						}
					}
				}
				[key1, key2] = Bindings.GetKeysForCommand("KC_TimeStop");
				if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
				{
					bool alttimestoptypes = false;
					if (KCPlayerPawn(playera) &&
							playera.health > 0 &&
							!playera.CountInv("PlayerIsDead") &&
							MiscItem)
					{
						int timestopinittype = 1;
						if (MiscItem.timestopstate <= 0) // Check to make sure a Time Ability isn't already active :V
						{
							if (alttimestoptypes)
							{
								if (buttons & BT_ZOOM) timestopinittype = 3;
								else if (buttons & BT_SPEED) timestopinittype = 2;
								else timestopinittype = 1;
							}
							//Type 3 - Offensive Freeze [10s duration/45s cooldown (base), 4-5x damage to all frozen foes when hit, less boosted regen]
							if (timestopinittype >= 3)
							{
								if (MiscItem.TruePlayerLevel >= MiscItem.timefreeze3levellearned)
								{
									if (MiscItem.timestopcooldown3tics <= 0)
									{
										MiscItem.timestopcooldown3tics = 0;
										MiscItem.timestopstate = 3;
										MiscItem.timestopactivetics = int(MiscItem.timefreeze3duration * TICRATE);
										MiscItem.timestopactivemaxtics = int(MiscItem.timefreeze3duration * TICRATE);
										playera.A_SetBlend("644F4F",0.667,random(random(22,23),27));

										playera.A_StopSound(216);
										playera.A_StopSound(217); // Cuts Wind-Down Off
										playera.A_StopSound(218); // Cuts Ticks Off
										playera.A_StopSound(219); // Cuts Type Sound Off
										playera.A_StartSound("TimeFreezeIn4",216,CHANF_DEFAULT,0.875,ATTN_NONE);
										playera.A_StartSound("TimeFreezeOffensiveIn",219,CHANF_DEFAULT,0.875,ATTN_NONE);
										Console.Printf("Offensive Time Freeze Activated");
										A_SpawnTFAfterImage(playera,0);
									}
									else
									{
										playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
										Console.Printf("\c[brick]Offensive Time Freeze Must Cool Down First!");
									}
								}
								else
								{
									playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								}
							}
							//Type 2 - Neutral Freeze [20s duration/22.5s cooldown (base), neutral damage values dealt to foes, no extra regeneration boosts]
							else
							if (timestopinittype == 2)
							{
								if (MiscItem.TruePlayerLevel >= MiscItem.timefreeze2levellearned)
								{
									if (MiscItem.timestopcooldown2tics <= 0)
									{
										MiscItem.timestopcooldown2tics = 0;
										MiscItem.timestopstate = 2;
										MiscItem.timestopactivetics = int(MiscItem.timefreeze2duration * TICRATE);
										MiscItem.timestopactivemaxtics = int(MiscItem.timefreeze2duration * TICRATE);
										playera.A_SetBlend("646464",0.667,random(random(22,23),27));

										playera.A_StopSound(216);
										playera.A_StopSound(217); // Cuts Wind-Down Off
										playera.A_StopSound(218); // Cuts Ticks Off
										playera.A_StopSound(219); // Cuts Type Sound Off
										playera.A_StartSound("TimeFreezeIn4",216,CHANF_DEFAULT,0.875,ATTN_NONE);
										playera.A_StartSound("TimeFreezeNeutralIn",219,CHANF_DEFAULT,0.875,ATTN_NONE);
										Console.Printf("Neutral Time Freeze Activated");
										A_SpawnTFAfterImage(playera,0);
									}
									else
									{
										playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
										Console.Printf("\c[brick]Neutral Time Freeze Must Cool Down First!");
									}
								}
								else
								{
									playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								}
							}
							//Type 1 - Defensive Freeze [default, 10s duration/45s cooldown (base), 4-5x less damage dealt to foes, greatly boosted regeneration]
							else
							{
								if (timestopinittype <= 1)
								{
									if (MiscItem.timestopcooldown1tics <= 0)
									{
										MiscItem.timestopcooldown1tics = 0;
										MiscItem.timestopstate = 1;
										MiscItem.timestopactivetics = int(MiscItem.timefreeze1duration * TICRATE);
										MiscItem.timestopactivemaxtics = int(MiscItem.timefreeze1duration * TICRATE);
										playera.A_SetBlend("4F644F",0.667,random(random(22,23),27));

										playera.A_StopSound(216);
										playera.A_StopSound(217); // Cuts Wind-Down Off
										playera.A_StopSound(218); // Cuts Ticks Off
										playera.A_StopSound(219); // Cuts Type Sound Off
										playera.A_StartSound("TimeFreezeIn4",216,CHANF_DEFAULT,0.875,ATTN_NONE);
										playera.A_StartSound("TimeFreezeDefensiveIn",219,CHANF_DEFAULT,0.875,ATTN_NONE);
										if (MiscItem.TruePlayerLevel >= MiscItem.timefreeze2levellearned &&
												alttimestoptypes)
										{
											Console.Printf("Neutral Time Freeze Activated");
										}
										else
										{
											Console.Printf("Time Freeze Activated");
										}
										A_SpawnTFAfterImage(playera,0);
									}
									else
									{
										if (MiscItem.TruePlayerLevel >= MiscItem.timefreeze2levellearned &&
												alttimestoptypes)
										{
											playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
											Console.Printf("\c[brick]Defensive Time Freeze Must Cool Down First!");
										}
										else
										{
											playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
											Console.Printf("\c[brick]Time Freeze Must Cool Down First!");
										}
									}
								}
								else
								{
									playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								}
							}
						}
						else
						{
							MiscItem.timestopactivetics = 0;
							MiscItem.timestopstate = 0;
							playera.A_StopSound(217); // Cuts Wind-Down Off
							playera.A_StopSound(218); // Cuts Ticks Off
							playera.A_StopSound(219); // Cuts Type Sound Off
							playera.A_StartSound("TimeFreezeOut4a",216,CHANF_DEFAULT,0.875,ATTN_NONE);

							if (playera.CountInv("KCTimeFreezer1"))
							{
								playera.A_SetInventory("KCTimeFreezer1",0);
								MiscItem.timestopcooldown1tics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
								MiscItem.timestopcooldown1maxtics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
								MiscItem.timefreeze1cooldownratio2 = 0.0;
								MiscItem.timefreeze1timesused += MiscItem.timeusemulti;
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 3)) MiscItem.timefreeze1timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 2)) MiscItem.timefreeze1timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 1)) MiscItem.timefreeze1timesused += MiscItem.timeusemulti; // 1
								playera.A_SetInventory("KCTimeCooldown",1);
								playera.A_StartSound("TimeFreezeDefensiveOut",219,CHANF_DEFAULT,0.875,ATTN_NONE);
								if (MiscItem.TruePlayerLevel >= MiscItem.timefreeze2levellearned &&
										alttimestoptypes)
								{
									Console.Printf("Defensive Time Freeze Cut Short");
								}
								else
								{
									Console.Printf("Time Freeze Cut Short");
								}
								A_SpawnTFAfterImage(playera,1);
							}
							else
							if (playera.CountInv("KCTimeFreezer2"))
							{
								playera.A_SetInventory("KCTimeFreezer2",0);
								MiscItem.timestopcooldown2tics = (int(MiscItem.timefreeze2cooldown * TICRATE) * MiscItem.timefreeze2cooldownratio2);
								MiscItem.timestopcooldown2maxtics = (int(MiscItem.timefreeze2cooldown * TICRATE) * MiscItem.timefreeze2cooldownratio2);
								MiscItem.timefreeze2cooldownratio2 = 0.0;
								MiscItem.timefreeze2timesused += MiscItem.timeusemulti;
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 3)) MiscItem.timefreeze2timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 2)) MiscItem.timefreeze2timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 1)) MiscItem.timefreeze2timesused += MiscItem.timeusemulti; // 1
								playera.A_SetInventory("KCTimeCooldown2",1);
								playera.A_StartSound("TimeFreezeNeutralOut",219,CHANF_DEFAULT,0.875,ATTN_NONE);
								Console.Printf("Neutral Time Freeze Cut Short");
								A_SpawnTFAfterImage(playera,1);
							}
							else
							if (playera.CountInv("KCTimeFreezer3"))
							{
								playera.A_SetInventory("KCTimeFreezer3",0);
								MiscItem.timestopcooldown3tics = (int(MiscItem.timefreeze3cooldown * TICRATE) * MiscItem.timefreeze3cooldownratio2);
								MiscItem.timestopcooldown3maxtics = (int(MiscItem.timefreeze3cooldown * TICRATE) * MiscItem.timefreeze3cooldownratio2);
								MiscItem.timefreeze3cooldownratio2 = 0.0;
								MiscItem.timefreeze3timesused += MiscItem.timeusemulti;
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 3)) MiscItem.timefreeze3timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 2)) MiscItem.timefreeze3timesused += MiscItem.timeusemulti; // 1
								if ((playera.CountInv("KCPowerKampoul") && random(1,4) <= 1)) MiscItem.timefreeze3timesused += MiscItem.timeusemulti; // 1
								playera.A_SetInventory("KCTimeCooldown3",1);
								playera.A_StartSound("TimeFreezeOffensiveOut",219,CHANF_DEFAULT,0.875,ATTN_NONE);
								Console.Printf("Offensive Time Freeze Cut Short");
								A_SpawnTFAfterImage(playera,1);
							}

						}
					}
				}
			}
		}
	}

	override void UiTick()
	{
		int ChangedMusicDefault;
		//
		super.UiTick();
	}

	override void RenderOverlay(RenderEvent e)
	{
		//
		//
		if (Wads.CheckNumForName("KC-UOHYM", Wads.ns_global, -1, true) != -1 &&
				level.mapname == "MAP01")
		{
			PlayerPawn player = PlayerPawn(players[consoleplayer].mo);
			if (player)
			{
				let kcplayer = KCPlayerPawn(player);
				if (kcplayer)
				{
					if (kcplayer.whitehot > 0)
					{
						double alpha = double(kcplayer.whitehot) / double(15 * 1);
						Screen.dim(Color(0xFFFFFF), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
					}

					int fadepoint = kcplayer.deathtimerthres1;
					if (kcplayer.deathsongused == 1) fadepoint = 545;
					if (kcplayer.deathsongused == 2) fadepoint = 615;
					if (kcplayer.deathtimer >= (fadepoint-3) &&
							kcplayer.deathtimer <= (fadepoint+3))
					{
						S_ChangeMusic("D_SILENT", 0, false, true);
						if (kcdebug_deathtimerdisplays) Console.Printf("Music Silencing [%d]", kcplayer.deathtimer);
					}

					double alpha = 0.0;
					if (kcplayer.deathtimer < kcplayer.deathtimerthres4)
					{
						if (kcplayer.CountInv("UOHEnd4"))
						{
							alpha = double(kcplayer.dimtimer) / double(175);
							//Console.Printf("[ending 4] alpha: %.8f", alpha);
							Screen.dim(Color(0), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
						}
					}
					else
					{
						//10 seconds to fade to black
						if (kcplayer.deathfadetimebase > 0)
						{
							alpha = double(kcplayer.deathtimer_b) / double(kcplayer.deathfadetimebase);
							//Console.Printf("[deathfadetimebase] alpha: %.8f", alpha);
							Screen.dim(Color(0), alpha, 0, 0, Screen.getWidth(), screen.getHeight());
						}
					}
				}
			}
		}

		super.RenderOverlay(e);
	}

}

class ItemData
{
	Inventory savedItem;
	bool wasUndroppable;
	bool wasUntossable;
	int hadAmount;
}

class KC_StaticEventHandler : StaticEventHandler
{
	bool A_CheckBlooM()
	{
		bool BlooM = false;
		if (Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true) != -1) BlooM = true;
		return BlooM;
	}

	// So I don't forget, a lot of the code in this for keeping things on Resets is from DevilBlackDeath's "Inventory Keeper" minimod. A lot of the comments below are his on the effects. :V
	struct PlayerInvData
	{
		Inventory invFirst;
		Inventory invSel;
		Inventory ReadyWeapon;
	}

	private bool isNewGame; // This is a new game, nothing should be done in this situation !
	private PlayerInvData[MAXPLAYERS] savedInventory; // Inventory backup for players
	// Items set to undroppable and untossable, once the world is loaded they should go back to their original state
	private Array<ItemData> dropBlockers;
	private int[MAXPLAYERS] playerNeedsRestore; // List of players to restore (players in game)
	private Array<int> playersToResurrect; // List of players to resurrect from a death exit
	private int prevhealthval; // added by Misfit V:

	private void ResurrectPlayers()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResurrectPlayers() activated");
		for (int i = 0; i < playersToResurrect.Size(); i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [2], i: %d", i);
			PlayerInfo pi = players[playersToResurrect[i]];
			PlayerPawn p = PlayerPawn(pi.mo);

			/* Resurrect the player, this is the only way to keep their inventory intact
			   during intermission - DBD*/
			if (playeringame[playersToResurrect[i]] && p != null)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ResurrectPlayers [3], i: %d", i);
				pi.Resurrect();
			}
		}
	}

	private void ManageKeys()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageKeys() activated");
		bool keepKeys = false; // Defaulting to false if no value is found

		if (CVar.FindCVar("kc_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("kc_deathexitkeepkeys").GetBool();

		if (!keepKeys)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [2 - KeepKeys is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [3 - Player#]:\c- %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageKeys [4 - playersToResurrect]");
					Inventory item = p.Inv;

					while (item != null)
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [5 - Item Check]:\c- %s", item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Key')
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageKeys [6a - Key Type Found]:\c- %s", item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
				}
			}
		}
	}

	/* ManageHealth is my own personal addition to the ResetInventory check stuff for the mod,
	for future purposes, so no code yet - Misfit :V */
	private void ManageHealth()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageHealth() activated");
		bool keepHealth = true; // Defaulting to false if no value is found

		if (CVar.FindCVar("kc_deathexitkeephealth") != null)
			keepHealth = CVar.FindCVar("kc_deathexitkeephealth").GetBool();

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [2 - Player#], i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);

			if (playeringame[i] && p != null)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [3 - playeringame]:\c- i: %d", i);
				if (keepHealth)
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4a - keepHealth is \c[gold]ON\c[green]]");
					if (p.health > 0)
					{
						prevhealthval = p.health;
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5a - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
					else
					{
						prevhealthval = 1;
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageHealth [5b - playeringame], i: %d, prevhealthval: %d", i, prevhealthval);
					}
				}
				else
				{
					prevhealthval = p.health;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageHealth [4b - keepHealth is \c[red]OFF\c[green]\c]");
				}
			}
		}
	}

	private void ManageWeapons()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ManageWeapons() activated");
		bool keepWeapons = true; // Defaulting to true if no value is found
		bool keepBackpacks = true; // Defaulting to true if no value is found
		bool keepWeaponupgrades = true; // Defaulting to true if no value is found
		bool keepSigil = true; // Defaulting to true if no value is found

		if (CVar.FindCVar("kc_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("kc_deathexitkeepweapons").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepbackpacks") != null)
			keepBackpacks = CVar.FindCVar("kc_deathexitkeepbackpacks").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepweaponupgrades") != null)
			keepWeaponupgrades = CVar.FindCVar("kc_deathexitkeepweaponupgrades").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepsigil") != null)
			keepSigil = CVar.FindCVar("kc_deathexitkeepsigil").GetBool();

		if (!keepWeapons)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [2 - KeepWeapons is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [3 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [4 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null)
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [5 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Weapon' ||
								item is 'BasicArmor' ||
								item is 'KCArmor' ||
								item is 'HexenArmor' ||
								item is 'Ammo')
						{
							if (keepSigil &&
									(Item is 'SigilKC' ||
									 Item is 'SigilPieces' ||
									 Item is 'SigilModeType'))
							{
								if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6ba - Sigil Found and Kept]: i: %d, %s", i, item.GetClassName());
								item = item.Inv;
							}
							else
							{
								if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
								p.RemoveInventory(item);
								item = p.Inv;
							}
						}
						else
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6bb - Weapon Found and Kept]: i: %d, %s", i, item.GetClassName());
							item = item.Inv;
						}
					}
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [7 - GiveDefaultInventory]: i: %d", i);
					p.GiveDefaultInventory(); // Give the default inventory
				}
			}
		}

		if (!keepBackpacks)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [2 - keepBackpacks is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [3 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [4 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null)
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [5 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'Backpack' ||
								item is 'BackpackTier1' ||
								item is 'BackpackTier2')
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6a - 'Backpack' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [6bb - Weapon Found and Kept]: i: %d, %s", i, item.GetClassName());
							item = item.Inv;
						}
					}
				}
			}
		}

		if (!KeepWeaponUpgrades)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [8 - KeepWeaponsUpgrades is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [9 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [10 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null)
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [11 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'HellWarriorShieldLevel' ||
								item is 'WeaponUpgradeItem' ||
								item is 'BaseModPack')
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [12a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
					//if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [13 - GiveDefaultInventory]: i: %d", i);
					//p.GiveDefaultInventory(); // Give the default inventory
				}
			}
		}

		if (!keepSigil)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ManageWeapons [13 - KeepSigil is off]");
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [14 - Player#], i: %d", i);
				PlayerInfo pi = players[i];
				PlayerPawn p = PlayerPawn(pi.mo);

				if (playeringame[i] && p != null && playersToResurrect.Find(i) < playersToResurrect.Size())
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [15 - playersToResurrect], i: %d", i);
					Inventory item = p.Inv;

					while (item != null)
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [16 - Item Check]:\c- i: %d, %s", i, item.GetClassName());
						// Not checking for level-specific stuff like keys as this
						// seems to be automatically invalidated
						if (item is 'SigilKC' ||
								item is 'SigilPieces' ||
								item is 'SigilModeType')
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]ManageWeapons [17a - 'Weapon' Type Found]: i: %d, %s", i, item.GetClassName());
							p.RemoveInventory(item);
							item = p.Inv;
						}
						else
							item = item.Inv;
					}
				}
			}
		}
	}

	private void RestorePlayerInvState(int pNum)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestorePlayerInvState() activated");
		PlayerInfo pi = players[pNum];
		PlayerPawn p = PlayerPawn(pi.mo);

		if (playeringame[pNum] && p != null && playerNeedsRestore[pNum])
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [2 - playeringame]:\c- pnum: %d", pnum);
			bool keepWeapons = true; // Defaulting to true if no value is found

			if (CVar.FindCVar("kc_deathexitkeepweapons") != null)
				keepWeapons = CVar.FindCVar("kc_deathexitkeepweapons").GetBool();

			if (p.CountInv("ResetInventory") || p.CountInv("PlayerIsDead"))
			{
				if (prevhealthval > 0)
				{
					p.health = prevhealthval;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3a - resetting health to previous]:\c- pNum: %d, %d", pNum, p.health);
				}
				else
				{
					let MiscItem = PlayerStatItem(p.FindInventory("PlayerStatItem"));
					if (MiscItem) p.health = MiscItem.MaxHealthTrue;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestorePlayerInvState [3b - resetting health to current max:\c- pNum: %d, %d", pNum, p.health);
				}
			}

			/* We restore the player's inventory state
			   This is not to give the player back their inventory, they technically
			   still have it after the resurrection, this is mostly to make sure
			   the selected inventory item and equipped weapons remain the same
			   (from tests, these seem to reset on death+resurrect) */
			p.InvFirst = savedInventory[pNum].invFirst;
			p.InvSel = savedInventory[pNum].invSel;
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [4 - savedinventory]:\c- pNum: %d", pNum);

			/* We restore the readied weapon only if weapons are kept, otherwise,
			   the game changing the readied weapons is the effect of losing them on purpose ! */
			if (keepWeapons)
			{
				pi.PendingWeapon = Weapon(savedInventory[pNum].readyWeapon);
				if (kcdebug_resetinventorydebug) Console.Printf("\c[green]RestorePlayerInvState [5 - keepWeapons on]:\c- pNum: %d", pNum);
			}
		}
	}

	void BackupInventories()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- BackupInventories() activated");
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [2 - player#]:\c- i: %d", i);
			PlayerInfo pi = players[i];
			PlayerPawn p = PlayerPawn(pi.mo);

			if (playeringame[i] && p != null)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]BackupInventories [3 - playeringame]: i: %d", i);
				// This player needs to be restored
				playerNeedsRestore[i] = true;

				/* Save all important inventory informations (what item was
				   selected, and what weapon was equipped, these may get unequipped on death) */
				savedInventory[i].invFirst = p.InvFirst;
				savedInventory[i].invSel = p.InvSel;
				savedInventory[i].readyWeapon = pi.ReadyWeapon;
			}
		}
	}

	private void RestoreItemsState()
	{
		bool keepWeapons = true; // Defaulting to true if no value is found
		bool keepBackpacks = true; // Defaulting to true if no value is found
		bool keepWeaponUpgrades = true; // Defaulting to true if no value is found
		bool keepSigil = true; // Defaulting to true if no value is found
		bool keepInvBarItems = true; // Defaulting to true if no value is found
		bool keepKeys = false; // Defaulting to false if no value is found

		if (CVar.FindCVar("kc_deathexitkeepweapons") != null)
			keepWeapons = CVar.FindCVar("kc_deathexitkeepweapons").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepbackpacks") != null)
			keepBackpacks = CVar.FindCVar("kc_deathexitkeepbackpacks").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepweaponupgrades") != null)
			keepWeaponUpgrades = CVar.FindCVar("kc_deathexitkeepweaponupgrades").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepsigil") != null)
			keepSigil = CVar.FindCVar("kc_deathexitkeepsigil").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepinventoryitems") != null)
			keepInvBarItems = CVar.FindCVar("kc_deathexitkeepinventoryitems").GetBool();

		if (CVar.FindCVar("kc_deathexitkeepkeys") != null)
			keepKeys = CVar.FindCVar("kc_deathexitkeepkeys").GetBool();

		ResetInventory ResetItem;
		PlayerIsDead DeadItem;
		int ResetItemAmt;
		int DeadItemAmt;
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			ResetItem = ResetInventory(dropBlockers[i].savedItem);
			DeadItem = PlayerIsDead(dropBlockers[i].savedItem);
			if (ResetItem) ResetItemAmt = ResetItem.Amount;
			if (DeadItem) DeadItemAmt = DeadItem.Amount;
			if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt)) break;
		}
		if (kcdebug_resetinventorydebug)
		{
					if (ResetItem && ResetItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found ResetInventory Item!");
			else if (DeadItem && DeadItemAmt) Console.Printf("\c[green]ResetInventory:\c- Found PlayerIsDead Item!");
										else Console.Printf("\c[green]ResetInventory:\c- Did NOT find ResetInventory or PlayerIsDead Items!");
		}

		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- RestoreItemsState() activated");
		for (int i = 0; i < dropBlockers.Size(); i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [2 - dropblockers]:\c- i: %d / %d", i, dropBlockers.Size());
			Inventory item = dropBlockers[i].savedItem;
			if (item != null)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [3 - item check]:\c- i: %d, %s", i, item.GetClassName());
				item.bUndroppable = dropBlockers[i].wasUndroppable;
				item.bUntossable = dropBlockers[i].wasUntossable;

				/* We don't restore weapons, armors and ammos amount, otherwise on an
				   inventory reset, the player won't be actually in a pistol start state */
				bool keepinv = true;
				if (!keepWeapons &&
						(item is 'Weapon' ||
						 item is 'BasicArmor' ||
						 item is 'KCArmor' ||
						 item is 'HexenArmor' ||
						 item is 'Ammo'))
				{
					if (keepSigil &&
							(item is 'SigilKC' || item is 'SigilPieces' || item is 'SigilModeType'))
					{
						keepinv = true;
					}
					else
					{
						keepinv = false;
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Check [!keepWeapons]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					}
				}
				if (!keepBackpacks &&
						(item is 'Backpack' ||
						 item is 'BackpackTier1' ||
						 item is 'BackpackTier2'))
				{
					keepinv = false;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Check [!keepBackpacks]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepWeaponUpgrades &&
						(item is 'HellWarriorShieldLevel' ||
						 item is 'WeaponUpgradeItem' ||
						 item is 'BaseModPack'))
				{
					keepinv = false;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Weapon Upgrade Check  [!keepWeaponUpgrades]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepSigil &&
					  (item is 'SigilKC' || item is 'SigilPieces' || item is 'SigilModeType'))
				{
					keepinv = false;
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4a - Sigil Check  [!keepSigil]: \c[red]not saved\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
				}
				if (!keepInvBarItems &&
						(item is 'KCInvBarItem'))
				{
					if ((ResetItem && ResetItemAmt) || (DeadItem && DeadItemAmt))
					{
						item.Amount = 0;
						keepinv = false;
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [4ca - EEInvItem Check: \c[red]not saved (death/reset)\c[blue]]:\c- i: %d, %s", i, item.GetClassName());
					}
					else
					{
						keepinv = true;
					}
				}
				//
				//
				if (keepinv)
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]RestoreItemsState [5 - \c[gold]Item Saved\c[blue]]:\c- i: %d, %s (hadamount: %d)", i, item.GetClassName(), dropBlockers[i].hadAmount);
					item.Amount = dropBlockers[i].hadAmount;
				}
			}
		}

		dropBlockers.Clear();
	}

	private void MakeInventoryUndroppable()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- MakeInventoryUndroppable() activated");
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [2 - player#]: i: %d", i);
			if (playeringame[i] && players[i].mo != null)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [3 - playeringame]: i: %d", i);
				for (Inventory item = players[i].mo.Inv; item != null; item = item.Inv)
				{
					if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [4 - item check]: i: %d, %s", i, item.GetClassName());
					bool keepWeapons = true; // Defaulting to true if no value is found
					bool keepBackpacks = true; // Defaulting to true if no value is found
					bool keepWeaponupgrades = true; // Defaulting to true if no value is found
					bool keepSigil = true; // Defaulting to true if no value is found
					bool keepInvBarItems = true; // Defaulting to true if no value is found
					bool keepKeys = false; // Defaulting to false if no value is found

					if (CVar.FindCVar("kc_deathexitkeepweapons") != null)
						keepWeapons = CVar.FindCVar("kc_deathexitkeepweapons").GetBool();

					if (CVar.FindCVar("kc_deathexitkeepbackpacks") != null)
						keepBackpacks = CVar.FindCVar("kc_deathexitkeepbackpacks").GetBool();

					if (CVar.FindCVar("kc_deathexitkeepweaponupgrades") != null)
						keepWeaponUpgrades = CVar.FindCVar("kc_deathexitkeepweaponupgrades").GetBool();

					if (CVar.FindCVar("kc_deathexitkeepsigil") != null)
						keepSigil = CVar.FindCVar("kc_deathexitkeepsigil").GetBool();

					if (CVar.FindCVar("kc_deathexitkeepinventoryitems") != null)
						keepInvBarItems = CVar.FindCVar("kc_deathexitkeepinventoryitems").GetBool();

					if (CVar.FindCVar("kc_deathexitkeepkeys") != null)
						keepKeys = CVar.FindCVar("kc_deathexitkeepkeys").GetBool();

					// Save the item's actual UNDROPPABLE and UNTOSSABLE tags
					ItemData id = new('ItemData');
					id.savedItem = item;
					id.wasUndroppable = item.bUndroppable;
					id.wasUntossable = item.bUntossable;
					id.hadAmount = item.Amount;
					dropBlockers.Push(id);

					if (!keepWeapons &&
							(item is 'Weapon' ||
							 item is 'BasicArmor' ||
							 item is 'KCArmor' ||
							 item is 'HexenArmor' ||
							 item is 'Ammo'))
					{
						// Make the weapon/armor/ammo droppable so it will be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						// This is done so you actually do a Pistol Start when intended if you decided to not keep weapons !
						if (keepSigil &&
								(item is 'SigilKC' ||
								item is 'SigilPieces' ||
								item is 'SigilModeType'))
						{
							// Make the items undroppable so it won't be removed during a map-initiated
							// inventory reset, we'll restore their actual values at the beginning of the next level
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5g - make item undroppable/untossable (Sigil Found)]: \c-%s", item.GetClassName());
							item.bUndroppable = true;
							item.bUntossable = true;
						}
						else
						{
							if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5a - KeepWeapons off]: \c-%s", item.GetClassName());
							item.bUndroppable = false;
							item.bUntossable = false;
						}
					}
					else
					if (!keepBackPacks &&
							(item is 'Backpack' ||
							 item is 'BackpackTier1' ||
							 item is 'BackpackTier2'))
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5b - keepBackPacks off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!keepWeaponUpgrades &&
							(item is 'HellWarriorShieldLevel' ||
							 item is 'WeaponUpgradeItem' ||
							 item is 'BaseModPack'))
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5c - keepWeaponUpgrades off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!keepSigil &&
							(item is 'SigilKC' ||
							 item is 'SigilPieces' ||
							 item is 'SigilModeType'))
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5d - KeepSigil off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!keepInvBarItems &&
							(item is 'KCInvBarItem'))
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5e - KeepInvBarItems off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					if (!KeepKeys &&
							(item is 'Key'))
					{
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5f - KeepKeys off]: \c-%s", item.GetClassName());
						item.bUndroppable = false;
						item.bUntossable = false;
					}
					else
					{
						// Make the items undroppable so it won't be removed during a map-initiated
						// inventory reset, we'll restore their actual values at the beginning of the next level
						if (kcdebug_resetinventorydebug) Console.Printf("\c[blue]MakeInventoryUndroppable [5g - make item undroppable/untossable]: \c-%s", item.GetClassName());
						item.bUndroppable = true;
						item.bUntossable = true;
					}
				}
			}
		}
	}

	private void ResetResurrectionQueue(int i)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- ResetResurrectionQueue(%d) activated", i);
		if (playeringame[i] && players[i].mo != null)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [2 - playeringame]\c-: %d", i);
			int delIndex = playersToResurrect.Find(i);

			if (delIndex < playersToResurrect.Size())
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetResurrectionQueue (clear resurrect queue) [3 - delIndex (\c-i: %d\c[green])\c-: %d", i, delindex);
				playersToResurrect.Delete(delIndex);
				playersToResurrect.ShrinkToFit();
			}
		}
	}

	// Event functions override
	override void OnRegister()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- OnRegister() activated");
		isNewGame=true;
		dropBlockers.Clear();
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [1 - isNewGame]:\c- : %d", isNewGame);

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]OnRegister [2 - playerNeedsRestore to false]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}

	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e)
	{
		actor playera = players[0].mo;
		array<int> fs_textures;
		array<string> fs_sndinfo;
		string defaultSndinfo;

		array<string> allSF;
		StringTable.Localize("$STEP_FLATS").Split(allSF,":");
		Console.Printf("Default Footsteps TXT Loaded [Eventside]");
		StringTable.Localize("$STEP_FLATSOTEX").Split(allSF,":");
		Console.Printf("OTex Footsteps TXT Loaded [Eventside]");
		// Other CompatPacks
		if (Wads.CheckNumForName("KC-AUGZEN", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSAUGZEN").Split(allSF,":");
			Console.Printf("AUGER;ZENITH Footsteps TXT Loaded");
		}
		if (A_CheckBlooM())
		{
			StringTable.Localize("$STEP_FLATSBLOOM").Split(allSF,":");
			Console.Printf("BlooM Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-CIRCUS2", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSCIRCUS2").Split(allSF,":");
			Console.Printf("Circus2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-KDIZD", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSKDIZD").Split(allSF,":");
			Console.Printf("KDIZD Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-TCOTDA", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSTCOTDA").Split(allSF,":");
			Console.Printf("TCOTDA Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-TUTNT", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSTUTNT").Split(allSF,":");
			Console.Printf("Ultimate Torment and Torture Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-UNFAM", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSUNFAM").Split(allSF,":");
			Console.Printf("Unfamiliar Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-STAEONS", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSSTAEONS").Split(allSF,":");
			Console.Printf("Strange Aeons Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-EPIC2", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSEPIC2").Split(allSF,":");
			Console.Printf("Epic2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-EXDAY", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSEXTDAY").Split(allSF,":");
			Console.Printf("Extermination Day Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-HELLG", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSHELLG").Split(allSF,":");
			Console.Printf("Hell Ground Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-UOHYM", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSUOHYM").Split(allSF,":");
			Console.Printf("UOHYM TXT Loaded");
		}
		if (Wads.CheckNumForName("KC-UNFAM", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSUNFAM").Split(allSF,":");
			Console.Printf("Unfamiliar Footsteps TXT Loaded");
		}

		for (int j = allSF.Size() - 1; j >= 0; j -= 1)
		{
			string s = StringTable.Localize(String.Format("$STEP_%s", allSF[j]));
			//Console.Printf("[EVENT] j: %d, %s, string: %s [Length: %d]", j, allSF[j], s, s.Length());

			if (s.Length() != 0)
			{
				textureid t = TexMan.CheckForTexture(allSF[j], TexMan.TYPE_ANY);
				if (t.Exists())
				{
					//Console.Printf("[EVENT 2] j: %d, %s", j, allSF[j]);
					fs_textures.Push(int(t));

					fs_sndinfo.Push(s);
				}
			}
		}
		defaultSndinfo = StringTable.Localize("$STEP_DEFAULT");

		int nofsttxts = 0;
		int nofsttxts2 = 0;
		for (let i = 0, l = level.Sectors.Size(); i < l; i++)
		{
			int idx;
			int textfound = 0;
			string texname;
			string texname_c;
			/*
			Console.Printf("centfloor [%d]: %.4f", i, level.Sectors[i].CenterFloor());
			Console.Printf("centceiling [%d]: %.4f", i, level.Sectors[i].CenterCeiling());
			Console.Printf("centerspot [%d]: %.4f x %.4f", i, level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y);
			let p = SectorChecker(Actor.Spawn("SectorChecker", (level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y, level.Sectors[i].CenterFloor()), ALLOW_REPLACE));
			if (p)
			{
				p.place = i;
				texname = texman.GetName(p.floorpic);
				idx = fs_textures.Find(int(p.floorpic));
				if (idx == fs_textures.Size()) textfound = false;
																	else textfound = true;
				//Console.Printf("x: %.4f, y: %.4f, z: %.4f, floorpic: %d [%s] [idx: %d]", p.pos.x, p.pos.y, p.pos.z, int(p.floorpic), texname, idx);
			}
			*/

			texname = texman.GetName(level.Sectors[i].GetTexture(sector.floor));
			texname_c = texman.GetName(level.Sectors[i].GetTexture(sector.ceiling));
			idx = fs_textures.Find(int(level.Sectors[i].GetTexture(sector.floor)));
			if (idx != fs_textures.Size()) textfound = 1;
			else
			{
				if (texname == "" ||
						texname == "-NOFLAT-") textfound = -1;
				if (texname == "DOPE2 R") textfound = -1;
				if (texname == "STEP1" ||
						texname == "STEP2" ||
						texname == "STEP3" ||
						texname == "A-DAN1" ||
						texname == "A-DAN2" ||
						texname == "A-DAN3" ||
						texname == "A-DAN4" ||
						texname == "A-DAN5" ||
						texname == "GRNROCK") textfound = -1;
				else
				if (texname == "A-BRICK2" ||
						texname == "A-BROCK1" ||
						texname == "A-BROCK2" ||
						texname == "A-CAMO3A" ||
						texname == "A-DBRI1") textfound = -1;
				else
				if (texname == "A-CAMO1" ||
						texname == "A-CAMO1A" ||
						texname == "A-CAMO2A" ||
						texname == "A-CAMO2C") textfound = -1;
				else nofsttxts++;
			}

			int damageamt = level.Sectors[i].damageamount;
			int damageint = level.Sectors[i].damageinterval;
			int leakdam = level.Sectors[i].leakydamage;
			string damagetyp = level.Sectors[i].damagetype;
			string initdamagetyp = level.Sectors[i].damagetype;
			double sectgrav = level.Sectors[i].gravity;
			if (damagetyp == 'Fire' ||
					damagetyp == 'CCFire' ||
					damagetyp == 'Flames' ||
					damagetyp == 'CCardsEyeFire' ||
					damagetyp == 'SpecialFire' ||
					damagetyp == 'Burn' ||
					damagetyp == 'Inferno' ||
					damagetyp == 'Lava') damagetyp = 'Magma';
			if (damagetyp == 'Slime' ||
					damagetyp == 'None' ||
					damagetyp == '')
			{
				if (damageamt > 0)
				{
					if (texname == "LAVA1" ||
							texname == "LAVA2" ||
							texname == "LAVA3" ||
							texname == "LAVA4" ||
							texname == "SLIME12" ||
							texname == "FLOOR6_1") damagetyp = 'Magma';
					int d = Wads.CheckNumForName("KC-PSXDM", Wads.ns_global, -1, true);
					if (d != -1)
					{
						if (texname == "LAVA01" ||
								texname == "LAVA02" ||
								texname == "LAVA03" ||
								texname == "LAVA04") damagetyp = 'Magma';
					}
					if (d != Wads.CheckNumForName("KC-UNFAM", Wads.ns_global, -1, true))
					{
						if (texname == "BLAVA1" ||
								texname == "BLAVA2" ||
								texname == "BLAVA3" ||
								texname == "BLAVA4") damagetyp = 'Magma';
					}
					if (texname == "FLAT22" ||
							texname_c == "FLAT22") damagetyp = 'Shock';
					if (d != Wads.CheckNumForName("KC-AUGZEN", Wads.ns_global, -1, true))
					{
						if (texname == "D_4000" ||
								texname == "D_4001" ||
								texname == "SLIME16") damagetyp = 'Shock';
						if (texname == "FLOOR7_4") damagetyp = 'Magma';
					}
				}
			}
			if (damagetyp == 'Ice') damagetyp = 'IceWater';
			if (damagetyp == 'Shock') damagetyp = 'ShockFloor';
			if (initdamagetyp != damagetyp) level.Sectors[i].damagetype = damagetyp;
			if (kcdebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d (%s to %s)", i, l, initdamagetyp, damagetyp);

			if (kcdebug_footsteps1 || kcdebug_footsteps2)
			{
				String SecPrint = "Sector #: ";
				SecPrint.AppendFormat("%d, ", i);
				if (textfound > 0) SecPrint.AppendFormat("\c[green]-floorpic: %s\c-", texname);
				else if (textfound < 0) SecPrint.AppendFormat("\c[yellow]=floorpic: %s\c-", texname);
				else SecPrint.AppendFormat("\c[red]~floorpic: %s\c-", texname);
				if (sectgrav != 1.0) SecPrint.AppendFormat("\c[green]gravity: %.4f\c-, ", sectgrav);
				if (damagetyp != 'None' || damageamt > 0 || damageint) SecPrint.AppendFormat(", \c[brick]damagetype: %s, damageamount: %d, damageinterval: %d, leakydamage: %d / 256", damagetyp, damageamt, damageint, leakdam);
				Console.Printf(SecPrint);
			}
		}
		if (nofsttxts > 0)
		{
			if (kcdebug_footsteps1 || kcdebug_footsteps2) playera.A_StartSound("step/squeaky1",1002);
			Console.Printf("# of textures found with no footstep definitions [\cy%s\c-]: \c[red]%d\c-", level.mapname, nofsttxts);
		}

		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldLoaded() activated");
		// This will be done only by the first player entering
		// Restoring undroppable and untossable stats for all inventory items !
		// VERY IMPORTANT to keep the intended behaviour of all items/weapons/...
		RestoreItemsState();

		// Once we're done loading a level, regardless of what happened beforehand,
		// this is not a new game anymore ! Also we're done restoring anything, so clear arrays
		isNewGame = false;
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [2 - isNewGame to false]\c-: %d", isNewGame);

		// World is loaded, everything is done, no players to restore, safe cleanup in prevision of next level
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			playerNeedsRestore[i] = false;
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]WorldLoaded [3 - playerNeedsRestore to false]\c-: i: %d", i);
		}
	}

	override void WorldUnloaded(WorldEvent e)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- WorldUnloaded() activated");
		// World is unloaded from save, we don't restore inventory, and this is not a new game
		if (e.IsSaveGame)
		{
			isNewGame = false;
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2a - IsSaveGame to false]\c-: %d", isNewGame);

			// Try to reset the resurrection queue on a save reload (after dying) to circumvent a major issue with the base Universal Keeper mod. - Misfit
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (kcdebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded (clear resurrect queue) [3 - player#]\c-: %d", i);
				ResetResurrectionQueue(i);
			}
		}
		/* This is a new game, all future world loads are level exits except for saves (above)
		 and new games (in which case isNewGame will be true again) */
		else if (!isNewGame)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]WorldUnLoaded [2b - !isNewGame]\c-");
			/* We manually remove all weapons and give back a default inventory
			   Later on we give back the correct amount of said inventory, as some mods'
			   default inventories may include inventory item that will get stacked here */
			ManageWeapons();

			/* Key Checking - Misfit Added :V */
			ManageKeys();

			/* Manage Health - Misfit Added :V */
			ManageHealth();

			// We make all inventory undroppable so ResetInventory can't do its job
			MakeInventoryUndroppable();

			/* We resurrect dead players no matter what (EVEN if we did get here from
			   a new game or savegame the player entity would be replaced by a new one
			   after the load ! */
			ResurrectPlayers();
			BackupInventories();
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerEntered() activated");
		RestorePlayerInvState(e.playerNumber);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerRespawned() activated");
		ResetResurrectionQueue(e.playerNumber);
	}

	override void PlayerDied(PlayerEvent e)
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- PlayerDied() activated");
		if (playeringame[e.playerNumber] && players[e.playerNumber].mo != null)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]PlayerDied [2 - playersToResurrect]\c: %d", e.playerNumber);
			playersToResurrect.Push(e.playerNumber);
		}
	}

	override void NewGame()
	{
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]ResetInventory:\c- NewGame() activated");
		isNewGame = true;
		dropBlockers.Clear();
		if (kcdebug_resetinventorydebug) Console.Printf("\c[green]NewGame [2 - isNewGame]\c-: %d", isNewGame);

		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (kcdebug_resetinventorydebug) Console.Printf("\c[green]NewGame [3 - playerNeedsRestore]\c-: i: %d", i);
			playerNeedsRestore[i] = false;
		}
	}
}

class KC_WaterHandler : StaticEventHandler
{
	override void RenderOverlay(RenderEvent e)
	{
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		PPShader.SetUniform1f("KCwatershader", "timer", gametic + e.FracTic);
		int playbloom = Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true);
		//
		//
		//

		bool chasecam = false;
		if (p.cheats & CF_CHASECAM) chasecam = true;
		if (!chasecam)
		{
			if ((playbloom == -1 && p.mo.waterlevel >= 3))
			{
				if (kcdebug_shader)
				{
					PPShader.SetEnabled("KCwatershader", false);
					PPShader.SetEnabled("KCwatershader", false);
				}
				else
				{
					PPShader.SetEnabled("KCwatershader", true);
					PPShader.SetEnabled("KCwatershader", true);
					double effectSize = CVar.GetCVar("kc_uweffectsize", p).GetFloat();
					//Console.Printf("effectSize: %.8f", effectSize);
					if (MiscItem)
					{
						double tempeffectsize = 1.0;
						if (playbloom == -1 && p.mo.waterlevel >= 3) tempeffectsize += 1.0;
						effectSize *= tempeffectsize;
					}
					if ((playbloom == -1 && p.mo.waterlevel >= 3) && p.mo.CountInv("PowerNoDrown")) effectSize *= frandom(0.045,0.055);
					//Console.Printf("effectSize: %.8f, zoom: %.8f [tic: %d]", effectSize, (1 - (effectSize * 2)), gametic);
					PPShader.SetUniform1f("KCwatershader", "waterFactor", effectSize);
					PPShader.SetUniform1f("KCwatershader", "zoomFactor", 1 - (effectSize * 2));
				}
			}
			else
			{
				PPShader.SetEnabled("KCwatershader", false);
				PPShader.SetEnabled("KCwatershader", false);
			}
		}
		else
		{
			PPShader.SetEnabled("KCwatershader", false);
			PPShader.SetEnabled("KCwatershader", false);
		}
	}
}

class EVP_FootstepsInit : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			int numfound;
			ThinkerIterator FStepFinder = ThinkerIterator.Create("EVP_Footsteps");
			EVP_Footsteps mo;
			while (mo = EVP_Footsteps(FStepFinder.Next()))
			{
				mo.Destroy();
				numfound++;
				if (kcdebug_footsteps1) Console.Printf("Destroying Old EVP_Footsteps Item #%d", numfound);
			}
			if (e.playerNumber == 0)
			{
				let fs = EVP_Footsteps(Actor.Spawn("EVP_Footsteps"));
				if (fs) fs.Init(players[0].mo);
				if (kcdebug_footsteps1) Console.Printf("Adding New EVP_Footsteps Item");
			}
		}
	}
}