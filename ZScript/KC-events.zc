class KC_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	override void WorldTick()
	{
	}
	
	override void NewGame()
	{
		let globalvars = KCGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		if (kcdebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (KC_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		int user_base = 0;
		string usertype = "";
		double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
		int TruePlayerLevel = 0;
		
		if (spawnee.bISMONSTER || spawnee.bSHOOTABLE)
		{
			if (!KCPlayerPawn(spawnee)) spawnee.A_SetInventory("CompatVulnItem",1);
		}
		
		if (DoomImpBall(spawnee) || 
				FatShot(spawnee)) 
		{
			spawnee.DamageType = 'Fire';
		}
		if (CacodemonBall(spawnee)) 
		{
			spawnee.DamageType = 'Lightning';
		}
		if (ArachnotronPlasma(spawnee)) 
		{
			spawnee.DamageType = 'Plasma';
		}
		
		//
		Inventory invspawnee;
		invspawnee = Inventory(spawnee);
		if (invspawnee)
		{
			string invspawnname = invspawnee.GetClassName();
			if (invspawnname == "RedCard" ||
					invspawnname == "BlueCard" ||
					invspawnname == "YellowCard")
			{
				invspawnee.Pickupsound = "getkeycard";
			}
			if (invspawnname == "RedSkull" ||
					invspawnname == "BlueSkull" ||
					invspawnname == "YellowSkull")
			{
				invspawnee.Pickupsound = "getskullkey";
			}
			if (invspawnname == "Clip")
			{
				invspawnee.Pickupsound = "getbulletclip";
			}
			if (invspawnname == "ClipBox")
			{
				invspawnee.Pickupsound = "getbulletbox";
			}
			if (invspawnname == "Shell")
			{
				invspawnee.Pickupsound = "getfourshells";
			}
			if (invspawnname == "ShellBox")
			{
				invspawnee.Pickupsound = "getshellbox";
			}
			if (invspawnname == "RocketAmmo")
			{
				invspawnee.Pickupsound = "getsinglerocket";
			}
			if (invspawnname == "RocketBox")
			{
				invspawnee.Pickupsound = "getrocketbox";
			}
			if (invspawnname == "Cell")
			{
				invspawnee.Pickupsound = "getsmallcells";
			}
			if (invspawnname == "CellPack")
			{
				invspawnee.Pickupsound = "getcellpack";
			}
			if (invspawnname == "GreenArmor" ||
					invspawnname == "BlueArmor")
			{
				invspawnee.Pickupsound = "GetArmorFull";
			}
			if (invspawnname == "Stimpack" ||
					invspawnname == "Medikit")
			{
				invspawnee.Pickupsound = "gethealthkit";
			}
			if (invspawnname == "HealthBonus")
			{
				invspawnee.Pickupsound = "gethealthbonus";
			}
			if (invspawnname == "ArmorBonus")
			{
				invspawnee.Pickupsound = "getarmorbonus";
			}
		}
		
		Super.WorldThingSpawned(e);
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = KCGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		}
		Super.WorldThingRevived(e);
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			if (kcdebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			let globalvars = KCGlobalVariables.Get();
			actor victim = e.Thing;
			actor source = e.DamageSource;
			actor inflicter = e.inflictor;
			int dmg = e.damage;
			int initdmg = e.damage;
			string mod = e.damagetype;
			int flags = e.DamageFlags;
			int PLuck;
			int TrueLuck;
			int TruePlayerLevel = 0;
			bool isCCardsIllusion = false;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

			if (kcdebug_worlddamaged) 
			{
				string debugmsg = "WorldThingDamaged";
				debugmsg.AppendFormat(" [gametic: %d]:", gametic);
				if (victim) debugmsg.AppendFormat(" %p [%s],", victim, victim.GetClassName());
				if (source) debugmsg.AppendFormat(" source: %p [%s]", source, source.GetClassName()); else debugmsg.AppendFormat("\c[red] no source\c-");
				if (inflicter) debugmsg.AppendFormat(" inflicter: %p [%s]", inflicter, inflicter.GetClassName()); else debugmsg.AppendFormat("\c[orange] no inflicter\c-");
				debugmsg.AppendFormat(", damage: %d, damagetype: %s, flags: %d", dmg, mod, flags);
				Console.Printf(debugmsg);
			}
			
			if (MiscItem) 
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			if (victim)
			{
				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
						
				if (kcdebug_hitsounds) Console.Printf("hitsounds (victim check)");
				int oldhealth = victim.health;
				string victname = victim.GetTag();
				string atkrname = "(?)";
				int user_type;
				string vict = "NONE";
				string infl = "NONE";
				string sour = "NONE";
				int landdamagebonus;

				if (victim) vict = victim.GetClassName();
				if (inflicter) infl = inflicter.GetClassName();
				if (source) sour = source.GetClassName();

				bool showdmglog;
				bool practicetarget;
				
				int specialtype;
				nm = "CCardGhostMarker";
				if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker";
				if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker";
				if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne"; if (victim.GetClassName() == nm) specialtype += 8;
				if (kcdebug_worlddamaged) Console.Printf("[%s] SpecialType [WorldDamaged]: %d", vict, specialtype);
				
				/*
				// Ally Check
				actor IsRebel;
				if (!KCPlayerPawn(victim) && KCPlayerPawn(source))
				{
					if (victim.bFRIENDLY)
					{
						if (victim.master && KCPlayerPawn(victim.master))
						{
							if (e.damage)
							{
								e.damage = 0;
								if (kcdebug_worlddamaged) Console.Printf("Victim is Player's ally! No Damage inflicted!");
								Super.WorldThingDamaged(e);
								return;
							}
						}
						else
						{
							if (IsRebel = Rebel(victim) && e.damage)
							{
								e.damage = 0;
								if (kcdebug_worlddamaged) Console.Printf("Victim is Strife Rebel! No Damage inflicted!");
								Super.WorldThingDamaged(e);
								return;
							}
						}
					}
				}
				*/
				
				if (victim.bCOUNTKILL || specialtype) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) 
				{
					practicetarget = true;
					showdmglog = true;
				}
				if (KCPlayerPawn(victim)) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (showdmglog)
				{
					if (kcdebug_worlddamaged) Console.Printf("showdmglog");

					if (kcdebug_worlddamaged) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					
					if (victim.health > 0 && victim.bISMONSTER)
					{
						if (source && KCPlayerPawn(source)) //
						{
							let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
							if (MiscItem) landdamagebonus = MiscItem.landdmgbonus;
							if (kcdebug_worlddamaged) Console.Printf("landdamagebonus: %d", landdamagebonus);
						}
						if (!practicetarget)
						{
							if (infl == "PlayerWhistle")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(13.75,15,16.25);
								force *= 0.25;
								if (inflicter && (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength"))) force *= frandompick(1.5,2,2.5);
								
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-3,-1.5,-1.5,0,0,0,0,0,1.5,1.5,3)));
								}
							}
							/*
							if (infl == "UppercutPuff")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.25;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength")) force *= frandompick(1.125,1.25,1.375);
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-6,-3,-3,0,0,0,0,0,3,3,6)));
								}
							}
							if (KickPuff(inflicter) || KickPuffNoThrust(inflicter) || BadKickPuff(inflicter))
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.05;
								if (random(1,2) <= 1) force *= -1;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength")) force *= frandompick(1.125,1.25,1.375);
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.Thrust(force, (ang + (frandompick(-6,-3,-3,0,0,0,0,0,3,3,6) * 0.25)));
								}
							}
							*/
						}
						
						if (!victim.bINVULNERABLE || !practicetarget || !isCCardsIllusion)
						{
						}
					}
				}
				
				if (victim.health <= 0 && mod == 'Ice') victim.bCANTSEEK = true;
				
				string attkernam;
				if (!victim.GetTag()) victname = vict;
				if (source)
				{
					if (source.GetTag()) attkernam = source.GetTag();
													else attkernam = source.GetClassName();
				}
				if (inflicter)
				{
					if (inflicter.GetTag()) atkrname = inflicter.GetTag();
														 else atkrname = inflicter.GetClassName();
				}
				string comblog = "";
				comblog.AppendFormat("\c[red]*\c- ");
				showdmglog = false;
				if (victim.bCOUNTKILL || specialtype) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) showdmglog = true;
				if (KCPlayerPawn(victim)) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (kc_combatlog && showdmglog)
				{
					//Console.Printf("showdmglog 2");
					if (mod == 'NONE') mod = 'Typeless';
					if (dmg)
					{
						comblog.AppendFormat("\c[brick]%d\c-", dmg);
						if (victim.CountInv("JustSurprised") > 0) comblog.AppendFormat(" \c[sapphire]SURPRISE\c-");
						if (victim.CountInv("TookCriticalHit") > 0) comblog.AppendFormat(" \c[orange]CRITICAL\c-");
						comblog.AppendFormat(" damage dealt to \c[red]%s\c- by", victname);
						if (source && !inflicter) comblog.AppendFormat(" \c[purple]%s\c-", attkernam);
						else if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's\c-", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
						if (flags & DMG_EXPLOSION) comblog.AppendFormat(" \c[brick][AOE]\c-");
						if (victim.health <= 0) 
						{
							//
							//
							//
						}
						//
						//
						//
					}
					//
					//
					//
				}
				//
				//
				//
			}
			//
			//
			//
		}
		Super.WorldThingDamaged(e);
	}

	override void WorldThingDied(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			actor victim = e.Thing;
			actor inflicter = e.inflictor;
			string mod = "NONE";
			actor source;
			actor mastor;
			if (inflicter && inflicter.target) source = inflicter.target;
																		else source = e.Thing.target;
			if (inflicter && inflicter.master) mastor = inflicter.master;
																		else mastor = e.Thing.target;
			if (victim && victim.damagetype) 
			{
				mod = victim.damagetype; // = e.damagetype;
				if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (inflicter)
				{
					mod = inflicter.damagetype; // = e.damagetype;
					if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
				}
				else
				{
					if (source)
					{
						mod = source.damagetype; // = e.damagetype;
						if (kcdebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
					}
				}
			}
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			string mast = "NONE";
			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();
			if (mastor) mast = mastor.GetClassName();
			int PLuck;
			int TrueLuck;
			let globalvars = KCGlobalVariables.Get();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			int user_type;
			bool giveexp;
			bool playerkill;
			bool allykill;
			
			bool isCCardsIllusion = false;
			if (victim)
			{
				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
			}
			
			// Specific Foes [1]
			
			//
			
			if (MiscItem)
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}
			if (kcdebug_worlddied) Console.Printf("[%p (%s)] WorldThingDied", victim, vict);
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			
			if (victim && 
					!isCCardsIllusion)
			{
				int specialtype;
				nm = "CCardGhostMarker";
				if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker";
				if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker";
				if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne";
				if (victim.GetClassName() == nm) specialtype += 8;
				if (kcdebug_worlddied) Console.Printf("[%s] SpecialType [WorldDied]: %d", vict, specialtype);

				if (!(KCPlayerPawn(victim)) || (victim.bCOUNTKILL || specialtype))
				{
					//int monsterrating = victim.CountInv("MonsterRating");
					if (!victim.CountInv("DedMonsterFlag") && !sv_monsterrespawn) victim.A_SetInventory("DedMonsterFlag",1);
					
					if (kcdebug_worlddied) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					if ((victim.bCOUNTKILL || specialtype) && !victim.bFRIENDLY && (inflicter || source))
					{
						if (inflicter) 
						{
							if (PlayerPawn(inflicter)) playerkill = true;
							if (inflicter.bFRIENDLY) allykill = true;
							if (inflicter.bFRIENDLY || KCPlayerPawn(inflicter))
							{
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("inflictor: %s [%d]", infl, inflicter.bFRIENDLY);
						}
						else
						if (source) 
						{
							if (PlayerPawn(source)) playerkill = true;
							if (source.bFRIENDLY) allykill = true;
							if (source.bFRIENDLY || KCPlayerPawn(source)) 
							{
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("source: %s [%d]", sour, source.bFRIENDLY);
						}
						if (mastor) 
						{
							if (PlayerPawn(mastor)) playerkill = true;
							if (mastor.bFRIENDLY) allykill = true;
							if (mastor.bFRIENDLY || KCPlayerPawn(mastor)) giveexp = true;
							if (kcdebug_worlddied) Console.Printf("mastor: %s [%d]", mast, mastor.bFRIENDLY);
						}
						
						if ((playerkill || allykill) && MiscItem)
						{
						}

						int ExpGain = (victim.SpawnHealth() + victim.Stamina);
						if (specialtype & 1) ExpGain *= 0.5;
						if (specialtype & 2) ExpGain *= frandompick(1.8,2.2);
						if (specialtype & 4) ExpGain *= frandompick(0.625,0.875);
						if (specialtype & 8) ExpGain *= frandompick(1.75,2.5);
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck') ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
						ExpGain *= frandom(0.05,0.125);
						
						if ((source && source.bFRIENDLY) || (inflicter && inflicter.bFRIENDLY) || (mastor && mastor.bFRIENDLY)) ExpGain *= frandom(0.65,0.90);
						if (KCPlayerPawn(source) && infl == "PlayerWhistle") ExpGain *= frandom(1.1875,1.3125);
						
						double alterchance = 1.0;
						if (source)
						{
						}
						else
						if (inflicter)
						{
						}
						ExpGain *= alterchance;
						
						If (PLuck)
						{
							int PLevel = Player.CountInv("PlayerLevel");
									 if (PLevel <= 11) ExpGain *= (1.00 + (TrueLuck * frandompick(0,0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02)));
							else if (PLevel <= 26) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.01,0.02,0.02)));
							else if (PLevel <= 66) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04)));
							else if (PLevel <= 101) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04)));
							else if (PLevel <= 201) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04)));
							else if (PLevel <= 401) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04)));
							else if (PLevel <= 701) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08)));
							else if (PLevel <= 1001) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08,0.08)));
						}
						if (MiscItem)
						{
							int OExpGain = ExpGain;
							double tallyextra;
							tallyextra = (MiscItem.totalallkills * 0.005) + (MiscItem.totalallitems * 0.0025) + (MiscItem.totalallsecrets * 0.0025) + (MiscItem.totalcompleted * 0.01);
							ExpGain *= (1.00 + tallyextra);
							if (kcdebug_worlddied) Console.Printf("[tallyextra] x%.4f, ExpGain: %d [%d]", 1.00+tallyextra, ExpGain, OExpGain);
							/*
							if (MiscItem.KillComboCount > 0)
							{
								double combomultiplieramt;
								double based = 0.001;
								tallyextra = MiscItem.KillComboCount;
								if (tallyextra < 11) based = 0.0016;
								if (tallyextra > 10 && tallyextra < 21) based = 0.0017;
								if (tallyextra > 20 && tallyextra < 36) based = 0.0020;
								if (tallyextra > 35 && tallyextra < 61) based = 0.0024;
								if (tallyextra > 60 && tallyextra < 101) based = 0.0028;
								if (tallyextra > 100 && tallyextra < 201) based = 0.0034;
								if (tallyextra > 200 && tallyextra < 501) based = 0.0040;
								if (tallyextra > 500) based = 0.0052;
								based *= 1.334;
								combomultiplieramt = (tallyextra * based);
								combomultiplieramt += 1.00;
								OExpGain = ExpGain;
								ExpGain = (ExpGain * combomultiplieramt);
								if (kcdebug_worlddied) Console.Printf("[combomultiplieramt] x%.4f, ExpGain: %d [%d]", combomultiplieramt, ExpGain, OExpGain);
							}
							*/
						}
						EXPGain *= kc_expmultiplier;
						
						KCCreature KCC;
						KCC = KCCreature(victim);
						if ((KCC && KCC.expshare >= 0.001) && !(playerkill || allykill)) 
						{
							int OExpGain = ExpGain;
							ExpGain *= (KCC.expshare * frandom(0.667,1.000));
							if (ExpGain < 1) ExpGain = 1;
							if (kcdebug_worlddied && ExpGain) Console.Printf("[KCC.expshare] x%.4f, ExpGain: %d [%d]", KCC.expshare, ExpGain, OExpGain);
						}
						
						if (giveexp && kc_expgains && Level.MapName != "TITLEMAP")
						{
							if (ExpGain < 1) ExpGain = 1;

							let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
							

							Actor player = players[0].mo;
							if (player.health > 0 || !player.CountInv("PlayerIsDead"))
							{
								int EXPPrevReq = 0;
								if (MiscItem.PlayerLevel > 0) EXPPrevReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel-1)];
								int EXPCurrReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel)];
								int EXPFullReq = (EXPCurrReq-EXPPrevReq);
								//Console.Printf("%d / %d (%d)", EXPPrevReq, EXPCurrReq, EXPFullReq);
								Player.A_GiveInventory("KillsCount",1);
								Player.A_GiveInventory("ExpPts",ExpGain);
								int Kills = Player.CountInv("KillsCount");
								int ExpNew = Player.CountInv("ExpPts");
								int ExpNeeded = Player.CountInv("ExpPtsNeeded");
								int PlayerLevel = Player.CountInv("PlayerLevel");
								if (kc_showexpgains) Console.Printf("\c[green]+%d EXP! \c[darkgreen][Have: %d / %d (Lvl: %d)] \c[red](Kills: %d)", ExpGain, ExpNew, ExpNeeded, PlayerLevel, Kills);
								if (kc_showexpgains)
								{
									/*
									MiscItem.KillComboCount += 1;
									MiscItem.EXPGainHUDAmt += ExpGain;
									if (MiscItem.EXPGainHUDTimer <= 0) MiscItem.EXPGainHUDTimer = 105;
									else
									{
										MiscItem.EXPGainHUDTimer += 35;
										if (MiscItem.EXPGainHUDTimer < 105 && ExpGain > (EXPFullReq * 0.05)) MiscItem.EXPGainHUDTimer = 105;
										if (MiscItem.EXPGainHUDTimer < 175 && ExpGain > (EXPFullReq * 0.10)) MiscItem.EXPGainHUDTimer = 175;
										if (MiscItem.EXPGainHUDTimer < 245 && ExpGain > (EXPFullReq * 0.25)) MiscItem.EXPGainHUDTimer = 245;
										if (MiscItem.EXPGainHUDTimer > 280) MiscItem.EXPGainHUDTimer = 280;
									}
									*/
								}
							}
						}
						else
						{
							Actor player = players[0].mo;
							if (player.health > 0 || !player.CountInv("PlayerIsDead"))
							{
								Player.A_GiveInventory("KillsCount",1);
								int Kills = Player.CountInv("KillsCount");
							}
						}
						
						// BUILD-style oneliner for kills [optional]
						bool playoneliner = false;
						if (inflicter == player || source == player || mastor == player) playoneliner = true;
						
						if (playoneliner && player.GetClassName() == "HeiwaPlayer" && MiscItem)
						{
							if (kcdebug_worlddied) Console.Printf("Voice Check");
							if (kc_heiwaextravoices && kc_heiwaoneliners && !MiscItem.OneLinerCooldown)
							{
								int basechance = kc_heiwaonelinerbasechance; // 8
								if (basechance < 0) basechance = 0;
								if (basechance > 0)
								{
									if (player.CountInv("DecentHealth")) basechance *= 1.25;
									if (player.CountInv("LowHealth")) basechance *= 1.5;
									if (player.CountInv("CriticalHealth")) basechance *= 1.875;
									
									if (victim.bBOSS) basechance *= 8;
									if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
									if (kcdebug_worlddied) Console.Printf("%d / 256", basechance);
									if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
									{
										double maskpitch = 1.00;
										if (player.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
										string voicenm;
										double voicevol = frandom(1.25,1.75);
										if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
										int randvoice = 0;
										if (randvoice == 1) 
										{
											voicenm = ""; //
											Console.Printf("\c[HeiwaDeluge]\c-"); //
										}
										//
										//
										//
										if (randvoice > 0)
										{
											player.A_StopSound(CHAN_VOICE);
											player.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
											MiscItem.OneLinerCooldown += (frandom(1.75,3.0) * TICRATE);
										}
									}
								}
							}
						}
					}
					
					// Item Drop Action
					//[PLuck, TrueLuck, victim, inflicter, source, mastor, IPAttack, specialtype, monsterrating, playerkill, allykill] = A_KillDropTables(PLuck, TrueLuck, victim, inflicter, source, mastor, IPAttack, specialtype, monsterrating, playerkill, allykill);
					
					//*******************************
					//* Killed With Certain Weapons *
					//*******************************
					if (source && (KCPlayerPawn(source) || source.GetClassName() == "HeiwaPlayer") && (victim.bCOUNTKILL || specialtype))
					{
						//
					}
				}
			}
		}
		Super.WorldThingDied(e);
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (kcdebug_checksumprintout) Console.Printf("\cyMapCheckSum:\cx %s", level.GetChecksum());
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();
		
		Super.WorldLoaded(e);
	}
	
	override void PlayerDied(PlayerEvent e) 
	{
		actor Player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		Super.PlayerDied(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) 
	{
		Super.PlayerRespawned(e);
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		Actor player = players[consoleplayer].mo;
		int buttons = player.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")   
		{
			int key1, key2;

			[key1, key2] = Bindings.GetKeysForCommand("KC_CheatClear");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (KCPlayerPawn(player) && MiscItem)
				{
					if (MiscItem.timestopstate <= 0 && MiscItem.timestopcooldowntics > 0)
					{
						MiscItem.timestopcooldowntics = 0;
						player.A_SetInventory("KCTimeCooldown",0);
						player.A_StartSound("TimeFreezeCooldown",219,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
						player.A_SetBlend("252540",0.667,random(random(22,23),27));
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("Whistl");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (player.health > 0 && MiscItem.whistlecooldown == 0)
					{
						player.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) MiscItem.whistlecooldown = random(28,33);
																																									 else MiscItem.whistlecooldown = random(42,49);
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("KC_TimeStop");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (KCPlayerPawn(player) && player.health > 0 && MiscItem)
				{
					if (MiscItem.timestopstate <= 0)
					{
						if (MiscItem.timestopcooldowntics <= 0)
						{
							MiscItem.timestopcooldowntics = 0;
							MiscItem.timestopstate = 1;
							MiscItem.timestopactivetics = int(MiscItem.timefreeze1duration * TICRATE);
							MiscItem.timestopactivemaxtics = int(MiscItem.timefreeze1duration * TICRATE);
							player.A_SetBlend("4F644F",0.667,random(random(22,23),27));

							player.A_StopSound(216);
							player.A_StartSound("TimeFreezeIn4",216,CHANF_DEFAULT,0.875,ATTN_NONE); 
							Console.Printf("Time Freeze Activated");
						}
						else
						{
							player.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							Console.Printf("\c[brick]Time Freeze Must Cool Down First!");
						}
					}
					else
					{
						MiscItem.timestopactivetics = 0;
						MiscItem.timestopstate = 0;
						player.A_SetInventory("KCTimeFreezer1",0);
						
						MiscItem.timestopcooldowntics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
						MiscItem.timestopcooldownmaxtics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
						player.A_SetInventory("KCTimeCooldown",1);
						MiscItem.timefreeze1cooldownratio2 = 0.0;

						MiscItem.timefreeze1timesused += 5;
						Console.Printf("Time Freeze Cut Short");
					}
				}
			}
		}
	}
	
	override void UiTick()
	{
		super.UiTick();
	}

	override void RenderOverlay(RenderEvent e)
	{
		super.RenderOverlay(e);
	}
	
}

class KC_StaticEventHandler : StaticEventHandler
{

	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e) 
	{
		actor player = players[0].mo;
		array<int> fs_textures;
		array<string> fs_sndinfo;
		string defaultSndinfo;
		
		array<string> allSF;
		StringTable.Localize("$STEP_FLATS").Split(allSF,":");
		Console.Printf("Default Footsteps TXT Loaded [Eventside]");
		/*
		StringTable.Localize("$STEP_FLATSOTEX").Split(allSF,":");
		Console.Printf("OTex Footsteps TXT Loaded [Eventside]");
		*/
		
		for (int j = allSF.Size() - 1; j >= 0; j -= 1)
		{
			string s = StringTable.Localize(String.Format("$STEP_%s", allSF[j]));
			//Console.Printf("[EVENT] j: %d, %s, string: %s [Length: %d]", j, allSF[j], s, s.Length());
			
			if (s.Length() != 0)
			{
				textureid t = TexMan.CheckForTexture(allSF[j], TexMan.TYPE_ANY);
				if (t.Exists())
				{
					//Console.Printf("[EVENT 2] j: %d, %s", j, allSF[j]);
					fs_textures.Push(int(t));
					
					fs_sndinfo.Push(s);
				}
			}
		}
		defaultSndinfo = StringTable.Localize("$STEP_DEFAULT");
		
		int nofsttxts = 0;
		int nofsttxts2 = 0;
		for (let i = 0, l = level.Sectors.Size(); i < l; i++)
		{
			int idx;
			int textfound = 0;
			string texname;
			/*
			Console.Printf("centfloor [%d]: %.4f", i, level.Sectors[i].CenterFloor());
			Console.Printf("centceiling [%d]: %.4f", i, level.Sectors[i].CenterCeiling());
			Console.Printf("centerspot [%d]: %.4f x %.4f", i, level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y);
			let p = SectorChecker(Actor.Spawn("SectorChecker", (level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y, level.Sectors[i].CenterFloor()), ALLOW_REPLACE));
			if (p)
			{
				p.place = i;
				texname = texman.GetName(p.floorpic);
				idx = fs_textures.Find(int(p.floorpic));
				if (idx == fs_textures.Size()) textfound = false;
																	else textfound = true;
				//Console.Printf("x: %.4f, y: %.4f, z: %.4f, floorpic: %d [%s] [idx: %d]", p.pos.x, p.pos.y, p.pos.z, int(p.floorpic), texname, idx);
			}
			*/
			
			texname = texman.GetName(level.Sectors[i].GetTexture(sector.floor));
			idx = fs_textures.Find(int(level.Sectors[i].GetTexture(sector.floor)));
			if (idx != fs_textures.Size()) textfound = 1;
			else 
			{
				if (texname == "" || 
						texname == "-NOFLAT-") textfound = -1;
				if (texname == "DOPE2 R") textfound = -1;
				if (texname == "STEP1" || 
						texname == "STEP2" || 
						texname == "STEP3" ||
					texname == "A-DAN1" ||
					texname == "A-DAN2" ||
					texname == "A-DAN3" ||
					texname == "A-DAN4" ||
					texname == "A-DAN5" ||
					texname == "GRNROCK") textfound = -1;
				else nofsttxts++;
			}
			
			if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava') level.Sectors[i].damagetype = 'Magma';
			if (level.Sectors[i].damagetype == 'Ice') level.Sectors[i].damagetype = 'IceWater';
			if (kcdebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
			
			int damageamt = level.Sectors[i].damageamount;
			int damageint = level.Sectors[i].damageinterval;
			int leakdam = level.Sectors[i].leakydamage;
			string damagetyp = level.Sectors[i].damagetype;
			double sectgrav = level.Sectors[i].gravity;
			
			if (kcdebug_footsteps1 || kcdebug_footsteps2)
			{
				String SecPrint = "Sector #: ";
				SecPrint.AppendFormat("%d, ", i);
				if (textfound > 0) SecPrint.AppendFormat("\c[green]-floorpic: %s\c-", texname);
				else if (textfound < 0) SecPrint.AppendFormat("\c[yellow]=floorpic: %s\c-", texname);
				else SecPrint.AppendFormat("\c[red]~floorpic: %s\c-", texname);
				if (sectgrav != 1.0) SecPrint.AppendFormat("\c[green]gravity: %.4f\c-, ", sectgrav);
				if (damagetyp != 'None' || damageamt > 0 || damageint) SecPrint.AppendFormat(", \c[brick]damagetype: %s, damageamount: %d, damageinterval: %d, leakydamage: %d / 256", damagetyp, damageamt, damageint, leakdam);
				Console.Printf(SecPrint);
			}
		}
		if (nofsttxts > 0)
		{
			if (kcdebug_footsteps1 || kcdebug_footsteps2) player.A_StartSound("step/squeaky1",1002);
			Console.Printf("# of textures found with no footstep definitions [\cy%s\c-]: \c[red]%d\c-", level.mapname, nofsttxts);
		}
	}
}

class KC_WaterHandler : StaticEventHandler 
{
	override void RenderOverlay(RenderEvent e)
	{
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		PPShader.SetUniform1f("KCwatershader", "timer", gametic + e.FracTic);
		int playbloom = Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true);
		
		bool chasecam = false;
		if (p.cheats & CF_CHASECAM) chasecam = true;
		if (!chasecam)
		{
			if ((playbloom == -1 && p.mo.waterlevel >= 3))
			{
				if (kcdebug_shader)
				{
					PPShader.SetEnabled("KCwatershader", false);
					PPShader.SetEnabled("KCwatershader", false);
				}
				else
				{
					PPShader.SetEnabled("KCwatershader", true);
					PPShader.SetEnabled("KCwatershader", true);
					double effectSize = CVar.GetCVar("kc_uweffectsize", p).GetFloat();
					//Console.Printf("effectSize: %.8f", effectSize);
					if (MiscItem)
					{
						double tempeffectsize = 1.0;
						if (playbloom == -1 && p.mo.waterlevel >= 3) tempeffectsize += 1.0;
						effectSize *= tempeffectsize;
					}
					//if ((playbloom == -1 && p.mo.waterlevel >= 3) && p.mo.CountInv("PowerNoDrown")) effectSize *= frandom(0.045,0.055);
					//Console.Printf("effectSize: %.8f, zoom: %.8f [tic: %d]", effectSize, (1 - (effectSize * 2)), gametic);
					PPShader.SetUniform1f("KCwatershader", "waterFactor", effectSize);
					PPShader.SetUniform1f("KCwatershader", "zoomFactor", 1 - (effectSize * 2));
				}
			}
			else 
			{
				PPShader.SetEnabled("KCwatershader", false);
				PPShader.SetEnabled("KCwatershader", false);
			}
		}
		else 
		{
			PPShader.SetEnabled("KCwatershader", false);
			PPShader.SetEnabled("KCwatershader", false);
		}
	}
}

class EVP_FootstepsInit : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			int numfound;
			ThinkerIterator FStepFinder = ThinkerIterator.Create("EVP_Footsteps");
			EVP_Footsteps mo;
			while (mo = EVP_Footsteps(FStepFinder.Next()))
			{
				mo.Destroy();
				numfound++;
				if (kcdebug_footsteps1) Console.Printf("Destroying Old EVP_Footsteps Item #%d", numfound);
			}
			if (e.playerNumber == 0)
			{
				let fs = EVP_Footsteps(Actor.Spawn("EVP_Footsteps"));
				if (fs) fs.Init(players[0].mo);
				if (kcdebug_footsteps1) Console.Printf("Adding New EVP_Footsteps Item");
			}
		}
	}
}