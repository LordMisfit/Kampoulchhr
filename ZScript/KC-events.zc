class KC_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	bool A_CheckUOHYM()
	{
		bool UOHYM = false;
		if (Wads.CheckNumForName("EE-UOHYM", Wads.ns_global, -1, true) != -1) UOHYM = true;
		return UOHYM;
	}
	
	int A_GetPlayerLevel(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains)
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLevel - EventHandler)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	override void WorldTick()
	{
		// LDL
		ThinkerIterator ldlit = ThinkerIterator.Create("Actor");
		Actor ldlmo;
		while (ldlmo = Actor(ldlit.Next()))
		{
			if (ldlmo.bISMONSTER && ldlmo.health > 0)
			{
				if (ldlmo.CountInv("LDLegendaryMonsterTracker"))
				{
					if (ldlmo.CountInv("LDLegendaryMonsterTransformed"))
					{
						ldlmo.A_GiveInventory("LDLegendaryMonsterVisualEffectMaker",1);
					}
					if (kcdebug_worldtick) Console.Printf("LDL Check [%p, %s]", ldlmo, ldlmo.GetClassName());
				}
			}
		}
		
		// CCards
		if ((level.time >= 3 && level.time <= 35) ||
				(((level.time - 35) % 350) == 0))
		{
			int d = Wads.CheckNumForName("CCARDS", Wads.ns_global, -1, true);
			if (kcdebug_worldtick) Console.Printf("d: %d [time: %d]", d, level.time);
			if (d != -1)
			{
				let globalvars = KCGlobalVariables.Get();
				globalvars.PlayingCCards = true;
				actor player = players[0].mo;
				player.A_SetInventory("PlayingCCards",1);
				Actor mo;
				
				string nm = "CCards_Actor_MonsterDisguise";
				ThinkerIterator it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo.bNORADIUSDMG) mo.bNORADIUSDMG = false; // hahahaha V:<
					if (!mo.bISMONSTER) mo.bISMONSTER = true; // hehehehe >:V
					if (kcdebug_worldtick) Console.Printf("LOLE [%p, %s]", mo, mo.GetClassName());
				}
			}
		}
	}
	
	override void NewGame()
	{
		let globalvars = KCGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		if (kcdebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (KC_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}
	
	void ProjSetSpeed(actor spawnee)
	{
		double spdfactor, oldspdfactor;
		
		if (Level.MapName != "TITLEMAP")
		{
			if (!spawnee.accuracy)
			{
				if (spawnee)
				{
					if (spawnee.target)
					{
						if (spawnee.target.bISMONSTER && !PlayerPawn(spawnee.target) && spawnee.target.default.speed != 0)
						{
							spdfactor = spawnee.target.speed / spawnee.target.default.speed;
							oldspdfactor = spdfactor;
							if (spdfactor >= 1.00) 
							{
								spdfactor -= 1.00;
								if (skill <= 0) spdfactor *= 0.25;
								if (skill == 1) spdfactor *= 0.375;
								if (skill == 2) spdfactor *= 0.5;
								if (skill == 3) spdfactor *= 0.625;
								if (skill >= 4) spdfactor *= 0.75;
								spdfactor *= frandom(0.875,1.125);
								spdfactor *= kc_mprojectilevelmulti;
								if (spdfactor < 0.00) spdfactor = 0.00;
								spdfactor += 1.00;
								spawnee.A_ScaleVelocity(spdfactor);
							}
							if (kcdebug_projectilespawns) Console.Printf("(%s) spdfactor: %.8f (%.8f), spawnee.target.speed: %.8f, spawnee.target.default.speed: %.8f", spawnee.GetClassName(), spdfactor, oldspdfactor, spawnee.target.speed, spawnee.target.default.speed);
						}
					}
					spawnee.accuracy++;
				}
			}
		}
	}
	
	actor, int, int AddLevelSpecials(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (exex_monsterlevelenabledflags)
		{
			if (monsterlevel >= (10 * levelmulfact))
			{
			}
			
			if (monsterlevel >= (15 * levelmulfact))
			{
				if (Cyberdemon(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (CyberdemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SpiderMasterMind(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (SpiderMastermindNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (UltraMastermind(spawnee)) spawnee.bAVOIDMELEE = true;
		
				if (Minotaur(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (IceGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Korax(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Inquisitor(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Programmer(spawnee)) spawnee.bAVOIDMELEE = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Macil1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDMELEE = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (20 * levelmulfact))
			{
				if (Zombieman(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (ZombiemanNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (PlasmaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (RepeaterZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (KarasawaGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ShotgunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (ShotgunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (FemaleRailZombie(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ChaingunGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (ChaingunGuyNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (Minigunner(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (BFGGuy(spawnee)) spawnee.bAVOIDMELEE = true;
				if (WolfensteinSS(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (WolfensteinSSNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (FlyingBalrog(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (IronLich(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Snake(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Bishop(spawnee)) spawnee.bAVOIDMELEE = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDMELEE = true;
		
				if (Acolyte(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Rebel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Reaver(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Templar(spawnee)) spawnee.bAVOIDMELEE = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDMELEE = true;
				
				// AVOIDHAZARDS
			}
			
			if (monsterlevel >= (25 * levelmulfact))
			{
				// AVOIDHAZARDS
				//if (NetherDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				// AVOIDMELEE
				//if (NetherDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Fatso(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (MancubusNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (Daedabus(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Arachnotron(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Archvile(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (ArchvileNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (BaronOfHell(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (BaronOfHellNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Wizard(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Beast(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (FireDemon(spawnee)) spawnee.bAVOIDMELEE = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon1(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Demon2(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Wraith(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (Sentinel(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Crusader(spawnee)) spawnee.bAVOIDMELEE = true;
			}
			
			if (monsterlevel >= (30 * levelmulfact))
			{
				//if (Abaddon(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (Hectebus(spawnee)) spawnee.bAVOIDMELEE = true;
				
				// AVOIDHAZARDS
				//if (Abaddon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Cyberdemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (CyberdemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SpiderMasterMind(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (SpiderMastermindNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (UltraMastermind(spawnee)) spawnee.bAVOIDHAZARDS = true;
		
				if (Minotaur(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MinotaurFriend(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Sorcerer2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (IceGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Heresiarch(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Korax(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Inquisitor(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Programmer(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (StrifeBishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Macil1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre3(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre4(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (AlienSpectre5(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntityBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (35 * levelmulfact))
			{
				if (DoomImp(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (DoomImpNew(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Cacodemon(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (CacodemonNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (PainElemental(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (PainElementalNew(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Revenant(spawnee) && random(1,2) <= 1) spawnee.bAVOIDMELEE = true;
				//if (RevenantNew(spawnee) && random(1,2) <= 1) spawnee.bAVOIDMELEE = true;
				if (HellKnight(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (HellKnightNew(spawnee)) spawnee.bAVOIDMELEE = true;
				
				if (HereticImpLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDMELEE = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDMELEE = true;
				if (Knight(spawnee)) spawnee.bAVOIDMELEE = true;
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}
	
	actor, int, int AddLevelSpecials2(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (exex_monsterlevelenabledflags)
		{
			if (monsterlevel >= (40 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (Zombieman(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (ZombiemanNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (PlasmaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (RepeaterZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (KarasawaGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (RocketLauncherGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ShotgunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (ShotgunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (SuperShotgunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (FemaleRailZombie(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ChaingunGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (ChaingunGuyNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (Minigunner(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (BFGGuy(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (WolfensteinSS(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (WolfensteinSSNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (FlyingBalrog(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (IronLich(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Snake(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Bishop(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (SerpentLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (ClericBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (FighterBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MageBoss(spawnee)) spawnee.bAVOIDHAZARDS = true;
		
				if (Acolyte(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Rebel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Reaver(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Templar(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (EntitySecond(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
		
			if (monsterlevel >= (45 * levelmulfact))
			{
				//if (HadesElemental(spawnee)) spawnee.bAVOIDMELEE = true;
				//if (HadesOverlord(spawnee)) spawnee.bAVOIDMELEE = true;
			}
		
			if (monsterlevel >= (50 * levelmulfact))
			{
				// AVOIDMELEE
				//if (Cacolantern(spawnee)) spawnee.bAVOIDMELEE = true;
				// AVOIDHAZARDS
				//if (Cacolantern(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Fatso(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (MancubusNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (Daedabus(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Arachnotron(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (ArachnotronNew(spawnee) || RailArachnotron(spawnee) || FusionArachnotron(spawnee) || ArachnotronMK2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Archvile(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (ArchvileNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (BaronOfHell(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (BaronOfHellNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Wizard(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Beast(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (FireDemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (CentaurLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon1(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Demon2(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Wraith(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (Sentinel(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Crusader(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (60 * levelmulfact))
			{
				// AVOIDHAZARDS
				//if (Hectebus(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (70 * levelmulfact))
			{
				// AVOIDHAZARDS
				if (DoomImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (DoomImpNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (DarkImp(spawnee) || STDarkImp(spawnee) || VoidDarkImp(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Cacodemon(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (CacodemonNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (PainElemental(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (PainElementalNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Revenant(spawnee) && spawnee.bAVOIDMELEE && random(1,2) <= 1) spawnee.bAVOIDHAZARDS = true;
				//if (RevenantNew(spawnee) && spawnee.bAVOIDMELEE && random(1,2) <= 1) spawnee.bAVOIDHAZARDS = true;
				if (HellKnight(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (HellKnightNew(spawnee)) spawnee.bAVOIDHAZARDS = true;
				
				if (HereticImpLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeader(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (MummyLeaderGhost(spawnee)) spawnee.bAVOIDHAZARDS = true;
				if (Knight(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
			
			if (monsterlevel >= (80 * levelmulfact))
			{
				// AVOIDHAZARDS
			}
			
			if (monsterlevel >= (90 * levelmulfact))
			{
				//if (HadesElemental(spawnee)) spawnee.bAVOIDHAZARDS = true;
				//if (HadesOverlord(spawnee)) spawnee.bAVOIDHAZARDS = true;
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}
	
	actor, int, int AddLevelSpecials3(actor spawnee, int monsterlevel, int monsterrating)
	{
		double levelmulfact = 1.5;
		if (exex_monsterlevelenabledflags)
		{
			int fastchance = 0;
			if (monsterlevel >= (25 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (50 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (75 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (100 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
					//if (HellCleric(spawnee) || HellClericDVDS(spawnee) || HellClericSpectral(spawnee)) spawnee.bALWAYSFAST = true;
					if (Demon(spawnee)) spawnee.bALWAYSFAST = true;
					//if (DemonNew(spawnee)) spawnee.bALWAYSFAST = true;
					if (LostSoul(spawnee)) spawnee.bALWAYSFAST = true;
					//if (LostSoulNew(spawnee) || LostSoulAnnoying(spawnee) BetaLostSoul(spawnee)) spawnee.bALWAYSFAST = true;
					if (HereticImp(spawnee)) spawnee.bALWAYSFAST = true;
					if (Mummy(spawnee)) spawnee.bALWAYSFAST = true;
					if (Clink(spawnee)) spawnee.bALWAYSFAST = true;
					
					if (Ettin(spawnee)) spawnee.bALWAYSFAST = true;
					if (Centaur(spawnee)) spawnee.bALWAYSFAST = true;
					if (Serpent(spawnee)) spawnee.bALWAYSFAST = true;
					
					if (Stalker(spawnee)) spawnee.bALWAYSFAST = true;
				}
			}
			if (monsterlevel >= (50 * levelmulfact))
			{
				// ALWAYSFAST
				fastchance = 25;
				if (monsterlevel >= (100 * levelmulfact)) fastchance = randompick(62,63);
				if (monsterlevel >= (150 * levelmulfact)) fastchance = randompick(87,88);
				if (monsterlevel >= (200 * levelmulfact)) fastchance = 200;
				if (random(1,100) <= fastchance)
				{
				}
			}
		}
		return spawnee, monsterlevel, monsterrating;
	}
	
	actor, string, int CheckLevelTweaks(actor spawnee, string spawnname, int LevelCheck)
	{
		// Level Tweaks
		// Micro-Boss
		
		// Mini-Boss
		if (spawnname == "SpiderMastermindNew") LevelCheck += random(random(1,2),3);
		if (spawnname == "Demolisher") LevelCheck += random(random(1,2),3);
		if (spawnname == "CyberdemonNew") LevelCheck += random(random(1,2),3);
		
		// Tier 1 Boss
		
		// Tier 2 Boss

		if (Peasant(spawnee)) LevelCheck /= 4;
		else
		{
			if (random(1,32) <= 1)
			{
				if (random(1,32) <= 1)
				{
					if (random(1,32) <= 1)
					{
						if (spawnname == "ClayDevilNew") LevelCheck += random(4,6);
						else if (spawnname == "Skeleton") LevelCheck += random(8,12);
						else LevelCheck += random(16,24);
					}
					else
					{
						if (spawnname == "ClayDevilNew") LevelCheck += random(1,2);
						else if (spawnname == "Skeleton") LevelCheck += random(2,3);
						else LevelCheck += random(8,12);
					}
				}
				else
				{
					if (spawnname == "ClayDevilNew") LevelCheck += randompick(0,0,0,0,0,0,0,0,0,1);
					else if (spawnname == "Skeleton") LevelCheck += random(0,1);
					else LevelCheck += random(2,3);
				}
			}
			
			// Rare Chance for a Level Quadruplication [i.e. Aetherius]
			int basechance = 128;
			if (random(1,basechance) <= (1 + (skill * 0.25)))
			{
				if (spawnname == "ClayDevilNew") LevelCheck *= 1.25;
				else if (spawnname == "Skeleton") LevelCheck *= 1.5;
				else LevelCheck *= 2;
				
				basechance = 128;
				if (random(1,basechance) <= (1 + (skill * 0.25))) 
				{
					if (spawnname == "ClayDevilNew") LevelCheck *= 1.25;
					else if (spawnname == "Skeleton") LevelCheck *= 1.5;
					else LevelCheck *= 2;
				}
			}
		}
		
		return spawnee, spawnname, LevelCheck;
	}
	
	bool CheckExceptions(actor checkee)
	{
		string nm, nn, no, np;
		bool exception = false;
		if (checkee)
		{
			string spawnname = checkee.GetClassName();
		}
		return exception;
	}
	
	void MonsterStatsSet(actor spawnee, int basemonsterrating, bool practicetarget, bool specialenemy, bool ispeasant)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = KCGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			string spawnname = spawnee.GetClassName();
			string nm, nn, no, np;
			
			double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
			double hpmulti2, atkmulti2, defmulti2, spdmulti2, massmulti2;
			
			// Monster "Scaling"
			bool exception = CheckExceptions(spawnee);
			if (spawnee.bISMONSTER && !practicetarget && !exception)
			{
				double baselinelevel = 0;
				if (A_CheckUOHYM() && level.mapname == "MAP01") 
				{
					baselinelevel += randompick(0,1,1,1,2,2,2,2,2,2,2,2,3,3,3,4);
					nm = "Blot"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Shadow"; if (spawnname == nm) baselinelevel *= random(1,2);
					nm = "Mite"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Vampyr"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Striga"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Putrefier"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Hemodemon"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "Wight1"; if (spawnname == nm) baselinelevel *= random(2,3);
					nm = "KDiZDNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "MirrorArchvile"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "KevCerberus"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "ChildhoodNightmare"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "Hellfish"; if (spawnname == nm) baselinelevel *= random(8,12);
					nm = "SkinStealer"; if (spawnname == nm) baselinelevel *= random(16,24);
					if (random(1,16) <= 1) baselinelevel *= 2.5;
					else
					{
						if (random(1,8) <= 1) baselinelevel *= 1.75;
						else
						{
							if (random(1,4) <= 1) baselinelevel *= 1.375;
							else
							{
								if (random(1,2) <= 1) baselinelevel *= 1.1875;
							}
						}
					}
				}
				
				
				if (kcdebug_monsterscaling) Console.Printf("\c[gold][MonsterStatsSet], tic: %d, actor: %p [%s]\c-", gametic, spawnee, spawnname);
				int LevelErrorRange;
				int LevelCheck;
				int LevelChecker = 1;
				int MapDifficultyInflation = clamp(kc_mapdifficultyinflation, -2000, 2000);
				int MapDifficultyInflationPercent = clamp(kc_mapdifficultyinflation2,  1, 5000);
				int MapErrorRange;
				int LevelDifficultyInflation = clamp(kc_leveldifficultyinflation, -2000, 2000);
				int LevelDifficultyInflationPercent = clamp(kc_leveldifficultyinflation2, -100, 2000);
				int MapCheck;
				double monsterrating = 0;
				double monsterlevel = 0;
				double leveltemp = 0;
				double luckmult = 0;
				double origSpd = spawnee.Speed;
				double origDmgMul = spawnee.DamageMultiply;
				double origDmgFct = spawnee.DamageFactor;
				double origHealth = spawnee.health;
				double origMass = spawnee.Mass;
				KCCreature KCC;
				KCC = KCCreature(spawnee);
				
				hpmulti = 0.00;
				atkmulti = 0.00;
				defmulti = 0.00;
				spdmulti = 0.00;
				massmulti = 0.00;
				if (!specialenemy || !ispeasant)
				{
					double mult;
					double mult2;
					double multbase = 1;
					int basedivfactor = 16;
					if (skill <= 0) basedivfactor = 22;
					if (skill == 1) basedivfactor = 19;
					if (skill == 2) basedivfactor = 16;
					if (skill == 3) basedivfactor = 11;
					if (skill >= 4) basedivfactor = 6;

					if (random(1,basedivfactor) <= 8)
					{
						if (random(1,basedivfactor) <= 4)
						{
							if (random(1,basedivfactor) <= 2)
							{
								if (random(1,basedivfactor) <= 1)
								{
									if (random(1,(basedivfactor*1.25)) <= 1)
									{
										if (random(1,(basedivfactor*1.5)) <= 1)
										{
											if (random(1,(basedivfactor*2)) <= 1)
											{
												if (random(1,(basedivfactor*3)) <= 1) monsterrating = 8; // <SSS>
												else monsterrating = 7; // <SS>
											}
											else monsterrating = 6; // [S]
										}
										else monsterrating = 5; // [A]
									}
									else monsterrating = 4; // [B]
								}
								else monsterrating = 3; // [C]
							}
							else monsterrating = 2; // [D]
						}
						else monsterrating = 1; // [E]
					}
					
					if (monsterrating < basemonsterrating) monsterrating = basemonsterrating;
					multbase = 1.0;
					double baseadd = 0.0;
					if (monsterrating == 1) baseadd = 0.5; // [E]
					if (monsterrating == 2) baseadd = 1.125; // [D]
					if (monsterrating == 3) baseadd = 2.2; // [C]
					if (monsterrating == 4) baseadd = 3.25; // [B]
					if (monsterrating == 5) baseadd = 4.334; // [A]
					if (monsterrating == 6) baseadd = 5.4; // [S]
					if (monsterrating == 7) baseadd = 6.5; // <SS>
					if (monsterrating >= 8) baseadd = 7.75; // <SSS>
					baseadd *= frandompick(0.4375,0.5,0.5,0.5,0.5,0.5,0.5,0.5625);
					multbase += baseadd;
					if (kcdebug_monsterscaling) Console.Printf("multbase: %.8f, monsterrating: %d", multbase, monsterrating);
					
					if (random(1,128) <= (monsterrating * 0.25))
					{
						multbase *= 2;
						if (kcdebug_monsterscaling) Console.Printf("Boosted [1] - multbase: %.8f, monsterrating: %d", multbase, monsterrating);
						if (random(1,128) <= (monsterrating * 0.125))
						{
							multbase *= 2;
							if (kcdebug_monsterscaling) Console.Printf("Boosted [2] - multbase: %.8f, monsterrating: %d", multbase, monsterrating);
						}
					}
					
					bool levelee = false;
					KCCreature spawnee2;
					spawnee2 = KCCreature(spawnee);
					if (spawnee2)
					{
						int presetlevel = spawnee2.user_presetleveladd + random(spawnee2.user_presetlevelrand1,spawnee2.user_presetlevelrand2);
						if (presetlevel > 0) 
						{
							LevelCheck += presetlevel;
							if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [presetlevel]: %d, monsterrating: %d", presetlevel, monsterrating);
						}
					}
					//***********************
					//* PlayerLevel Scaling *
					//***********************
					if (kc_enemyscalingplevel && globalvars && MiscItem)
					{
						int TruePlayerLevel = A_GetPlayerLevel(1);
						TruePlayerLevel += baselinelevel;
						LevelCheck += TruePlayerLevel;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [PlayerLevel Check]: %d (PlayLvl: +%d), monsterrating: %d", LevelCheck, TruePlayerLevel, monsterrating);

						if (KCC)
						{
							LevelCheck += KCC.user_ressurrectstr; // Checks the "Resurrect" strength of a monster [Clay Devils in TCOTD:A get stronger each time they resurrect]
							if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [ResurrectStr Check]: %d (ResStr: +%d), monsterrating: %d", LevelCheck, KCC.user_ressurrectstr, monsterrating);
						}
						
						LevelCheck += LevelDifficultyInflation;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d), monsterrating: %d", LevelCheck, LevelDifficultyInflation, monsterrating);
			
						LevelCheck = LevelCheck * (100 + LevelDifficultyInflationPercent) / 100;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%), monsterrating: %d", LevelCheck, (100 + LevelDifficultyInflationPercent), monsterrating);
						
						LevelErrorRange = LevelCheck * 0.1667;
						if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
						LevelCheck += random(-LevelErrorRange,LevelErrorRange);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [error-range]: %d (Error Range: +-%d), monsterrating: %d", LevelCheck, LevelErrorRange, monsterrating);

						int PreviousLevelCheck = LevelCheck;
						
						/*
						// Specific Monsters
						if (SpiderMastermind(spawnee) || SpiderMastermindNew(spawnee)) LevelCheck += random(3,6);
						if (Cyberdemon(spawnee) || CyberdemonNew(spawnee)) LevelCheck += random(3,6);
						if (Annihilator(spawnee) || Demolisher(spawnee)) LevelCheck += random(3,6);
						if (Minotaur(spawnee) || MinotaurFriend(spawnee)) LevelCheck += random(3,6);

						// Specific Bosses
						// Tier 1 Boss
						if (Sorcerer1(spawnee) || DSparilMountedNew(spawnee)) LevelCheck += random(9,18);
						if (FighterBoss(spawnee)) LevelCheck += random(9,18);
						if (ClericBoss(spawnee)) LevelCheck += random(9,18);
						if (MageBoss(spawnee)) LevelCheck += random(9,18);
						// Tier 2 Boss
						if (Sorcerer2(spawnee) || DSparilUnmountedNew(spawnee)) LevelCheck += random(15,30);
						if (Korax(spawnee) || KoraxNew(spawnee)) LevelCheck += random(15,30);
						if (spawnname == "ThamuzNew" || spawnname == "TchernobogNew") LevelCheck += random(15,30);
						// Tier 3 Boss
						if (spawnname == "PennywiseBoss" || spawnname == "TchernobogNew") LevelCheck += random(23,45);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [actor-check: %s]: %d (Previous: %d), monsterrating: %d", spawnname, LevelCheck, PreviousLevelCheck, monsterrating);
						*/
						
						PreviousLevelCheck = LevelCheck;
						LevelCheck = clamp(LevelCheck, 0, 2000);
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [final calc]: %d (Previous: %d), monsterrating: %d", LevelCheck, PreviousLevelCheck, monsterrating);
						levelee = true;
					}
					
					//
					
					[spawnee, spawnname, LevelCheck] = CheckLevelTweaks(spawnee,spawnname,LevelCheck);
					
					if (levelee)
					{
						spawnee.A_SetInventory("MonsterLevel",LevelCheck);
						KCCreature spawnee2;
						spawnee2 = KCCreature(spawnee);
						//
						double truemultbase = multbase *= kc_enemyscalelevelmultiplier;
						if (kcdebug_monsterscaling) Console.Printf("truemultbase: %.8f, kc_enemyscalelevelmultiplier: %.8f, monsterrating: %d", truemultbase, kc_enemyscalelevelmultiplier, monsterrating);
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult = 0.00275;
							if (skill == 1) mult = 0.002625;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002375;
							if (skill >= 4) mult = 0.00225;
						}
						else
						{
							if (skill <= 0) mult = 0.00225;
							if (skill == 1) mult = 0.002375;
							if (skill == 2) mult = 0.0025;
							if (skill == 3) mult = 0.002625;
							if (skill >= 4) mult = 0.00275;
						}
						mult *= 0.9;
						mult *= (1.0 + (0.125 * monsterrating));
						mult *= truemultbase;
						if (kcdebug_monsterscaling) Console.Printf("\c[red]mult [pre-attack]: %.8f\c-, FRIENDLY?: %d, monsterrating: %d", mult, spawnee.bFRIENDLY, monsterrating);

						// Attack
						double baseatkmulti = (LevelCheck * mult);
						if (LevelCheck >= 1 && LevelCheck <= 20) baseatkmulti *= frandom(1.0025,1.005);
						if (LevelCheck >= 21 && LevelCheck <= 40) baseatkmulti *= frandom(1.0075,1.015);
						if (LevelCheck >= 41 && LevelCheck <= 60) baseatkmulti *= frandom(1.015,1.03);
						if (LevelCheck >= 61 && LevelCheck <= 80) baseatkmulti *= frandom(1.025,1.05);
						if (LevelCheck >= 81 && LevelCheck <= 100) baseatkmulti *= frandom(1.0375,1.075);
						if (LevelCheck >= 101 && LevelCheck <= 120) baseatkmulti *= frandom(1.0525,1.105);
						if (LevelCheck >= 121 && LevelCheck <= 140) baseatkmulti *= frandom(1.07,1.14);
						if (LevelCheck >= 141 && LevelCheck <= 160) baseatkmulti *= frandom(1.09,1.18);
						if (LevelCheck >= 161 && LevelCheck <= 180) baseatkmulti *= frandom(1.1125,1.225);
						if (LevelCheck >= 181 && LevelCheck <= 199) baseatkmulti *= frandom(1.1375,1.275);
						if (LevelCheck >= 200) baseatkmulti *= frandom(1.165,1.33);
						atkmulti = baseatkmulti;
						//
						if (kcdebug_monsterscaling) Console.Printf("atkmulti: %.8f", atkmulti);
						
						// Defense
						defmulti = 1.0 / (baseatkmulti + 1.0);
						//
						defmulti -= 1.0;
						if (kcdebug_monsterscaling) Console.Printf("defmulti: %.8f", defmulti);
						
						// Speed
						spdmulti = (baseatkmulti * 0.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("spdmulti: %.8f", spdmulti);
							
						// Mass
						massmulti = (baseatkmulti / 1.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("massmulti: %.8f", massmulti);
						
						// Health
						hpmulti = (baseatkmulti / 1.25);
						//
						if (kcdebug_monsterscaling) Console.Printf("hpmulti: %.8f", hpmulti);
					}
					
					//*********************
					//* Map-Based Scaling *
					//*********************
					if (kc_enemyscalingmaps && globalvars && MiscItem)
					{
						double truemultbase = multbase *= kc_enemyscalemapmultiplier;
						if (spawnee.bFRIENDLY)
						{
							if (skill <= 0) mult2 = 0.00275;
							if (skill == 1) mult2 = 0.002625;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002375;
							if (skill >= 4) mult2 = 0.00225;
						}
						else
						{
							if (skill <= 0) mult2 = 0.00225;
							if (skill == 1) mult2 = 0.002375;
							if (skill == 2) mult2 = 0.0025;
							if (skill == 3) mult2 = 0.002625;
							if (skill >= 4) mult2 = 0.00275;
						}
						mult2 *= (random(2,4) * 0.9);
						mult2 *= (1.0 + ((random(5,10) * 0.0125) * monsterrating));
						mult2 *= truemultbase;
						
						MapCheck = globalvars.MapsFinished;
						
						MapCheck += MapDifficultyInflation;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d), monsterrating: %d", MapCheck, MapDifficultyInflation, monsterrating);
			
						MapCheck = MapCheck * (100 + MapDifficultyInflationPercent) / 100;
						if (kcdebug_monsterscaling) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%), monsterrating: %d", MapCheck, (100 + MapDifficultyInflationPercent), monsterrating);

						// Attack
						double baseatkmulti2 = (MapCheck * mult2);
						if (MapCheck >= 1 && MapCheck <= 6) baseatkmulti2 *= 1.0125;
						if (MapCheck >= 7 && MapCheck <= 11) baseatkmulti2 *= 1.025;
						if (MapCheck >= 12 && MapCheck <= 20) baseatkmulti2 *= 1.0375;
						if (MapCheck >= 21 && MapCheck <= 30) baseatkmulti2 *= 1.05;
						if (MapCheck >= 31 && MapCheck <= 40) baseatkmulti2 *= 1.0625;
						if (MapCheck >= 41 && MapCheck <= 50) baseatkmulti2 *= 1.075;
						if (MapCheck >= 51 && MapCheck <= 60) baseatkmulti2 *= 1.0875;
						if (MapCheck >= 61 && MapCheck <= 70) baseatkmulti2 *= 1.10;
						if (MapCheck >= 71 && MapCheck <= 80) baseatkmulti2 *= 1.125;
						if (MapCheck >= 81 && MapCheck <= 90) baseatkmulti2 *= 1.25;
						if (MapCheck >= 91 && MapCheck <= 100) baseatkmulti2 *= 1.375;
						if (MapCheck >= 101 && MapCheck <= 125) baseatkmulti2 *= 1.5;
						if (MapCheck >= 126 && MapCheck <= 150) baseatkmulti2 *= 1.625;
						if (MapCheck >= 151 && MapCheck <= 175) baseatkmulti2 *= 1.75;
						if (MapCheck >= 176 && MapCheck <= 200) baseatkmulti2 *= 1.875;
						if (MapCheck >= 201) baseatkmulti2 *= 2.0;
						atkmulti2 = baseatkmulti2;
						//
						if (kcdebug_monsterscaling) Console.Printf("atkmulti2: %.8f", atkmulti2);
						
						// Defense
						defmulti2 = 1.0 / (atkmulti2 + 1.0);
						//
						defmulti2 -= 1.0;
						if (kcdebug_monsterscaling) Console.Printf("defmulti2: %.8f", defmulti2);
						
						// Speed
						spdmulti2 = (atkmulti2 * 0.3125);
						//
						if (kcdebug_monsterscaling) Console.Printf("spdmulti2: %.8f", spdmulti2);
							
						// Mass
						massmulti2 = atkmulti2 * 0.667;
						//
						if (kcdebug_monsterscaling) Console.Printf("massmulti2: %.8f", massmulti2);
						
						// Health
						hpmulti2 = atkmulti2 * 0.667;
						//
						if (kcdebug_monsterscaling) Console.Printf("hpmulti2: %.8f", hpmulti2);
					}
			
					// Final Calcs
					double tempfinmulti = 1.0;
					if (spdmulti || spdmulti2) 
					{
						tempfinmulti = 1.0;
						double SpeedErrorRange = (spdmulti * 0.125);
						spdmulti += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti);

						SpeedErrorRange = (spdmulti2 * 0.0625);
						spdmulti2 += frandom(-SpeedErrorRange,SpeedErrorRange);
						tempfinmulti *= (1.0 + spdmulti2);

						double maxtempfin = 5.00 + (monsterrating * (1.25 * 0.500));
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						spawnee.Speed *= tempfinmulti;
						
						if (kcdebug_monsterscaling) Console.Printf("\c[lightblue]Speed: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.Speed, origSpd, spdmulti, spdmulti2);
					}
					if (atkmulti || atkmulti2) 
					{
						tempfinmulti = 1.0;
						double AttackErrorRange = (atkmulti * 0.125);
						atkmulti += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti);

						AttackErrorRange = (atkmulti2 * 0.0625);
						atkmulti2 += frandom(-AttackErrorRange,AttackErrorRange);
						tempfinmulti *= (1.0 + atkmulti2);
						
						double maxtempfin = 15.0 + (monsterrating * 1.875);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;

						spawnee.DamageMultiply = tempfinmulti;
						if (kcdebug_monsterscaling) Console.Printf("\c[red]DamageMultiply: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageMultiply, origDmgMul, atkmulti, atkmulti2);
					}
					if (defmulti || defmulti2) 
					{
						tempfinmulti = 1.0;
						double DefenseErrorRange = (defmulti * 0.125);
						defmulti += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti);

						DefenseErrorRange = (defmulti2 * 0.0625);
						defmulti2 += frandom(-DefenseErrorRange,DefenseErrorRange);
						tempfinmulti *= (1.0 + defmulti2);
						double maxtempfin = (0.0667 - (monsterrating * 0.00334));
						if (tempfinmulti < maxtempfin) maxtempfin = maxtempfin;

						spawnee.DamageFactor = tempfinmulti;
						if (kcdebug_monsterscaling) Console.Printf("\c[olive]DamageFactor: %.8f [old: %.8f, multi: %.8f, multi2: %.8f]\c-", spawnee.DamageFactor, origDmgFct, defmulti, defmulti2);
					}
					if (hpmulti || hpmulti2) 
					{
						tempfinmulti = 0;
						double MaxHPErrorRange = (hpmulti * 0.125);
						hpmulti += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti;

						MaxHPErrorRange = (hpmulti2 * 0.0625);
						hpmulti2 += frandom(-MaxHPErrorRange,MaxHPErrorRange);
						tempfinmulti += hpmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.SpawnHealth() * maxtempfin)) tempfinmulti = (spawnee.SpawnHealth() * maxtempfin);

						spawnee.health *= (1.0 + tempfinmulti);
						spawnee.Stamina = (spawnee.health - spawnee.SpawnHealth());
						if (kcdebug_monsterscaling) Console.Printf("\c[brick]Health: %d (stam: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.health, spawnee.Stamina, origHealth, hpmulti, hpmulti2);
					}
					if (massmulti || massmulti2) 
					{
						tempfinmulti = 0;
						double MassErrorRange = (massmulti * 0.125);
						massmulti += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti;

						MassErrorRange = (massmulti2 * 0.0625);
						massmulti2 += frandom(-MassErrorRange,MassErrorRange);
						tempfinmulti += massmulti2;

						double maxtempfin = 3.75 + (monsterrating * 0.375);
						if (tempfinmulti > maxtempfin) tempfinmulti = maxtempfin;
						if (tempfinmulti > (spawnee.default.mass * maxtempfin)) tempfinmulti = (spawnee.default.mass * maxtempfin);

						spawnee.mass *= (1.0 + tempfinmulti);
						spawnee.Accuracy = (spawnee.mass - spawnee.default.mass);
						if (kcdebug_monsterscaling) Console.Printf("\c[brown]Mass: %d (Acc: %d) [old: %d, diff: %d, diff2: %d]\c-", spawnee.Mass, spawnee.Accuracy, origMass, massmulti, massmulti2);
					}
				}
				if (kcdebug_monsterscaling) Console.Printf("\c[orange]monsterlevel: %d, monsterrating: %d", monsterlevel, monsterrating);
				
				if (LevelCheck)
				{
					if (random(1,100) <= random(11,13))
					{
						if (skill <= 0) LevelCheck *= frandompick(1.00,1.0078125,1.0078125,1.0078125,1.0078125,1.0078125,1.015625);
						if (skill == 1) LevelCheck *= frandompick(1.00,1.015625,1.015625,1.015625,1.015625,1.015625,1.03125);
						if (skill == 2) LevelCheck *= frandompick(1.00,1.03125,1.03125,1.03125,1.03125,1.03125,1.0625);
						if (skill == 3) LevelCheck *= frandompick(1.00,1.0625,1.0625,1.0625,1.0625,1.0625,1.125);
						if (skill >= 4) LevelCheck *= frandompick(1.00,1.125,1.125,1.125,1.125,1.125,1.25);
					}

					spawnee.A_SetInventory("MonsterLevel",LevelCheck);
					spawnee.A_SetInventory("MonsterRating",monsterrating);
					monsterlevel = spawnee.CountInv("MonsterLevel");
					monsterrating = spawnee.CountInv("MonsterRating");
					if (kcdebug_monsterscaling) Console.Printf("Actor's Level: %d [%d], Actor's Rating: %d [%d]", LevelCheck, spawnee.CountInv("MonsterLevel"), monsterrating, spawnee.CountInv("MonsterRating"));
				}
				string montag = spawnee.GetTag();
				montag.AppendFormat(" \c[gold](L%d)\c-", monsterlevel);
				spawnee.SetTag(montag);
				
				KCCreature spawnee2;
				spawnee2 = KCCreature(spawnee);
				if (spawnee2 && spawnee2.user_rankpreset) 
				{
					spawnee2.A_SetInventory("MonsterRating",spawnee2.user_rankpreset);
					monsterrating = spawnee2.CountInv("MonsterRating");
					monsterrating = spawnee2.user_rankpreset;
				}
				if (monsterrating)
				{
					spawnee.A_SetInventory("MonsterRating",monsterrating);
					string montag = spawnee.GetTag();
					if (monsterrating == 8) montag.AppendFormat(" \c[purple]<SSS>\c-");
					else if (monsterrating == 7) montag.AppendFormat(" \c[fire]<SS>\c-");
					else if (monsterrating == 6) montag.AppendFormat(" \c[red][S]\c-");
					else if (monsterrating == 5) montag.AppendFormat(" \c[brick][A]\c-");
					else if (monsterrating == 4) montag.AppendFormat(" \c[orange][B]\c-");
					else if (monsterrating == 3) montag.AppendFormat(" \c[yellow][C]\c-");
					else if (monsterrating == 2) montag.AppendFormat(" \c[green][D]\c-");
					else if (monsterrating == 1) montag.AppendFormat(" \c[sapphire][E]\c-");
					spawnee.SetTag(montag);
				}
				
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials(spawnee,monsterlevel,monsterrating);
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials2(spawnee,monsterlevel,monsterrating);
				[spawnee, monsterlevel, monsterrating] = AddLevelSpecials3(spawnee,monsterlevel,monsterrating);
				if (!LD_nomonsters) A_LegendaryCheck(spawnee);
				//if (!A_CheckUOHYM()) [spawnee, monsterlevel, monsterrating] = SetUpMiracles(spawnee,monsterlevel,monsterrating);
			}
		}
		KCCreature spawnee2;
		spawnee2 = KCCreature(spawnee);
		if (spawnee2) 
		{
			spawnee2.A_SetInventory("ActorMaxHP",spawnee2.user_MaxHP);
			if (spawnee2.isasummonedclone)
			{
				spawnee2.user_MaxHP *= 0.25;
				spawnee2.health *= 0.25;
			}
			
			spawnee2.user_MaxHP = spawnee2.SpawnHealth() + spawnee2.Stamina;
			double RangeVar;
			int Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPBuffRange = Temp;

			if (skill <= 0) RangeVar = 0.250; // 25.0%
			if (skill == 1) RangeVar = 0.313; // 31.3%
			if (skill == 2) RangeVar = 0.375; // 37.5%
			if (skill == 3) RangeVar = 0.437; // 43.7%
			if (skill >= 4) RangeVar = 0.500; // 50.0%
			RangeVar /= 3;
			Temp = (spawnee2.user_MaxHP * RangeVar) + 1;
			if (Temp < 2) Temp = 2;
			spawnee2.user_HPLowBuffRange = Temp;

			spawnee2.user_HPXDeathRange = (spawnee2.user_MaxHP * -1.0);
			if (spawnee2.GetClassName() == "BloodZombieNew") spawnee2.user_HPXDeathRange2 = (spawnee2.user_MaxHP * -0.5);
			
			if (skill <= 0) RangeVar = 0.080; // 8.0%
			if (skill == 1) RangeVar = 0.120; // 12.0%
			if (skill == 2) RangeVar = 0.160; // 16.0%
			if (skill == 3) RangeVar = 0.200; // 20.0%
			if (skill >= 4) RangeVar = 0.240; // 24.0%
			spawnee2.user_HPLowRange = (spawnee2.user_MaxHP * RangeVar);
			
			if (skill <= 0) RangeVar = 0.010; // 1.0%
			if (skill == 1) RangeVar = 0.015; // 1.5%
			if (skill == 2) RangeVar = 0.020; // 2.0%
			if (skill == 3) RangeVar = 0.025; // 2.5%
			if (skill >= 4) RangeVar = 0.030; // 3.0%
			spawnee2.user_HPCritRange = (spawnee2.user_MaxHP * RangeVar);
		}
	}
	
	int CountPlayers()
	{
		int count = 0, i;
	
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i]) count++;
		}
		return count;
	}
	
	void A_LegendaryCheck(actor spawnee)
	{
		class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
		string spawnname = spawnee.GetClassName();
		KCCreature spawnee2;
		spawnee2 = KCCreature(spawnee);
		
		bool NoLegendary;
		bool boo;
		bool LEGENDARIFY;
		bool LEGENDARIFYSuccess;
		bool BOSSTIEM;
		bool BOSSACTIVAAAATE;
		
		if (spawnee)
		{
			String nm = "LDLegendaryMonsterTracker";
			LDLPreload = nm;
			
			if (!(spawnname == "PeasantNew" ||
						spawnname == "Peasant1New" ||
						spawnname == "Peasant2New" ||
						spawnname == "Peasant3New" ||
						spawnname == "Peasant4New" ||
						spawnname == "Peasant5New" ||
						spawnname == "Peasant6New" ||
						spawnname == "Peasant7New" ||
						spawnname == "Peasant8New" ||
						spawnname == "Peasant9New" ||
						spawnname == "Peasant10New" ||
						spawnname == "Peasant11New" ||
						spawnname == "Peasant12New" ||
						spawnname == "Peasant13New" ||
						spawnname == "Peasant14New" ||
						spawnname == "Peasant15New" ||
						spawnname == "Peasant16New" ||
						spawnname == "Peasant17New" ||
						spawnname == "Peasant18New" ||
						spawnname == "Peasant19New" ||
						spawnname == "Peasant20New" ||
						spawnname == "Peasant21New" ||
						spawnname == "Peasant22New" ||
						spawnname == "BeggarNew" ||
						spawnname == "Beggar1New" ||
						spawnname == "Beggar2New" ||
						spawnname == "Beggar3New" ||
						spawnname == "Beggar4New" ||
						spawnname == "Beggar5New" ||
						spawnname == "MerchantNew" ||
						spawnname == "WeaponSmithNew" ||
						spawnname == "BarKeepNew" ||
						spawnname == "ArmorerNew" ||
						spawnname == "MedicNew"))
			{
				String nn;
				if (A_CheckUOHYM())
				{
					nn = "MirrorArchvile"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "ChildhoodNightmare"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "KevCerberus"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "Hellfish"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "SkinStealer"; if (spawnname == nn) BOSSACTIVAAAATE = true;
					nn = "BabyFish"; if (spawnname == nn) 
					
					{
						if (random(1,2) == 1) NoLegendary = true;
														 else LEGENDARIFYSuccess = true;
					}
					nn = "BestBuddy"; if (spawnname == nn) NoLegendary = true;
					nn = "BestBuddyLayingDown"; if (spawnname == nn) NoLegendary = true;
				}
				
				if (!NoLegendary && !BOSSACTIVAAAATE && !LEGENDARIFYSuccess)
				{
					KCCreature KCC;
					KCC = KCCreature(spawnee);
					if (KCC && KCC.user_ldlautolegendary)
					{
						if (KCC.bBOSS) BOSSACTIVAAAATE = true;
						else LEGENDARIFYSuccess = true;
					}
				}
				
				int ldlchance = ((CountPlayers() * 4) + (LD_legendarychance * 5));
				if (kcLDL_newldlchances) // uses the chances from LDL 4.1
				{
					if (skill <= 0) ldlchance = (random(0,4) + (CountPlayers() * 4) + (LD_legendarychance * 5)); // Very Easy
					if (skill == 1) ldlchance = (random(0,6) + (CountPlayers() * 6) + (LD_legendarychance * 5)); // Easy
					if (skill == 2) ldlchance = (random(0,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(0,10) + (CountPlayers() * 10) + (LD_legendarychance * 5)); // Hard
					if (skill == 4) ldlchance = (random(0,20) + (CountPlayers() * 20) + (LD_legendarychance * 5)); // Very Hard
					if (skill == 5) ldlchance = (random(0,25) + (CountPlayers() * 25) + (LD_legendarychance * random(4,6))); // Extreme
					if (skill == 6) ldlchance = (random(0,30) + (CountPlayers() * 30) + (LD_legendarychance * random(4,6))); // Horrible
					if (skill == 7) ldlchance = (random(0,35) + (CountPlayers() * 35) + (LD_legendarychance * random(3,7))); // Impossible
					if (skill >= 8) ldlchance = (random(0,40) + (CountPlayers() * 40) + (LD_legendarychance * random(2,8))); // Omega
				}
				else // uses the older-skool chances of EE/Aetherius [which is based on LDL 3.0]
				{
					if (skill <= 0) ldlchance = (random(2,4) + (CountPlayers() * 4) + (LD_legendarychance * 3)); // Very Easy
					if (skill == 1) ldlchance = (random(3,6) + (CountPlayers() * 6) + (LD_legendarychance * 4)); // Easy
					if (skill == 2) ldlchance = (random(4,8) + (CountPlayers() * 8) + (LD_legendarychance * 5)); // Normal
					if (skill == 3) ldlchance = (random(5,10) + (CountPlayers() * 10) + (LD_legendarychance * 6)); // Hard
					if (skill == 4) ldlchance = (random(7,14) + (CountPlayers() * 14) + (LD_legendarychance * 7)); // Very Hard
					if (skill == 5) ldlchance = (random(8,18) + (CountPlayers() * 18) + (LD_legendarychance * 8)); // Extreme
					if (skill == 6) ldlchance = (random(11,22) + (CountPlayers() * 22) + (LD_legendarychance * 9)); // Horrible
					if (skill == 7) ldlchance = (random(13,27) + (CountPlayers() * 27) + (LD_legendarychance * 10)); // Impossible
					if (skill >= 8) ldlchance = (random(16,32) + (CountPlayers() * 32) + (LD_legendarychance * 11)); // Omega
				}
				if (LD_legendarydebug) Console.Printf("[%s @ %p] chance: %d / 256", spawnname, spawnee, ldlchance);
				
				if (NoLegendary || LEGENDARIFYSuccess || BOSSACTIVAAAATE) { }
				else
				{
					if (LD_nomonsters == 1) 
					{
						if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nomonsters == 1", spawnname, spawnee);
						NoLegendary = true; // NoLegendary
					}
					else
					{
						if (LD_nobosses == 2) // BOSSCheckeroonie
						{
							if (LD_legendarydebug) Console.Printf("\c[green][%s @ %p] LD_nobosses == 2", spawnname, spawnee);
							if (spawnee.bBOSS) BOSSACTIVAAAATE = true; // BOSSACTIVAAAATE
														else LEGENDARIFY = true; // DifficultyChance
						}
						else
						{
							if (LD_legendarydebug) Console.Printf("\c[darkgreen][%s @ %p] LD_nobosses != 2", spawnname, spawnee);
							if (LD_diemode == 1) LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
															else LEGENDARIFY = true; // DifficultyChance
						}
					}
					
					// bool checks
					if (LEGENDARIFY)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] LEGENDARIFY", spawnname, spawnee);
						if (random(1,256) <= ldlchance) // LEGENDARIFY
						{
							if (spawnee.bSPECIAL) NoLegendary = true;
							else
							{
								if (LD_monstercheck == 0) // Makes it ignore the next check if disabled
								{
									int chance2 = 160;
									if (kcLDL_newldlchances) chance2 = 240;
									if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																					else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
								}
								else boo = true; // Added to stop stuff like legendary trees
							}
						}
					}
					if (BOSSTIEM)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] BOSSTIEM", spawnee.GetClassName(), spawnee);
						if (LD_nobosses == 1) NoLegendary = true; // NoLegendary
						else
						{
							int chance2 = 120;
							if (kcLDL_newldlchances) chance2 = 180;
							if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																			else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
						}
					}
					
					if (boo)
					{
						if (LD_legendarydebug) Console.Printf("\c[orange][%s @ %p] boo", spawnee.GetClassName(), spawnee);
						if (spawnee.bCOUNTKILL || A_CheckUOHYM()) // Boo
						{
							if (spawnee.bBOSS) BOSSTIEM = true; // BOSSTIEM
							else
							{
								int chance2 = 160;
								if (kcLDL_newldlchances) chance2 = 240;
								if (random(1,256) <= chance2) NoLegendary = true; // NoLegendary
																				else LEGENDARIFYSuccess = true; // LEGENDARIFYSuccess
							}
						}
					}
				}
				
				// bool checks
				if (BOSSACTIVAAAATE)
				{
					if (LD_legendarydebug) Console.Printf("\c[sapphire][%s @ %p] BOSSACTIVAAAATE", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterBossMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION); 
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // BRING THE PAIN
					return;
				}
				else
				if (LEGENDARIFYSuccess)
				{
					if (LD_legendarydebug) Console.Printf("\c[gold][%s @ %p] LEGENDARIFYSuccess", spawnee.GetClassName(), spawnee);
					actor mo;
					bool success;
					[success, mo] = spawnee.A_SpawnItemEx("LDLegendaryMonsterMarker", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION); 
					if (success && mo) mo.target = spawnee;
					spawnee.A_GiveInventory(LDLPreload,1); // POWER UP TIME
					return;
				}
				else
				if (NoLegendary)
				{
					if (LD_legendarydebug) Console.Printf("\c[red][%s @ %p] NoLegendary", spawnee.GetClassName(), spawnee);
					return;
				}
			}
		}
	}
	
	void A_SetMonsterProjNameTags(actor spawnee)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();
		
		//A_BloomMonsterNames(spawnee);
		
		if (spawnname == "DoomImpBall") 
		{
			spawnee.SetTag("Imp Fireball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "CacodemonBall") 
		{
			spawnee.SetTag("Lightning Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "RevenantTracer") 
		{
			spawnee.SetTag("Tracer Missile");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArachnotronPlasma")
		{
			spawnee.SetTag("Plasma Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArchvileFire")
		{
			spawnee.SetTag("Vile FireHex");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "BaronBall")
		{
			spawnee.SetTag("HellNoble Plasma");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "FatShot")
		{
			spawnee.SetTag("Flamer Shot");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "Rocket")
		{
			spawnee.SetTag("Rocket");
			ProjSetSpeed(spawnee);
		}
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PLuck;
		if (MiscItem) PLuck = MiscItem.PlayerLUCK;
		KCCreature KCC;
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		int user_base = 0;
		string usertype = "";
		double hpmulti, atkmulti, defmulti, spdmulti, massmulti;
		int TruePlayerLevel = 0;
		if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

		if (spawnee)
		{
			string targname;
			if (spawnee.target) targname = spawnee.target.GetClassName();

			bool exception = CheckExceptions(spawnee);
			if (!KCBaseZSC(spawnee) && 
					(spawnee.bISMONSTER || 
					spawnee.bSHOOTABLE) && 
					!exception) 
			{
				if (!(KCPlayerPawn(spawnee) ||
						 ExplosiveBarrel(spawnee) ||
						 ExplosiveBarrel2(spawnee) ||
						 Pod(spawnee))) spawnee.A_SetInventory("CompatVulnItem",1);
			}
			
			if (ExplosiveBarrel(spawnee) ||
					ExplosiveBarrel2(spawnee) ||
					Pod(spawnee)) spawnee.bPUSHABLE = true;
			
			if (KCCreature(spawnee))
			{
				KCC = KCCreature(spawnee);
				if (KCC && KCC.bISMONSTER) KCC.ActorRandomBits = random();
			}
			
			if (DoomImpBall(spawnee) || 
					FatShot(spawnee)) 
			{
				spawnee.DamageType = 'Fire';
			}
			if (CacodemonBall(spawnee)) 
			{
				spawnee.DamageType = 'Lightning';
			}
			if (ArachnotronPlasma(spawnee))
			{
				spawnee.DamageType = 'Plasma';
			}
			
			//
			Inventory invspawnee;
			invspawnee = Inventory(spawnee);
			if (invspawnee)
			{
				if (Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true) != -1)
				{
					if (YellowCard(invspawnee) || BlueCard(invspawnee) || RedCard(invspawnee)) invspawnee.PickupSound = "getkeycard";
					if (YellowSkull(invspawnee) || BlueSkull(invspawnee) || RedSkull(invspawnee)) invspawnee.PickupSound = "getskullkey";
				}
				string invspawnname = invspawnee.GetClassName();
				string nm, nn, no, np, nq, nr;

				nm = "KDIZDGreenKey";
				nn = "KDIZDSilverKey";
				no = "KDIZDOrangeKey";
				np = "KDIZDRedKey";
				nq = "KDIZDBlueKey";
				nr = "KDIZDYellowKey";
				if (invspawnname == nm ||
						invspawnname == nn || 
						invspawnname == no || 
						invspawnname == np || 
						invspawnname == nq || 
						invspawnname == nr) invspawnee.PickupSound = "getkeycard";
				
				if (invspawnname == "RedCard" ||
						invspawnname == "BlueCard" ||
						invspawnname == "YellowCard")
				{
					invspawnee.Pickupsound = "getkeycard";
				}
				if (invspawnname == "RedSkull" ||
						invspawnname == "BlueSkull" ||
						invspawnname == "YellowSkull")
				{
					invspawnee.Pickupsound = "getskullkey";
				}
				if (invspawnname == "Clip")
				{
					invspawnee.Pickupsound = "getbulletclip";
				}
				if (invspawnname == "ClipBox")
				{
					invspawnee.Pickupsound = "getbulletbox";
				}
				if (invspawnname == "Shell")
				{
					invspawnee.Pickupsound = "getfourshells";
				}
				if (invspawnname == "ShellBox")
				{
					invspawnee.Pickupsound = "getshellbox";
				}
				if (invspawnname == "RocketAmmo")
				{
					invspawnee.Pickupsound = "getsinglerocket";
				}
				if (invspawnname == "RocketBox")
				{
					invspawnee.Pickupsound = "getrocketbox";
				}
				if (invspawnname == "Cell")
				{
					invspawnee.Pickupsound = "getsmallcells";
				}
				if (invspawnname == "CellPack")
				{
					invspawnee.Pickupsound = "getcellpack";
				}
				if (invspawnname == "GreenArmor" ||
						invspawnname == "BlueArmor")
				{
					invspawnee.Pickupsound = "GetArmorFull";
				}
				if (invspawnname == "Stimpack" ||
						invspawnname == "Medikit")
				{
					invspawnee.Pickupsound = "gethealthkit";
				}
				if (invspawnname == "HealthBonus")
				{
					invspawnee.Pickupsound = "gethealthbonus";
				}
				if (invspawnname == "ArmorBonus")
				{
					invspawnee.Pickupsound = "getarmorbonus";
				}
			}
			
			if (true)
			{
				int basemonsterrating = spawnee.CountInv("MonsterRating");
				bool practicetarget;
				if (PracticeTarget(spawnee) || PracticeTarget2(spawnee)) practicetarget = true;

				// Tags
				double spdfactor;
				
				// Hell Ground
				if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && spawnname == "TechPillar") spawnee.SetTag("Netherhell Imp");

				// SiGiL
				if (level.GetChecksum() == '61b546375618d619ab39eafd28f03c87' ||
						level.GetChecksum() == '0742076f6c57ed4d1174ebf8f0933b76' ||
						level.GetChecksum() == '3417a4859c8fece797c9daa715d14d63' ||
						level.GetChecksum() == 'aebf219bf02aaec549ba3ef8cb3f715b' ||
						level.GetChecksum() == '4e5d482364f6f787cb8efc17bde5d64d' ||
						level.GetChecksum() == '8e3fe80ae1440b38747853dab05dd62d' ||
						level.GetChecksum() == '8c35efba700537035c84f5e1ad35c064' ||
						level.GetChecksum() == '6ead80da1f30b4b3546fa294eef9f87c' ||
						level.GetChecksum() == '2a6b4d277f526bfb3adb122609feead7')
				{
					if (EvilEye(spawnee)) spawnee.bSOLID = false;
				}
				
				A_SetMonsterProjNameTags(spawnee);
				
				//
				
				if (KCProjectile(spawnee)) ProjSetSpeed(spawnee);
				else if (spawnee.bMISSILE) ProjSetSpeed(spawnee);
				
				// Changes
				int basehealth = spawnee.SpawnHealth();
				double healthmulfactor = 0.01;
				
				nm = "Balloon_Red"; extracheck = nm;
				nn = "Balloon_Red2"; extracheck2 = nn;
				if (spawnname == extracheck || spawnname == extracheck2)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Green";
						if (user_base == 3) usertype = "Balloon_Yellow";
					}
				}
				nm = "Balloon"; extracheck = nm;
				nn = "BallTarg"; extracheck2 = nn;
				if (spawnname == extracheck || spawnname == extracheck2)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallGreen";
						if (user_base == 2) usertype = "BallYel";
					}
				}

				nm = "Balloon_Yellow"; extracheck = nm; 
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Green";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				nm = "BallYel"; extracheck = nm; 
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallGreen";
						if (user_base == 2) usertype = "Balloon";
					}
				}

				nm = "Balloon_Green"; extracheck = nm; 
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Blue";
						if (user_base == 2) usertype = "Balloon_Yellow";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				nm = "BallGreen"; extracheck = nm; 
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,2);
						if (user_base == 1) usertype = "BallYel";
						if (user_base == 2) usertype = "Balloon";
					}
				}

				nm = "Balloon_Blue"; extracheck = nm; 
				if (spawnname == extracheck)
				{
					if (random(1,16) <= 1)
					{
						user_base = random(1,3);
						if (user_base == 1) usertype = "Balloon_Green";
						if (user_base == 2) usertype = "Balloon_Yellow";
						if (user_base == 3) usertype = "Balloon_Red";
					}
				}
				if (user_base)
				{
					//Console.Printf("%s [2]", spawnname);
					spawnee.A_SpawnItemEx(usertype,0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,spawnee.tid);
					spawnee.Destroy();
				}
				
				//
				bool specialenemy = false;
				bool ispeasant = false;
				// Strife Peasants
				if (Peasant(spawnee)) ispeasant = true;
				
				// Eviternity's Archangelus Boss
				nm = "ArchangelusA"; extracheck = nm;
				if (spawnname == extracheck) 
				{
					if (Skill <= 0) healthmulfactor = 0.0075;
					if (Skill == 1) healthmulfactor = 0.00875;
					if (Skill == 2) healthmulfactor = 0.01;
					if (Skill == 3) healthmulfactor = 0.01125;
					if (Skill >= 4) healthmulfactor = 0.0125;
					basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 12;
					if (Skill == 1) basehealth *= 14;
					if (Skill == 2) basehealth *= 16;
					if (Skill == 3) basehealth *= 18;
					if (Skill >= 4) basehealth *= 20;
					spawnee.health *= basehealth;
				}
				nn = "ArchangelusB"; extracheck = nm;
				if (spawnname == extracheck) 
				{
					if (Skill <= 0) healthmulfactor = 0.01125;
					if (Skill == 1) healthmulfactor = 0.013125;
					if (Skill == 2) healthmulfactor = 0.015;
					if (Skill == 3) healthmulfactor = 0.016875;
					if (Skill >= 4) healthmulfactor = 0.01875;
					basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 12;
					if (Skill == 1) basehealth *= 14;
					if (Skill == 2) basehealth *= 16;
					if (Skill == 3) basehealth *= 18;
					if (Skill >= 4) basehealth *= 20;
					spawnee.health = basehealth;
				}
				// TUTNT's Source Boss
				nm = "TheSource"; extracheck = nm;
				if (spawnname == extracheck) 
				{
					if (Skill <= 0) healthmulfactor = 0.005625;
					if (Skill == 1) healthmulfactor = 0.0065625;
					if (Skill == 2) healthmulfactor = 0.0075;
					if (Skill == 3) healthmulfactor = 0.0084375;
					if (Skill >= 4) healthmulfactor = 0.009375;
					basehealth *= (1.0 * (TruePlayerLevel * healthmulfactor));
					if (Skill <= 0) basehealth *= 6;
					if (Skill == 1) basehealth *= 7;
					if (Skill == 2) basehealth *= 8;
					if (Skill == 3) basehealth *= 9;
					if (Skill >= 4) basehealth *= 10;
					spawnee.health = basehealth;
					specialenemy = true;
				}
			
				// Keeps the Romero Heads in AUGER ZENITH, which can't be attacked directly by the player, from being able to gain extra HP/Stats so they can be killed properly on MAP21
				if (playera.CountInv("PlayingAugerZenith") && (BossBrain(spawnee))) specialenemy = true;
				// Keeps the Romero Heads in Hell Ground MAP07 from being too strong. :P
				if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && (BossBrain(spawnee))) specialenemy = true;

				if (Revenant(spawnee)) spawnee.ProjectilePassHeight = 84;
				//if (RevenantNew(spawnee)) spawnee.ProjectilePassHeight = 84;
				
				if (Demon1(spawnee) || Demon2(spawnee)) spawnee.ProjectilePassHeight = 104;
				
				if (ArchvileFire(spawnee))
				{
					spawnee.A_SetRenderStyle(frandom(0.625,0.875),STYLE_Add);
				}
				
				// Monster "Scaling"
				MonsterStatsSet(spawnee, basemonsterrating, practicetarget, specialenemy, ispeasant);
			}
		}
		
		Super.WorldThingSpawned(e);
		
		if (A_CheckUOHYM())
		{
			if (level.mapname == "MAP01" ||
					level.mapname == "20PAM" ||
					level.mapname == "MAP02")
			{
				// Billboarder
				// Written by Nash Muhandes
				bool isProjectile = e.Thing.bMissile;
				bool isPuff = (e.Thing is "BulletPuff" || e.Thing is "StrifePuff");
				bool isBlood = (e.Thing is "Blood");
				bool isSmokeTrail = (e.Thing is "RocketSmokeTrail" || e.Thing is "GrenadeSmokeTrail" || e.Thing is "RocketTrail");
				if (isProjectile || isPuff || isBlood || isSmokeTrail)
				{
					e.Thing.bForceXYBillboard = true;
				}
			}
		}
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = KCGlobalVariables.Get();
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			actor spawnee = e.thing;
			string spawnname = spawnee.GetClassName();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			
			
			if (spawnee)
			{
				spawnee.A_SetInventory("LDLegendaryWasLegendary",0);

				DedMonsterFlag dedcheckitem;
				dedcheckitem = DedMonsterFlag(spawnee.FindInventory("DedMonsterFlag"));
				if (dedcheckitem)
				{
					spawnee.A_SetRenderStyle(dedcheckitem.ownerorigalpha,dedcheckitem.ownerorigrender);
					dedcheckitem.Destroy();
				}
				
				nm = "ClayDevilNew"; extracheck = nm;
				if (spawnname == extracheck)
				{
					spawnee.speed = spawnee.default.speed;
					spawnee.DamageMultiply = spawnee.default.DamageMultiply;
					spawnee.DamageFactor = spawnee.default.DamageFactor;
					spawnee.health = spawnee.SpawnHealth();
					spawnee.Mass = spawnee.default.mass;
					spawnee.SetTag(spawnee.default.GetTag());
					MonsterStatsSet(spawnee, 0, false, false, false);
				}
				
				if (dydudebug_ressurrectdisplays) Console.Printf("Res: Max Health - %d (%d + %d)", (spawnee.SpawnHealth() + spawnee.Stamina), spawnee.SpawnHealth(), spawnee.Stamina); 
			}
		}
		Super.WorldThingRevived(e);
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			if (kcdebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			let globalvars = KCGlobalVariables.Get();
			actor victim = e.Thing;
			actor source = e.DamageSource;
			actor inflicter = e.inflictor;
			int dmg = e.damage;
			int initdmg = e.damage;
			string mod = e.damagetype;
			int flags = e.DamageFlags;
			int PLuck;
			int TrueLuck;
			int TruePlayerLevel = 0;
			bool isCCardsIllusion = false;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;

			if (kcdebug_worlddamaged) 
			{
				string debugmsg = "WorldThingDamaged";
				debugmsg.AppendFormat(" [gametic: %d]:", gametic);
				if (victim) debugmsg.AppendFormat(" %p [%s],", victim, victim.GetClassName());
				if (source) debugmsg.AppendFormat(" source: %p [%s]", source, source.GetClassName()); else debugmsg.AppendFormat("\c[red] no source\c-");
				if (inflicter) debugmsg.AppendFormat(" inflicter: %p [%s]", inflicter, inflicter.GetClassName()); else debugmsg.AppendFormat("\c[orange] no inflicter\c-");
				debugmsg.AppendFormat(", damage: %d, damagetype: %s, flags: %d", dmg, mod, flags);
				Console.Printf(debugmsg);
			}
			
			if (MiscItem) 
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			if (victim)
			{
				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
						
				if (kcdebug_hitsounds) Console.Printf("hitsounds (victim check)");
				int oldhealth = victim.health;
				string victname = victim.GetTag();
				string atkrname = "(?)";
				int user_type;
				string vict = "NONE";
				string infl = "NONE";
				string sour = "NONE";
				int landdamagebonus;

				if (victim) vict = victim.GetClassName();
				if (inflicter) infl = inflicter.GetClassName();
				if (source) sour = source.GetClassName();

				bool showdmglog;
				bool practicetarget;
				
				int specialtype;
				nm = "CCardGhostMarker"; if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker"; if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker"; if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne"; if (victim.GetClassName() == nm) specialtype += 8;
				nm = "CCards_Actor_Spider"; if (victim.GetClassName() == nm) specialtype += 128;
				if (kcdebug_worlddamaged) Console.Printf("[%s] SpecialType [WorldDamaged]: %d", vict, specialtype);
				
				if (victim.bCOUNTKILL || specialtype) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) 
				{
					practicetarget = true;
					showdmglog = true;
				}
				if (KCPlayerPawn(victim)) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (showdmglog)
				{
					if (kcdebug_worlddamaged) Console.Printf("showdmglog");

					if (kcdebug_worlddamaged) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					
					if (victim.health > 0 && victim.bISMONSTER)
					{
						if (source && KCPlayerPawn(source)) //
						{
							if (MiscItem) landdamagebonus = MiscItem.landdmgbonus;
							if (kcdebug_worlddamaged) Console.Printf("landdamagebonus: %d", landdamagebonus);
						}
						if (!practicetarget)
						{
							if (infl == "PlayerWhistle")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(13.75,15,16.25);
								force *= 0.25;
								if (inflicter && (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength"))) force *= frandompick(1.5,2,2.5);
								
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-3,-1.5,-1.5,0,0,0,0,0,1.5,1.5,3)));
								}
							}
							if (infl == "UppercutPuff")
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.25;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength")) force *= frandompick(1.125,1.25,1.375);
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.thrust(force, (ang + frandompick(-6,-3,-3,0,0,0,0,0,3,3,6)));
								}
							}
							if (KickPuff(inflicter) || KickPuffNoThrust(inflicter))
							{
								double ang;
								if (source) ang = source.angle;
								else if (inflicter) ang = inflicter.angle;
								double force = frandompick(27.5,30,32.5);
								force *= 0.05;
								if (random(1,2) <= 1) force *= -1;
								if (source)
								{
									if (source.CountInv("PowerStrength") || source.CountInv("KCPowerStrength")) force *= frandompick(1.125,1.25,1.375);
								}

								if (random(1,8) <= 1) force *= 1.5;
								if (!victim.bDONTTHRUST || !victim.bCANNOTPUSH)
								{
									victim.Vel.Z += force;
									victim.Thrust(force, (ang + (frandompick(-6,-3,-3,0,0,0,0,0,3,3,6) * 0.25)));
								}
							}
						}
						
						if (!victim.bINVULNERABLE || !practicetarget || !isCCardsIllusion)
						{
						}
					}
				}
				
				if (victim.health <= 0 && mod == 'Ice') victim.bCANTSEEK = true;
				
				string attkernam;
				if (!victim.GetTag()) victname = vict;
				if (source)
				{
					if (source.GetTag()) attkernam = source.GetTag();
													else attkernam = source.GetClassName();
				}
				if (inflicter)
				{
					if (inflicter.GetTag()) atkrname = inflicter.GetTag();
														 else atkrname = inflicter.GetClassName();
				}
				string comblog = "";
				comblog.AppendFormat("\c[red]*\c- ");
				showdmglog = false;
				if (victim.bCOUNTKILL || specialtype) showdmglog = true;
				if (PracticeTarget(victim) || PracticeTarget2(victim)) showdmglog = true;
				if (KCPlayerPawn(victim)) showdmglog = false;
				if (mod == 'SilentMassacre') showdmglog = false;
				if (isCCardsIllusion) showdmglog = false;
				if (kc_combatlog && showdmglog)
				{
					//Console.Printf("showdmglog 2");
					if (mod == 'NONE') mod = 'Typeless';
					if (dmg)
					{
						comblog.AppendFormat("\c[brick]%d\c-", dmg);
						if (victim.CountInv("JustSurprised") > 0) comblog.AppendFormat(" \c[sapphire]SURPRISE\c-");
						if (victim.CountInv("TookCriticalHit") > 0) comblog.AppendFormat(" \c[orange]CRITICAL\c-");
						comblog.AppendFormat(" damage dealt to \c[red]%s\c- by", victname);
						if (source && !inflicter) comblog.AppendFormat(" \c[purple]%s\c-", attkernam);
						else if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's\c-", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
						if (flags & DMG_EXPLOSION) comblog.AppendFormat(" \c[brick][AOE]\c-");
						if (victim.health <= 0) 
						{
							comblog.AppendFormat(" \c[brick]%s dies!\c-", victname);
						}
					}
					else
					{
						comblog.AppendFormat("\c[red]%s\c- took \c[purple]no damage\c- from", victname);
						if (inflicter && source && (inflicter != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
						if (inflicter) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
						comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
					}
					if (kcdebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
					
					Console.Printf(comblog);
				}
				
				if (kcdebug_hitsounds) Console.Printf("hitsounds");
				bool makesound;
				string playedsound = "";
				PlayerPawn playpawn;
				Actor othermon;
				int playweaksound = 0;
				//*******************
				//* Weakness Sounds *
				//*******************
				int tempdmgval = 10000;
				double tempdmgfactor = victim.damagefactor;
				victim.damagefactor = 1.0;
				int moddedDMG = victim.ApplyDamageFactor(mod, tempdmgval);
				let SpecVuln = CompatVulnItem(victim.FindInventory("CompatVulnItem"));
				if (SpecVuln) moddedDMG *= SpecVuln.lastTOTALFactor;
				victim.damagefactor = tempdmgfactor;
				double outputdmgfactor = 1.0;
				outputdmgfactor *= moddedDMG;
				outputdmgfactor /= tempdmgval;
				bool playwsounds = true;
				if (mod == 'SilentMassacre') playwsounds = false;
				if (isCCardsIllusion) playwsounds = false;
				if (kcdebug_hitsounds) Console.Printf("playwsounds: %d", playwsounds);
				
				if (playwsounds)
				{
					if (initdmg > 0 && !(flags & DMG_NO_FACTOR)) 
					{
						if (!(mod == '' || mod == 'Normal' || mod == 'Crush' || mod == 'Falling' || mod == 'Drowning'))
						{
							if (moddedDMG <= (tempdmgval * 0.25)) playweaksound = -3;
							if (moddedDMG >= (tempdmgval * 0.25) && moddedDMG <= (tempdmgval * 0.3999999)) playweaksound = -2;
							if (moddedDMG >= (tempdmgval * 0.4) && moddedDMG <= (tempdmgval * 0.6666667)) playweaksound = -1;
							if (moddedDMG >= (tempdmgval * 1.5) && moddedDMG <= (tempdmgval * 2.4999999)) playweaksound = 1;
							if (moddedDMG >= (tempdmgval * 2.5) && moddedDMG <= (tempdmgval * 3.9999999)) playweaksound = 2;
							if (moddedDMG >= (tempdmgval * 4.0)) playweaksound = 3;
							if (kcdebug_hitsounds) Console.Printf("moddedDMG: %d (%.8f) (%s), playweaksound: %d, damagefactor: %.8f", moddedDMG, outputdmgfactor, mod, playweaksound, victim.damagefactor);
						}
					}
					if (kcdebug_hitsounds) Console.Printf("playweaksound: %d", playweaksound);

					string weakplayedsound = "";
					if (kc_hitweaksounds && victim.bISMONSTER && playweaksound != 0 && victim.CountInv("TempNoWeakSound") <= 0)
					{
						victim.A_SetInventory("TempNoWeakSound",1);
			
						if (playweaksound == -3) weakplayedsound = "Misc/ResistanceHitHigh";
						if (playweaksound == -2) weakplayedsound = "Misc/ResistanceHitMid";
						if (playweaksound == -1) weakplayedsound = "Misc/ResistanceHit";
						if (playweaksound == 1) weakplayedsound = "Misc/WeaknessHit";
						if (playweaksound == 2) weakplayedsound = "Misc/WeaknessHitMid";
						if (playweaksound == 3) weakplayedsound = "Misc/WeaknessHitHigh";
			
						if (initdmg > 0) makesound = true;
						//if (oldhealth > 0 && oldhealth > health) makesound = true;
						if (makesound)
						{
							if (source) 
							{
								if (kcdebug_hitsounds) Console.Printf("[weaksounds] source: %s", source.GetClassName());
								playpawn = PlayerPawn(source);
								if (victim.bFRIENDLY)
								{
									victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
								}
								else
								if (playpawn) 
								{
									if (kcdebug_hitsounds) Console.Printf("[weaksounds] playpawn: %s", playpawn.GetClassName());
									if (!victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.0);
								}
								else
								{
									othermon = Actor(source);
									if (othermon) 
									{
										if (kcdebug_hitsounds) Console.Printf("[weaksounds] othermon: %s", othermon.GetClassName());
										if (othermon.bFRIENDLY && !victim.bFRIENDLY) victim.A_StartSound(weakplayedsound, 11, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 1.5);
									}
								}
							}
						}
					}
				}
				
				bool playdthsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdthsounds = true;
				if (mod == 'SilentMassacre') playdthsounds = false;
				if (isCCardsIllusion) playdthsounds = false;
				
				if (playdthsounds)
				{
					if (victim.health <= 0 && kc_q3aqckillsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype))
					{
						if (source || inflicter)
						{
							if (kcdebug_hitsounds && source) Console.Printf("[deathsound] source: %s", source.GetClassName());
							if (kcdebug_hitsounds && inflicter) Console.Printf("[deathsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (kcdebug_hitsounds) Console.Printf("[deathsound] victim is friendly: %s", victim.GetClassName());
								/*
								if (?(victim))
								{
									if (kcdebug_hitsounds) Console.Printf("[deathsound] victim is DDAFDNPC Type: %s", victim.GetClassName());
									playedsound = "misc/whoops";
									if (kc_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
									}
								}
								else
								{
								*/
									if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsndAlly";
									if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDEDAlly";
									if (kc_q3aqckillsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
							//}
							}
							else
							if (playpawn) 
							{
								if (kcdebug_hitsounds) Console.Printf("[deathsound] playpawn: %s", playpawn.GetClassName());
								/*
								if (?(victim))
								{
									playedsound = "misc/whoops";
									if (kc_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(1.25,1.5));
									}
								}
								else
								*/
								if (!victim.bFRIENDLY)
								{
									if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsnd";
									if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED";
									if (kc_q3aqckillsoundtype >= 0) 
									{
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon) 
								{
									if (kcdebug_hitsounds) Console.Printf("[deathsound] othermon: %s", othermon.GetClassName());
									/*
									if (?(victim))
									{
										playedsound = "misc/whoops";
										if (kc_q3aqchitsoundtype >= 0) 
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE, frandom(0.80,0.888889));
										}
									}
									else
									*/
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (kcdebug_hitsounds) Console.Printf("[deathsound] othermon: %s kills %s (ally kills)", othermon.GetClassName(), victim.GetClassName());
										if (kc_q3aqckillsoundtype == 0) playedsound = "misc/killsnd2";
										if (kc_q3aqckillsoundtype == 1) playedsound = "misc/killsndDED2";
										if (kc_q3aqckillsoundtype >= 0) 
										{
											victim.A_StopSound(12);
											victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && kc_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.334,1.0);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										playedsound = "misc/killinfight"; //"misc/killsndduck";
										if (kcdebug_hitsounds) Console.Printf("[deathsound ('%s': %.8f)] othermon: %s kills %s (full infighting)", playedsound, rndpitch, othermon.GetClassName(), victim.GetClassName());
										victim.A_StopSound(12);
										victim.A_StartSound(playedsound, 12, CHANF_DEFAULT, (kc_q3aqckillsoundvol * frandompick(1.5,2.5)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}
				
				bool playdmgsounds = false;
				if (vict != "PracticeTarget" || vict != "PracticeTarget2") playdmgsounds = true;
				if (mod == 'SilentMassacre') playdmgsounds = false;
				if (isCCardsIllusion) playdmgsounds = false;
				
				if (playdmgsounds)
				{
					if (kc_q3aqchitsounds2 && victim.bISMONSTER && (victim.bCOUNTKILL || specialtype) && victim.CountInv("TempNoHitSound") <= 0)
					{
						victim.A_SetInventory("TempNoHitSound",1);
						
						if (source || inflicter) 
						{
							if (kcdebug_hitsounds && source) Console.Printf("[hitsound] source: %s", source.GetClassName());
							if (kcdebug_hitsounds && inflicter) Console.Printf("[hitsound] inflicter: %s", inflicter.GetClassName());
							if (source) playpawn = PlayerPawn(source);
							if (playpawn == null && inflicter) playpawn = PlayerPawn(inflicter);
							if (victim.bFRIENDLY)
							{
								if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hitally";
								if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpally";
								if (kc_q3aqchitsoundtype >= 0) 
								{
									victim.A_StopSound(13);
									victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
								}
							}
							else
							if (playpawn) 
							{
								if (kcdebug_hitsounds) Console.Printf("[hitsound] playpawn: %s", playpawn.GetClassName());
								if (!victim.bFRIENDLY)
								{
									if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hit";
									if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch";
									if (kc_q3aqchitsoundtype >= 0) 
									{
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
									}
								}
							}
							else
							{
								if (source) othermon = Actor(source);
								if (othermon == null && inflicter) othermon = Actor(inflicter);
								if (othermon) 
								{
									if (kcdebug_hitsounds) Console.Printf("[hitsound] othermon: %s", othermon.GetClassName());
									if (othermon.bFRIENDLY && !victim.bFRIENDLY)
									{
										if (kc_q3aqchitsoundtype == 0) playedsound = "misc/hit2";
										if (kc_q3aqchitsoundtype == 1) playedsound = "misc/hitpunch2";
										if (kc_q3aqchitsoundtype >= 0) 
										{
											victim.A_StopSound(13);
											victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_q3aqchitsoundvol * frandom(0.75,1.25)), ATTN_NONE);
										}
									}
									else
									if (!othermon.bFRIENDLY && !victim.bFRIENDLY && kc_hitsoundsmisc >= 0)
									{
										double rndpitch = frandom(0.50,1.00);
										if (random(1,2) <= 1 && rndpitch > 0.00) rndpitch = (1.00 / rndpitch);

										if (random(1,2) <= 1) playedsound = "misc/hitmine2";
																		 else playedsound = "misc/hitmine";
										victim.A_StopSound(13);
										victim.A_StartSound(playedsound, 13, CHANF_DEFAULT, (kc_hitsoundsvol * frandompick(0.75,1.25)), ATTN_NONE, rndpitch);
									}
								}
							}
						}
					}
				}
			}
			
			// Adding in Argv's SingleDamageRipper code :V
			if (inflicter is "SingleDamageRipper")
			{
				SingleDamageRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageRipper(inflicter).timesrippedoverall++;
				if (SingleDamageRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}

			if (inflicter is "SingleDamageFastRipper")
			{
				SingleDamageFastRipper(inflicter).ActorsAlreadyHit.Push(victim);
				SingleDamageFastRipper(inflicter).timesrippedoverall++;
				if (SingleDamageFastRipper(inflicter).timesrippedoverall < 0) SingleDamageFastRipper(inflicter).timesrippedoverall = 0;
			}
		}
		Super.WorldThingDamaged(e);
	}
	
	int, int, actor, actor, actor, actor, int, int, bool, bool A_KillDropTables(int PLuck, int TrueLuck, actor victim, actor inflicter, actor source, actor mastor, int specialtype, int monsterrating, bool playerkill, bool allykill)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (inflicter && inflicter.target) source = inflicter.target;
		if (inflicter && inflicter.master) mastor = inflicter.master;
		string mod = "NONE";
		if (victim && victim.damagetype) 
		{
			mod = victim.damagetype; // = e.damagetype;
			if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
		}
		else
		{
			if (inflicter)
			{
				mod = inflicter.damagetype; // = e.damagetype;
				if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (source)
				{
					mod = source.damagetype; // = e.damagetype;
					if (kcdebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
				}
			}
		}
		string vict = "NONE";
		string infl = "NONE";
		string sour = "NONE";
		string mast = "NONE";
		if (victim) vict = victim.GetClassName();
		if (inflicter) infl = inflicter.GetClassName();
		if (source) sour = source.GetClassName();
		if (mastor) mast = mastor.GetClassName();
		let globalvars = KCGlobalVariables.Get();
		int TruePlayerLevel = 0;
		if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		int user_type;
		KCCreature KCCVict;
		if (victim) KCCVict = KCCreature(victim);
		bool waslegendary = false;
		if (victim) 
		{
			let LDLItem = LDLegendaryMonsterTracker(victim.FindInventory("LDLegendaryMonsterTracker"));
			if (LDLItem)
			{
				waslegendary = true;
				LDLItem.condemned = true;
				victim.A_SetInventory("LDLegendaryWasLegendary",1);
			}
			KCCVict = KCCreature(victim);
		}

		int armorbonusrolls;
		int healthbonusrolls;
		
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		
		int Kills = playera.CountInv("KillsCount");
		// Drop Tables
		string dropname;
		int basedropdiv;
		double luckbase;
		double skillmult = 1;
		if (skill <= 0) skillmult = 0.667;
		if (skill == 1) skillmult = 0.8;
		if (skill == 2) skillmult = 1;
		if (skill == 3) skillmult = 1.25;
		if (skill >= 4) skillmult = 1.5;
		int droptimes;
		int lvldivider;
		int basechance;
		int maxchance;
		int bossdropmulti = randompick(randompick(1,2,2),3,3,3,3,3,3,3,3,randompick(4,4,5));
		if (specialtype & 8) // CCards' Ancient One Boss V:
		{
			bossdropmulti *= 4;
			skillmult *= 0.25;
		}
		if (waslegendary) skillmult *= frandom(0.334,0.4585);
		bool candropitems = false;
		if (specialtype) candropitems = true;
		if (!victim.bFRIENDLY && (victim.bCOUNTKILL || specialtype)) candropitems = true;
		if (Computer(victim) ||
				ExplosiveBarrel(victim) ||
				Pod(victim) ||
				Piston(victim) ||
				Pottery1(victim) ||
				Pottery2(victim) ||
				Pottery3(victim) ||
				PowerCoupling(victim) ||
				PowerCrystal(victim) ||
				TreeDestructible(victim) ||
				WoodenBarrel(victim) ||
				ZCorpseSitting(victim) ||
				ZSuitOfArmor(victim) ||
				ZShrub1(victim) ||
				ZShrub2(victim) ||
				ZXmasTree(victim) ||
				ZPoisonShroom(victim)) candropitems = false;
		if (kcdebug_worlddied) Console.Printf("candropitems: %d", candropitems);
		
		if (!playerkill || !allykill)
		{
			if (random(1,256) <= 1) candropitems = true;
												 else candropitems = false;
		}
		
		if (candropitems)
		{
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 35;
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (inflicter && ((source && KCPlayerPawn(source))))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && KCPlayerPawn(inflicter))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Specific Drops from Specific Monsters
				let monsterp = Actor(victim);
				
				// Doom Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				
				double rand = 2.0;
				string droptype;
				if (Zombieman(victim) || 
						ChaingunGuy(victim) || 
						SpiderMastermind(victim))
				{
					if (random(1,(basedropdiv*0.015625)) <= random(2,3)) 
					{
						droptype = "Clip";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.03125)) <= random(2,3)) 
					{
						droptype = "Clip";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.0625)) <= random(2,3)) 
					{
						droptype = "Clip";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (SpiderMastermind(victim))
					{
						droptype = "Chaingun";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						droptype = "Clip";
						if (random(1,10) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ClipBox";

						if (random(1,(basedropdiv*0.25)) <= random(2,3)) 
						{
							droptype = "Chaingun";
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
					}
				}
				if (ShotgunGuy(victim))
				{
					if (random(1,(basedropdiv*0.015625)) <= random(2,3)) 
					{
						droptype = "Shell";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.03125)) <= random(2,3)) 
					{
						droptype = "Shell";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.0625)) <= random(2,3)) 
					{
						droptype = "Shell";
						if (random(1,32) <= randompick(1,1,1,1,1,2,2,3)) droptype = "ShellBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (Arachnotron(victim))
				{
					if (random(1,(basedropdiv*0.0625)) <= random(2,3)) 
					{
						droptype = "Cell";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.25)) <= random(2,3)) 
					{
						droptype = "Cell";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.875)) <= random(2,3)) 
					{
						droptype = "Cell";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "CellPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (HellKnight(victim) ||
						BaronOfHell(victim))
				{
					if (random(1,(basedropdiv*0.125)) <= random(2,3) && BaronOfHell(victim)) 
					{
						droptype = "BackPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.25)) <= random(2,3)) 
					{
						droptype = "BackPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.5)) <= random(2,3)) 
					{
						droptype = "BackPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.5)) <= random(2,3) && HellKnight(victim)) 
					{
						droptype = "BackPack";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (Cyberdemon(victim))
				{
					droptype = "RocketLauncher";
					victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					droptype = "RocketAmmo";
					if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
					victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					if (random(1,(basedropdiv*0.25)) <= random(2,3)) 
					{
						droptype = "RocketLauncher";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.015625)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.03125)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.0625)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.125)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.25)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*0.5)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
					if (random(1,(basedropdiv*1.0)) <= random(2,3)) 
					{
						droptype = "RocketAmmo";
						if (random(1,16) <= randompick(1,1,1,1,1,2,2,3)) droptype = "RocketBox";
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("Monster Specific Drop [Doom] (\c[brick]%s\c-): %d", vict, basedropdiv);
				
				// Heretic Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				
				
				// Hexen Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				
				
				// Strife Monsters
				basedropdiv = 512;
				basedropdiv *= skillmult;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basedropdiv -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
			}
			
			
			// Ammo/Weapons
			string droptype;
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 50;
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (inflicter && ((source && KCPlayerPawn(source))))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && KCPlayerPawn(inflicter))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Weapons/Satchels [Type 6]
				basechance = kc_inventorydroprate6;
				basechance *= skillmult;
				luckbase = 0.25 + (monsterrating * 0.0625);
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				int rollrand = random(1,maxchance);
				if (rollrand <= 1) // Main Drop Chance
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Weapon/Ammo Drop Roll Success");
					int temp = 1;
					if (MiscItem) 
					{
						temp = (1 + (TrueLuck * 0.08334));
						temp *= 2.5;
					}
					int randroll = random(1,32);
					if (randroll <= temp) // Weapons
					{
						double rand = 1.0;
						user_type = random(1,11);
						droptype = "Backpack";
						if (user_type == 1) 
						{
							droptype = "Pistol";
							if (playera.GetClassName() == "KCPlayer") droptype = "PistolMarine";
							if (random(1,4) <= 1 && playera.CountInv(droptype)) droptype = "Glock21";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 2) 
						{
							droptype = "Chaingun";
							if (playera.GetClassName() == "KCPlayer") droptype = "ChaingunMarine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 3) 
						{
							droptype = "Shotgun";
							if (playera.GetClassName() == "KCPlayer") droptype = "ShotgunMarine";
							if (playera.CountInv(droptype)) 
							{
								if (random(1,32) <= 1) droptype = "SuperShotgunMarine";
								if (playera.CountInv(droptype)) droptype = "Backpack";
							}
						}
						if (user_type == 4) 
						{
							droptype = "TommyGun";
							if (playera.CountInv(droptype)) 
							{
								droptype = "DualTommyGuns";
								if (playera.CountInv(droptype)) droptype = "Backpack";
																					 else droptype = "TommyGun";
							}
							else droptype = "TommyGun";
						}
						if (user_type == 5) 
						{
							droptype = "SuperShotgun";
							if (playera.GetClassName() == "KCPlayer") droptype = "SuperShotgunMarine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 6) 
						{
							droptype = "RocketLauncher";
							if (playera.GetClassName() == "KCPlayer") droptype = "RocketLauncherMarine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 7) 
						{
							droptype = "BFG9000";
							if (playera.GetClassName() == "KCPlayer") droptype = "BFG9000Marine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 8)
						{
							droptype = "PlasmaRifle";
							if (playera.GetClassName() == "KCPlayer") droptype = "PlasmaRifleMarine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 9)
						{
							droptype = "Devastator";
							if (playera.CountInv(droptype)) 
							{
								droptype = "DualDevastators";
								if (playera.CountInv(droptype)) droptype = "Backpack";
																					 else droptype = "DevastatorGenerator";
							}
							else droptype = "DevastatorGenerator";
						}
						if (user_type == 10)
						{
							droptype = "SawThrower";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						if (user_type == 11)
						{
							droptype = "ImpalerXBow";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
						double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
						double raredropsndvol = frandom(1.75,2.25);
						int raredropsndchannel = randompick(191,192,222,223,264,265);
						victim.A_StartSound("ultrarareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
						victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[green]Weapon Drop\c- - user_type: %d [%s]", user_type, droptype);
					}
					else // Ammo
					{
						double rand = 3.0;
						int temp = 48;
						if (MiscItem) temp = (48 + (TrueLuck * 0.25));
						int randroll2 = random(1,256);
						int ammodrops = randompick(1,1,1,1,1,1,1,2,2,3);
						if (MiscItem) ammodrops += (TrueLuck * frandompick(0,0,0,0,0,0,0,0.0125,0.0125,0.025));
						for (int i2; i2 < ammodrops; i2++)
						{
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("Ammo Drop [Attempt]: %d / 16 [%d]", temp, randroll2);
							if (randroll2 <= temp) 
							{
								user_type = random(1,11);
								if (user_type == 1) droptype = "ClipBox";
								if (user_type == 2) droptype = "ClipBox";
								if (user_type == 3) droptype = "ShellBox";
								if (user_type == 4) droptype = "TommAmmoBig";
								if (user_type == 5) droptype = "ShellBox";
								if (user_type == 6) droptype = "RocketBox";
								if (user_type == 7) droptype = "CellPack";
								if (user_type == 8) droptype = "CellPack";
								if (user_type == 9) droptype = "MiniRocketBox";
								if (user_type == 10) droptype = "SawBox";
								if (user_type == 11) droptype = "ImpalerBolts";
							}
							else
							{
								user_type = random(1,11);
								if (user_type == 1) droptype = "Clip";
								if (user_type == 2) droptype = "Clip";
								if (user_type == 3) droptype = "Shell";
								if (user_type == 4) droptype = "TommAmmo";
								if (user_type == 5) droptype = "Shell";
								if (user_type == 6) droptype = "RocketAmmo";
								if (user_type == 7) droptype = "Cell";
								if (user_type == 8) droptype = "Cell";
								if (user_type == 9) droptype = "MiniRocket";
								if (user_type == 10) droptype = "Saws";
								if (user_type == 11) droptype = "ImpalerBolts";
							}
							victim.A_SpawnItemEx(droptype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("\c[darkgreen]Ammo Drop\c- - user_type: %d [%s] [%d / %d]", user_type, droptype, (i2+1), ammodrops);
						}
					}
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Weapon/Ammo Drop [Attempt]: %d / 16 [%d]", temp, randroll);
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [weapon/ammo]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
			}
			
			
			// Heal Items
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 35;
			
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (inflicter && ((source && KCPlayerPawn(source))))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && KCPlayerPawn(inflicter))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= (bossdropmulti * 2);
			for (int i; i < droptimes; i++)
			{
				double rand = 2.0;
				// Health Items [Type 7]
				basechance = kc_inventorydroprate7;
				basechance *= skillmult;
				luckbase = 0.5 + (monsterrating * 0.125);
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				
				if (random(1,(maxchance)) == 1) victim.A_SpawnItemEx("Stimpack",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*2)) == 1) victim.A_SpawnItemEx("Medikit",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				if (random(1,(maxchance*4)) == 1) 
				{
					string bname = "Berserk";
					victim.A_SpawnItemEx(bname,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [heal]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);
			}

			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			lvldivider = 70;
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (inflicter && ((source && KCPlayerPawn(source))))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && KCPlayerPawn(inflicter))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				double rand = 2.0;
				// Armor Items [Type 8]
				basechance = kc_inventorydroprate8;
				basechance *= skillmult;
				luckbase = 1.0 + (monsterrating * 0.25);
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				int rollrand = random(1,maxchance);
				if (rollrand <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Full Armor Drop Roll Success");
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					victim.A_StartSound("rareitem/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					//Full Armor Drops
					user_type = random(1,100);
					if (user_type >= 1 && user_type <= 67) { victim.A_SpawnItemEx("KCGreenArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					else if (user_type >= 68 && user_type <= 89) { victim.A_SpawnItemEx("KCGreenArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					else if (user_type >= 90 && user_type <= 98) { victim.A_SpawnItemEx("KCBlueArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
					else if (user_type >= 99) { victim.A_SpawnItemEx("KCBlueArmor",frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION); }
				}
				else
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Armor Bonuses [Attempt]");
					armorbonusrolls = 1;
					
					// Armor Bonus Drops
					if (armorbonusrolls > 0)
					{
						double rand = 2.0;
						int baseval = randompick(2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3);
						for (int i = 0; i < armorbonusrolls; i++)
						{
							if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Armor Bonuses \c[orange][Attempt %d / %d]", (i+1), armorbonusrolls);
							string armortype = "ArmorBonus2";
							if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
							if (random(1,(baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
							if (random(1,(baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
							if (random(1,1024) <= 1) armortype = "ArmorBonusBig"; else armortype = "ArmorBonus2";
							if (random(1,(baseval*baseval*baseval*baseval*baseval)) == 1) victim.A_SpawnItemEx(armortype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						}
					}
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [armor]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
				
				healthbonusrolls = (randompick(0,0,0,1,1,1,1,2) + (TruePlayerLevel * 0.03125));
				// Health Bonuses
				if (healthbonusrolls > 0)
				{
					double rand = 3.0;
					int baseval2 = randompick(2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4);
					for (int i = 0; i < healthbonusrolls; i++)
					{
						if (kcdebug_worlddiedmonsterdrops) Console.Printf("Drop Health Bonuses \c[orange][Attempt %d / %d]", (i+1), healthbonusrolls);
						string teatype = "HealthBonus2";
						if (random(1,(baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (random(1,(baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
						if (random(1,(baseval2*baseval2*baseval2*baseval2*baseval2*baseval2)) <= 1) victim.A_SpawnItemEx(teatype,frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),frandom(-rand,rand),SXF_NOCHECKPOSITION);
					}
				}
			}
			
			// Random Inventory Item Drops
			droptimes = 1;
			if (monsterrating == 1) droptimes = randompick(1,1,1,1,2);
			if (monsterrating == 2) droptimes = randompick(1,1,1,2,2);
			if (monsterrating == 3) droptimes = randompick(1,1,2,2,2);
			if (monsterrating == 4) droptimes = randompick(1,2,2,2,2);
			if (monsterrating == 5) droptimes = randompick(2,2,2,2,3);
			if (monsterrating == 6) droptimes = randompick(2,2,2,3,3);
			if (monsterrating == 7) droptimes = randompick(2,2,3,3,3);
			if (monsterrating >= 8) droptimes = randompick(2,3,3,3,4);
			luckbase = 0.0625 + (monsterrating * 0.015625);
			if (PLuck) droptimes = floor(droptimes + (TrueLuck * frandompick((luckbase*0),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase),(luckbase*2),(luckbase*2))));
			if (inflicter && ((source && KCPlayerPawn(source))))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			else
			if (inflicter && KCPlayerPawn(inflicter))
			{
				if (MiscItem && TruePlayerLevel >= lvldivider) droptimes += (TruePlayerLevel / lvldivider);
			}
			if (victim.bBOSS) droptimes *= bossdropmulti;
			for (int i; i < droptimes; i++)
			{
				// Primary [Type 1]
				basechance = kc_inventorydroprate1;
				basechance *= skillmult;
				luckbase = 0.0625 + (monsterrating * 0.015625); // (512)
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				int randroll = random(1,maxchance);
				if (randroll <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Primary Drop [success]");
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					//victim.A_StartSound("misc/spawn",raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					//user_type = random(1,145);
					//if (user_type >= 1 && user_type <= 60) { victim.A_SpawnItemEx("CherryBombPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					//if (user_type >= 61 && user_type <= 100) { victim.A_SpawnItemEx("SpinnerPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					//if (user_type >= 101 && user_type <= 125) { victim.A_SpawnItemEx("BRocketPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					//if (user_type >= 126 && user_type <= 140) { victim.A_SpawnItemEx("PopperPickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					//if (user_type >= 141 && user_type <= 144) { victim.A_SpawnItemEx("SnakePickup",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
					//if (user_type >= 145) { victim.A_SpawnItemEx("KilletanteEffigy",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION); }
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [primaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", randroll, maxchance, basechance, (i+1), droptimes);
				
				// Secondary [Type 2]
				basechance = kc_inventorydroprate2;
				basechance *= skillmult;
				luckbase = 0.5 + (monsterrating * 0.125); // (512)
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				int rollrand = random(1,maxchance);
				if (rollrand <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Secondary Drop [success]");
					//
					//
					//
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [secondaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
				
				// Rare Powerup Drop [Type 3]
				basechance = kc_inventorydroprate3;
				basechance *= skillmult;
				luckbase = 2.0 + (monsterrating * 0.5); // (512) 
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				rollrand = random(1,maxchance);
				if (rollrand <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Rare Drop [success]");
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(191,192,222,223,264,265);
					string raredropsndname = "rareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					if (gameinfo.gametype & 1) // Doom Mode
					{
						user_type = random(1,22);
						if (user_type >= 1 && user_type <= 7) victim.A_SpawnItemEx("BlurSphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 8 && user_type <= 13) victim.A_SpawnItemEx("Infrared",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 14 && user_type <= 19) victim.A_SpawnItemEx("RadSuit",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 20 && user_type <= 22) victim.A_SpawnItemEx("InvulnerabilitySphere",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 2) // Heretic Mode
					{
						user_type = random(1,13);
						if (user_type >= 1 && user_type <= 6) victim.A_SpawnItemEx("ArtiInvisibility",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 7 && user_type <= 12) victim.A_SpawnItemEx("ArtiTomeOfPower",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						if (user_type >= 13) victim.A_SpawnItemEx("ArtiInvulnerability",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 4) // Hexen Mode
					{
						user_type = random(1,20);
						victim.A_SpawnItemEx("ArtiInvulnerability2",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					}
					if (gameinfo.gametype & 8) // Strife Mode
					{
					}
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [tritaryinv]: {%d vs %d} (%d) \c[orange][%d / %d]", randroll, maxchance, basechance, (i+1), droptimes);
				
				// Extremely Rare Drops [Type 5]
				basechance = kc_inventorydroprate5;
				basechance *= skillmult;
				luckbase = 3.0 + (monsterrating * 0.75); // (682.66667)
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				rollrand = random(1,maxchance);
				if (rollrand <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("Extremely Rare Drop [success]");
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(193,194,224,225,266,267);
					string raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					
					victim.A_SpawnItemEx("TSArtifactSpawner",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
				}
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [extremerare]: {%d vs %d} (%d) \c[orange][%d / %d]", rollrand, maxchance, basechance, (i+1), droptimes);
				
				/*
				// ?? [Type 10]
				basechance = kc_inventorydroprate10;
				basechance *= skillmult;
				luckbase = 1.25 + (monsterrating * 0.3125);
				// Weapons and IP Attacks do not effect drop rates here V:
				if (PLuck) basechance -= (TrueLuck * frandompick((luckbase*0),(luckbase*0.25),(luckbase*0.25),(luckbase*0.25),(luckbase*0.5),(luckbase*0.5),(luckbase*0.5),(luckbase),(luckbase),(luckbase*2)));
				maxchance = basechance;
				if (kcdebug_worlddiedmonsterdrops) Console.Printf("maxchance [ultimarare]: %d (%d) \c[orange][%d / %d]", maxchance, basechance, (i+1), droptimes);
				if (random(1,maxchance) <= 1)
				{
					if (kcdebug_worlddiedmonsterdrops) Console.Printf("?? Drop [success]");
					double raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					double raredropsndvol = frandom(1.75,2.25);
					int raredropsndchannel = randompick(193,194,224,225,266,267);
					string raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(293,294,324,325,366,367);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(393,394,424,425,466,467);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(493,494,524,525,566,567);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					raredropsndpitch = frandompick(0.75,0.875,1.0,1.125,1.25);
					raredropsndvol = frandom(1.75,2.25);
					raredropsndchannel = randompick(593,594,624,625,666,667);
					raredropsndname = "ultrarareitem/spawn";
					victim.A_StartSound(raredropsndname,raredropsndchannel,CHANF_OVERLAP|CHANF_NOPAUSE,raredropsndvol,ATTN_NONE,raredropsndpitch);
					
					victim.A_SpawnItemEx("TSArtifactSpawner",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
				}
				*/
			}
		}
		
		return PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill;
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			actor playera = players[0].mo;
			let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
			actor victim = e.Thing;
			actor inflicter = e.inflictor;
			string mod = "NONE";
			actor source;
			actor mastor;
			if (inflicter && inflicter.target) source = inflicter.target;
																		else source = e.Thing.target;
			if (inflicter && inflicter.master) mastor = inflicter.master;
																		else mastor = e.Thing.target;
			if (victim && victim.damagetype) 
			{
				mod = victim.damagetype; // = e.damagetype;
				if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
			}
			else
			{
				if (inflicter)
				{
					mod = inflicter.damagetype; // = e.damagetype;
					if (kcdebug_worlddied) Console.Printf("damagetype [inflicter]: %s", mod);
				}
				else
				{
					if (source)
					{
						mod = source.damagetype; // = e.damagetype;
						if (kcdebug_worlddied) Console.Printf("damagetype [source]: %s", mod);
					}
				}
			}
			string vict = "NONE";
			string infl = "NONE";
			string sour = "NONE";
			string mast = "NONE";
			if (victim) vict = victim.GetClassName();
			if (inflicter) infl = inflicter.GetClassName();
			if (source) sour = source.GetClassName();
			if (mastor) mast = mastor.GetClassName();
			int PLuck;
			int TrueLuck;
			let globalvars = KCGlobalVariables.Get();
			int TruePlayerLevel = 0;
			if (kc_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
			int user_type;
			bool giveexp;
			bool playerkill;
			bool allykill;
			bool waslegendary = false;
			KCCreature KCC;
			KCC = KCCreature(victim);
			bool exception = CheckExceptions(victim);
			
			bool isCCardsIllusion = false;
			if (victim)
			{
				victim.SetInventory("LDLegendaryMonsterTransformed", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectMaker", 0);
				victim.SetInventory("LDLegendaryMonsterVisualEffectAlternator", 0);
				if (victim.CountInv("LDLegendaryMonsterTracker") > 0)
				{
					waslegendary = true;
					victim.A_SetInventory("LDLegendaryMonsterTracker",0);
				}

				if (victim.bNOBLOOD == true && 
						victim.bNOPAIN == true &&
						victim.bNOTARGETSWITCH == true &&
						victim.bNOINFIGHTING == true &&
						victim.bFULLVOLACTIVE == false && 
						victim.bFULLVOLDEATH == false &&
						victim.bBOSS == false) isCCardsIllusion = true;
			}
			
			// Specific Foes [1]
			
			//
			
			if (MiscItem)
			{
				PLuck = MiscItem.PlayerLUCK;
				if (skill <= 0) TrueLuck = random((PLuck*0.75),PLuck);
				if (skill == 1) TrueLuck = random((PLuck*0.625),PLuck);
				if (skill == 2) TrueLuck = random((PLuck*0.5),PLuck);
				if (skill == 3) TrueLuck = random((PLuck*0.375),PLuck);
				if (skill >= 4) TrueLuck = random((PLuck*0.25),PLuck);
				TrueLuck *= kc_pluckfactor;
			}
			if (kcdebug_worlddied) Console.Printf("[%p (%s)] WorldThingDied", victim, vict);
			
			class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
			string nm, nn, no, np;
			
			
			if (victim && 
					!isCCardsIllusion &&
					!exception)
			{
				int specialtype;
				nm = "CCardGhostMarker"; if (victim.CountInv(nm)) specialtype += 1;
				nm = "CCardAssassinMarker"; if (victim.CountInv(nm)) specialtype += 2;
				nm = "CCardRespawnedMarker"; if (victim.CountInv(nm)) specialtype += 4;
				nm = "CCards_Actor_TheAncientOne"; if (victim.GetClassName() == nm) specialtype += 8;
				nm = "CCards_Actor_Spider"; if (victim.GetClassName() == nm) specialtype += 128;
				if (kcdebug_worlddied) Console.Printf("[%s] SpecialType [WorldDied]: %d", vict, specialtype);

				if (!(KCPlayerPawn(victim)) || (victim.bCOUNTKILL || specialtype))
				{
					int monsterrating = victim.CountInv("MonsterRating");
					if (!victim.CountInv("DedMonsterFlag") && !sv_monsterrespawn) victim.A_SetInventory("DedMonsterFlag",1);
					
					if (kcdebug_worlddied) Console.Printf("\c[purple]Attack: %s, \c[brick]Attacker: %s", infl, sour);
					if ((victim.bCOUNTKILL || specialtype) && !victim.bFRIENDLY && (inflicter || source))
					{
						if (inflicter) 
						{
							if (PlayerPawn(inflicter)) playerkill = true;
							if (inflicter.bFRIENDLY) allykill = true;
							if (inflicter.bFRIENDLY || KCPlayerPawn(inflicter))
							{
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("inflictor: %s [%d]", infl, inflicter.bFRIENDLY);
						}
						else
						if (source) 
						{
							if (PlayerPawn(source)) playerkill = true;
							if (source.bFRIENDLY) allykill = true;
							if (source.bFRIENDLY || KCPlayerPawn(source)) 
							{
								giveexp = true;
							}
							if (kcdebug_worlddied) Console.Printf("source: %s [%d]", sour, source.bFRIENDLY);
						}
						if (mastor) 
						{
							if (PlayerPawn(mastor)) playerkill = true;
							if (mastor.bFRIENDLY) allykill = true;
							if (mastor.bFRIENDLY || KCPlayerPawn(mastor)) giveexp = true;
							if (kcdebug_worlddied) Console.Printf("mastor: %s [%d]", mast, mastor.bFRIENDLY);
						}
						
						if ((playerkill || allykill) && MiscItem)
						{
						}

						int ExpGain = (victim.SpawnHealth() + victim.Stamina);
						if (waslegendary) ExpGain *= 1.25;
						if (monsterrating)
						{
							if (waslegendary)
							{
								if (monsterrating == 1) ExpGain *= 1.05;
								if (monsterrating == 2) ExpGain *= 1.1;
								if (monsterrating == 3) ExpGain *= 1.2;
								if (monsterrating == 4) ExpGain *= 1.4;
								if (monsterrating == 5) ExpGain *= 1.8;
								if (monsterrating == 6) ExpGain *= 2.6;
								if (monsterrating == 7) ExpGain *= 4.2;
								if (monsterrating >= 8) ExpGain *= 7.4;
							}
							else
							{
								if (monsterrating == 1) ExpGain *= 1.0125;
								if (monsterrating == 2) ExpGain *= 1.025;
								if (monsterrating == 3) ExpGain *= 1.05;
								if (monsterrating == 4) ExpGain *= 1.1;
								if (monsterrating == 5) ExpGain *= 1.2;
								if (monsterrating == 6) ExpGain *= 1.4;
								if (monsterrating == 7) ExpGain *= 1.8;
								if (monsterrating >= 8) ExpGain *= 2.6;
							}
						}
						if (specialtype & 1) ExpGain *= 0.5;
						if (specialtype & 2) ExpGain *= frandompick(1.8,2.2);
						if (specialtype & 4) ExpGain *= frandompick(0.625,0.875);
						if (specialtype & 8) ExpGain *= frandompick(1.75,2.5);
						if (specialtype & 128) ExpGain *= 0.5;
						nm = "CCards_Actor_BorrowedTimeBuff";
						if (victim.CountInv(nm) && mod == 'Suck') ExpGain *= frandompick(0.125,0.1667,0.1667,0.2,0.2,0.2,0.25,0.25,0.25,0.25,0.3,0.3,0.3,0.3334,0.3334,0.375);
						ExpGain *= frandom(0.05,0.125);
						
						if ((source && source.bFRIENDLY) || (inflicter && inflicter.bFRIENDLY) || (mastor && mastor.bFRIENDLY)) ExpGain *= frandom(0.65,0.90);
						if (KCPlayerPawn(source) && infl == "PlayerWhistle") ExpGain *= frandom(1.1875,1.3125);
						
						double alterchance = 1.0;
						if (source)
						{
						}
						else
						if (inflicter)
						{
						}
						else
						if (mastor)
						{
						}
						ExpGain *= alterchance;
						
						If (PLuck)
						{
							int PLevel = playera.CountInv("PlayerLevel");
									 if (PLevel <= 11) ExpGain *= (1.00 + (TrueLuck * frandompick(0,0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02)));
							else if (PLevel <= 26) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.01,0.02,0.02)));
							else if (PLevel <= 66) ExpGain *= (1.00 + (TrueLuck * frandompick(0.00125,0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04)));
							else if (PLevel <= 101) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04)));
							else if (PLevel <= 201) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04)));
							else if (PLevel <= 401) ExpGain *= (1.00 + (TrueLuck * frandompick(0.0025,0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04)));
							else if (PLevel <= 701) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08)));
							else if (PLevel <= 1001) ExpGain *= (1.00 + (TrueLuck * frandompick(0.005,0.005,0.01,0.01,0.02,0.02,0.02,0.04,0.04,0.04,0.04,0.08,0.08)));
						}
						if (MiscItem)
						{
							int OExpGain = ExpGain;
							double tallyextra;
							tallyextra = (MiscItem.totalallkills * 0.005) + (MiscItem.totalallitems * 0.0025) + (MiscItem.totalallsecrets * 0.0025) + (MiscItem.totalcompleted * 0.01);
							ExpGain *= (1.00 + tallyextra);
							if (kcdebug_worlddied) Console.Printf("[tallyextra] x%.4f, ExpGain: %d [%d]", 1.00+tallyextra, ExpGain, OExpGain);
							if (MiscItem.KillComboCount > 0)
							{
								double combomultiplieramt;
								double based = 0.001;
								tallyextra = MiscItem.KillComboCount;
								if (tallyextra < 11) based = 0.0016;
								if (tallyextra > 10 && tallyextra < 21) based = 0.0017;
								if (tallyextra > 20 && tallyextra < 36) based = 0.0020;
								if (tallyextra > 35 && tallyextra < 61) based = 0.0024;
								if (tallyextra > 60 && tallyextra < 101) based = 0.0028;
								if (tallyextra > 100 && tallyextra < 201) based = 0.0034;
								if (tallyextra > 200 && tallyextra < 501) based = 0.0040;
								if (tallyextra > 500) based = 0.0052;
								based *= 1.334;
								combomultiplieramt = (tallyextra * based);
								combomultiplieramt += 1.00;
								OExpGain = ExpGain;
								ExpGain = (ExpGain * combomultiplieramt);
								if (kcdebug_worlddied) Console.Printf("[combomultiplieramt] x%.4f, ExpGain: %d [%d]", combomultiplieramt, ExpGain, OExpGain);
							}
						}
						EXPGain *= kc_expmultiplier;
						
						KCCreature KCC;
						KCC = KCCreature(victim);
						if ((KCC && KCC.expshare >= 0.001) && !(playerkill || allykill)) 
						{
							int OExpGain = ExpGain;
							ExpGain *= (KCC.expshare * frandom(0.667,1.000));
							if (ExpGain < 1) ExpGain = 1;
							if (kcdebug_worlddied && ExpGain) Console.Printf("[KCC.expshare] x%.4f, ExpGain: %d [%d]", KCC.expshare, ExpGain, OExpGain);
						}
						
						if (giveexp && kc_expgains && Level.MapName != "TITLEMAP")
						{
							if (ExpGain < 1) ExpGain = 1;
							
							Actor playera = players[0].mo;
							if (playera.health > 0 || !playera.CountInv("PlayerIsDead"))
							{
								int EXPPrevReq = 0;
								if (MiscItem.PlayerLevel > 0) EXPPrevReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel-1)];
								int EXPCurrReq = MiscItem.LevelExpRequirement[(MiscItem.PlayerLevel)];
								int EXPFullReq = (EXPCurrReq-EXPPrevReq);
								//Console.Printf("%d / %d (%d)", EXPPrevReq, EXPCurrReq, EXPFullReq);
								playera.A_GiveInventory("KillsCount",1);
								playera.A_GiveInventory("ExpPts",ExpGain);
								int Kills = playera.CountInv("KillsCount");
								int ExpNew = playera.CountInv("ExpPts");
								int ExpNeeded = playera.CountInv("ExpPtsNeeded");
								int PlayerLevel = playera.CountInv("PlayerLevel");
								if (kc_showexpgains) Console.Printf("\c[green]+%d EXP! \c[darkgreen][Have: %d / %d (Lvl: %d)] \c[red](Kills: %d)", ExpGain, ExpNew, ExpNeeded, PlayerLevel, Kills);
								if (kc_showexpgains)
								{
									MiscItem.KillComboCount += 1;
									MiscItem.EXPGainHUDAmt += ExpGain;
									if (MiscItem.EXPGainHUDTimer <= 0) MiscItem.EXPGainHUDTimer = 105;
									else
									{
										MiscItem.EXPGainHUDTimer += 35;
										if (MiscItem.EXPGainHUDTimer < 105 && ExpGain > (EXPFullReq * 0.05)) MiscItem.EXPGainHUDTimer = 105;
										if (MiscItem.EXPGainHUDTimer < 175 && ExpGain > (EXPFullReq * 0.10)) MiscItem.EXPGainHUDTimer = 175;
										if (MiscItem.EXPGainHUDTimer < 245 && ExpGain > (EXPFullReq * 0.25)) MiscItem.EXPGainHUDTimer = 245;
										if (MiscItem.EXPGainHUDTimer > 280) MiscItem.EXPGainHUDTimer = 280;
									}
								}
							}
						}
						else
						{
							Actor playera = players[0].mo;
							if (playera.health > 0 || !playera.CountInv("PlayerIsDead"))
							{
								playera.A_GiveInventory("KillsCount",1);
								int Kills = playera.CountInv("KillsCount");
							}
						}
						
						// BUILD-style oneliner for kills [optional]
						bool playoneliner = false;
						if (inflicter == playera || source == playera || mastor == playera) playoneliner = true;
						
						if (playoneliner && playera.GetClassName() == "HeiwaPlayer" && MiscItem)
						{
							if (kcdebug_worlddied) Console.Printf("Voice Check");
							bool voicecheck = false;
							if (kc_heiwaextravoices && kc_heiwaoneliners && !MiscItem.OneLinerCooldown)
							{
								if (MiscItem.OneLinerCooldown <= 0 || waslegendary) voicecheck = true;
							}
							if (voicecheck)
							{
								int basechance = kc_heiwaonelinerbasechance; // 8
								if (basechance < 0) basechance = 0;
								if (basechance > 0)
								{
									if (playera.CountInv("DecentHealth")) basechance *= 1.25;
									if (playera.CountInv("LowHealth")) basechance *= 1.5;
									if (playera.CountInv("CriticalHealth")) basechance *= 1.875;
									if (waslegendary) basechance *= 5;
									
									if (victim.bBOSS) basechance *= 8;
									if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
									int maxchance = 256;
									if (waslegendary) maxchance *= 0.25;
									if (kcdebug_worlddied) Console.Printf("%d / %d", basechance, maxchance);
									if (maxchance <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
									{
										double maskpitch = 1.00;
										if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
										string voicenm;
										double voicevol = frandom(1.25,1.75);
										if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
										int randvoice = 0;
										if (randvoice == 1) 
										{
											voicenm = ""; //
											Console.Printf("\c[HeiwaDeluge]\c-"); //
										}
										//
										//
										//
										if (randvoice > 0)
										{
											playera.A_StopSound(CHAN_VOICE);
											playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
											MiscItem.OneLinerCooldown += (frandom(1.75,3.0) * TICRATE);
										}
									}
								}
							}
						}
					}
					
					// Item Drop Action
					if (KCC && KCC.user_dontdroprandomstuff) { }
					else
					{
						if (mod != 'Crush' || mod != 'Falling' || !exception) 
						{
							[PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill] = A_KillDropTables(PLuck, TrueLuck, victim, inflicter, source, mastor, specialtype, monsterrating, playerkill, allykill);
						}
					}
					
					//*******************************
					//* Killed With Certain Weapons *
					//*******************************
					if (source && 
							(KCPlayerPawn(source) || source.GetClassName() == "HeiwaPlayer") && 
							(victim.bCOUNTKILL || specialtype))
					{
						//
					}
					
					KCCreature BossVict;
					BossVict = KCCreature(victim);
					if (BossVict)
					{
						if (kcdebug_scriptdisplays) Console.Printf("BossVict");
						BossVict.bossdeathactivate++;
					}
				}
			}
		}
		Super.WorldThingDied(e);
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (kcdebug_checksumprintout) Console.Printf("\cyMapCheckSum:\cx %s", level.GetChecksum());
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();
		
		int levelnums = level.levelnum;

		
		if (!e.IsReopen)
		{
			bool addmapcounttrue = true;
			for (int i = 0; i <= globalvars.MapsFinished; i++)
			{
				if (globalvars.MapNum[i] == levelnums)
				{
					addmapcounttrue = false;
					break;
				}
			}
			// Check for certain MAPs that are more of intermission maps [PSX Doom TC's "D[#]END". KDIZD'S "INTERMAP", etc]
			if (addmapcounttrue)
			{
				let IsPSXDoom = PlayingPSXDoom(playera.FindInventory("PlayingPSXDoom"));
				if (IsPSXDoom)
				{
					if (kcdebug_mapfinishcheck) Console.Printf("\c[orange]Playing PSX Doom");
					if (level.GetChecksum() == '95d8e4afa07a7e3330997a6aa5d0318d') addmapcounttrue = false;
					if (level.GetChecksum() == '17e16b88bf7f163f05a6a5c45f0dfeb6') addmapcounttrue = false;
					if (level.GetChecksum() == '39f6b93101248e39ae1af7c751647ea1') addmapcounttrue = false;
					if (level.GetChecksum() == '058234c82963c80b99a58081f829dead') addmapcounttrue = false;
					if (level.GetChecksum() == '77e33d393cb8386a13fe74391e053cd6') addmapcounttrue = false;
					if (level.GetChecksum() == '7364394e3b113aea8490d8b0b89c7e05') addmapcounttrue = false;
				}
				if (!addmapcounttrue)
				{
					if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]IS AN INTERMISSION MAP (do not add to the queue)");
				}
			}
			if (addmapcounttrue)
			{
				globalvars.MapsFinished++;
				globalvars.MapNum.push(globalvars.MapsFinished);
				globalvars.MapNum[globalvars.MapsFinished] = level.levelnum;
				globalvars.NumKills.push(globalvars.MapsFinished);
				globalvars.MaxKills.push(globalvars.MapsFinished);
				globalvars.AllKills.push(globalvars.MapsFinished);
				globalvars.AllKills[globalvars.MapsFinished] = false;
				globalvars.AllKillsSound.push(globalvars.MapsFinished);
				globalvars.AllKillsSound[globalvars.MapsFinished] = false;
				globalvars.AllKillsTimer.push(globalvars.MapsFinished);
				globalvars.AllKillsTimer[globalvars.MapsFinished];
				
				globalvars.NumItems.push(globalvars.MapsFinished);
				globalvars.MaxItems.push(globalvars.MapsFinished);
				globalvars.AllItems.push(globalvars.MapsFinished);
				globalvars.AllItems[globalvars.MapsFinished] = false;
				globalvars.AllItemsSound.push(globalvars.MapsFinished);
				globalvars.AllItemsSound[globalvars.MapsFinished] = false;
				globalvars.AllItemsTimer.push(globalvars.MapsFinished);
				globalvars.AllItemsTimer[globalvars.MapsFinished];
				
				globalvars.NumSecrets.push(globalvars.MapsFinished);
				globalvars.MaxSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets.push(globalvars.MapsFinished);
				globalvars.AllSecrets[globalvars.MapsFinished] = false;
				globalvars.AllSecretsSound.push(globalvars.MapsFinished);
				globalvars.AllSecretsSound[globalvars.MapsFinished] = false;
				globalvars.AllSecretsTimer.push(globalvars.MapsFinished);
				globalvars.AllSecretsTimer[globalvars.MapsFinished];
				
				globalvars.AllCompletion.push(globalvars.MapsFinished);
				globalvars.AllCompletion[globalvars.MapsFinished] = false;
				globalvars.AllCompletionSound.push(globalvars.MapsFinished);
				globalvars.AllCompletionSound[globalvars.MapsFinished] = false;
				globalvars.AllCompletionTimer.push(globalvars.MapsFinished);
				globalvars.AllCompletionTimer[globalvars.MapsFinished];
				if (kcdebug_mapfinishcheck) Console.Printf("\c[blue]Not Reopen\c- [maps in queue: %d]", globalvars.MapsFinished);
			}
			else
			{
				if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (non-hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
			}
		}
		else
		{
			if (!e.IsSaveGame) if (kcdebug_mapfinishcheck) Console.Printf("\c[brick]Map Has Been Visited before (hub)\c- [levelnum: %d, maps visited: %d]", level.levelnum, globalvars.MapsFinished);
		}
		
		string giveitem = "";
		// Post LevelPostProcess Compatibility Stuff >_>
		if (gameinfo.gametype == 1) // Doom GameMode
		{
			giveitem = "PlayingDoom1";
			if (level.GetChecksum() == 'b49f7a6c519757d390d52667db7d8793' || // doom.wad e1m1
					level.GetChecksum() == '81a4cc5136cbfa49345654190a626c09' || // doom.wad e1m2
					level.GetChecksum() == 'c7ff2282bc606ffb28ddcb90357094e6' || // doom.wad e1m3
					level.GetChecksum() == '5B26545FF21B051CA06D389CE535684C' || // doom.wad e1m4
					level.GetChecksum() == '66d8e54b173041f981a11cce766c4215' || // doom.wad e1m5
					level.GetChecksum() == '5faa25f5a6aab3409cae0af87f910341' || // doom.wad e1m6
					level.GetChecksum() == '9007f68e7f351a5758198933336f6b9f' || // doom.wad e1m7
					level.GetChecksum() == '058fb092ea1b70da1e3cbf501c4a91a1' || // doom.wad e1m8
					level.GetChecksum() == '1dbf91738492fb0e29836a2d66406cf1' || // doom.wad e1m9
					level.GetChecksum() == '65455ac523799f8dce19f3d1968776a2' || // doom.wad e2m1
					level.GetChecksum() == 'A24FE135D5B6FD427FE27BEF89717A65' || // doom.wad e2m2
					level.GetChecksum() == '918436b3c2d0ad4f2c108183414b4612' || // doom.wad e2m3
					level.GetChecksum() == '1BC04D646B32D3A3E411DAF3C1A38FF8' || // doom.wad e2m4
					level.GetChecksum() == '99C580AD8FABE923CAB485CB7F3C5E5D' || // doom.wad e2m5
					level.GetChecksum() == '3838AB29292587A7EE3CA71E7040868D' || // doom.wad e2m6
					level.GetChecksum() == '8590F489879870C098CD7029C3187159' || // doom.wad e2m7
					level.GetChecksum() == 'effe91df41ad41f6973c06f0ad67ddb9' || // doom.wad e2m8
					level.GetChecksum() == '8A6399FAAA2E68649D4E4B16642074BE' || // doom.wad e2m9
					level.GetChecksum() == 'c4a89a481a32bfeddeb82e818f2bdec5' || // doom.wad e3m1
					level.GetChecksum() == 'BBDC4253AE277DA5FCE2F19561627496' || // doom.wad e3m2
					level.GetChecksum() == 'f951882cb5a8def910f0ed966a1054c5' || // doom.wad e3m3
					level.GetChecksum() == '2B65CB046EA40D2E44576949381769CA' || // doom.wad e3m4
					level.GetChecksum() == '100106C75157B7DECB0DCAD2A59C1919' || // doom.wad e3m5
					level.GetChecksum() == '2baf49b4cc36155b60b5330660ac0976' || // doom.wad e3m6
					level.GetChecksum() == '5AC51CA9F1B57D4538049422A5E37291' || // doom.wad e3m7
					level.GetChecksum() == 'ef128313112110ed6c1549af96af26c9' || // doom.wad e3m8
					level.GetChecksum() == 'FE97DCB9E6235FB3C52AE7C143160D73' || // doom.wad e3m9
					level.GetChecksum() == 'DA0C8281AC70EEC31127C228BCD7FE2C' || // doom.wad e4m1
					level.GetChecksum() == '771092812F38236C9DF2CB06B2D6B24F' || // doom.wad e4m2
					level.GetChecksum() == 'F6EE16F770AD309D608EA0B1F1E249FC' || // doom.wad e4m3
					level.GetChecksum() == 'AAECADD4D97970AFF702D86FAFAC7D17' || // doom.wad e4m4
					level.GetChecksum() == 'C2E09AB0BDD03925305A48AE935B71CA' || // doom.wad e4m5
					level.GetChecksum() == 'CBBFF61A8C231DFFC8E8A2A2BAEB77FF' || // doom.wad e4m6
					level.GetChecksum() == '94D4C869A0C02EF4F7375022B36AAE45' || // doom.wad e4m7
					level.GetChecksum() == '2DC939E508AB8EB68AF79D5B60568711' || // doom.wad e4m8
					level.GetChecksum() == '78556d238ffec8058cacc48b847e1fab') // doom.wad e4m9
			{
				if (!playera.FindInventory(giveitem)) playera.A_SetInventory(giveitem,1);
			}
			giveitem = "PlayingDoom2";
			if (level.GetChecksum() == '3c9902e376cca1e9c3be8763bdc21df5' || // doom2.wad map01
					level.GetChecksum() == 'AB24AE6E2CB13CBDD04600A4D37F9189' || // doom2.wad map02
					level.GetChecksum() == '5e8679670469f92e15cf4219b5b98fef' || // doom2.wad map03
					level.GetChecksum() == 'CEC791136A83EEC4B91D39718BDF9D82' || // doom2.wad map04
					level.GetChecksum() == '9E061AD7FBCD7FAD968C976CB4AA3B9D' || // doom2.wad map05
					level.GetChecksum() == '434575dcb650b4efc912efc0782c7acc' || // doom2.wad map06
					level.GetChecksum() == '291F24417FB3DD411339AE82EF9B3597' || // doom2.wad map07
					level.GetChecksum() == '66C46385EB1A23D60839D1532522076B' || // doom2.wad map08
					level.GetChecksum() == '82256f04136adb2413bfc604b5f6adf3' || // doom2.wad map09
					level.GetChecksum() == '6C620F43705BEC0ABBABBF46AC3E62D2' || // doom2.wad map10
					level.GetChecksum() == '73d9e03cee7bf1a97efd2ead86688ef8' || // doom2.wad map11
					level.GetChecksum() == '1AF4DEC2627360A55B3EB397BC15C39D' || // doom2.wad map12
					level.GetChecksum() == 'FBA6547B9FD44E95671A923A066E516F' || // doom2.wad map13
					level.GetChecksum() == '5BDA34DA60C0530794CC1EA2DA017976' || // doom2.wad map14
					level.GetChecksum() == '1A540BA717BF9EC85F8522594C352F2A' || // doom2.wad map15
					level.GetChecksum() == '6B60F37B91309DFF1CDF02E5E476210D' || // doom2.wad map16
					level.GetChecksum() == 'E1CFD5C6E60C3B6C30F8B95FC287E9FE' || // doom2.wad map17
					level.GetChecksum() == '0D491365C1B88B7D1B603890100DD03E' || // doom2.wad map18
					level.GetChecksum() == 'B5506B1E8F2FC272AD0C77B9E0DF5491' || // doom2.wad map19
					level.GetChecksum() == '8898f5ec9cbdcd98019a1bc1bf892a8a' || // doom2.wad map20
					level.GetChecksum() == 'EBDAC00E9D25D884B2C8F4B1F0390539' || // doom2.wad map21
					level.GetChecksum() == '4AA9B3CE449FB614497756E96509F096' || // doom2.wad map22
					level.GetChecksum() == '63f25c97d5b1cc174efea7f6af499960' || // doom2.wad map23
					level.GetChecksum() == '3eff15c64a03b36e8e47926c6df9ef70' || // doom2.wad map24
					level.GetChecksum() == '94893A0DC429A22ADC4B3A73DA537E16' || // doom2.wad map25
					level.GetChecksum() == '1037366026AAB4B0CF11BAB27DB90E4E' || // doom2.wad map26
					level.GetChecksum() == '110F84DE041052B59307FAF0293E6BC0' || // doom2.wad map27
					level.GetChecksum() == '84BB2C8ED2343C91136B87F1832E7CA5' || // doom2.wad map28
					level.GetChecksum() == '20251EDA21B2F2ECF6FF5B8BBC00B26C' || // doom2.wad map29
					level.GetChecksum() == '5eecd88f4491f516d590ce4bbf45f532' || // doom2.wad map30
					level.GetChecksum() == '3ff94e27423f91c1585b3396f0c03459' || // doom2.wad map31
					level.GetChecksum() == 'aa4ca3fc891d13821accabd836e29eb5') // doom2.wad map32
			{
				if (!playera.FindInventory(giveitem)) playera.A_SetInventory(giveitem,1);
			}
		}
		
		giveitem = "PlayingRAMP";
		if (level.GetChecksum() == '8e1d1b012a817bb8828d7096dd1ecc28' && !playera.FindInventory(giveitem)) // ramp.pk3 map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to R.A.M.P., Kiddo! :V");
		}
		giveitem = "PlayingGoingDown";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !playera.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to Going Down, Kiddo! :V");
		}
		giveitem = "PlayingPSXDoom";
		if (level.GetChecksum() == '1dfcba1353e9bbf720f17639f294490d' && !playera.FindInventory(giveitem)) // gd.wad [Going Down] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to PSX Doom TC, Kiddo! V:<");
		}
		giveitem = "PlayingAugerZenith";
		if (level.GetChecksum() == 'a130224617d892e5023ab43392f4000d' && !playera.FindInventory(giveitem)) // DBP37_AUGZEN.wad [AUGER ZENITH] map01
		{
			playera.A_SetInventory(giveitem,1);
			Console.Printf("LOLE Welcome to AUGER ZENITH, Kiddo! V:<");
		}
		//if (level.GetChecksum() == 'c4f05c26410edfe5085b6f8504be47a8') // ???????.pk3
		
		if (!playera.CountInv("EWShieldDefendMode") && playera.bREFLECTIVE) playera.bREFLECTIVE = false;
		if (!playera.CountInv("EWShieldDefendMode") && playera.bSHIELDREFLECT) playera.bSHIELDREFLECT = false;
		
		Super.WorldLoaded(e);
	}
	
	override void PlayerDied(PlayerEvent e) 
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		Super.PlayerDied(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) 
	{
		Super.PlayerRespawned(e);
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		Actor playera = players[consoleplayer].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int buttons = playera.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")   
		{
			int key1, key2;

			[key1, key2] = Bindings.GetKeysForCommand("KC_CheatClear");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (KCPlayerPawn(playera) && MiscItem)
				{
					if (MiscItem.timestopstate <= 0)
					{
						if (MiscItem.timestopcooldown1tics > 0)
						{
							MiscItem.timestopcooldown1tics = 0;
							playera.A_SetInventory("KCTimeCooldown",0);
							playera.A_StartSound("TimeFreezeCooldown",219,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
							playera.A_SetBlend("264026",0.667,random(random(22,23),27));
						}
						if (MiscItem.timestopcooldown2tics > 0)
						{
							MiscItem.timestopcooldown2tics = 0;
							playera.A_SetInventory("KCTimeCooldown2",0);
							playera.A_StartSound("TimeFreezeCooldown",220,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
							playera.A_SetBlend("402626",0.667,random(random(22,23),27));
						}
						if (MiscItem.timestopcooldown3tics > 0)
						{
							MiscItem.timestopcooldown3tics = 0;
							playera.A_SetInventory("KCTimeCooldown3",0);
							playera.A_StartSound("TimeFreezeCooldown",221,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
							playera.A_SetBlend("252540",0.667,random(random(22,23),27));
						}
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("Whistl");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (MiscItem)
				{
					if (playera.health > 0 && MiscItem.whistlecooldown == 0)
					{
						playera.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) MiscItem.whistlecooldown = random(28,33);
																																									 else MiscItem.whistlecooldown = random(42,49);
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("KC_TimeStop");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (KCPlayerPawn(playera) && playera.health > 0 && MiscItem)
				{
					if (MiscItem.timestopstate <= 0)
					{
						if (MiscItem.timestopcooldown1tics <= 0)
						{
							MiscItem.timestopcooldown1tics = 0;
							MiscItem.timestopstate = 1;
							MiscItem.timestopactivetics = int(MiscItem.timefreeze1duration * TICRATE);
							MiscItem.timestopactivemaxtics = int(MiscItem.timefreeze1duration * TICRATE);
							playera.A_SetBlend("4F644F",0.667,random(random(22,23),27));

							playera.A_StopSound(216);
							playera.A_StartSound("TimeFreezeIn4",216,CHANF_DEFAULT,0.875,ATTN_NONE); 
							Console.Printf("Time Freeze Activated");
						}
						else
						{
							playera.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							Console.Printf("\c[brick]Time Freeze Must Cool Down First!");
						}
					}
					else
					{
						MiscItem.timestopactivetics = 0;
						MiscItem.timestopstate = 0;
						playera.A_SetInventory("KCTimeFreezer1",0);
						
						MiscItem.timestopcooldown1tics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
						MiscItem.timestopcooldown1maxtics = (int(MiscItem.timefreeze1cooldown * TICRATE) * MiscItem.timefreeze1cooldownratio2);
						playera.A_SetInventory("KCTimeCooldown",1);
						//playera.A_SetInventory("KCTimeCooldown2",1);
						//playera.A_SetInventory("KCTimeCooldown3",1);
						MiscItem.timefreeze1cooldownratio2 = 0.0;

						MiscItem.timefreeze1timesused += random(2,3);
						playera.A_StartSound("TimeFreezeOut4a",216,CHANF_DEFAULT,0.875,ATTN_NONE); 
						Console.Printf("Time Freeze Cut Short");
					}
				}
			}
		}
	}
	
	override void UiTick()
	{
		super.UiTick();
	}

	override void RenderOverlay(RenderEvent e)
	{
		super.RenderOverlay(e);
	}
	
}

class KC_StaticEventHandler : StaticEventHandler
{

	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e) 
	{
		actor playera = players[0].mo;
		array<int> fs_textures;
		array<string> fs_sndinfo;
		string defaultSndinfo;
		
		array<string> allSF;
		StringTable.Localize("$STEP_FLATS").Split(allSF,":");
		Console.Printf("Default Footsteps TXT Loaded [Eventside]");
		/*
		StringTable.Localize("$STEP_FLATSOTEX").Split(allSF,":");
		Console.Printf("OTex Footsteps TXT Loaded [Eventside]");
		*/
		
		for (int j = allSF.Size() - 1; j >= 0; j -= 1)
		{
			string s = StringTable.Localize(String.Format("$STEP_%s", allSF[j]));
			//Console.Printf("[EVENT] j: %d, %s, string: %s [Length: %d]", j, allSF[j], s, s.Length());
			
			if (s.Length() != 0)
			{
				textureid t = TexMan.CheckForTexture(allSF[j], TexMan.TYPE_ANY);
				if (t.Exists())
				{
					//Console.Printf("[EVENT 2] j: %d, %s", j, allSF[j]);
					fs_textures.Push(int(t));
					
					fs_sndinfo.Push(s);
				}
			}
		}
		defaultSndinfo = StringTable.Localize("$STEP_DEFAULT");
		
		int nofsttxts = 0;
		int nofsttxts2 = 0;
		for (let i = 0, l = level.Sectors.Size(); i < l; i++)
		{
			int idx;
			int textfound = 0;
			string texname;
			/*
			Console.Printf("centfloor [%d]: %.4f", i, level.Sectors[i].CenterFloor());
			Console.Printf("centceiling [%d]: %.4f", i, level.Sectors[i].CenterCeiling());
			Console.Printf("centerspot [%d]: %.4f x %.4f", i, level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y);
			let p = SectorChecker(Actor.Spawn("SectorChecker", (level.Sectors[i].centerspot.x, level.Sectors[i].centerspot.y, level.Sectors[i].CenterFloor()), ALLOW_REPLACE));
			if (p)
			{
				p.place = i;
				texname = texman.GetName(p.floorpic);
				idx = fs_textures.Find(int(p.floorpic));
				if (idx == fs_textures.Size()) textfound = false;
																	else textfound = true;
				//Console.Printf("x: %.4f, y: %.4f, z: %.4f, floorpic: %d [%s] [idx: %d]", p.pos.x, p.pos.y, p.pos.z, int(p.floorpic), texname, idx);
			}
			*/
			
			texname = texman.GetName(level.Sectors[i].GetTexture(sector.floor));
			idx = fs_textures.Find(int(level.Sectors[i].GetTexture(sector.floor)));
			if (idx != fs_textures.Size()) textfound = 1;
			else 
			{
				if (texname == "" || 
						texname == "-NOFLAT-") textfound = -1;
				if (texname == "DOPE2 R") textfound = -1;
				if (texname == "STEP1" || 
						texname == "STEP2" || 
						texname == "STEP3" ||
					texname == "A-DAN1" ||
					texname == "A-DAN2" ||
					texname == "A-DAN3" ||
					texname == "A-DAN4" ||
					texname == "A-DAN5" ||
					texname == "GRNROCK") textfound = -1;
				else nofsttxts++;
			}
			
			if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava') level.Sectors[i].damagetype = 'Magma';
			if (level.Sectors[i].damagetype == 'Ice') level.Sectors[i].damagetype = 'IceWater';
			if (kcdebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
			
			int damageamt = level.Sectors[i].damageamount;
			int damageint = level.Sectors[i].damageinterval;
			int leakdam = level.Sectors[i].leakydamage;
			string damagetyp = level.Sectors[i].damagetype;
			double sectgrav = level.Sectors[i].gravity;
			
			if (kcdebug_footsteps1 || kcdebug_footsteps2)
			{
				String SecPrint = "Sector #: ";
				SecPrint.AppendFormat("%d, ", i);
				if (textfound > 0) SecPrint.AppendFormat("\c[green]-floorpic: %s\c-", texname);
				else if (textfound < 0) SecPrint.AppendFormat("\c[yellow]=floorpic: %s\c-", texname);
				else SecPrint.AppendFormat("\c[red]~floorpic: %s\c-", texname);
				if (sectgrav != 1.0) SecPrint.AppendFormat("\c[green]gravity: %.4f\c-, ", sectgrav);
				if (damagetyp != 'None' || damageamt > 0 || damageint) SecPrint.AppendFormat(", \c[brick]damagetype: %s, damageamount: %d, damageinterval: %d, leakydamage: %d / 256", damagetyp, damageamt, damageint, leakdam);
				Console.Printf(SecPrint);
			}
		}
		if (nofsttxts > 0)
		{
			if (kcdebug_footsteps1 || kcdebug_footsteps2) playera.A_StartSound("step/squeaky1",1002);
			Console.Printf("# of textures found with no footstep definitions [\cy%s\c-]: \c[red]%d\c-", level.mapname, nofsttxts);
		}
	}
}

class KC_WaterHandler : StaticEventHandler 
{
	override void RenderOverlay(RenderEvent e)
	{
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		PPShader.SetUniform1f("KCwatershader", "timer", gametic + e.FracTic);
		int playbloom = Wads.CheckNumForName("KC-BLOOM", Wads.ns_global, -1, true);
		
		bool chasecam = false;
		if (p.cheats & CF_CHASECAM) chasecam = true;
		if (!chasecam)
		{
			if ((playbloom == -1 && p.mo.waterlevel >= 3))
			{
				if (kcdebug_shader)
				{
					PPShader.SetEnabled("KCwatershader", false);
					PPShader.SetEnabled("KCwatershader", false);
				}
				else
				{
					PPShader.SetEnabled("KCwatershader", true);
					PPShader.SetEnabled("KCwatershader", true);
					double effectSize = CVar.GetCVar("kc_uweffectsize", p).GetFloat();
					//Console.Printf("effectSize: %.8f", effectSize);
					if (MiscItem)
					{
						double tempeffectsize = 1.0;
						if (playbloom == -1 && p.mo.waterlevel >= 3) tempeffectsize += 1.0;
						effectSize *= tempeffectsize;
					}
					//if ((playbloom == -1 && p.mo.waterlevel >= 3) && p.mo.CountInv("PowerNoDrown")) effectSize *= frandom(0.045,0.055);
					//Console.Printf("effectSize: %.8f, zoom: %.8f [tic: %d]", effectSize, (1 - (effectSize * 2)), gametic);
					PPShader.SetUniform1f("KCwatershader", "waterFactor", effectSize);
					PPShader.SetUniform1f("KCwatershader", "zoomFactor", 1 - (effectSize * 2));
				}
			}
			else 
			{
				PPShader.SetEnabled("KCwatershader", false);
				PPShader.SetEnabled("KCwatershader", false);
			}
		}
		else 
		{
			PPShader.SetEnabled("KCwatershader", false);
			PPShader.SetEnabled("KCwatershader", false);
		}
	}
}

class EVP_FootstepsInit : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			int numfound;
			ThinkerIterator FStepFinder = ThinkerIterator.Create("EVP_Footsteps");
			EVP_Footsteps mo;
			while (mo = EVP_Footsteps(FStepFinder.Next()))
			{
				mo.Destroy();
				numfound++;
				if (kcdebug_footsteps1) Console.Printf("Destroying Old EVP_Footsteps Item #%d", numfound);
			}
			if (e.playerNumber == 0)
			{
				let fs = EVP_Footsteps(Actor.Spawn("EVP_Footsteps"));
				if (fs) fs.Init(players[0].mo);
				if (kcdebug_footsteps1) Console.Printf("Adding New EVP_Footsteps Item");
			}
		}
	}
}