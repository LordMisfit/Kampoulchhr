/* Copyright Alexander 'm8f' Kromm (mmaulwurff@gmail.com) 2019
 *
 * This file is a part of Tips.pk3.
 *
 * Tips.pk3 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Tips.pk3 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Tips.pk3.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * This class draws a note at the bottom of the screen.
 *
 * It respects kc_show_notes CVar.
 */
class kc_ListMenuNote : ListMenuItem
{
	
// public: /////////////////////////////////////////////////////////////////////
	
	int, string TipPreface(int tipno, string quote)
	{
		tipno++;
		quote = "\c[gold]Tip \c-";
		quote.AppendFormat("\c[gold]%d:\c-\n",tipno);
		quote.AppendFormat("\c[green]");
		
		return tipno, quote;
	}
	
	string ReturnKeyBind1(string keybindget, bool showunbound, bool colored)
	{
		string LegendStr = "";
		string UserKeyString;
		Array<String> UserKeys;
		
		UserKeyString = UIKeybinds.getKeyboard(keybindget);
		if (UserKeyString != "")
		{
			UserKeyString.Split(UserKeys,", ");
			if (UserKeys[0] == "Space") UserKeys[0] = "SBar";
			if (UserKeys[0] == "CapsLock") UserKeys[0] = "CapsL";
			if (colored) LegendStr.AppendFormat("%s", UserKeys[0]);
							else LegendStr.AppendFormat("\c[gold]%s\c-", UserKeys[0]);
		}
		else 
		{
			if (showunbound) LegendStr.AppendFormat("\c[red][unb]\c-");
		}
		return LegendStr;
	}
		
	kc_ListMenuNote init()
	{
		int tipno;
		string quote;
		string keyname1;
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("\c[HeiwaChamosis]'Kampoulchhr'\c- roughly translates in Khmer to \c[HeiwaChamosis]'Supreme Being'\c-.");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat(ReturnKeyBind1("+user4", true, false));
		quote.AppendFormat("\c- = \c[sapphire]Guards with Fist\c[green]. Guarding with your fists \c[red]substantially slows you down\c[green], however it \c[sapphire]immensely reduces damage from attacks, and \c[HeiwaDeluge]further more greatly reduces damage from melee attacks\c[green], including the \c[brick]stomps of Cyberdemons\c[green]. Additionally, dashing in this mode will make you do a \c[orange]shoulder tackle\c[green] that can damage enemies as you pass through them with it. :V");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat(ReturnKeyBind1("KC_TimeStop", true, false));
		quote.AppendFormat("\c- = \c[sapphire]Activates/Cancels \c[HeiwaDeluge]Time Freeze Ability\c[sapphire]\c-");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Your Time Freeze will \c[HeiwaDeluge]extend in duration\c[green] and \c[HeiwaChamosis]reduce in cooldown\c[green] the more it it used. The key legend for your weapons will show these times.");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Your Time Freeze will greatly \c[sapphire]accelerate your \c[brick]HP\c[sapphire]/\c[purple]PP\c[sapphire]/\c[lightblue]MP\c[sapphire] regeneration\c[green] as well as \c[gold]render you completely invulnerable\c[green] until it wears off. You also \c[blue]won't take damage from hazardous floors, etc\c[green]. However the variant you use will affect other factors...");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Your 'default' time freeze is considered \c[lightblue]DEFENSIVE\c[green], meaning any direct damage you deal is \c[red]cut by 75+% [or more if the attacks aren't impactive/blunt attributed]\c[green]. To compensate, projectiles and even hitscans of yours will become able to be \c[yellow]lined up to anticipate enemies\c[green] and hit them once the freeze ends. When firing a non melee attack, keep a short distance from your target, and you'll note your projectile \c[blue][or tracers for what are normally hitscans]\c[green] will stop movement a short distance away from you \c[gold]ZA WARUDO\c[green] style. :V");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("For \c[darkgreen]defensive time freezes\c[green], \c[yellow]punches, kicks and uppercuts\c[green] are the most effective attacks for dealing the most direct damage, due to them being blunt/impactive attacks. The Saw Thrower's melee is ~usually~ fast enough at full throttle to compensate too, despite it not being impactive (though it will eat through the Saws' durability 4-5x faster since your foes are that many times more dense), but the Chainsaw is almost ineffective by comparison during this.");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat(ReturnKeyBind1("+user1", true, false));
		quote.AppendFormat("\c- = \c[sapphire]Quick-Kick \c[orange](usable with any weapon equipped)\c[green]. Kicks will often stun foes for extended periods of time, along with having a \c[gold]higher chance -to- stun them than most firearm attacks\c[green].");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat(ReturnKeyBind1("+user3", true, false));
		quote.AppendFormat(" \c[white]OR\c- \c[gold]");
		quote.AppendFormat("2x tap same direction");
		quote.AppendFormat("\c- = \c[sapphire]Dash. Your dash ability \c[brick]consumes some energy which will then replenish slowly\c[green], but it can be used for a \c[lightblue]brief burst of speed\c[green] with a moment of \c[gold]invincibility frames\c[green], as well as allow you to \c[olive]dash THROUGH obstacles and foes, allowing you to escape being cornered\c[green]. If you get stuck inside an object after dashing, dash again to escape. You can also \c[lightblue]dash in mid air\c[green] as well. If you're underwater, or using a flying powerup, you can \c[olive]dash vertically by aiming vertically\c[green]. If you're in berserk, dashing through foes will also \c[lightblue]deal them damage\c[green].");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Punches, Uppercuts and Kicks will \c[brick]briefly slow you down a lot\c[green] while performing them, though as your level increases, this is less prominent up to around \c[white]Level 40\c[green] or so, where the slowdown vanishes entirely.");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Use of Time Freeze will \c[HeiwaDeluge]leave an afterimage of yourself as you were at the moment of the freeze\c[green]. This can be used to gauge your position for memory of your last location. It will additionally \c[HeiwaChamosis]briefly confuse any enemies who have you as their current \c[orange]target\c[HeiwaChamosis], making them \c[HeiwaDeluge]briefly target the afterimage for a brief couple of moments after your freeze ends\c[green].");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("The \c[fire]Phobos Dust Blower\c[green] is also a defensive measure against the instant-hitting \c[purple]PSI-based attacks\c[green] of \c[red]'Ghoulish Lost Souls'\c[green]. Just having it equipped will \c[sapphire]greatly reduce the damage done by their attacks\c[green].");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("The \c[fire]Translocator\c[green]'s beacons can be used to \c[olive]bypass lines that block players normally\c[green]. If items [i.e. Health/Armor Bonuses, etc] or other important things are inside a monster cage, use the Translocator to get in -and- out of these cages. :P");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("The \c[fire]''Deviation'' Dumb Missile Launcher\c[green]'s rockets are \c[orange]immensely more powerful than your standard UAC Rocket Launcher\c[green]. They also possess a \c[orange]massive blast radius\c[green], and their blast radii can \c[sapphire]partially ignore the rocket-splash immunities of boss tier monsters like Cyberdemons and Spider Masterminds\c[green]. Beware though as it is \c[red]easy to kill yourself with a facerocket using it\c[green]. V:");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("\c[fire]Heiwa's Knife\c[green] is an alternate melee option for her that like her \c[brick]punches, kicks and uppercuts\c[green], \c[gold]scales in damage faster as she levels up\c[green]. It is also a \c[sapphire]strong deterrent against projectiles and even tracers/hitscans\c[green], if swung with good timing. If you can reach \c[gold]level 15\c[green], Heiwa \c[gold]learns a secret technique\c[green] with it that utilizes her \c[lightblue]MP reserves\c[green].");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("It is possible to find \c[blue]modification packs\c[green] (or Mod Packs) for various firearm weapons of Heiwa's as you progress. Once grabbed, it \c[sapphire]permanently upgrades the weapon in question in various ways\c[green], sometimes giving weapons \c[gold]alternate/new attack modes\c[green] as well. <.<");
		add(quote);
		
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Some of your weapons melee attacks are -silent- vs classic Doom's fist. Not ALWAYS, but it's likely due to this you can end up not triggering monster closet ambushes. If you want/need to try to wake these closets up, hit ");
		quote.AppendFormat(ReturnKeyBind1("Whistl", true, false));
		quote.AppendFormat("\c[green] to whistle to try to wake them up at various locations in the current level.", true, false);

		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("The \c[fire]Blaster Pistol\c[green] and \c[fire]EF-11 Blaster Rifle\c[green] weapons possess a \c[sapphire]rechargeable on-board battery\c[green] that both allows a free full-powered shot \c[grey](and per Blaster Pistol if you are dual-wielding them)\c[green], but will also allow them to fire much weaker shots infinitely if you lack cells or the on-board battery isn't charged (or if you change the fire more to always fire weaker shots). This allows \c[yellow]both weapons to be used to some degree in a pinch with no ammo\c[green], though the Blaster Pistol's weakened shots \c[orange]disperse after a set distance\c[green], while the Blaster Rifle's will not, but \c[orange]are a lot weaker\c[green].");
		add(quote);
		
		//[tipno, quote] = TipPreface(tipno, quote);
		//quote.AppendFormat("");
		//add(quote);

		//[tipno, quote] = TipPreface(tipno, quote);
		//quote.AppendFormat("");
		//add(quote);

		//[tipno, quote] = TipPreface(tipno, quote);
		//quote.AppendFormat("");
		//add(quote);
		/*
		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Ohai thar! :V V: :U U:");
		add(quote);

		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Ohai thar! V: :V U: :U");
		add(quote);

		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Ohai thar! :U U: :V V:");
		add(quote);

		[tipno, quote] = TipPreface(tipno, quote);
		quote.AppendFormat("Ohai thar! U: :U V: :V");
		add(quote);
		*/
		/*
		add("\"The situation is so much better for programmers today - a cheap used PC, "
				"a linux CD, and an internet account, and you have all the tools necessary "
				"to work your way to any level of programming skill you want to shoot for.\"\n"
				" - John Carmack");
	
		add("\"Explicit is better than implicit.\"\n"
				" - Tim Peters, The Zen of Python");
	
		add("doomwiki.org is the Doom Wiki.");
	
		add("\"For every complex problem there is an answer that is clear, simple, and wrong.\"\n"
				" - H. L. Mencken");
	
		add("#include <stdio.h>\n"
				"int main() { printf(\"Hello, World!\"); return 0; }");
	
		add("#include <iostream>\n"
				"int main() { std::cout << \"Hello, World!\" << std::endl; return 0; }");
	
		add("#!/bin/sh\n"
				"echo \"Hello, World!\"");
	
		add("#!python3\n"
				"if __name__ == \"__main__\":\n"
				"    print(\"Hello, World!\")");
	
		add("\"Never send a human to do a machine’s job.\"\n"
				" - Agent Smith, The Matrix");
		*/
		Super.Init();
		return self;
	}
	
	override
	bool, String GetString(int i)
	{
		// unused: i
		return true, "ListMenuNote";
	}
	
// public: // ListMenuItem /////////////////////////////////////////////////////
	
	override
	void OnMenuCreated()
	{
		_iString = random(0, _strings.size() - 1);
	}
	
	override
	void Drawer(bool selected)
	{
		// unused: selected
	
		if (!kc_show_notes)
		{
			return;
		}
	
		int    width  = (Screen.GetWidth() / CleanXFac_1) * 7 / 8;
		let    lines  = NewSmallFont.BreakLines(_strings[_iString], width);
		int    nLines = lines.Count();
		double height = NewSmallFont.GetHeight();
		double y      = Screen.GetHeight() - MARGIN - height * nLines * CleanYFac_1;
	
		for (int i = 0; i < nLines; ++i)
		{
			double x = Screen.GetWidth() - MARGIN - lines.StringWidth(i) * CleanXFac_1;
			Screen.DrawText( NewSmallFont, Font.CR_WHITE, x, y, lines.StringAt(i)
										, DTA_CleanNoMove_1, true
										);
			y += height * CleanYFac_1;
		}
	}
	
// private: ////////////////////////////////////////////////////////////////////
	
	private ui
	void add(String s)
	{
		_strings.push(s);
	}
	
// private: ////////////////////////////////////////////////////////////////////
	
	const MARGIN = 10;
	
// private: ////////////////////////////////////////////////////////////////////
	
	/// Must contain at least 1 string.
	private ui Array<String> _strings;
	private ui uint          _iString;
	
} // class kc_ListMenuNote

class OptionMenuItemkc_MenuInjector : OptionMenuItem
{
	
// public: /////////////////////////////////////////////////////////////////////
	
	void Init()
	{
		injectNote("MainMenu");
		injectNote("MainMenuTextOnly");
	}
	
// private /////////////////////////////////////////////////////////////////////
	
	/**
	* This function assumes that menu with name @a menuName exists and is a ListMenu.
	*/
	void injectNote(String menuName)
	{
		let descriptor = ListMenuDescriptor(MenuDescriptor.GetDescriptor(menuName));
	
		bool   hasString;
		String string;
		[hasString, string] = descriptor.mItems[descriptor.mItems.size() - 1].GetString(0);
	
		if (hasString && string == "ListMenuNote")
		{
			return;
		}
	
		descriptor.mItems.Push(new("kc_ListMenuNote").init());
	}

} // class OptionMenuItemkc_MenuInjector
