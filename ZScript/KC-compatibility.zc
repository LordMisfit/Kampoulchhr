Class KCLevelCompatibility : LevelPostProcessor
{
	static const int DOOM_MONSTER_EDNUMS[] =
	{
		7,    // Spider demon
		9,    // Shotgun guy
		16,   // Cyberdemon
		58,   // Spectre
		64,   // Archvile
		65,   // Chaingun guy
		66,   // Revenant
		67,   // Mancubus
		68,   // Arachnotron
		69,   // Hell knight
		71,   // Pain elemental
		72,   // Commander Keen
		84,   // Wolfenstein SS
		3001, // Imp
		3002, // Demon
		3003, // Baron of hell
		3004, // Zombieman
		3005, // Cacodemon
		3006 // Lost soul
	};
	static const int HERETIC_MONSTER_EDNUMS[] =
	{
		5, // Gargoyle Leader
		6, // Iron Lich
		7, // D'Sparil w/ Chaos Serpent
		9, // Maulotaur
		15, // Disciple of D'Sparil
		45, // NitroGolem
		46, // NitroGolem Ghost
		64, // Undead Warrior
		65, // Undead Warrior Ghost
		66, // Gargoyle
		68, // Golem
		69, // Golem Ghost
		70, // Were-Dragon
		90, // Sabreclaw
		92 // Ophidian
	};
	static const int HEXEN_MONSTER_EDNUMS[] =
	{
		31, // Green Chaos Serpent
		34, // Reiver
		107, // Centaur
		114, // Dark Bishop
		115, // Slaughtaur
		120, // Alpha Stalker
		121, // Stalker
		254, // Death Wyvern
		8020, // Wendigo
		8080, // Brown Chaos Serpent
		10011, // Reiver
		10030, // Ettin
		10060, // Afrit
		10080, // Heresiarch
		10100, // Zedek [fighter boss]
		10101, // Traductus [cleric boss]
		10102, // Menelkir [mage boss]
		10200 // Korax [final boss]
	};
	static const int STRIFE_MONSTER_EDNUMS[] =
	{
		9, // Front Rebel [1]
		12, // Loremaster [boss]
		16, // Inquisitor
		27, // Ceiling Turret
		58, // Acolyte [Shadow]
		64, // Macil [1]
		65, // Peasant [4]
		66, // Peasant [7]
		67, // Peasant [10]
		71, // Programmer [boss]
		75, // Alien Spectre [2/Bishop]
		76, // Alien Spectre [3/Oracle]
		128, // The Entity [final boss]
		129, // Alien Spectre [1/Programmer(?)]
		130, // Peasant [2]
		131, // Peasant [3]
		132, // Peasant [5]
		133, // Peasant [6]
		134, // Peasant [8]
		135, // Peasant [9]
		136, // Peasant [11]
		137, // Peasant [12]
		141, // Beggar [1]
		142, // Acolyte [Red]
		143, // Acolyte [Rust]
		144, // Front Rebel [2]
		145, // Front Rebel [3]
		146, // Acolyte [Gray]
		147, // Acolyte [Dark-Green]
		148, // Acolyte [Gold]
		149, // Front Rebel [4]
		150, // Front Rebel [5]
		151, // Front Rebel [6]
		155, // Beggar [2]
		156, // Beggar [3]
		157, // Beggar [4]
		158, // Beggar [5]
		167, // Alien Spectre [4/Macil]
		168, // Alien Spectre [5/Loremaster]
		172, // Peasant [13]
		173, // Peasant [14]
		174, // Peasant [15]
		175, // Peasant [16]
		176, // Peasant [17]
		177, // Peasant [18]
		178, // Peasant [19]
		179, // Peasant [20]
		180, // Peasant [21]
		181, // Peasant [22]
		186, // Order Stalker
		187, // Bishop [boss]
		199, // Oracle ["boss"]
		200, // Macil [2/boss]
		3001, // Reaver
		3002, // Acolyte [Tan]
		3003, // Templar
		3004, // Peasant [1]
		3005, // Crusader
		3006 // Sentinel
	};
	
	bool A_CheckUOHYM()
	{
		bool UOHYM = false;
		if (Wads.CheckNumForName("KC-UOHYM", Wads.ns_global, -1, true) != -1) UOHYM = true;
		return UOHYM;
	}
	
	protected void Apply( Name checksum, String mapname )
	{
		if (gameinfo.gametype & GAME_Doom)
		{
			switch(checksum)
			{
				case '1872d6b0b49172070d6264dcd9f55296': // eday map01
				{
					if (kcdebug_showcompatibility) Console.Printf("eday map01");
					AddThing(27001,(-172,-674,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case 'e94ebb9aa2a49c1fb054a7ea724fe2d6': // eday map05
				{
					if (kcdebug_showcompatibility) Console.Printf("eday map05");
					AddThing(13369,(-1656,1168,224),0,SKILLS_ALL,MODES_ALL); // Translocator
					break;
				}
				case 'e07adb4899f5e37379dbc0226d0ec081': // eday map07
				{
					if (kcdebug_showcompatibility) Console.Printf("eday map07");
					AddThing(25056,(-3426,2442,225),0,SKILLS_ALL,MODES_ALL); // DustBlower
					break;
				}
				case 'ae635300d2c2c8ff227342fac40d3233': // afterdoom lvl1
				case '3e1974b5c13b9e66b401d14ed08524a9': // afterdoom lvl1
				{
					if (kcdebug_showcompatibility) Console.Printf("afterdoom lvl1");
					AddThing(27001,(368,8336,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case 'f84369bc15ccbdb400bd4a0e75a8af9c': // psxdoom map01
				{
					if (kcdebug_showcompatibility) Console.Printf("psxdoom map01");
					AddThing(27001,(1504,-2496,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case '235ca78023fb264246642c69cc42c122': // unfamiliar compatpack e1m1
				{
					AddThing(27001,(-384,-480,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case 'b49f7a6c519757d390d52667db7d8793': // doom.wad e1m1
				{
					AddThing(27001,(1024,-3264,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case '8f87eeb6b35ce90744f7287ec5a1d145': // hellbnd.wad e1m1
				{
					AddThing(27001,(2048,3744,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				
				case '3c9902e376cca1e9c3be8763bdc21df5': // doom2.wad map01
				{
					AddThing(15,(-464,824,0),0,SKILLS_ALL,MODES_ALL); // DeadMarine
					AddThing(27001,(-464,824,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case '110f84de041052b59307faf0293e6bc0': // doom2.wad map27
				{
					AddThing(27019,(-1216,-320,0),0,SKILLS_ALL,MODES_ALL); // CombatPack
					AddThing(31967,(-1152,-320,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					AddThing(27356,(-1088,-320,0),0,SKILLS_ALL,MODES_ALL); // SpecialBackpack
					break;
				}
				case '058fb092ea1b70da1e3cbf501c4a91a1': // doom.wad e1m8
				{
					uint n = GetThingCount();
					
					for (uint i = 0; i < n; i++)
					{
						if (IsThingMonster(GetThingEdNum(i)))
						{
							if (i == 106 ||
									i == 107 ||
									i == 108 ||
									i == 109 ||
									i == 110 ||
									i == 111 ||
									i == 112 ||
									i == 118 ||
									i == 119 ||
									i == 120 ||
									i == 121 ||
									i == 122 ||
									i == 123 ||
									i == 124 ||
									i == 125)
							{
								//i.A_GiveInventory("E1M8ExitRoomMonster",1);
								SetThingFlags(i, GetThingFlags(i) | MTF_NOCOUNT);
							}
						}
					}
					if (kcdebug_showcompatibility) Console.Printf("LOLE E1M8 DOOM 1 EXIT ROOM");
					break;
				}
				case '65455ac523799f8dce19f3d1968776a2': // doom.wad e2m1
				{
					break;
				}
				case '8391b0eb996c55b5ed4343d18b8ad2c8': // tnt.wad map01
				{
					AddThing(15,(-256,-64,0),0,SKILLS_ALL,MODES_ALL); // DeadMarine
					AddThing(27001,(-256,-64,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
					break;
				}
				case '42b68b84ff8e55f264c31e6f4cfea82d': // tnt.wad map30
				{
					//AddThing(?,(3072,-640,0),0,SKILLS_ALL,MODES_ALL); // ?
					break;
				}
				case 'a53ae580a4af2b5d0b0893f86914781e': // tnt.wad map31
				{
					AddThing(3074,(-2928,-2016,0),0,SKILLS_ALL,MODES_ALL);	// KXCelt
					AddThing(3074,(-1216,-1216,0),0,SKILLS_ALL,MODES_ALL);	// KXCelt
					AddThing(3074,(2400,2304,0),0,SKILLS_ALL,MODES_ALL);		// KXCelt
					break;
				}
				case 'd99ad22ff21a41b4eecdb3a7c803d75e': // tnt.wad map32
				{
					AddThing(27019,(640,6816,0),0,SKILLS_ALL,MODES_ALL);	// CombatPack
					break;
				}
				case 'acf8b3fa7f972ff969127ab920c6c12d': // plutonia.wad map01
				{
					AddThing(15,(-32,-96,0),0,SKILLS_ALL,MODES_ALL); // DeadMarine
					AddThing(27001,(-32,-96,0),0,SKILLS_ALL,MODES_ALL); // KCE1M1FirstMarineDrop
				}
				case '279bb50468fe9f5b36c6d821e4902369': // plutonia.wad map30
				{
					uint n = GetThingCount();
					
					for (uint i = 0; i < n; i++)
					{
						if (IsThingMonster(GetThingEdNum(i)))
						{
							if (i == 72 ||
									i == 73 ||
									i == 74 ||
									i == 75 ||
									i == 76 ||
									i == 149 ||
									i == 150 ||
									i == 152 ||
									i == 153 ||
									i == 154 ||
									i == 155 ||
									i == 156 ||
									i == 157)
							{
								//i.A_GiveInventory("E1M8ExitRoomMonster",1);
								SetThingID(i, 30);
								//SetThingFlags(i, GetThingFlags(i) | MTF_NOCOUNT);
							}
						}
					}
					break;
				}
				case 'fdbc01a2533805055e56e8d9b14bf7db': // plutonia.wad map31
				{
					AddThing(16,(0,768,0),0,SKILLS_ALL,MODES_ALL); // Cyberdemon-type
					AddThing(16,(-1024,-256,0),0,SKILLS_ALL,MODES_ALL); // Cyberdemon-type
					AddThing(16,(1376,-192,0),0,SKILLS_ALL,MODES_ALL); // Cyberdemon-type
					AddThing(16,(1376,-336,0),0,SKILLS_ALL,MTF_COOPERATIVE); // Cyberdemon-type
					AddThing(16,(608,-1008,0),0,SKILLS_ALL,MTF_COOPERATIVE); // Cyberdemon-type
					AddThing(16,(736,-880,0),0,SKILLS_ALL,MTF_COOPERATIVE); // Cyberdemon-type
					AddThing(31967,(780,-1036,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					AddThing(27356,(820,-1076,0),0,SKILLS_ALL,MODES_ALL); // SpecialBackpack
					AddThing(27002,(780,-1076,0),0,SKILLS_ALL,MODES_ALL); // VitalCapsule
					AddThing(27002,(820,-1036,0),0,SKILLS_ALL,MODES_ALL); // VitalCapsule
					break;
				}
				case 'd5f64e02679a81b82006af34a6a8eac3': // plutonia.wad map32
				{
					//AddThing(31967,(832,1600,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					//AddThing(31967,(2336,-1440,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					//AddThing(31967,(1760,-864,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					//AddThing(31967,(-352,112,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					//AddThing(31967,(-2016,672,0),0,SKILLS_ALL,MODES_ALL); // RandomModPack
					AddThing(27019,(-352,560,0),0,SKILLS_ALL,MODES_ALL); // CombatPack
					AddThing(13364,(160,1408,0),0,SKILLS_ALL,MODES_ALL); // Berserk2
					AddThing(13366,(992,1200,0),0,SKILLS_ALL,MODES_ALL); // LemonMerinquePie
					AddThing(27356,(-280,2208,0),0,SKILLS_ALL,MODES_ALL); // SpecialBackpack
					
					AddThing(27012,(-2736,696,0),0,SKILLS_ALL,MODES_ALL); // SpeedCapsule
					AddThing(27012,(-2736,672,0),0,SKILLS_ALL,MODES_ALL); // SpeedCapsule
					AddThing(27012,(-2736,648,0),0,SKILLS_ALL,MODES_ALL); // SpeedCapsule
					AddThing(27014,(-2960,696,0),0,SKILLS_ALL,MODES_ALL); // LuckCapsule
					AddThing(27014,(-2960,672,0),0,SKILLS_ALL,MODES_ALL); // LuckCapsule
					AddThing(27014,(-2960,648,0),0,SKILLS_ALL,MODES_ALL); // LuckCapsule
					AddThing(27016,(-2872,784,0),0,SKILLS_ALL,MODES_ALL); // GutsCapsule
					AddThing(27016,(-2848,784,0),0,SKILLS_ALL,MODES_ALL); // GutsCapsule
					AddThing(27016,(-2824,784,0),0,SKILLS_ALL,MODES_ALL); // GutsCapsule
					AddThing(27017,(-2872,560,0),0,SKILLS_ALL,MODES_ALL); // SensesCapsule
					AddThing(27017,(-2848,560,0),0,SKILLS_ALL,MODES_ALL); // SensesCapsule
					AddThing(27017,(-2824,560,0),0,SKILLS_ALL,MODES_ALL); // SensesCapsule
					break;
				}
				
				case '94893a0dc429a22adc4b3a73da537e16': // map25
				{
					break;
				}

				case 'a130224617d892e5023ab43392f4000d': // dbp37_augzen.wad map01
				{
					AddThing(25083,(1520,-2032,0),0,SKILLS_ALL,MODES_ALL); 
					if (kcdebug_showcompatibility) Console.Printf("LOLE MAP01 AUGZEN BLASTPISTOL");
					break;
				}
		/*
				case 'F1CC189AC134E21D6A663A9C48A582EE': // circus2(-fixed).wad map01
				case '190FC2E501B21733E4B6A823E114D02C': // circus2-fixed-1.1.pk3 map01
				case '4743D0AE68F6EB99FA10AC1A1BEE7CBB': // circus2-fixed-1.2.pk3 map01
				{
					// Replaces Circus2's usual CrazyBall pickup with the mod's
					for (uint i = 0; i < GetThingCount(); i++)
					{
						if (GetThingEdNum(i) != 30205 ) continue;
						SetThingEdNum(i,31205);
					}
					break;
				}
				case '57112717E2E1C7E3067C5C1E9E3D76BC': // circus2(-fixed).wad map33
				{
					// Replaces Circus2's usual CrazyBall pickup with the mod's
					for (uint i = 0; i < GetThingCount(); i++)
					{
						if (GetThingEdNum(i) != 30205 ) continue;
						SetThingEdNum(i,31205);
					}
					break;
				}

				case '9025ce6a5f0baeb29eb0782c5c7c0acf': // gd.wad [Going Down] map29
				{
					// Replaces the DEHACKED boss with a more ZScript Friendly one :V
					for (uint i = 0; i < GetThingCount(); i++)
					{
						if (GetThingEdNum(i) != 84) continue;
						SetThingEdNum(i,30001);
					}
					break;
				}
				
				case '8e1d1b012a817bb8828d7096dd1ecc28':
				// RAMP's HUB Map
				{
					AddThing(21334,(0,64,-64),0,SKILLS_ALL,MODES_ALL); // Practice Target [type 2]
					break;
				}
				
				// Kinsie's Test Map
				case '0EADB2F82732A968B8513E4DC6138439':
				case 'D70250F93C6B6072DA39D9672B37F236':
				case '959A613006CC3AA912C4A22908B7566A':
				case '9cb9f64a6ffc552ae312b66a58cd5351':
				case 'e43c1797dfd9443d1b4c035327743588':
				{
					AddThing(28862,(576,-1152,0),0,SKILLS_ALL,MODES_ALL); // Fosnian CandleVulcan

					AddThing(21333,(3664,1760,0),0,SKILLS_ALL,MODES_ALL); // Practice Target [type 1]
					
					AddThing(21334,(2400,608,0),0,SKILLS_ALL,MODES_ALL); // Practice Target [type 2]
					
					AddThing(9890,(-3008,160,0),0,SKILLS_ALL,MODES_ALL); // Mega Satchel (guaranteed)

					AddThing(9901,(-2368,960,0),0,SKILLS_ALL,MODES_ALL); // Cup of Max Rage

					AddThing(9903,(-2368,928,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,864,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,800,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,736,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,672,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,608,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,544,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,480,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,416,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					AddThing(9903,(-2368,288,0),0,SKILLS_ALL,MODES_ALL); // Cup of Golden Rage
					
					AddThing(31968,(-3584,512,0),0,SKILLS_ALL,MODES_ALL); // Blunderaxe Schematic
					AddThing(31968,(-3456,512,0),0,SKILLS_ALL,MODES_ALL); // Blunderaxe Schematic
					AddThing(31968,(-3328,512,0),0,SKILLS_ALL,MODES_ALL); // Blunderaxe Schematic
					
					AddThing(31982,(-3584,192,0),0,SKILLS_ALL,MODES_ALL); // Grimophone Microchip
					AddThing(31982,(-3456,192,0),0,SKILLS_ALL,MODES_ALL); // Grimophone Microchip
					AddThing(31982,(-3328,192,0),0,SKILLS_ALL,MODES_ALL); // Grimophone Microchip
					
					AddThing(9891,(-2944,704,0),0,SKILLS_ALL,MODES_ALL); // Portal Satchel
					AddThing(9891,(-2912,704,0),0,SKILLS_ALL,MODES_ALL); // Portal Satchel
					AddThing(9891,(-2880,704,0),0,SKILLS_ALL,MODES_ALL); // Portal Satchel
					
					AddThing(1045,(576,0,0),0,SKILLS_ALL,MODES_ALL); // Sigil Piece Pickup
					AddThing(1045,(640,0,0),0,SKILLS_ALL,MODES_ALL); // Sigil Piece Pickup
					AddThing(1045,(704,0,0),0,SKILLS_ALL,MODES_ALL); // Sigil Piece Pickup
					AddThing(1045,(768,0,0),0,SKILLS_ALL,MODES_ALL); // Sigil Piece Pickup
					AddThing(1045,(832,0,0),0,SKILLS_ALL,MODES_ALL); // Sigil Piece Pickup
					
					AddThing(13162,(-2944,640,0),0,SKILLS_ALL,MODES_ALL); // Essence of Time
					AddThing(13162,(-2912,640,0),0,SKILLS_ALL,MODES_ALL); // Essence of Time
					AddThing(13162,(-2880,640,0),0,SKILLS_ALL,MODES_ALL); // Essence of Time
					
					AddThing(13164,(-2944,608,0),0,SKILLS_ALL,MODES_ALL); // Essence of Fury
					AddThing(13164,(-2912,608,0),0,SKILLS_ALL,MODES_ALL); // Essence of Fury
					AddThing(13164,(-2880,608,0),0,SKILLS_ALL,MODES_ALL); // Essence of Fury
					
					AddThing(9886,(-2944,576,0),0,SKILLS_ALL,MODES_ALL); // Killetante Effigy
					AddThing(9886,(-2912,576,0),0,SKILLS_ALL,MODES_ALL); // Killetante Effigy
					AddThing(9886,(-2880,576,0),0,SKILLS_ALL,MODES_ALL); // Killetante Effigy
					
					AddThing(12091,(-2944,544,0),0,SKILLS_ALL,MODES_ALL); // Sugar Snake
					AddThing(12091,(-2912,544,0),0,SKILLS_ALL,MODES_ALL); // Sugar Snake
					AddThing(12091,(-2880,544,0),0,SKILLS_ALL,MODES_ALL); // Sugar Snake
					
					AddThing(9887,(-2944,512,0),0,SKILLS_ALL,MODES_ALL); // Afas Drop
					AddThing(9887,(-2912,512,0),0,SKILLS_ALL,MODES_ALL); // Afas Drop
					AddThing(9887,(-2880,512,0),0,SKILLS_ALL,MODES_ALL); // Afas Drop
					
					AddThing(9888,(-2944,480,0),0,SKILLS_ALL,MODES_ALL); // Potentylene
					AddThing(9888,(-2912,480,0),0,SKILLS_ALL,MODES_ALL); // Potentylene
					AddThing(9888,(-2880,480,0),0,SKILLS_ALL,MODES_ALL); // Potentylene
					
					AddThing(15126,(2640,1360,0),0,SKILLS_ALL,MODES_ALL); // Diving Helm
					
					AddThing(13126,(-288,-284,0),0,SKILLS_ALL,MODES_ALL); // Door Bell
					break;
				}
				
				// PSX Doom MAP01
				case 'f84369bc15ccbdb400bd4a0e75a8af9c':
				{
					break;
				}
				
				// Hell Ground MAP07
				case 'dc9933f75206c48826563ee6ba6c069a':
				{
					AddThing(28862,(2200,-14552,0),0,SKILLS_ALL,MODES_ALL); // Fosnian Candle
					AddThing(28862,(2200,-14512,0),0,SKILLS_ALL,MODES_ALL); // Fosnian Candle
					AddThing(28862,(2200,-14472,0),0,SKILLS_ALL,MODES_ALL); // Fosnian Candle
					break;
				}

				case 'c9150d20269e806a8bcf45dde11f5341':
				{
				}
		*/
			}
		}
		/*
		if (gameinfo.gametype & GAME_Hexen)
		{
			// [Hexen] force Mystic Ambit Incants to spawn outside coop [thanks Marisa :V]
			for (uint i = 0; i < GetThingCount(); i++)
			{
				if (GetThingEdNum(i) != 10120 ) continue;
				uint flg = GetThingFlags(i);
				SetThingFlags(i,flg|MTF_SINGLE);
			}
		}
		*/
		
		// Allows monsters flagged for MP to show up in SP if the option is enabled >.>
		if (kc_enablempmonstersinsp)
		{
			uint n = GetThingCount();
			
			for (uint i = 0; i < n; i++)
			{
				if (IsThingMonster(GetThingEdNum(i)))
				{
					SetThingFlags(i, GetThingFlags(i) | MTF_SINGLE);
				}
			}
		}
	}

	// Should be static, but doesn't work due to a bug. See here for details: https://forum.zdoom.org/viewtopic.php?f=2&t=62474
	private /* static */ bool IsThingMonster(int ednum)
	{
		if (gameinfo.gametype & GAME_Doom)
		{
			for (int i = 0; i < DOOM_MONSTER_EDNUMS.Size(); i++)
			{
				if (DOOM_MONSTER_EDNUMS[i] == ednum)
				{
					return true;
				}
			}
		}
		if (gameinfo.gametype & GAME_Heretic)
		{
			for (int i = 0; i < HERETIC_MONSTER_EDNUMS.Size(); i++)
			{
				if (HERETIC_MONSTER_EDNUMS[i] == ednum)
				{
					return true;
				}
			}
		}
		if (gameinfo.gametype & GAME_Hexen)
		{
			for (int i = 0; i < HEXEN_MONSTER_EDNUMS.Size(); i++)
			{
				if (HEXEN_MONSTER_EDNUMS[i] == ednum)
				{
					return true;
				}
			}
		}
		if (gameinfo.gametype & GAME_Strife)
		{
			for (int i = 0; i < STRIFE_MONSTER_EDNUMS.Size(); i++)
			{
				if (STRIFE_MONSTER_EDNUMS[i] == ednum)
				{
					return true;
				}
			}
		}
		
		return false;
	}
}