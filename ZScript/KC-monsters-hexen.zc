// Hexen
class PigNew : KCCreature // replaces Pig
{
	default
	{
		Tag "Pig";
		Health 25;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.5;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosion", 0.5;
		Speed 10;
		Radius 12;
		Height 22;
		Mass 60;
		Monster;
		-COUNTKILL;
		+WINDTHRUST;
		+DONTMORPH;
		SeeSound "PigActive1";
		PainSound "PigPain";
		DeathSound "PigDeath";
		ActiveSound "PigActive1";
	}
	
	States
	{
		Spawn:
			PIGY B 0 NoDelay;
			PIGY B 10 A_Look();
			goto Spawn+1;
		See:
			PIGY A 0;
			PIGY ABCD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0;
			PIGY A 5 A_FaceTarget();
			PIGY A 10 
			{
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[PigAttack](2, 3), "PigAttack");
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			PIGY D 4 A_PigPain();
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			PIGY E 4 A_Scream();
			PIGY F 3 A_NoBlocking();
			PIGY G 4 A_QueueCorpse();
			PIGY H 3;
			PIGY IJK 4; 
			PIGY L -1;
			Stop;
		Ice:
			PIGY M 5 A_FreezeDeath();
			PIGY M 1 A_FreezeDeathChunks();
			Wait;
	}
}

class FireDemonNew : KCCreature // replaces FireDemon
{
	int user_firedemonchase;
	default
	{
		Tag "Afrit";
		Health 80;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Tag "Afrit";
		PainChance 1;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 0;
		DamageFactor "CherryBomb", 0.55;
		Painchance "CherryBomb", 0;
		DamageFactor "Bonk", 1.25;
		Painchance "Bonk", 1;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 2;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 2;
		DamageFactor "Chop", 1.75;
		Painchance "Chop", 2;
		DamageFactor "Breakfast", 0.125;
		Painchance "Breakfast", 0;
		DamageFactor "Suck", 2.50;
		Painchance "Suck", 3;
		DamageFactor "Dust", 0.25;
		Painchance "Dust", 0;
		DamageFactor "BRocket", 2;
		Painchance "BRocket", 2;
		DamageFactor "Popper", 1;
		Painchance "Popper", 1;
		DamageFactor "Spinner", 2;
		Painchance "Spinner", 2;
		DamageFactor "Beats", 1.5;
		Painchance "Beats", 24;
		Speed 13;
		Radius 20;
		Height 68;
		Mass 75;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		+DONTHARMSPECIES;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "$OB_FIREDEMON"; // "%o tasted an Afrit's fire.";
	}
	
	States
	{
		Spawn:
			FDMN X 0 NoDelay;
			FDMN X 5 Bright;
			FDMN EFG 10 Bright A_FloatLook(16);
			Goto Spawn+3;
		See:
			FDMN E 0;
			FDMN E 8 Bright;
			FDMN F 6 Bright;
			FDMN G 5 Bright;
			FDMN F 8 Bright;
			FDMN E 6 Bright;
			FDMN G 7 Bright A_FiredRocks();
			FDMN HI 5 Bright;
			FDMN J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDMN ABC 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FireDChase(32,4,20,13,1,1,3,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FDMN D 0 Bright A_UnSetInvulnerable();
			FDMN D 6 Bright A_KCPain();
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDMN K 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDMN KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonMissileNew",32);
			}
			Goto Chase;
		Crash:
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			FDMN M 5 A_FaceTarget();
			FDMN N 5 A_NoBlocking();
			FDMN O 5 A_FiredSplotch();
			Stop;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FDMN D 4 Bright A_FaceTarget();
			FDMN L 4 Bright A_Scream();
			FDMN L 4 Bright A_NoBlocking();
			FDMN L 200 Bright;
			Stop;
		Ice:
			FDMN R 5 A_FreezeDeath();
			FDMN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDMN L 4;
			FDMN LD 4;
			Goto Chase;
	}
}
class FireDemonLeader : FireDemonNew
{
	default
	{
		Tag "Afrit Leader";
		Health 160;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 7;
		Radius 20;
		Height 56;
		Mass 100;
		Damage 1;
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Leader's fire.";
	}
	
	States
	{
		Spawn:
			FDNL X 0 NoDelay;
			FDNL X 5 Bright;
			FDNL EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNL E 8 Bright;
			FDNL F 6 Bright;
			FDNL G 5 Bright;
			FDNL F 8 Bright;
			FDNL E 6 Bright;
			FDNL G 7 Bright A_FiredRocks();
			FDNL HI 5 Bright;
			FDNL J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNL A 0 Bright A_UnSetInvulnerable();
			FDNL AABBCC 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(40,8,15,10,1,1,3,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_KCPain();
			Goto Chase;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_KCPain();
			FDNL DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			FDNL D 0 Bright A_UnSetInvulnerable();
			FDNL D 3 Bright A_KCPain();
			FDNL DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNL K 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNL KKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonLeaderMissile",32);
			}
			Goto Chase;
		Crash:
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			FDNL M 5 A_FaceTarget();
			FDNL N 5 A_NoBlocking();
			FDNL O 0 
			{
				A_SpawnItemEx("FireDemonLeaderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonLeaderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNL O 5;
			Stop;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FDNL D 4 Bright A_FaceTarget();
			FDNL L 4 Bright A_Scream();
			FDNL L 4 Bright A_NoBlocking();
			FDNL L 200 Bright;
			Stop;
		Ice:
			FDNL R 5 A_FreezeDeath();
			FDNL R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNL L 4;
			FDNL LD 4;
			Goto Chase;
	}
}
class FireDemonLeaderSplotch1 : KCBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNL P 3;
			FDNL P 6 A_QueueCorpse();
			FDNL Y -1;
			Stop;
	}
}
class FireDemonLeaderSplotch2 : FireDemonLeaderSplotch1
{
	States
	{
		Spawn:
			FDNL Q 3;
			FDNL Q 6 A_QueueCorpse();
			FDNL Z -1;
			Stop;
	}
}
class FireDemonCommander : FireDemonNew
{
	default
	{
		Tag "Afrit Commander";
		Health 240;
		ReactionTime 8;
		PainChance 1;
		Painchance "Fist", 32;
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.20;
		DamageFactor "Ice", 5;
		Speed 8; // 7
		Radius 20;
		Height 56;
		Mass 133;
		Damage 1;
		Species "Afrit";
		Monster;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+LOOKALLAROUND;
		MinMissileChance 400;
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Commander's fire.";
	}
	
	States
	{
		Spawn:
			FDNC X 0 NoDelay ;
			FDNC X 5 Bright;
			FDNC EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNC E 8 Bright;
			FDNC F 6 Bright;
			FDNC G 5 Bright;
			FDNC F 8 Bright;
			FDNC E 6 Bright;
			FDNC G 7 Bright A_FiredRocks();
			FDNC HI 5 Bright;
			FDNC J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNC A 0 Bright A_UnSetInvulnerable();
			FDNC AABBCC 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(48,6,18,12,1,1,3,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_KCPain();
			Goto Chase;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_KCPain();
			FDNC DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			FDNC D 0 Bright A_UnSetInvulnerable();
			FDNC D 3 Bright A_KCPain();
			FDNC DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNC K 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNC KKKKKKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonCommanderMissile",32);
			}
			Goto Chase;
		Crash:
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			FDNC M 5 A_FaceTarget();
			FDNC N 5 A_NoBlocking();
			FDNC O 0 
			{
				A_SpawnItemEx("FireDemonCommanderSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonCommanderSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNC O 5;
			Stop;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			FDNC D 4 Bright A_FaceTarget();
			FDNC L 4 Bright A_Scream();
			FDNC L 4 Bright A_NoBlocking();
			FDNC L 200 Bright;
			Stop;
		Ice:
			FDNC R 5 A_FreezeDeath();
			FDNC R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNC L 4;
			FDNC LD 4;
			Goto Chase;
	}
}
class FireDemonCommanderSplotch1 : KCBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			FDNC P 3;
			FDNC P 6 A_QueueCorpse();
			FDNC Y -1;
			Stop;
	}
}
class FireDemonCommanderSplotch2 : FireDemonCommanderSplotch1
{
	States
	{
		Spawn:
			FDNC Q 3;
			FDNC Q 6 A_QueueCorpse();
			FDNC Z -1;
			Stop;
	}
}
class FireDemonQueen : FireDemonNew
{
	default
	{
		Tag "Afrit Queen";
		Health 960;
		ReactionTime 8;
		Speed 8;
		Radius 20;
		Height 56;
		Mass 250;
		Damage 1;
		Painchance "Fist", 16;
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.2;
		DamageFactor "Ice", 2.5;
		Monster;
		+BOSS;
		+DROPOFF;
		+NOGRAVITY;
		+FLOAT;
		+FLOORCLIP;
		+INVULNERABLE;
		+TELESTOMP;
		+NEVERRESPAWN;
		+LOOKALLAROUND;
		+DONTMORPH;
		+NOFEAR;
		+NOPAIN;
		MinMissileChance 400;
		Species "Afrit";
		SeeSound "FireDemonSpawn";
		PainSound "FireDemonPain";
		DeathSound "FireDemonDeath";
		ActiveSound "FireDemonActive";
		Obituary "%o tasted an Afrit Queen's fire.";
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FDNQ X 5 Bright;
			FDNQ EFG 10 Bright A_Look();
			Goto Spawn+3;
		See:
			FDNQ E 8 Bright;
			FDNQ F 6 Bright;
			FDNQ G 5 Bright;
			FDNQ F 8 Bright;
			FDNQ E 6 Bright;
			FDNQ G 7 Bright A_FiredRocks();
			FDNQ HI 5 Bright;
			FDNQ J 5 Bright A_UnSetInvulnerable();
		Chase:
			FDNQ A 0 Bright A_UnSetInvulnerable();
			FDNQ AABBCC 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FireDChase(64,3,36,24,1,1,3,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_KCPain();
			Goto Chase;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_KCPain();
			FDNQ DD 3 Bright;
			Goto Chase;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			FDNQ D 0 Bright A_UnSetInvulnerable();
			FDNQ D 3 Bright A_KCPain();
			FDNQ DDDD 3 Bright;
			Goto Chase;
		Missile:
			TNT1 A 0 A_Jump(48,"Clone");
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNQ K 3 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			FDNQ KKKKKKKKK 4 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");
				A_SpawnProjectile("FireDemonQueenMissile",32);
			}
			Goto Chase;
		Clone:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_KillChildren();
			TNT1 A 0 A_UnSetShootable();
			FDNQ AAAAAAAAA 1 Bright A_FadeOut(0.10);
			FDNQ A 1 Bright
			{
				A_SetTranslucent(0.0);
				A_SpawnItemEx("FireDemonQueenClone",-50,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",50,-100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",100,100,0,0,0,0,0,16);
				A_SpawnItemEx("FireDemonQueenClone",-100,-50,0,0,0,0,0,16);
			}
			FDNQ AAAAAAAAAA 1 Bright A_FadeIn(0.10);
			TNT1 A 0 A_SetShootable();
			Goto Chase;
		Crash:
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0 
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ M 5 A_FaceTarget();
			FDNQ N 5;
			FDNQ O 0
			{
				A_SpawnItemEx("FireDemonQueenSplotch1",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
				A_SpawnItemEx("FireDemonQueenSplotch2",0,0,0,Random(1,2),Random(1,2),Random(3,5),Random(1,360));
			}
			FDNQ O 5;
			Stop;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 A_KillChildren();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ D 0 Bright A_NoBlocking();
			FDNQ D 4 Bright A_FaceTarget();
			FDNQ L 4 Bright A_Scream();
			FDNQ L 4 Bright;
			FDNQ L 200 Bright;
			Stop;
		Ice:
			FDNQ R 5 A_FreezeDeath();
			FDNQ R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			FDNQ L 4;
			FDNQ LD 4;
			Goto Chase; 
	}
}
class FireDemonQueenClone : FireDemonQueen
{
	default
	{
		Tag "Afrit Queen?";
		Health 5;
		+NOBLOOD;
		-COUNTKILL;
		-TELESTOMP;
		-INVULNERABLE;
		-BOSS;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.0;
	}
	
	States
	{
		Spawn:
			FDNQ X 0 NoDelay;
			FNDQ A 0;
			FDNQ AAAAAAA 1 Bright A_FadeIn(0.10);
			Goto Chase;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("Chase");
			TNT1 A 0 A_DynamicMusic();
			FDNQ K 4 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			FDNQ KKK 5 Bright 
			{
				A_CheckIfTargetDead("Chase");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_StartSound("FireDemonAttack");

				A_SpawnProjectile("FireDemonQueenCloneMissile",32);
			}
			Goto Chase;
		Crash:
		XDeath:
		Death:
			FDNQ A 1 Bright A_FadeOut(0.10);
			Loop;
	}
}
class FireDemonQueenSplotch1 : KCBaseZSC
{
	default
	{
		Health 1000;
		ReactionTime 8;
		Radius 3;
		Height 16;
		Mass 100;
		+DROPOFF;
		+CORPSE;
		+NOTELEPORT;
		+FLOORCLIP;
	}
	States
	{
		Spawn:
			FDNQ P 3;
			FDNQ P 6 A_QueueCorpse();
			FDMN Y -1;
			Stop;
	}
}
class FireDemonQueenSplotch2 : FireDemonQueenSplotch1
{
	States
	{
		Spawn:
			FDNQ Q 3;
			FDNQ Q 6 A_QueueCorpse();
			FDMN Z -1;
			Stop;
	}
}
class FireDemonMissileNew : KCProjectile // replaces FireDemonMissile
{
	default
	{
		Tag "Fire Missile";
		Health 1000;
		ReactionTime 8;
		Speed 10;
		Radius 10;
		Height 6;
		Mass 5;
		DamageFunction (1 * random(1,6)); // 1
		DamageType "Fire";
		Projectile;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDMB A 5 Bright;
			Loop;
		Death:
			FDMB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonLeaderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (random(1,2) * random(1,6));
		DamageType "Fire";
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		Projectile;
		+FLOORCLIP;
		+SEEKERMISSILE;
		RenderStyle "Add";
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDLB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonLeaderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDLB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonLeaderTrail1 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		BounceType "Doom";
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FLSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FLSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonLeaderTrail2 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FLFX ABCDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonCommanderMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(1,2) * random(1,6)) + random(3,9));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDCB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonCommanderTrail2",0,0,0,0);
			}
			Loop;
		Death:
			FDCB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonCommanderTrail1 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		BounceType "Doom";
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FCSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FCSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonCommanderTrail2 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FCFX ABCDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonQueenMissile : FireDemonMissileNew
{
	default
	{
		Tag "Fire Missile";
		DamageFunction ((random(2,3) * random(1,6)) + random(1,4));
		Speed 15;
		FastSpeed 20;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenCloneMissile : FireDemonQueenMissile
{
	default
	{
		Tag "Fire Missile";
		DamageFunction (((random(2,3) * random(1,6)) + random(1,4)) / 4);
		Speed 15;
		FastSpeed 20;
		Scale 0.5;
		+NODAMAGETHRUST;
		+FLOORCLIP;
		+SEEKERMISSILE;
		DeathSound "FireDemonMissileHit";
	}
	
	States
	{
		Spawn:
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail1",0,0,Random(-200,200),50,Random(-200,200));
			}
			FDQB A 1 Bright 
			{
				A_SpawnProjectile("FireDemonQueenTrail2",0,0,0,0);
			}
			FDQB A 0 Bright A_SeekerMissile(14,14,SMF_PRECISE);
			Loop;
		Death:
			FDQB BCDE 5 Bright;
			Stop;
	}
}
class FireDemonQueenTrail1 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 1;
		ReactionTime 60;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.75;
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOGRAVITY;
		BounceType "Doom";
		+EXPLODEONWATER;
		-CANBOUNCEWATER;
		-SOLID;
		+DONTSPLASH;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FQSP AB 3 BRIGHT A_FadeOut(0.1);
			Loop;
		Death:
			FQSP CDE 3 BRIGHT;
			Stop;
	}
}
class FireDemonQueenTrail2 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		Scale 1.0;
		PROJECTILE;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+DONTBLAST;
		+NOINTERACTION;
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			NULL A 3 Bright;
			FQFX ABCDE 3 BRIGHT;
			Stop;
	}
}
class EttinNew : KCCreature // replaces Ettin
{
	default
	{
		Tag "Ettin";
		Health 175;
		Radius 25;
		Height 68;
		Mass 175;
		Speed 13;
		Damage 3;
		Painchance 60;
		Painchance "Fist", 90; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 150; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
		Monster;
		MeleeRange 68;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "EttinSight";
		AttackSound "EttinAttack";
		PainSound "EttinPain";
		DeathSound "EttinDeath";
		ActiveSound "EttinActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_ETTIN";
	}
	
	
	States
	{
		Spawn:
			ETTN A 0 NoDelay;
			ETTN AA 10 A_Look();
			goto Spawn+1;
		See:
			ETTN A 0;
			ETTN ABCD 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			ETTN EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ETTN G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[EttinAttack](1,8)*2);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ETTN H 7 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			ETTN H 7 A_KCPain();
			ETTN H 7;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			ETTN H 7 A_KCPain();
			ETTN HH 7;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			ETTN IJ 4;
			ETTN K 4 A_Scream();
			ETTN L 4 A_NoBlocking();
			ETTN M 4 A_QueueCorpse();
			ETTN NOP 4;
			ETTN Q -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			ETTB A 4;
			ETTB B 4 A_NoBlocking();
			ETTB C 4 A_SpawnItemEx("EttinMace", 0, 0, 8.5, random[DropMace](-128, 127)*0.03125, random[DropMace](-128, 127)*0.03125, 10+random[DropMace](0, 255)*0.015625, 0, SXF_ABSOLUTEVELOCITY);
			ETTB D 4 A_Scream();
			ETTB E 4 A_QueueCorpse();
			ETTB FGHIJK 4;
			TNT1 A 0;
			ETTB L -1;
			Stop;
		Ice:
			ETTN R 5 A_FreezeDeath();
			ETTN R 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			ETTN P 4;
			ETTN ONMLKJI 4;
			Goto See;
	}
}
class EttinGhostNew : EttinNew // replaces EttinMash
{
	default
	{
		Tag "Ettin (Ghost)";
		+NOBLOOD;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		PainChance 60;
		DamageFactor "Eldritch", 0.4;
		DamageFactor "Fire", 1.5;
		Painchance "Fire", 90;
	}

	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}
class ThrownMace : KCProjectile
{
	default
	{
		Tag "Thrown Mace";
		DamageFunction ((Random(2,8) * 4));
		Speed 15;
		FastSpeed 20;
		Radius 6;
		Height 8;
		PROJECTILE;
		+NOTELEPORT;
		+NODAMAGETHRUST;
		BounceType "Hexen";
		-NOGRAVITY;
		+WINDTHRUST;
		+THRUGHOST;
		BounceCount 4;
		BounceFactor 1;
		WallBounceFactor 1;
		DeathSound "Fireball";
	}
	
	States
	{
		Spawn:
			AEMC ABCDEFG 3
			{
			}
			AEMC H 3
			{
				A_StartSound("FighterHammerContinuous");
			}
			Loop;
		Death:
			CFCF Q 0 Bright A_SetTranslucent(1,1);
			CFCF Q 1 Bright A_NoGravity();
			CFCF QQQ 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF RRR 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF SSSS 1 Bright A_SpawnItemEx("FlailPuffParticleFXSpawner");
			CFCF T 3 Bright;
			CFCF U 4 Bright;
			CFCF W 3 Bright;
			CFCF X 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}
class FlailPuffParticleFXSpawner : KCBaseZSC
{
	default
	{
		+NoBlockMap;
		+NoGravity;
		+NoSector;
		+NoInteraction;
		+NoClip;
		-Solid;
		+CLIENTSIDEONLY;
	}
	
	states
	{
		Spawn:
		Active:
			TNT1 A 0;
			TNT1 A 0 A_JumpIf(Args[1], "Circle");
			TNT1 A 2;
			TNT1 A 0 A_SpawnItemEx ("FlailPuffParticleFX", random(-1, 1), random(-2, 2), random(-2, 2), (0.1)*Random(-3, 3), (0.5)*Random(-3, 3), (0.4)*Random(-3, 3), 0 , SXF_ABSOLUTEMOMENTUM, Args[2]);
			TNT1 A 0 A_SpawnItemEx ("FlailPuffParticleFX", random(-1, 1), random(-2, 2), random(-2, 2), (0.1)*Random(-3, 3), (0.5)*Random(-3, 3), (0.4)*Random(-3, 3), 0 , SXF_ABSOLUTEMOMENTUM, Args[2]);
			Stop;
		Circle:
			TNT1 A 0;
			TNT1 A 2 A_SpawnItemEx ("FlailPuffParticleFX", random(-Args[0], Args[0]), 0, random(0, 8), (0.1)*Random(1, 3), 0, (0.1)*Random(1, 10), 0 , 129, Args[2]);
			Loop;
		Inactive:
			TNT1 A 1;
			Loop;
	}
}
class FlailPuffParticleFX : KCBaseZSC
{
	default
	{
		+Missile;
		+NoBlockmap;
		+NoInteraction;
		-Solid;
		+CLIENTSIDEONLY;
		Radius 0;
		Height 0;
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.7;
		Gravity 0.25;
	}
	
	States
	{
		Spawn:
			CFCF QQRRSSTTUUVVWWXXZZ 1 Bright A_FadeOut(0.06);
			Stop;
	}
}
// Ettin Commander [ported from Wrath of Cronos]
class EttinCommander : EttinNew
{
	default
	{
		Tag "Ettin Commander";
		Health 275;
		Mass 250;
		Speed 15;
		Damage 4;
		Painchance 35;
		Painchance "Fist", 52; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 87; // Kick attacks have a +150% chance of stunning an enemy
		MeleeRange 68;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Magic", 1.142857143;
		DamageFactor "Zap", 1.142857143;
		Translation "81:96=81:88", "97:121=97:109";
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+NODAMAGETHRUST;
		MissileChanceMult 0.5; //+MISSILEMORE;
		Obituary "%o was smashed by an Ettin Commander.";
	}
	
	States
	{
		Spawn:
			CETN A 0 NoDelay;
			CETN AA 10 A_Look();
			goto Spawn+1;
		See:
			CETN A 0;
			CETN ABCD 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CETN H 7 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			CETN H 7 A_KCPain();
			CETN H 7;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			CETN H 7 A_KCPain();
			CETN HH 7;
			Goto See;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CETN EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				A_CustomComboAttack("ThrownMace",52,(random(2,8)*4));
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
			CETN EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			CETN G 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("FighterHammerMiss");
				A_CustomComboAttack("ThrownMace",52,(random(2,8)*4));
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CETN IJ 4;
			CETN K 4 A_Scream();
			CETN L 4 A_NoBlocking();
			CETN M 4 A_QueueCorpse();
			CETN NO 4;
			CETN P 4;
			CETN Q -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			CETB A 4; //A_SpawnItemEx("GIBBER");
			CETB B 4 A_NoBlocking();
			CETB C 4 A_SpawnItemEx("EttinMace", 0,0,8.5, random[DropMace](-128,127) * 0.03125, random[DropMace](-128,127) * 0.03125, 10 + random[DropMace](0,255) * 0.015625, 0, SXF_ABSOLUTEMOMENTUM);
			CETB D 4 A_Scream();
			CETB E 4 A_QueueCorpse();
			CETB FGHIJ 4;
			CETB K 4;
			ETTB L -1;
			Stop;
		Ice:
			---- E 5 A_GenericFreezeDeath();
			---- E 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CETN P 4;
			CETN ONMLKJI 4;
			Goto See;
	}
}
// Bormereth :V
class Bormereth : KCCreature
{
	default
	{
		Tag "Bormereth";
		Health 1200;
		Radius 30;
		Height 64;
		Speed 10;
		PainChance 75;
		Painchance "Fist", 112; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 187; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 112; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.1875;
		DamageFactor "Explosive", 0.1875;
		DamageFactor "Crush", 0.4;
		Mass 2500;
		BloodColor "Red";
		MeleeRange 68;
		MONSTER ;
		Meleedamage 8;
		MissileChanceMult 0.125;
		//+MISSILEEVENMORE;
		//+MISSILEMORE;
		+FLOORCLIP;
		+BOSS;
		SeeSound "DMage/Attack";
		PainSound "DMage/Pain";
		ActiveSound "DMage/idle";
		DeathSound "DMage/death";
		Obituary "%o was incinerated by the rage of a Bormereth.";
		HitObituary "%o was smashed by a Bormereth.";
	}
	
	States
	{
		Spawn:
			BORM A 0 NoDelay;
			BORM A 10 A_Look();
			Loop;
		See:
			BORM A 0;
			BORM AABBCCDD 4
			{
				user_bormpainreact = 0;
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			BORM A 0;
			TNT1 A 0 A_Jump(60,"Missile2");
			TNT1 A 0 A_Jump(128,"Missile1b");
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			Goto See;

		Missile1b:
			TNT1 A 0 A_Jump(128,"Missile1c");
			BORM E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			BORM F 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",31,10,0);
			}
			BORM G 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",28,5,0);
			}
			BORM G 3 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,0);
			}
			Goto See;

		Missile1c:
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_StartSound("bormereth/missilesimple",CHAN_5);

				A_SpawnProjectile("BormerethFX1",25,0,20);
				A_SpawnProjectile("BormerethFX1",25,0,0);
				A_SpawnProjectile("BormerethFX1",25,0,-20);
			}
			Goto See;
		Missile2:
			BORM F 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			TNT1 A 0 A_StartSound("bormereth/missile2prepare",CHAN_5);
			TNT1 A 0 A_SpawnItemEx("PossEttFakeFireBall",5,25,64,0,0,0,0,128);
			BORM EEEEE 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			BORM E 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			TNT1 A 0 
			{
				A_SpawnProjectile("PossEttFireBall",64,25,0);
			}
			BORM FG 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;
		Melee:
			BORM EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			BORM G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("BormerethFX1",randompick(25,28,31),8*random(1,8));
			}
			BORM E 0 A_CPosRefire();
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 
			{
				if (random(1,256) <= 192)
				{
					user_bormpainreact = 1;
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_KCPain();
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_KCPain();
			BORM HH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			TNT1 A 0 
			{
				if (random(1,256) <= 112)
				{
					if (bormcountercooldown <= 0)
					{
						A_SpawnProjectile("FirePillarStarter",32,0,0);
						A_SpawnProjectile("FirePillarStarter",32,0,45);
						A_SpawnProjectile("FirePillarStarter",32,0,90);
						A_SpawnProjectile("FirePillarStarter",32,0,135);
						A_SpawnProjectile("FirePillarStarter",32,0,180);
						A_SpawnProjectile("FirePillarStarter",32,0,225);
						A_SpawnProjectile("FirePillarStarter",32,0,270);
						A_SpawnProjectile("FirePillarStarter",32,0,315);
						bormcountercooldown = randompick(35,52,70);
					}
					else
					{
						bormcountercooldown -= random(0,3);
						if (bormcountercooldown < 0) { bormcountercooldown = 0; }
					}
				}
			}
			BORM H 2 A_KCPain();
			BORM HHHH 2;
			BORM H 0
			{
				if (user_bormpainreact) { return resolvestate("PainReact"); }
				return resolvestate(null); 
			}
			Goto See;
		PainReact:
			BORM H 2 
			{
				A_SetInvulnerable();
				bCANTSEEK = true;
			}
			BORM HHHHHHHHHH 2;
			BORM H 2 
			{
				user_bormpainreact = 0;
				A_UnSetInvulnerable();
				bCANTSEEK = false;
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BORM I 5;
			BORM J 5 A_Scream();
			BORM K 5 A_NoBlocking();
			BORM L 5 A_Fall();
			BORM MNO 5;
			BORM P 5;
			BORM Q -1;
			Stop;
		XDeath:  //I just like this death too much! :P
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 A_StartSound("misc/gibbed");
			BORB A 5 A_Scream();
			BORB B 5 A_SpawnItemEx("DBigEttinMace", 0, 0, 32, 3, 0, 0, -90, 128);
			BORB C 5 A_NoBlocking();
			BORB D 5 A_Fall();
			BORB EFGHIJ 5;
			BORB K 5;
			BORB L -1;
			Stop;
		Raise:
			BORM Q 5;
			BORM PONMLKJI 5;
			Goto See;
	}
}
class DBigEttinMace : KCProjectile
{
	default
	{
		Tag "Thrown Mace";
		BounceType "Doom";
		Speed 3;
	}
	
	States
	{
		Spawn:
			BORB MNOPQR 5;
			BORB S -1;
			Stop;
	}
}
class BormerethFX1 : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (8 * random(1,8));
		DeathSound "bormereth/missilesimpledeath";
		Scale 0.85;
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}
class PossEttFakeFireBall : WraithFX1New
{
	default
	{
		+NOCLIP;
		DamageFunction (0);
		Speed 0;
		Scale 1.1;
	}
	
	States
	{
		Spawn:
			TNT1 AA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.1);
			WRBL A 1 Bright A_SetTranslucent(0.15);
			WRBL A 1 Bright A_SetTranslucent(0.2);
			TNT1 AAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.25);
			WRBL B 1 Bright A_SetTranslucent(0.3);
			WRBL B 1 Bright A_SetTranslucent(0.35);
			TNT1 AAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.4);
			WRBL C 1 Bright A_SetTranslucent(0.45);
			WRBL C 1 Bright A_SetTranslucent(0.5);
			TNT1 AAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 1 Bright A_SetTranslucent(0.55);
			WRBL A 1 Bright A_SetTranslucent(0.6);
			WRBL A 1 Bright A_SetTranslucent(0.65);
			TNT1 AAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 1 Bright A_SetTranslucent(0.7);
			WRBL B 1 Bright A_SetTranslucent(0.75);
			WRBL B 1 Bright A_SetTranslucent(0.8);
			TNT1 AAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 1 Bright A_SetTranslucent(0.85);
			WRBL C 1 Bright A_SetTranslucent(0.9);
			WRBL C 1 Bright A_SetTranslucent(0.95);
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL A 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL B 3 Bright;
			TNT1 AAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360));
			WRBL C 3 Bright;
			Stop;
	}
}
class PossEttFireBall : WraithFX1New
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (15 * random(1,8));
		Scale 1.1;
		Speed 20;
		+SEEKERMISSILE;
		SeeSound "bormereth/missile2fired";
		DeathSound "bormereth/missile2death";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			WRBL A 1 Bright 
			{
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL AA 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL B 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL BB 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			WRBL C 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
				A_SeekerMissile(5,5);
			}
			WRBL CC 1 Bright 
			{
				A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
				A_SeekerMissile(5,5);
			}
			TNT1 A 0 A_SpawnItemEx("PEFBTrail",0,0,0,0,0,0,0,128);
			Loop;
		Death:
			TNT1 A 0 A_SpawnProjectile("PEFBExplo",0,0,0);
			TNT1 A 0 A_Explode(80,80);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX23",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("WraithFX22",0,0,0,random(-5,5),random(-5,5),random(-5,5),random(1,360),128);
			WRBL DEF 3 Bright;
			WRBL GHI 3;
			Stop;
	}
}
class WraithFX22 : KCProjectile
{
	default
	{
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class WraithFX23 : KCProjectile
{
	default
	{
		Projectile;
		Damage 0;
		Speed 0;
		Radius 1;
		Height 1;
		+RIPPER;
		+BLOODLESSIMPACT;
	}
	
	States
	{
		Spawn:
			WRBL KLKL 2 Bright;
			TNT1 A 0 A_Jump(128,1);
			Loop;
			WRBL MNOP 2 Bright;
			WRBL P 1 Bright A_FadeOut();
			Wait;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class PEFBExplo : KCProjectile
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			FX58 ABCDEFGHIJKLMNOPQ 1 Bright;
			Stop;
	}
}
class PEFBTrail : KCProjectile
{
	default
	{
		Projectile;
		Speed 0;
		Damage 0;
		+NOCLIP;
		RenderStyle "Add";
		Scale 0.4;
		Alpha 0.45;
	}
	
	States
	{
		Spawn:
			FX50 ABCDEFG 1;
			FX50 HIJKLMNOPQR 1;
			Stop;
	}
}
class FirePillarStarter : KCProjectile
{
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 28;
		DamageFunction (0);
		+NOTARGET;
		+RIPPER;
		+BLOODLESSIMPACT;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 3;
			Goto Death;
		Death:
			PLAY A 3 A_SpawnProjectile("FirePillarBase",-20,0,0);
			Stop;
	}
}
class FirePillarBase : KCProjectile
{
	int user_times;
	default
	{
		Tag "Fire Pillar";
		Projectile;
		Speed 0;
		+NOCLIP;
		Damage 0;
		RenderStyle "None";
	}
	
	States
	{
		Spawn:
			PLAY A 2 
			{
				A_SpawnProjectile("FirePillarShot",5,0,0);
			}
			PLAY A 2
			{
				A_SpawnProjectile("FirePillarShot2",5,0,0);
			}
			TNT1 A 0
			{
				user_times++;
				if (user_times >= 5) { return resolvestate("Expire"); }
				return resolvestate(null);
			}
			Loop;
		Expire:
			PLAY A 2 A_SpawnProjectile("FirePillarShot",5,0,0);
			Stop;
	}
}
class FirePillarShot : KCProjectile
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Projectile;
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		Speed 0;
		Radius 4;
		Height 3;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			INFE ABCD 1 Bright 
			{
				ThrustThingZ(0,7,0,1);
			}
			INFE EFGHIJKLMNOPQRST 1 Bright 
			{
			}
			Stop;
	}
}
class FirePillarShot2 : FirePillarShot	//this one wont have light definition
{
	default
	{
		Tag "Fire Pillar";
		DamageFunction (3 * random(1,8));
		Alpha 0.6;
	}
}
class CentaurNew : KCCreature // replaces Centaur
{
	default
	{
		Tag "Centaur";
		Health 200;
		Painchance 135;
		Painchance "Fist", 201; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosion", 0.875;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
		Speed 13;
		Height 64;
		Mass 120;
		MeleeRange 80;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+SHIELDREFLECT;
		SeeSound "CentaurSight";
		AttackSound "CentaurAttack";
		PainSound "CentaurPain";
		DeathSound "CentaurDeath";
		ActiveSound "CentaurActive";
		HowlSound "PuppyBeat";
		Obituary "$OB_CENTAUR";
	}
	
	
	States
	{
		Spawn:
			CENT A 0 NoDelay;
			CENT AB 10 A_Look();
			goto Spawn+1;
		See:
			CENT A 0;
			CENT ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](3, 9));
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 6 A_KCPain();
			Goto ShieldDefend;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 6 A_KCPain();
			CENT GG 6;
			Goto ShieldDefend;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 6 A_KCPain();
			CENT GGGG 6;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_CentaurShieldOn();
				A_FaceTarget();

				if (random(1,128) <= 1) { user_defendtimer += 1; }
				if (random(1,32) <= 1) { user_defendtimer += 1; }
				if (random(1,8) <= 1) { user_defendtimer += 1; }
				user_defendtimer += 1;

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = 3; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = 4; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = 5; }
				else { user_defendtimermax = 6; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_CentaurShieldOn();
				user_defendtimer += 1;

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(17,18); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(16,17); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(15,16); }
				else { user_defendtimermax = 15; }

				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CENT K 4;
			CENT L 4 A_Scream();
			CENT MN 4;
			CENT O 4 A_NoBlocking();
			CENT PQ 4;
			CENT R 4 A_QueueCorpse();
			CENT S 4;
			CENT T -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			CTXD A 4;
			CTXD B 4 A_NoBlocking();
			CTXD C 0 A_SpawnItemEx("CentaurSword", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 270);
			CTXD C 4 
			{
				if (random(1,256) == 1)
				{
					A_SpawnProjectile("EvilWarriorShield",44,-32,90,0);
				}
				else
				{
					A_SpawnItemEx("CentaurShield", 0, 0, 45, 1 + random[CentaurDrop](-128,127)*0.03125,
												1 + random[CentaurDrop](-128,127)*0.03125, 8 + random[CentaurDrop](0,255)*0.015625, 90);
				}
			}
			CTXD D 3 A_Scream();
			CTXD E 4 A_QueueCorpse();
			CTXD F 3;
			CTXD G 4;
			CTXD H 3;
			CTXD I 4;
			CTXD J 3;
			CTXD K -1;
			stop;
		Ice:
			CENT U 5 A_FreezeDeath();
			CENT U 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			CENT T 4;
			CENT SRQPONMLK 4;
			Goto See;
	}
}
class CentaurGhostNew : CentaurNew // replaces CentaurMash
{
	default
	{
		Tag "Centaur (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		DamageFactor "Eldritch", 0.4;
		PainChance 135;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 67;
	}
	
	States
	{
		Death:
		XDeath:
		Ice:
			TNT1 A 3;
			Stop;
	}
}
class SlaughtaurNew : CentaurNew //replaces CentaurLeader
{
	default
	{
		Tag "Slaughtaur";
		Health 325;
		Speed 12.5;
		MeleeRange 80;
		Painchance 84;
		Painchance "Fist", 126; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 210; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;

		DamageFactor "Fire", 0.25;
		Painchance "Fire", 21;
		Translation "81:96=85:92", "97:121=101:113", "0:32=231:235", "33:50=231:235";  // Dark Skin, Obsidian Armor
	}
	
	States
	{
		Melee:
			TNT1 A 0 A_DynamicMusic();
			CENT H 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			CENT I 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			CENT J 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random[CentaurAttack](5, 13));
			}
			Goto See;
		Missile:
			TNT1 A 0 A_DynamicMusic();
		MissilePhase1:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(7,8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(8,9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase2"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase2:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = random(5,6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(6,7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }

				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase3"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase3:
			CENT E 1
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
	
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(7,8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(8,9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(9,10); }
				else { user_defendtimermax = 10; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("MissilePhase4"); }
				return resolvestate(null); 
			}
			Loop;
		MissilePhase4:
			CENT F 1 Bright 
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
				user_defendtimer += 1;
				if (user_defendtimer == 1) 
				{
					A_SpawnProjectile("CentaurFXNew", 45, 0, 0, CMF_AIMOFFSET); 
				}
			
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { user_defendtimermax = random(5,6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(6,7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { user_defendtimermax = random(7,8); }
				else { user_defendtimermax = 8; }
	
				if (user_defendtimer >= user_defendtimermax) 
				{
					A_CentaurShieldOff();
					A_SlaughtaurShieldOff();
					return resolvestate("See"); 
				}
				return resolvestate(null); 
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 5 A_KCPain();
			Goto ShieldDefend;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 5 A_KCPain();
			CENT GG 5;
			Goto ShieldDefend;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			CENT G 5 A_KCPain();
			CENT GGGG 5;
			Goto ShieldDefend;
		ShieldDefend:
			CENT G 1 // A_SetReflectiveInvulnerable()
			{
				A_SlaughtaurShieldOn();
				A_FaceTarget();
	
				if (random(1,32) == 1) { user_defendtimer += 1; }
				if (random(1,8) == 1) { user_defendtimer += 1; }
				user_defendtimer += 1;
	
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(157,158),2,true,self)) { user_defendtimermax = 2; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(105,2,true,self)) { user_defendtimermax = 3; }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(52,53),2,true,self)) { user_defendtimermax = 4; }
				else { user_defendtimermax = 5; }
	
				if (user_defendtimer >= user_defendtimermax) { user_defendtimer = 0; return resolvestate("ShieldBlocking"); }
				return resolvestate(null);
			}
			Loop;
		ShieldBlocking:
			// Defense Cycles
			CENT E 1 // A_CentaurDefend
			{
				A_SlaughtaurShieldOn();
				user_defendtimer += 1;
	
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { user_defendtimermax = random(21,22); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { user_defendtimermax = random(19,20); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { user_defendtimermax = random(18,19); }
				else { user_defendtimermax = 18; }
	
				if (user_defendtimer >= user_defendtimermax)
				{
					user_defendtimer = 0;
					user_defendcycles += 1;
					if (random(1,8) == 1 && A_JumpIfTargetInsideMeleeRange("Melee"))
					{
						A_CentaurShieldOff();
						A_SlaughtaurShieldOff();
						return resolvestate("Melee");
					}
					A_FaceTarget();
				}
				if (user_defendcycles >= 3) { return resolvestate("ShieldEnding"); }
				return resolvestate(null);
			}
			Loop;
		ShieldEnding:
			CENT E 1 // A_UnsetReflectiveInvulnerable
			{
				A_CentaurShieldOff();
				A_SlaughtaurShieldOff();
				A_FaceTarget();
	
				user_paintomissile = 10;
				if (kc_monsterlevelenabledflags) user_paintomissile -= (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.1,true,self));
				if (user_paintomissile < 1) user_paintomissile = 1;
	
				if (random(1,user_paintomissile) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
	}
}
class CentaurFXNew : KCProjectile // replaces CentaurFX
{
	default
	{
		Tag "Shield Blast";
		Speed 20;
		DamageFunction (4 * random(1,8));
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "CentaurLeaderAttack";
		DeathSound "CentaurMissileExplode";
	}
	
	States
	{
		Spawn:
			CTFX A -1 Bright;
			Loop;
		Death:
			CTFX B 4 Bright;
			CTFX C 3 Bright;
			CTFX D 4 Bright;
			CTFX E 3 Bright;
			CTFX F 2 Bright;
			Stop;
	}
}
class GreenChaosSerpentNew : KCCreature // replaces Demon1
{
	const ChunkFlags = SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY;
	default
	{
		Tag "Chaos Serpent [Green]";
		Health 250;
		meleerange 82;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		Speed 13;
		Radius 32;
		Height 64;
		ProjectilePassHeight 104;
		Mass 220;
		Monster;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		+TELESTOMP;
		+FLOORCLIP;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "$OB_DEMON1";
	}
	
	States
	{
		Spawn:
			DEMN A 0 NoDelay;
			DEMN AA 10 A_Look();
			goto Spawn+1;
		See:
			DEMN ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DEMN E 4;
			DEMN E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DEMN E 4;
			DEMN E 4 A_KCPain();
			DEMN EE 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DEMN E 4;
			DEMN E 4 A_KCPain();
			DEMN EEEE 4;
			Goto See;
		Melee:
			DEMN E 0 A_DynamicMusic();
			DEMN E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN F 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEMN G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEMN E 0 A_DynamicMusic();
			DEMN E 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMN F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN G 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon1FX1New", 62, 0);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DEMN HI 6;
			DEMN J 6 A_Scream();
			DEMN K 6 A_NoBlocking();
			DEMN L 6 A_QueueCorpse();
			DEMN MNO 6;
			DEMN P -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DEMN H 6;
			DEMN I 6 
			{
				A_SpawnItemEx("Demon1Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEMN O 6;
			DEMN NMLKJIH 6;
			Goto See;
	}
}
class Demon1FX1New : KCProjectile // replaces Demon1FX1
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 15;
		Radius 10;
		Height 6;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			DMFX AABBCC 2 Bright;
			Loop;
		Death:
			DMFX DE 4 Bright;
			DMFX FGH 3 Bright;
			Stop;
	}
}
class GreenChaosSerpentGhostNew : GreenChaosSerpentNew // replaces Demon1Mash
{
	default
	{
		Tag "Chaos Serpent [Green] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
	}
}
class BrownChaosSerpentNew : GreenChaosSerpentNew // replaces Demon2
{
	default
	{
		Tag "Chaos Serpent [Brown]";
		Painchance "Poison", 33;
		DamageFactor "Poison", 0.67;
		Painchance "PoisonElemental", 10;
		DamageFactor "PoisonElemental", 0.2;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 56;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
	}
	
	States
	{
		Spawn:
			DEM2 A 0 NoDelay;
			DEM2 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM2 ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			DEM2 EE 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			DEM2 EEEE 4;
			Goto See;
		Melee:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 F 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM2 G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM2 F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon2FX1New", 62, 0);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DEM2 HI 6;
			DEM2 J 6 A_Scream();
			DEM2 K 6 A_NoBlocking();
			DEM2 L 6 A_QueueCorpse();
			DEM2 MNO 6;
			DEM2 P -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DEM2 H 6;
			DEM2 I 6 
			{
				A_SpawnItemEx("Demon2Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEM2 O 6;
			DEM2 NMLKJIH 6;
			Goto See;
	}
}
class Demon2FX1New : KCEffectProjectile // replaces Demon2FX1
{
	default
	{
		Tag "Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		Speed 15;
		Radius 10;
		Height 6;
		DamageType "Poison";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D2FX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
}
class BrownChaosSerpentGhostNew : BrownChaosSerpentNew // replaces Demon2Mash
{
	default
	{
		Tag "Chaos Serpent [Brown] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}
class Demon3Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			RDMA A 4;
			RDMA A 10 A_QueueCorpse();
			RDMA A 20;
			Wait;
		Death:
			RDMA A -1;
			Stop;
	}
}
class Demon3Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			RDMB A 4;
			RDMB A 10 A_QueueCorpse();
			RDMB A 20;
			Wait;
		Death:
			RDMB A -1;
			Stop;
	}
}
class Demon3Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			RDMC A 4;
			RDMC A 10 A_QueueCorpse();
			RDMC A 20;
			Wait;
		Death:
			RDMC A -1;
			Stop;
	}
}
class Demon3Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			RDMD A 4;
			RDMD A 10 A_QueueCorpse();
			RDMD A 20;
			Wait;
		Death:
			RDMD A -1;
			Stop;
	}
}
class Demon3Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			RDME A 4;
			RDME A 10 A_QueueCorpse();
			RDME A 20;
			Wait;
		Death:
			RDME A -1;
			Stop;
	}
}
class MagmaChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Magma]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 25;
		DamageFactor "Fire", 0.5;
		Painchance "Ice", 100;
		DamageFactor "Ice", 2.0;
		Mass 330; // 220
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "Orange";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "%o was blasted by a Magma Serpent.";
		HitObituary "%o was swallowed by a Magma Serpent.";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			RDMN A 0 NoDelay;
			RDMN AA 10 A_Look();
			goto Spawn+1;
		See:
			RDMN ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			RDMN E 0 A_DynamicMusic();
			RDMN E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN F 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			RDMN G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			RDMN E 0 A_DynamicMusic();
			RDMN E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			RDMN F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon3FX",62,0,0,0);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			RDMN E 4;
			RDMN E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			RDMN E 4;
			RDMN E 4 A_KCPain();
			RDMN EE 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			RDMN E 4;
			RDMN E 4 A_KCPain();
			RDMN EEEE 4;
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			RDMN HI 6;
			RDMN J 6 A_Scream();
			RDMN K 6 A_NoBlocking();
			RDMN L 6  A_QueueCorpse();
			RDMN MN 6;
			RDMN O 6;
			RDMN P -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			RDMN H 6;
			RDMN I 6 
			{
				A_SpawnItemEx("Demon3Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon3Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon3FX : KCProjectile
{
	default
	{
		Tag "Magmatized Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			RDFX AABBCC 2 Bright 
			{
				A_SpawnItemEx("Demon3FX1Trail");
			}
			Loop;
		Death:
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 A 4 BRIGHT A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 B 4 BRIGHT A_Explode(32,52,0);
			XPL1 CDEF 4 BRIGHT;
			Stop;
	}
}
class Demon3FX1Trail : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Gravity 0;
		Speed 1;
		Scale 1.1;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FBL1 CDEFG 4;
			Stop;
	}
}
class HrVolcanoTBlast : KCProjectile
{
	default
	{
		Tag "Magmatized VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		+NODAMAGETHRUST;
		Gravity 0.825;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		Damagetype "Fire";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT;
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}
// Black Serpent [Demon4]
class Demon4Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			BDMA A 4;
			BDMA A 10 A_QueueCorpse();
			BDMA A 20;
			Wait;
		Death:
			BDMA A -1;
			Stop;
	}
}
class Demon4Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			BDMB A 4;
			BDMB A 10 A_QueueCorpse();
			BDMB A 20;
			Wait;
		Death:
			BDMB A -1;
			Stop;
	}
}
class Demon4Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			BDMC A 4;
			BDMC A 10 A_QueueCorpse();
			BDMC A 20;
			Wait;
		Death:
			BDMC A -1;
			Stop;
	}
}
class Demon4Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			BDMD A 4;
			BDMD A 10 A_QueueCorpse();
			BDMD A 20;
			Wait;
		Death:
			BDMD A -1;
			Stop;
	}
}
class Demon4Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			BDME A 4;
			BDME A 10 A_QueueCorpse();
			BDME A 20;
			Wait;
		Death:
			BDME A -1;
			Stop;
	}
}
class BlackChaosSerpentNew : BrownChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Black]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Mass 330; // 220
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 37 ;
		DamageFactor "Fire", 0.75;
		Painchance "Ice", 75;
		DamageFactor "Ice", 1.5;
		Painchance "Poison", 16;
		DamageFactor "Poison", 0.33;
		Painchance "PoisonElemental", 5;
		DamageFactor "PoisonElemental", 0.1;
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "00 80 00";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was envenomed by a Black Serpent.";
		HitObituary "%o was devoured by a Black Serpent.";
	}

	States
	{
		Spawn:
			DEM4 A 0 NoDelay;
			DEM4 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM4 ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 F 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM4 G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM4 F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon4FX",62,0,0,0);
			}
			Goto See;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			DEM4 EE 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			DEM4 EEEE 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DEM4 HI 6;
			DEM4 J 6 A_Scream();
			DEM4 K 6 A_NoBlocking();
			DEM4 L 6 A_QueueCorpse();
			DEM4 MNO 6;
			DEM4 P -1;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			DEM4 H 6;
			DEM4 I 6 
			{
				A_SpawnItemEx("Demon4Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon4Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon4FX : KCEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		Alpha 0.99;
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D4FX AABB 2 Bright 
			{
				A_SpawnItemEx("BlackDemonTrail", 0, 0, 0, 0, 0, 0, 0, 0);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX C 4 BRIGHT A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX D 4 BRIGHT A_Explode(32,52,0);
			D4FX EFGH 4 BRIGHT;
			Stop;
	}
}
class BlackDemonTrail : KCEffectProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 10;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			D4TR DEFGH 4;
			Stop;
	}
}
class PoisonVolcanoTBlast : KCEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		PoisonDamage 5;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		Gravity 0.825;
		DamageType "Poison";
		DamageType "Fire";
		Obituary "%o was envenomed by a Serpent.";
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			BPBL AABB 2 BRIGHT;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			BPBL EDCDEFG 4 BRIGHT;
			Stop;
	}
}
class EtherealChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Ethereal]";
		Health 1750; // 1400
		Speed 19; // 13
		Radius 32;
		Height 64;
		Mass 550; // 220
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 15; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.15;
		Monster;
		+BOSS;
		+TELESTOMP;
		+FLOORCLIP;
		+NODAMAGETHRUST;
		+NOBLOOD;
		+NOICEDEATH;
		+GHOST;
		+DONTMORPH;
		RenderStyle "Add";
		meleerange 82;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was blasted by a Spectral Chaos Serpent.";
	}
	
	States
	{
		Spawn:
			DEM5 A 0 NoDelay;
			DEM5 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM5 ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 F 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM5 G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(4,5) * random(2,9));
			}
			Goto See;
		Missile:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM5 F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 G 0 
			{
				if (A_JumpIfCloser(512,"Missile2") && random(1,256) <= 208) 
				{
					user_shotsfired = 0;
					user_shotsfiredmax = 10 + (random(1,256) & 2) + (CountInv("MonsterLevel") / 15) + (CountInv("MonsterLevel") / 30) + (CountInv("MonsterLevel") / 60);		
					return resolvestate("Missile2"); 
				}
				return resolvestate(null);
			}
			DEM5 G 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("Demon5FX1", 62, 0, -10);
				A_SpawnProjectile("Demon5FX1", 62, 0, 0);
				A_SpawnProjectile("Demon5FX1", 62, 0, 10);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("Demon5FX1", 62, 0, -20);
					A_SpawnProjectile("Demon5FX1", 62, 0, 20);
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
					{
						A_SpawnProjectile("Demon5FX1", 62, 0, -30);
						A_SpawnProjectile("Demon5FX1", 62, 0, 30);
					}
				}
			}
			Goto See;
		Missile2:
			DEM5 E 0 A_DynamicMusic();
			DEM5 G 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }

				A_SpawnProjectile("Demon5Jet", 62, 0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self))
				{
					A_SpawnProjectile("Demon5Jet", 62, 0, -4);
					A_SpawnProjectile("Demon5Jet", 62, 0, 4);
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self))
					{
						A_SpawnProjectile("Demon5Jet", 62, 0, -8);
						A_SpawnProjectile("Demon5Jet", 62, 0, 8);
					}
				}

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			DEM5 EE 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			DEM5 EEEE 4;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			---- H 0 A_NoBlocking();
			---- H 2 A_FadeOut();
			Wait;
		XDeath:
			Goto Death;
		Ice:
			Goto Death;
	}
}
class Demon5FX1 : KCEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D5FX AABBCCDDEEFF 2 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(30);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5FX G 4 Bright A_Explode(32,52,0);
			D5FX HIJ 4 Bright;
			D5FX KL 3 Bright;
			Stop;
	}
}
class Demon5Jet : KCEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (random(1,4));
		Radius 14;
		Height 12;
		Speed 16;
		PROJECTILE;
		ProjectileKickback 0;
		//+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 0.5;
		SeeSound "DemonMissileFire";
		DeathSound "FireBall";
		//DamageType "ManaDrain";
	}
	States
	{
		Spawn:
			D5JT AABBCC 2 BRIGHT
			{
				A_Weave(1, 2, 0.25, 0.5);
				A_FadeOut(0.034);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(90);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5JT DEFG 2 BRIGHT;
			Stop;
	}
}
class IceGuyNew : KCCreature // replaces IceGuy
{
	default
	{
		Tag "Wendigo";
		Health 120;
		Painchance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 0.01;
		Painchance "Ice", 1;
		Speed 14;
		Radius 22;
		Height 75;
		Mass 150;
		DamageType "Ice";
		Monster;
		+NOBLOOD;
		+TELESTOMP;
		+NOICEDEATH;
		SeeSound "IceGuySight";
		AttackSound "IceGuyAttack";
		ActiveSound "IceGuyActive";
		Obituary "$OB_ICEGUY"; // "%o was frozen solid by a Wendigo.";
	}
	
	States
	{
		Spawn:
			ICEY A 0 NoDelay;
			ICEY A 10 A_IceGuyLook();
			goto Spawn+1;
		See:
			ICEY A 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY B 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_IceGuyChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY CD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ICEY A 1 A_KCPain();
			Goto See;
		Missile:
			ICEY E 0 A_DynamicMusic(); 
			ICEY EF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			ICEY G 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }

				A_IceGuyAttack("IceGuyFXNew");
			}
			ICEY F 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			ICEY A 1;
			ICEY A 1 A_IceGuyDie();
			Stop;
		Inactive:
			ICEY A -1;
			Goto See;
	}
}
class IceGuyFXNew : KCEffectProjectile // replaces IceGuyFX
{
	default
	{
		Tag "Spiked Ice Ball";
		DamageFunction (1 * random(1,8));
		Speed 14;
		Radius 8;
		Height 10;
		DamageType "Ice";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "IceGuyMissileExplode";
	}
	
	States
	{
		Spawn:
			ICPR ABC 3 Bright 
			{
				A_SpawnItemEx("IceFXPuff", 0, 0, 2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(70,105),401);
					}
				}
			}
		Death2:
			ICPR D 4 Bright;
			ICPR E 4 Bright A_IceGuyMissileExplode();
			ICPR FG 4 Bright;
			ICPR H 3 Bright;
			Stop;
	}
}
class IceGuyFX2New : KCEffectProjectile // replaces IceGuyFX2
{
	default
	{
		Tag "Spiked Ice Shard";
		DamageFunction (1 * random(1,8));
		Speed 10;
		Radius 4;
		Height 4;
		DamageType "Ice";
		Gravity 0.125;
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+STRIFEDAMAGE;
	}
	
	States
	{
		Spawn:
			ICPR NOP 3 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(32);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			TNT1 A 0 Bright;
			Stop;
	}
}
class StalkerNew : KCCreature // replaces Serpent
{
	default
	{
		Tag "Stalker";
		Health 90;
		Painchance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 192;
		DamageFactor "Ice", 0.75;
		Painchance "Ice", 72;
		Meleerange 72;
		Speed 12;
		Radius 32;
		Height 70;
		Mass 160000;
		Monster;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		SeeSound "SerpentSight";
		AttackSound "SerpentAttack";
		PainSound "SerpentPain";
		DeathSound "SerpentDeath";
		HitObituary "$OB_SERPENTHIT"; // "%o was mauled by a Stalker.";
	}
	
	States
	{
		Spawn:
			SSPT H 0 NoDelay; 
			SSPT H 10 A_Look();
			goto Spawn+1;
		See:
			SSPT HH 1 
			{
				A_KCChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			SSPT H 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SSPT L 5;
			SSPT L 5 A_KCPain();
			Goto Dive;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SSPT L 5;
			SSPT L 5 A_KCPain();
			SSPT L 5;
			Goto Dive;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SSPT L 5;
			SSPT L 5 A_KCPain();
			SSPT LLLLL 5;
			Goto Dive;
		Dive:
			SSDV ABC 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			SSDV D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			SSDV E 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			SSDV F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSDV GH 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			SSDV I 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSDV J 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			SSPT A 0 A_DynamicMusic();
			SSPT A 1 A_UnHideThing();
			SSPT A 1 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(0); }
				A_StartSound("SerpentBirth",CHAN_VOICE);
			}
			SSPT B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			SSPT C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSPT D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			SSPT O 4;
			SSPT P 4 A_Scream();
			SSPT Q 4 A_NoBlocking();
			SSPT RSTUVWXYZ 4;
			Stop;
		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			SSXD A 4;
			SSXD B 4 A_SpawnItemEx("SerpentHead", 0, 0, 45);
			SSXD C 4 A_NoBlocking();
			SSXD DE 4;
			SSXD FG 3;
			SSXD H 3 A_SerpentSpawnGibs();
			Stop;
		Ice:
			SSPT [ 5 A_FreezeDeath();
			SSPT [ 1 A_FreezeDeathChunks();
			Wait;
		Walk:
			SSPT IJI 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_KCChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			SSPT J 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			SSPT H 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentUnHide();
			}
			SSPT EFGEF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentRaiseHump();
			}
			SSPT GEF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			SSPT GEFGE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentLowerHump();
			}
			SSPT F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			SSPT K 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			SSPT L 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			SSPT N 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(5*random(1,8));
				if (random (1,256) < 96) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}
class StalkerLeaderNew : StalkerNew // replaces SerpentLeader
{
	default
	{
		Tag "Alpha Stalker";
		Health 120;
		Meleerange 72;
		Translation "51:66=51:58", "186:202=186:194", "233:239=235:239", "33:50=33:41", "0:32=0:16";
		PainChance 96;
		DamageFactor "Fire", 1.75;
		Painchance "Fire", 168;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 84;
	}
	
	States
	{
		Missile:
			SSPT N 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }

				A_SpawnProjectile("SerpentFXNew", 32, 0);
			}
			Goto Dive;
	}
}
class SerpentFXNew : KCProjectile // replaces SerpentFX
{
	default
	{
		Tag "Sizzling Slime";
		DamageFunction (4 * random(1,8));
		Speed 15;
		Radius 8;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "SerpentFXHit";
	}
	
	States
	{
		Spawn:
			SSFX A 0;
			SSFX A 3 Bright
			{
				A_StartSound("SerpentFXContinuous",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
			}
			SSFX BAB 3 Bright
			{
			}
			Goto Spawn+1;
		Death:
			SSFX C 4 Bright A_StopSound(CHAN_BODY);
			SSFX DEFGH 4 Bright;
			Stop;
	}
}
class IceStalker : StalkerNew
{
	default
	{
		Tag "Ice Stalker";
		Health 180;
		Speed 10;
		Monster;
		Meleerange 72;
		damagetype "Ice";
		DamageFactor "Ice", 0.05;
		DamageFactor "Fire", 2.5;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		+NOICEDEATH;
		+NODAMAGETHRUST;
		Obituary "%o caught a chill from an ice stalker.";
		HitObituary "%o caught a chill from an ice stalker.";
	}
	
	States
	{
		Spawn:
			ISPT A 0 NoDelay;
			ISPT H 10 A_Look();
			goto Spawn+1;
		See:
			ISPT HH 1 
			{
				A_KCChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			ISPT H 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			Goto Dive;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			ISPT L 5;
			Goto Dive;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			ISPT LLLLL 5;
			Goto Dive;
		Dive:
			ISDV ABC 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			ISDV E 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			ISDV F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV GH 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV I 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV J 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			ISPT A 1 A_UnHideThing();
			ISPT A 1 A_StartSound("SerpentBirth",CHAN_VOICE);
			ISPT B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			ISPT C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Death:
		XDeath:
		Ice:
			#### # 0 A_TimeFreezeCheckDeath();
			ISPT [ 1;
			ISPT [ 1 A_IceGuyDie();
			Stop;
		Walk:
			ISPT IJI 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_KCChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			ISPT J 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			ISPT H 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentUnHide();
			}
			ISPT EFGEF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentRaiseHump();
			}
			ISPT GEF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT GEFGE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentLowerHump();
			}
			ISPT F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			ISPT K 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ISPT L 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			ISPT N 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(15,30));
				if (random(1,8) <= 3) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}
class IceStalkerLeader : StalkerLeaderNew
{
	default
	{
		Tag "Alpha Ice Stalker";
		Health 240;
		Speed 10;
		Monster;
		Meleerange 72;
		damagetype "Ice";
		DamageFactor "Ice", 0.05;
		DamageFactor "Fire", 2.5;
		-SHOOTABLE;
		+NOBLOOD;
		+CANTLEAVEFLOORPIC;
		+NONSHOOTABLE;
		+STAYMORPHED;
		+DONTBLAST;
		+NOTELEOTHER;
		+INVISIBLE;
		+NOICEDEATH;
		+NODAMAGETHRUST;
		Obituary "%o caught a chill from an ice stalker.";
		HitObituary "%o caught a chill from an ice stalker.";
		Translation "51:66=51:66", "186:202=186:202", "233:239=233:239", "33:50=33:50", "0:32=0:32", "67:80=67:74";  // Neutralizes the Translation from the Stalker Leader [for now]
	}
	
	States
	{
		Spawn:
			ISPT A 0 NoDelay;
			ISPT H 10 A_Look();
			goto Spawn+1;
		See:
			ISPT HH 1 
			{
				A_KCChase("Melee", "None", CHF_NIGHTMAREFAST|CHF_NOPLAYACTIVE,1,3,1,1);
			}
			ISPT H 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SerpentHumpDecide();
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			Goto Dive;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			ISPT L 5;
			Goto Dive;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			ISPT L 5;
			ISPT L 5 A_KCPain();
			ISPT LLLLL 5;
			Goto Dive;
		Dive:
			ISDV ABC 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_UnSetShootable();
			}
			ISDV E 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("SerpentActive",CHAN_BODY);
			}
			ISDV F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV GH 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
			}
			ISDV I 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISDV J 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SerpentHide();
			}
			Goto See;
		Melee:
			ISPT A 1 A_UnHideThing();
			ISPT A 1 A_StartSound("SerpentBirth",CHAN_VOICE);
			ISPT B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_SetShootable();
			}
			ISPT C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
			}
			ISPT D 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Missile:
			ISPT N 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("IceGuyFXNew", 32, 10, 0, 1);
				A_SpawnProjectile("IceGuyFXNew", 32, -10, 0, 1);
			}
			Goto Dive;
		Death:
		XDeath:
		Ice:
			#### # 0 A_TimeFreezeCheckDeath();
			ISPT [ 1;
			ISPT [ 1 A_IceGuyDie();
			Stop;
		Walk:
			ISPT IJI 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }
				A_KCChase("Attack", "None", CHF_NIGHTMAREFAST,1,3,1,1);
			}
			ISPT J 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }
				A_SerpentCheckForAttack();
			}
			Goto Dive;
		Hump:
			ISPT H 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentUnHide();
			}
			ISPT EFGEF 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentRaiseHump();
			}
			ISPT GEF 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
			}
			ISPT GEFGE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentLowerHump();
			}
			ISPT F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				A_SerpentHide();
			}
			Goto See;
		Attack:
			ISPT K 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			ISPT L 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_SerpentChooseAttack();
			}
			Goto MeleeAttack;
		MeleeAttack:
			ISPT N 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(15,30));
				if (random(1,8) <= 3) { A_SerpentCheckForAttack(); }
			}
			Goto Dive;
	}
}
class EtherealBloodPurple : KCBaseZSC
{
	default
	{
		+NOCLIP;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+CLIENTSIDEONLY;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1
			{
				if (GetCVar("kc_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodPurpleParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodPurpleParticle : KCBaseZSC
{
	default
	{
		Height 0;
		Radius 0;
		Mass 0;
		+MISSILE;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.045;
		Gravity 0.25;
	}
	
	States
	{
		Spawn:
			EBLD A 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class EtherealBloodGreen : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("kc_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodGreenParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodGreenParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD B 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class EtherealBloodRed : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				if (GetCVar("kc_gfxeffectlevel") <= 0)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") <= 1)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
				if (GetCVar("kc_gfxeffectlevel") == 2)
				{
					A_SpawnItemEx("EtherealBloodRedParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
				}
			}
			Stop;
	}
}
class EtherealBloodRedParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class BishopNew : KCCreature // replaces Bishop
{
	default
	{
		Tag "Dark Bishop";
		Health 130;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 100;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 55;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 220;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		+NOTARGETSWITCH;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "$OB_BISHOP";
		Bloodtype "EtherealBloodGreen";
		-NOBLOOD;
		Species "Bishop";
	}
	
	States
	{
		Spawn:
			BISH A 0 NoDelay;
			BISH A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			BISH A 0;
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase();
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			BISH B 2
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			BISH A 1 
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				A_BishopDecide();
			}
			Loop;
		Blur:
			BISH A 2 A_BishopDoBlur(3,3,11.0);
			BISH A 4 A_BishopSpawnBlur(96);
			Wait;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			BISH C 6 A_FloatPain(0,8,64);
			BISH CC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			BISH C 6 A_FloatPain(0,8,64);
			BISH CCCC 6;
			BISH CCC 6 A_BishopPainBlur(64);
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			BISH ADE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			BISH F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_BishopAttack(4*random(1,8), (random(1,256) & 3) + 5 + (CountInv("MonsterLevel") / 15));
			}
			BISH F 5 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_BishopAttack2("BishopFXNew");
			}
			Wait;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			BISH G 6;
			BISH H 6 Bright A_Scream();
			BISH I 5 Bright A_NoBlocking();
			BISH J 5 Bright A_Explode(random[BishopBoom](25, 40));
			BISH K 5 Bright;
			BISH LM 4 Bright;
			BISH N 4 A_SpawnItemEx("BishopPuff", 0, 0, 40, 0, 0, 0.5);
			BISH O 4 A_QueueCorpse();
			BISH P -1;
			Stop;
		Ice:
			BISH X 5 A_FreezeDeath();
			BISH X 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			BISH O 4;
			BISH NML 4;
			BISH KJI 5;
			BISH HG 6;
			Goto See;
	}
}
class BishopFXNew : KCProjectile
{
	Default
	{
		Tag "Green Star";
		Radius 10;
		Height 6;
		Speed 10;
		Damage 1;
		Projectile;
		+SEEKERMISSILE
		-ACTIVATEIMPACT -ACTIVATEPCROSS
		+STRIFEDAMAGE +ZDOOMTRANS
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
	}
	States
	{
		Spawn:
			BPFX ABAB 1 Bright A_BishopMissileWeave();
			BPFX B 0 Bright A_SeekerMissile(2,3);
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}
class BishopFXNew2 : BishopFXNew // replaces BishopFX
{
	default
	{
		Tag "Green Star";
		DamageFunction (random(2,6) + random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		Projectile;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+STRIFEDAMAGE;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
	}
	
	States
	{
		Spawn:
			BPFX ABAB 1 Bright 
			{
				A_Weave(2, 2, 2.0, 1.0);
			}
			BPFX B 0 Bright 
			{
				A_SeekerMissile(2, 3);
			}
			Loop;
		Death:
			BPFX CDEF 4 Bright;
			BPFX GH 3 Bright;
			Stop;
	}
}
class DarkDisciple : BishopNew
{
	default
	{
		Tag "Dark Disciple";
		Health 220;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 140;
		PainChance 110;
		Painchance "Fist", 165; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+TELESTOMP;
		+DONTOVERLAP;
		-NOTARGETSWITCH;
		+NODAMAGETHRUST;
		-NOBLOOD;
		Species "Bishop";
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o succumbed to a Disciple's dark power.";
		Bloodtype "EtherealBloodPurple";
	}
	
	States
	{
		Spawn:
			HDIS A 0 NoDelay;
			HDIS A 10 A_FloatLook(12);
			goto Spawn+1;
		See:
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS A 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			HDIS B 2
			{
				A_FloatChaseCheck(3,6,9,12,0.625,0.625);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			Loop;

		Blur:
			HDIS A 0 { bGHOST = true; }
			HDIS A 0 A_SetTranslucent(0.8,0);
			HDIS A 2 A_BishopDoBlur(3,3,14.0);
			HDIS AAA 4 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			HDIS AA 4 A_SpawnItem("DiscipleBlur");
			HDIS A 0 { bGHOST = false; }
			HDIS A 0 A_SetTranslucent(1,0);
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("DiscipleBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			HDIS A 0
			{
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS C 6 A_FloatPain(0,6,80);
			HDIS CCCC 6;
			HDIS CCC 6
			{
				if (random(1,4) == 1) { return resolvestate("Blur"); }
				A_SpawnItemEx("DisciplePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
				return resolvestate(null);
			}
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HDIS ADE 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			HDIS F 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_BishopAttack(5*random(1,8));
				user_shotsfired = 0;
				user_shotsfiredmax = (random(1,256) & 3) + 5 + (CountInv("MonsterLevel") / 12.5);
				A_StartSound("BishopAttack");
			}
		MissileLoop:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			HDIS F 5 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(2); }

				A_SpawnProjectile("DiscipleSpreadFX",32,0,-60,1);
				A_SpawnProjectile("DiscipleSpreadFX",32,0,60,1);
				A_SpawnProjectile("DiscipleFX",32);
				user_shotsfired += 1;
			}
			HDIS F 0 
			{
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			HDIS A 0
			{ 
				bGHOST = false;
				A_SetTranslucent(1,0);
			}
			HDIS G 6;
			HDIS H 6 Bright A_Scream();
			HDIS I 5 Bright A_NoBlocking();
			HDIS J 5 Bright A_Explode(random(40, 65),128,1);
			HDIS K 5 Bright;
			HDIS LM 4 Bright;
			HDIS N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			HDIS O 4 A_QueueCorpse();
			HDIS P -1;
			Stop;
		Ice:
			HDIS C 5 A_GenericFreezeDeath();
			HDIS C 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			HDIS ON 5;
			HDIS MLKJIH 5 Bright;
			HDIS G 5;
			Goto See;
	}
}
class DiscipleFX : KCProjectile
{
	default
	{
		Tag "Disciple's Star";
		DamageFunction (random(1,4) * random(1,4));
		Radius 10;
		Height 6;
		Speed 10;
		FastSpeed 15;
		Projectile;
		+NODAMAGETHRUST;
		+SEEKERMISSILE;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "BishopMissileExplode";
		DamageType "Magic";
	}
	
	States
	{
		Spawn:
			HDFX ABAB 1 Bright 
			{
				A_BishopMissileWeave();
			}
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DiscipleSpreadFX : DiscipleFX
{
	States
	{
		Spawn:
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX A 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX B 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,9,SMF_PRECISE);
			HDFX ABAB 1 Bright A_BishopMissileWeave();
			TNT1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Goto Spawn+16;
		Death:
			HDFX CDEF 4 Bright;
			HDFX GH 3 Bright;
			Stop;
	}
}
class DisciplePainBlur : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS C 8;
			Stop;
	}
}
class DiscipleBlur : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			HDIS A 16;
			HDIS A 8 A_SetTranslucent(0.4);
			Stop;
	}
}
// Vampire [Bishop Variant]
class VampireKC : BishopNew
{ 
	default
	{
		Tag "Vampire";
		Health 450;
		PainChance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Species "Bishop";
		Speed 8;
		Scale 0.90;
		Radius 20;
		Height 56; 
		Mass 200;
		SeeSound "vampire/see";
		DeathSound "vampire/death";
		PainSound "vampire/pain";
		Bloodtype "EtherealBloodRed";
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		-NOGRAVITY;
		-FLOAT;
		Obituary "A Vampire drained all of %o's life.";
	}
	
	States 
	{
		Spawn: 
			VAM1 A 0 NoDelay;
			VAM1 AB 10 A_FloatLook(8);
			goto Spawn+1;
		See:
			VAM1 A 0;
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 A 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			VAM1 B 2
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopChase(1,1,3,1);
			}
			VAM1 A 1
			{
				A_BishopDecide();
				A_FloatChaseCheck(2,4,6,8,0.75,0.75);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_BishopDecide();
			}
			Loop;

		Blur:
			VAM1 A 2 A_BishopDoBlur(3,3,17.0);
			VAM1 AAA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(256,1,2,3);
			VAM1 AA 4 A_SpawnItem("VampireBlur");
			TNT1 A 0 Thing_Stop(0);
			TNT1 A 0 A_SpawnItem("VampireBlur");
			TNT1 A 0 A_Jump(97,"Missile");
			Goto See;

		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 X 0 Bright A_Jump(96,"Missile2");
			VAM1 X 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 9 + (random(1,256) & 3) + (CountInv("MonsterLevel") / 22.5);
			}
		BatAttack:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 Bright 
			{
				A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);

				A_SpawnProjectile("BatAttack",Random(8,64),random(-32,32),random(20,-20),1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("BatEnd"); }
				return resolvestate(null);
			}
			Loop;
		BatEnd:
			VAM1 Y 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
			}
			Goto See;

		Missile2:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 E 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotsfiredmax = 42 + (random(1,256) & 14) + (CountInv("MonsterLevel") / A_CheckMonsterLevelDiv(10,true,self));
			}
			VAM1 AAAAAAAAAAAAAA 0 A_SpawnDebris("VampireBloodBoom",1);
		BeamLoop: // 56
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			VAM1 F 1 Bright 
			{
				A_SpawnProjectile("VampireRoundBeam",32,0,0,1);

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			VAM1 C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			VAM1 C 6 A_FloatPain(0,4,96);
			VAM1 CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			VAM1 C 6 A_SpawnItemEX("VampirePainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			VAM1 G 1 Bright;
			VAM1 G 8 Bright A_Scream(); 
			VAM1 H 5 Bright;
			VAM1 I 5 Bright A_NoBlocking();
			TNT1 AAAAAAAAAAAAAA 0 A_SpawnItemEx("VampCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			TNT1 A 0 A_Jump(128,3);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),1);
			TNT1 A 0 A_Jump(256,2);
			TNT1 A 0 A_SpawnItemEx("BatAttack", 0, 0, 30, random(-8, 8), random(-8, 8),-1);
			VAM1 J 5 Bright;
			VAM1 KLM 5 Bright;
			VAM1 N 5;
			VAM1 O 5;
			VAM1 P -1;
			Stop;
		Ice:
			VAM1 C 5 A_GenericFreezeDeath();
			VAM1 C 1 A_FreezeDeathChunks();
			Wait;
		Raise: 
			VAM1 P 5;
			VAM1 ONMLKJIHG 5;
			Goto See;
	}
}
class VampireRoundBeam : KCProjectile
{
	default
	{
		Tag "Vampiric Blood Beam";
		DamageFunction (random(1,5));
		Radius 2;
		Height 4;
		Speed 10;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			VAM2 A 0 Bright 
			{
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
				A_StartSound("vampire/beam");
			}
			VAM2 AAAA 1 Bright 
			{
				A_CStaffMissileSlither();
				A_SpawnItemEx("VampireRoundBeamTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop;
		Death:
			VAM2 CDEFGH 3 Bright;
			Stop;
	}
}
class VampireRoundBeamTrail : KCProjectile
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		ALPHA 0.67;
		Scale 0.50;
		PROJECTILE;
		+THRUGHOST;
		+FLOATBOB;
		SeeSound "monster/acosht";
		DeathSound "monster/acohit";
	}
	
	States
	{
		Spawn:
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 2 Bright;
			VAM2 A 0 Bright;
			Goto Death;
		Death:
			VAM2 A 1 Bright A_SetTranslucent(0.60);
			VAM2 A 1 Bright A_SetTranslucent(0.50);
			VAM2 A 1 Bright A_SetTranslucent(0.40);
			VAM2 A 1 Bright A_SetTranslucent(0.30);
			VAM2 A 1 Bright A_SetTranslucent(0.20);
			VAM2 A 1 Bright A_SetTranslucent(0.10);
			VAM2 A 1 Bright A_SetTranslucent(0.00);
			Stop;
	}
}
class BatAttack : KCProjectile
{
	default
	{
		Tag "Bat Familiar";
		DamageFunction (3 * random(1,8));
		Radius 8;
		Height 16;
		Speed 12;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
		SeeSound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC 3 BRIGHT
			{
				A_SpawnItemEx("BatTrail");
			}
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}
class BatTrail : KCProjectile
{
	default
	{
		Radius 8;
		Height 16;
		RenderStyle "Add";
		Alpha 0.8;
		Scale 0.3;
		PROJECTILE;
		+RANDOMIZE;
		+NOGRAVITY;
		+FLOAT;
	}
	
	states
	{
		Spawn:
			VAM5 ABCDEFGHI 3 BRIGHT;
			Goto Death;
		Death:
			VAM5 I 1;
			Stop;
	}
}

class BatAttackSafe : KCProjectile
{
	default
	{
		Radius 8;
		Height 16;
		Speed 15;
		DamageFunction (0);
		PROJECTILE;
		+Randomize;
		+NoGravity;
		+Float;
		seesound "vampire/bats";
	}
	
	states
	{
		Spawn:
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			VAM4 ABCABCABCABC 3 BRIGHT A_SpawnItemEx("BatTrail");
			Goto Death;
		Death:
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.9);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.8);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.7);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.6);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.5);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.4);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 A 2 A_SetTranslucent(0.3);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 B 2 A_SetTranslucent(0.2);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			VAM4 C 2 A_SetTranslucent(0.1);
			TNT1 A 0 A_SpawnItemEx("BatCloudSpawner", 0, 0, 30, 0, 0, 0, 0, 128);
			Stop;
	}
}
class VampirePainBlur : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 C 8;
			Stop;
	}
}
class VampireBlur : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+CLIENTSIDEONLY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			VAM1 A 16;
			VAM1 A 8 A_SetTranslucent(0.4);
			Stop;
	}
}
class VampireBloodBoom : KCBaseZSC
{
	default
	{
		scale 0.75;
		health 1;
		radius 8;
		height 1;
		mass 1;
		+CORPSE;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1 ;
			VAB1 A 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 A 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 B 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 B 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 C 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 C 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			VAB1 D 1 A_SpawnItemEx("VampireBloodTrail",0,0,0,1,0,0,0,128);
			VAB1 D 1;
			Loop;
		Crash:
			TNT1 A 1 A_SpawnItemEx("VampireBloodSpot",0,0,0,1,0,0,0,128);
			Stop;
	}
}
class VampireBloodSpot : KCBaseZSC
{
	default
	{
		radius 12;
		height 2;
		mass 1;
		+NOTELEPORT;
		-NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_StartSound("vampireblood");
			TNT1 A 0 A_Jump(64,4);
			TNT1 A 0 A_Jump(128,4);
			TNT1 A 0 A_Jump(192,4);
			TNT1 A 0 A_Jump(255,4);
			VAB3 A 750;
			Stop;
			VAB3 B 750;
			Stop;
			VAB3 C 750;
			Stop;
			VAB3 D 750;
			Stop;
	}
}
class VampireBloodTrail : KCBaseZSC
{
	default
	{
		scale 0.70;
		mass 1;
		Gravity 0.125;
		+NOTELEPORT;
		+NOBLOCKMAP;
	}
	
	states
	{
		Spawn:
			VAB2 A 4;
			VAB2 B 4;
			VAB2 C 4;
			VAB2 D 4;
			Stop;
	}
}
class VampCloudSpawner : KCBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("VampCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}
class VampCloud : KCBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.5;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.05);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.05);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.05);
			Goto Spawn+12;
	}
}
class BatCloudSpawner : KCBaseZSC
{
	default
	{
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 A_SpawnItemEx("BatCloud", 0, 0, 0, random(-2, 2), random(-2, 2), random(-1, 1));
			Stop;
	}
}
class BatCloud : KCBaseZSC
{
	default
	{
		RenderStyle "Translucent";
		alpha 0.9;
		Scale 0.2;
		radius 0;
		height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+NOLIFTDROP;
		+NOTARGET;
		+DONTSQUASH;
		+NOTELEOTHER;
		+NONSHOOTABLE;
	}
	
	States
	{
		Spawn:
			VAM6 A 0;
			VAM6 A 0 A_Jump(128, 6);
			VAM6 ABCDE 3 A_FadeOut(0.10);
			Goto Spawn+1;
			VAM6 F 0 A_Jump(128, 6);
			VAM6 FGHIJ 3 A_FadeOut(0.10);
			Goto Spawn+7;
			VAM6 KLMNO 3 A_FadeOut(0.10);
			Goto Spawn+12;
	}
}
class EtherealBloodWhite : EtherealBloodPurple
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
			TNT1 AAAA 0 A_SpawnItemEx("EtherealBloodWhiteParticle", 0, 0, 0, Random(1, 5), 0, Random(0, 3), Random(0, 360), 0);
			TNT1 A 1;
			Stop;
	}
}
class EtherealBloodWhiteParticle : EtherealBloodPurpleParticle
{
	States
	{
		Spawn:
			EBLD F 1 Bright A_FadeOut(0.02);
			Loop;
	}
}
class DarkPatriarch : BishopNew
{
	default
	{
		Health 1000;
		Radius 22;
		Height 65;
		Speed 10;
		Mass 250;
		PainChance 0;
		Species "Bishop";
		Monster;
		+FLOAT;
		+NOTARGET;
		+NOGRAVITY;
		-NOTARGETSWITCH;
		+TELESTOMP;
		-NOBLOOD;
		+NOPAIN;
		-DONTOVERLAP;
		+DONTMORPH;
		+NOFEAR;
		SeeSound "BishopSight";
		AttackSound "BishopAttack";
		PainSound "BishopPain";
		DeathSound "BishopDeath";
		ActiveSound "BishopActiveSounds";
		Obituary "%o was judged by the Dark Patriarch.";
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch";
		+USEKILLSCRIPTS;
		
		DropItem "ArtiSuperHealth", 64;
		DropItem "ArtiInvulnerability2", 64;
		Dropitem "ArtiDarkServant", 64;
		Dropitem "ArtiBoostMana", 64;
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 0 
			{
				//A_RadiusGive("PatriarchRadiusHeal", 256, RGF_MONSTERS, 1);
			}
			DPTR A 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR A 0 A_UnsetShootable();
			DPTR AAA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItemEx("PatriarchBlur");
			DPTR A 0 A_SetShootable();
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItemEx("PatriarchBlur");
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			DPTR A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			TNT1 A 0 A_Jump(256,1,2,3,4);
			DPTR FFFFFFFF 5 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();

				A_SpawnProjectile("PatriarchFX",32);
			}
			Goto See;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DPTR C 6 A_FloatPain(0,4,96);
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DPTR C 6 A_FloatPain(0,4,96);
			DPTR CCCC 6;
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			TNT1 A 0 A_Jump(64,"Blur");
			DPTR C 6 A_SpawnItemEx("PatriarchPainBlur",Random(-10,10),Random(-10,10),Random(-10,10));
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DPTR G 6 A_KillChildren();
			DPTR H 6 Bright A_Scream();
			DPTR I 5 Bright A_NoBlocking();
			DPTR J 5 Bright A_Explode(frandom(50,80),128,XF_NOTMISSILE);
			DPTR K 5 Bright;
			DPTR LM 4 Bright;
			DPTR N 4 A_SpawnItemEx("BishopPuff", 0,0,40, 0,0,0.5);
			DPTR O 4 A_QueueCorpse();
			DPTR P -1;
			Stop;
		Ice:
			DPTR C 5 A_GenericFreezeDeath();
			DPTR C 1 A_FreezeDeathChunks();
			Wait;
	}
}
class PatriarchPainBlur : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR C 2 A_SetTranslucent(0.6);
			DPTR C 2 A_SetTranslucent(0.45);
			DPTR C 2 A_SetTranslucent(0.3);
			DPTR C 2 A_SetTranslucent(0.15);
			Stop;
	}
}
class PatriarchBlur : KCBaseZSC
{
	default
	{
		PROJECTILE;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NOCLIP;
		+PAINLESS;
		RenderStyle "Translucent";
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			DPTR A 8 A_SetTranslucent(0.6);
			DPTR A 8 A_SetTranslucent(0.5);
			DPTR A 8 A_SetTranslucent(0.4);
			DPTR A 0 A_SpawnItemEx("DarkPatriarchClone", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER, 250);
			Stop;
	}
}
class DarkPatriarchClone : DarkPatriarch
{
	default
	{
		Health 100;
		Mass 125;
		DamageType "Spiritual";
		Bloodtype "EtherealBloodWhite";
		Tag "Dark Patriarch Clone";
		+USEKILLSCRIPTS;
		+NOICEDEATH;
		+DONTFALL;
		+GHOST;
		RenderStyle "Translucent";
		Alpha 0.6;
		
		DropItem "None";
	}
	
	States
	{
		Spawn:
			DPTR A 10 A_Look();
			Loop;
		See:
			DPTR A 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR A 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopChase(1,1,3,1);
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			DPTR B 2 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(150,2,true,self)) { A_SetTics(1); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { bAVOIDMELEE = true; }
				A_BishopDecide();
				A_BishopChase(1,1,3,1);
			}
			DPTR A 0 A_BishopDecide();
			Loop;
		Blur:
			DPTR A 0 A_FaceTarget();
			DPTR A 2 A_BishopDoBlur(3,3,17.0);
			DPTR AAA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 A_Jump(256,1,2,3);
			DPTR AA 4 A_SpawnItem("PatriarchBlurClone");
			DPTR A 0 Thing_Stop(0);
			DPTR A 0 A_SpawnItem("PatriarchBlurClone");
			Goto See;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_DynamicMusic();
			DPTR A 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR DE 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			DPTR F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(180,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				A_StartSound("BishopAttack");
			}
			DPTR FFF 5 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
				
				A_SpawnProjectile("PatriarchFX",32);
			}
			Goto See;
		Death:
			---- A 3 A_FadeOut(0.1);
			Wait;
	}
}
class PatriarchRadiusHeal : CustomInventoryExt
{
	default
	{
		Inventory.MaxAmount 1;
		+Inventory.AUTOACTIVATE
	}

	override void Tick()
	{
		//Console.Printf("e324");
		let healactor = KCCreature(owner);
		if (healactor)
		{
			if (healactor.health > 0 && healactor.health < healactor.user_MaxHP) { healactor.health += random(10,12); }
		}
		super.Tick();
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}
class PatriarchBlurClone : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			DPTR A 16;
			DPTR A 8 A_SetTranslucent(0.2);
			Stop;
	}
}
class PatriarchFX : KCProjectile
{
	default
	{
		Tag "Patriarch Star";
		Radius 10;
		Height 6;
		Speed 15;
		DamageType "Spiritual";
		Projectile;
		+SEEKERMISSILE;
		DamageFunction (frandom(8,28));
		RenderStyle "Add";
		SeeSound "PatriarchMissileFire";
		DeathSound "PatriarchMissileExplode";
	}
	
	States
	{
		Spawn:
			PFX1 CCCC 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 DDDD 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 EEEE 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			PFX1 FFFF 1 Bright A_BishopMissileWeave();
			PFX1 A 0 A_SeekerMissile(2,3,SMF_PRECISE);
			Loop;
		Death:
			PFX1 HHHHH 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 IIIII 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 JJJJ 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 KKKLLLMMM 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			PFX1 GGG 1 Bright A_SpawnItemEx("PatriarchRainFX",frandom(-64,64),frandom(-64,64),-6,frandom(-1,1),frandom(-1,1),-15);
			Stop;
	}
}
class PatriarchFXClone : PatriarchFX
{
	States
	{
		Death:
			PFX1 HHHHH 1 Bright;
			PFX1 IIIII 1 Bright;
			PFX1 JJJJ 1 Bright;
			PFX1 KKKLLLMMM 1 Bright;
			PFX1 GGG 1 Bright;
			Stop;
	}
}
class PatriarchRainFX : KCProjectile
{
	default
	{
		Tag "Patriarch Rain";
		Radius 6;
		Height 12;
		Speed 12;
		DamageFunction (frandom(3,24));
		DamageType "Spiritual";
		Mass 5;
		Projectile;
		-ACTIVATEPCROSS;
		-ACTIVATEIMPACT;
		-NOGRAVITY;
		+SPAWNCEILING;
		+CEILINGHUGGER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			PFX3 A 0;
			PFX3 A 0 { bCEILINGHUGGER = false; }
		Animation:
			PFX3 A -1 Bright;
			Stop;
		Death:
			PFX3 B 0 Bright { bNOGRAVITY = true; }
			PFX3 B 0 Bright A_CheckFloor("NotFloor");
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 GHI 4 Bright;
			Stop;
		NotFloor:
			PFX3 B 0 Bright A_Jump(38, "Disappear");
			PFX3 BCDEF 4 Bright;
			Stop;
		Disappear:
			TNT1 A 1 Bright;
			Stop;
	}
}
class PatriarchShot : KCBaseZSC
{
	default
	{
		Tag "Patriarch Shot";
		Radius 10;
		Height 6;
		Speed 25;
		DamageFunction (frandom(15,30));
		Paintype "ManaDrain";
		DamageType "Spiritual";
		RenderStyle "Add";
		ALPHA 1;
		PROJECTILE;
		BounceType "Doom";
		BounceFactor 1;
		BounceCount 2;
		DeathSound "monster/disht1";
		Decal "WizardScorch";
	}
	
	States
	{
		Spawn:
			PFX1 AAABBB 1 Bright A_SpawnItemEx("DPFX1",  -(Pos.X/1.2), -(Pos.Y/1.2), (Pos.Z/1.2*-1), (Pos.X/1.2), (Pos.Y/1.2), (Pos.Z/1.2), 0, 138);
			Loop;
		Death:
			PFX1 HIJKLM 3 Bright;
			Stop;
	}
}
class DPFX1 : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		Speed 0;
		PROJECTILE;
		+CLIENTSIDEONLY;
		RenderStyle "Add";
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			PFX1 A 1 Bright A_FadeOut(0.1);
			Loop; 
	}
}
class WraithNew : KCCreature // replaces Wraith
{
	default
	{
		Tag "Reiver";
		Health 150;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 63;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 3;
		Speed 11;
		Height 55;
		Mass 75;
		Damage 10;
		Monster;
		+NOGRAVITY;
		+DROPOFF;
		+FLOAT;
		+FLOORCLIP;
		+TELESTOMP;
		SeeSound "WraithSight";
		AttackSound "WraithAttack";
		PainSound "WraithPain";
		DeathSound "WraithDeath";
		ActiveSound "WraithActive";
		HitObituary "$OB_WRAITHHIT"; // "%o had %p life stolen by a Reiver.";
		Obituary "$OB_WRAITH"; // "%o was charred by a Reiver.";
	}
	
	States
	{
		Spawn:
			WRTH A 0 NoDelay;
			WRTH A 10;
			WRTH B 5 A_WraithInit();
			goto Look;
		Look:
			WRTH A 0;
			WRTH AB 15 A_Look();
			Loop;
		See:
			WRTH ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_WraithChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			WRTH A 2;
			WRTH H 6 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			WRTH A 2;
			WRTH H 6 A_KCPain();
			WRTH H 6;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			WRTH A 2;
			WRTH H 6 A_KCPain();
			WRTH HH 6;
			Goto See;
		Melee:
			WRTH E 0 A_DynamicMusic();
			WRTH E 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WRTH F 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_WraithFX3();
			}
			WRTH G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_WraithMelee(random[StealHealth](1,8)*2);
			}
			Goto See;
		Missile:
			WRTH E 0 A_DynamicMusic();
			WRTH EF 6
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
			}
			WRTH G 6 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }

				A_SpawnProjectile("WraithFX1", 32, 0);
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			WRTH I 4;
			WRTH J 4 A_Scream();
			WRTH KL 4;
			WRTH M 4 A_NoBlocking();
			WRTH N 4 A_QueueCorpse();
			WRTH O 4;
			WRTH PQ 5;
			WRTH R -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			WRT2 A 5;
			WRT2 B 5 A_Scream();
			WRT2 CD 5;
			WRT2 E 5 A_NoBlocking();
			WRT2 F 5 A_QueueCorpse();
			WRT2 G 5;
			WRT2 H -1;
			Stop;
		Ice:
			WRT2 I 5 A_FreezeDeath();
			WRT2 I 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			WRT2 Q 5;
			WRT2 P 5;
			WRT2 ONMLKJI 4;
			goto See;
	}
}
class WraithBuriedNew : WraithNew // replaces WraithBuried
{
	default
	{
		Tag "Reiver";
		Height 68;
		-SHOOTABLE;
		-SOLID;
		+DONTMORPH;
		+DONTBLAST;
		+SPECIALFLOORCLIP;
		+STAYMORPHED;
		+INVISIBLE;
		PainChance 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			Goto Look;
		Look:
			WRTH A 0;
			WRTH AB 15 A_Look();
			Loop;
		See:
			WRTH A 2 A_WraithRaiseInit();
			WRTH A 2 A_WraithRaise();
			WRTH A 2 A_FaceTarget();
			WRTH BB 2 A_WraithRaise();
			Goto See+1;
		Chase:
			WRTH ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				A_WraithChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
	}
}
class WraithFX1New : KCProjectile // replaces WraithFX1
{
	default
	{
		Tag "Sizzling Fireball";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 14;
		Radius 10;
		Height 6;
		Mass 5;
		Projectile;
		+FLOORCLIP;
		SeeSound "WraithMissileFire";
		DeathSound "WraithMissileExplode";
	}
	
	States
	{
		Spawn:
			WRBL A 3 Bright
			{
			}
			WRBL B 3 Bright 
			{
				A_WraithFX2();
			}
			WRBL C 3 Bright
			{
			}
			Loop;
		Death:
			WRBL D 4 Bright;
			WRBL E 4 Bright A_WraithFX2();
			WRBL F 4 Bright;
			WRBL GH 3 Bright A_WraithFX2();
			WRBL I 3 Bright;
			Stop;
	}
}
class DragonNew : KCCreature // replaces Dragon
{
	default
	{
		Tag "Death Wyvern";
		Health 2560; //10240;
		Mass 51200;
		PainChance 16; // 8 times less than before
		Painchance "Fist", 24; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 40; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.5;
		Painchance "Fire", 40;
		DamageFactor "Ice", 0.125;
		Painchance "Ice", 2;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 10;
		Height 65;
		Monster;
		+NOGRAVITY;
		+FLOAT;
		+NOBLOOD;
		+BOSS;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+AVOIDMELEE;
		+NODAMAGETHRUST;
		SeeSound "DragonSight";
		AttackSound "DragonAttack";
		PainSound "DragonPain";
		DeathSound "DragonDeath";
		ActiveSound "DragonActive";
		Obituary "$OB_DRAGON";
	}
	
	States
	{
		Spawn:
			DRAG A 0 NoDelay;
			DRAG D 10 A_Look();
			goto Spawn+1;
		See:
			DRAG A 0;
			DRAG CB 5;
			DRAG A 5 A_DragonInitFlight();
			DRAG B 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_DragonFlap(4.0,8.0,10*random(1,8), "DragonFireball");
			}
			DRAG BCCDDCCBBAA 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }

				A_DragonFlight(4.0,8.0,10*random(1,8), "DragonFireball");
			}
			Goto See+4;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			DRAG F 10 A_DragonPain();
			Goto See+4;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			DRAG F 10 A_DragonPain();
			DRAG F 5;
			Goto See+4;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			DRAG F 10 A_DragonPain();
			DRAG F 15;
			Goto See+4;
		Missile:
			DRAG E 8 Fast
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(135,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(67,68),2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(7); }
				
				A_DragonAttack("DragonFireball");
			}
			Goto See+4;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			DRAG G 5 A_Scream();
			DRAG H 4 A_NoBlocking();
			DRAG I 4;
			DRAG J 4 A_DragonCheckCrash();
			Wait;
		Crash:
			DRAG KL 5;
			DRAG M -1;
			Stop;
	}
}
class DragonFireballNew : KCProjectile // replaces DragonFireball
{
	default
	{
		Tag "Wyvern Clusterblast";
		DamageFunction (6 * random(1,8));
		Speed 24;
		Radius 12;
		Height 10;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
		DeathSound "DragonFireballExplode";
	}
	
	States
	{
		Spawn:
			DRFX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			DRFX GHI 4 Bright;
			DRFX J 4 Bright
			{
				A_DragonFX2("DragonExplosion");
			}
			DRFX KL 3 Bright;
			Stop;
  }
}
class DragonExplosionNew : KCProjectile // replaces DragonExplosion
{
	default
	{
		Tag "Wyvern Clusterblast";
		Radius 8;
		Height 8;
		DamageType "Fire";
		+NOBLOCKMAP;
		+NOTELEPORT;
		+INVISIBLE;
		RenderStyle "Add";
		DeathSound "DragonFireballExplode";
	}
	
	States
	{
		Spawn:
			CFCF Q 1 Bright;
			CFCF Q 4 Bright A_UnHideThing();
			CFCF R 3 Bright A_Scream();
			CFCF S 4 Bright;
			CFCF T 3 Bright A_Explode(80, 128, 0);
			CFCF U 4 Bright;
			CFCF V 3 Bright;
			CFCF W 4 Bright;
			CFCF X 3 Bright;
			CFCF Y 4 Bright;
			CFCF Z 3 Bright;
			Stop;
	}
}
class SorcBallBase : KCProjectile
{
	Default
	{
		Tag "Heresiarch Mana Cube";
		Speed 10;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererBigBallExplode";
	}

	double OldAngle, AngleOffset;

	//============================================================================
	//
	// SorcBall::DoFireSpell
	//
	//============================================================================

	virtual void DoFireSpell ()
	{
		CastSorcererSpell ();
		target.args[3] = HeresiarchNew.SORC_STOPPED;
	}

	
	virtual void SorcUpdateBallAngle ()
	{
	}
	
	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// don't blast sorcerer balls
		return false;
	}
	
	//============================================================================
	//
	// ASorcBall::CastSorcererSpell
	//
	// Make noise and change the parent sorcerer's animation
	//
	//============================================================================

	virtual void CastSorcererSpell ()
	{
		target.A_StartSound("SorcererSpellCast", CHAN_VOICE);

		// Put sorcerer into throw spell animation
		if (target.health > 0)
			target.SetStateLabel ("Missile2");
	}

	//============================================================================
	//
	// A_SorcBallOrbit
	//
	// - actor is ball
	//============================================================================

	void A_SorcBallOrbit()
	{
		// [RH] If no parent, then die instead of crashing
		if (target == null || target.health <= 0)
		{
			SetStateLabel ("Pain");
			return;
		}

		int mode = target.args[3];
		HeresiarchNew parent = HeresiarchNew(target);
		double dist = parent.radius - (radius*2);

		double prevangle = OldAngle;
		double baseangle = parent.BallAngle;
		double curangle = baseangle + AngleOffset;

		angle = curangle;

		switch (mode)
		{
		case HeresiarchNew.SORC_NORMAL:			// Balls rotating normally
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_DECELERATE:		// Balls decelerating
			A_DecelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_ACCELERATE:		// Balls accelerating
			A_AccelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_STOPPING:			// Balls stopping
			if ((parent.StopBall == GetClass()) &&
				(parent.args[1] > HeresiarchNew.SORCBALL_SPEED_ROTATIONS) &&
				absangle(curangle, parent.angle) < 42.1875)
			{
				// Can stop now
				target.args[3] = HeresiarchNew.SORC_FIRESPELL;
				target.args[4] = 0;
				// Set angle so self angle == sorcerer angle
				parent.BallAngle = parent.angle - AngleOffset;
			}
			else
			{
				SorcUpdateBallAngle ();
			}
			break;

		case HeresiarchNew.SORC_FIRESPELL:			// Casting spell
			if (parent.StopBall == GetClass())
			{
				// Put sorcerer into special throw spell anim
				if (parent.health > 0)
					parent.SetStateLabel("Missile1");

				DoFireSpell ();
			}
			break;

		case HeresiarchNew.SORC_FIRING_SPELL:
			if (parent.StopBall == GetClass())
			{
				if (special2-- <= 0)
				{
					// Done rapid firing 
					parent.args[3] = HeresiarchNew.SORC_STOPPED;
					// Back to orbit balls
					if (parent.health > 0)
						parent.SetStateLabel("Missile2");
				}
				else
				{
					// Do rapid fire spell
					A_SorcOffense2();
				}
			}
			break;

		default:
			break;
		}

		// The comparison here depends on binary angle semantics and cannot be done in floating point.
		// It also requires very exact conversion that must be done natively.
		if (BAM(curangle) < BAM(prevangle) && (parent.args[4] == HeresiarchNew.SORCBALL_TERMINAL_SPEED))
		{
			parent.args[1]++;			// Bump rotation counter
			// Completed full rotation - make woosh sound
			A_StartSound("SorcererBallWoosh", CHAN_BODY);
		}
		OldAngle = curangle;		// Set previous angle

		Vector3 pos = parent.Vec3Angle(dist, curangle, -parent.Floorclip + parent.Height);
		SetOrigin (pos, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}

	//============================================================================
	//
	// A_SorcOffense2
	//
	// Actor is ball
	//
	//============================================================================

	void A_SorcOffense2()
	{
		Actor parent = target;
		Actor dest = parent.target;

		// [RH] If no enemy, then don't try to shoot.
		if (dest == null)
		{
			return;
		}

		// Heresiarch's Purple Fireballs
		string basemissile4 = "SorcFX4New";

		let parentHeresiarch = HeresiarchNew(parent);

		int index = args[4];
		args[4] = (args[4] + 15) & 255;
		double delta = sin(index * (360 / 256.f)) * HeresiarchNew.SORCFX4_SPREAD_ANGLE;

		double ang1 = Angle + delta;
		Actor mo = parent.SpawnMissileAngle(basemissile4, ang1, 0);
		if (mo)
		{
			mo.special2 = 35*5/2;		// 5 seconds
			double dist = mo.DistanceBySpeed(dest, mo.Speed);
			mo.Vel.Z = (dest.pos.z - mo.pos.z) / dist;
		}
	}

	//============================================================================
	//
	// A_AccelBalls
	//
	// Increase ball orbit speed - actor is ball
	//
	//============================================================================

	void A_AccelBalls()
	{
		HeresiarchNew sorc = HeresiarchNew(target);

		if (sorc.args[4] < sorc.args[2])
		{
			sorc.args[4]++;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
			if (sorc.args[4] >= HeresiarchNew.SORCBALL_TERMINAL_SPEED)
			{
				// Reached terminal velocity - stop balls
				sorc.A_StopBalls();
			}
		}
	}

	//============================================================================
	//
	// A_DecelBalls
	//
	// Decrease ball orbit speed - actor is ball
	//
	//============================================================================

	void A_DecelBalls()
	{
		Actor sorc = target;

		if (sorc.args[4] > sorc.args[2])
		{
			sorc.args[4]--;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
		}
	}


	void A_SorcBallExplode()
	{
		bNoBounceSound = true;
		A_Explode(255, 255);
	}
	
	//============================================================================
	//
	// A_SorcBallPop
	//
	// Ball death - bounce away in a random direction
	//
	//============================================================================

	void A_SorcBallPop()
	{
		A_StartSound("SorcererBallPop", CHAN_BODY, 1, false, ATTN_NONE);
		bNoGravity = false;
		Gravity = 1. / 8;

		Vel.X = ((random[Heresiarch]()%10)-5);
		Vel.Y = ((random[Heresiarch]()%10)-5);
		Vel.Z = (2+(random[Heresiarch]()%3));
		args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;	// Bounce time unit
		args[3] = 5;					// Bounce time in seconds
	}
	
	//============================================================================
	//
	// A_BounceCheck
	//
	//============================================================================

	void A_BounceCheck ()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererBigBallExplode", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
	}
}
// First ball (purple) - fires projectiles ----------------------------------
class SorcBall1Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMP A 5 A_SorcBallPop;
			SBMP B 2 A_BounceCheck;
			Wait;
		Death:
			SBS4 D 5 A_SorcBallExplode;
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL1_ANGLEOFFSET;
	}

	//============================================================================
	//
	// SorcBall1::CastSorcererSpell
	//
	// Offensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{

		Super.CastSorcererSpell ();

		Actor parent = target;

		// Heresiarch's Bouncing Lavaballs
		string basemissile1 = "SorcFX1New";

		let parentHeresiarch = HeresiarchNew(parent);

		double ang1 = Angle + 70;
		double ang2 = Angle - 70;
		Class<Actor> cls = basemissile1;
		Actor mo = parent.SpawnMissileAngle (cls, ang1, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
		mo = parent.SpawnMissileAngle (cls, ang2, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
	}

	
	//============================================================================
	//
	// ASorcBall1::SorcUpdateBallAngle
	//
	// Update angle if first ball
	//============================================================================

	override void SorcUpdateBallAngle ()
	{
		(HeresiarchNew(target)).BallAngle += target.args[4];
	}

	//============================================================================
	//
	// SorcBall1::DoFireSpell
	//
	//============================================================================

	override void DoFireSpell ()
	{
		if (random[Heresiarch]() < 200)
		{
			target.A_StartSound("SorcererSpellCast", CHAN_VOICE, 1, false, ATTN_NONE);
			special2 = HeresiarchNew.SORCFX4_RAPIDFIRE_TIME;
			args[4] = 128;
			target.args[3] = HeresiarchNew.SORC_FIRING_SPELL;
		}
		else
		{
			Super.DoFireSpell ();
		}
	}
}
// Second ball (blue) - generates the shield --------------------------------
class SorcBall2Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMB A 5 A_SorcBallPop;
			SBMB B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL2_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall2::CastSorcererSpell
	//
	// Defensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Super.CastSorcererSpell ();

		Actor parent = target;
		Actor mo = Spawn("SorcFX2", Pos + (0, 0, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT), ALLOW_REPLACE);
		parent.bReflective = true;
		//parent.bInvulnerable = true;
		parent.bNoPain = true;
		parent.bNoBlood = true;
		parent.bBuddha = true;
		A_GiveInventory("HeresiarchShieldDefense",1,AAPTR_TARGET);
		parent.args[0] = HeresiarchNew.SORC_DEFENSE_TIME;
		if (mo) mo.target = parent;
	}
}
// Third ball (green) - summons Bishops -------------------------------------
class SorcBall3Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMG A 5 A_SorcBallPop;
			SBMG B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL3_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall3::CastSorcererSpell
	//
	// Reinforcements
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Actor mo;
		Super.CastSorcererSpell ();
		Actor parent = target;

		double ang1 = Angle - 45;
		double ang2 = Angle + 45;
		Class<Actor> cls = "SorcFX3";

		if (parent.health < ((parent.SpawnHealth() + parent.Stamina) / 4))
		{
			// Spawn 2 at a time
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
			mo = parent.SpawnMissileAngle(cls, ang2, 4.);
			if (mo) mo.target = parent;
		}			
		else
		{
			if (random[Heresiarch]() < 128)	ang1 = ang2;
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
		}
	}
}
// Sorcerer spell 1 (The burning, bouncing head thing) ----------------------
class SorcFX1Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Bouncing Fireface";
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		-NOGRAVITY
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceFactor 1.0;
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}

	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek;
			Loop;
		Death:
			FHFX S 2 Bright A_Explode(30, 128);
			FHFX SS 6 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX1Seek
	//
	// Yellow spell - offense
	//
	//============================================================================

	void A_SorcFX1Seek()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererHeadScream", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
		A_SeekerMissile(2, 6);
	}
	
}
// Sorcerer spell 2 (The visible part of the shield) ------------------------
class SorcFX2Base : KCProjectile
{
	Default
	{
		Speed 15;
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
	}

	states
	{
		Spawn:
			SBS2 A 3 Bright A_SorcFX2Split;
			Loop;
		Orbit:
			SBS2 A 2 Bright;
			SBS2 BCDEFGHIJKLMNOPA 2 Bright A_SorcFX2Orbit;
			Goto Orbit+1;
		Death:
			SBS2 A 10;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX2Split
	//
	// Blue spell - defense
	//
	//============================================================================
	//
	// FX2 Variables
	//		specialf1		current angle
	//		special2
	//		args[0]		0 = CW,  1 = CCW
	//		args[1]		
	//============================================================================

	// Split ball in two
	void A_SorcFX2Split()
	{
		Actor mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 0;									// CW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 1;									// CCW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		Destroy ();
	}

	//============================================================================
	//
	// A_SorcFX2Orbit
	//
	// Orbit FX2 about sorcerer
	//
	//============================================================================

	void A_SorcFX2Orbit ()
	{
		Actor parent = target;

		// [RH] If no parent, then disappear
		if (parent == null)
		{
			Destroy();
			return;
		}

		double dist = parent.radius;

		if ((parent.health <= 0) ||		// Sorcerer is dead
			(!parent.args[0]))				// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bInvulnerable = false;
			parent.bNoPain = false; 
			parent.bNoBlood = false;
			parent.bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_TARGET);
		}

		if (args[0] && (parent.args[0]-- <= 0))		// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bNoPain = false;
			parent.bNoBlood = false;
			parent.bBuddha = false;
		}

		Vector3 posi;
		// Move to new position based on angle
		if (args[0])		// Counter clock-wise
		{
			specialf1 += 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 15 * cos(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}
		else							// Clock wise
		{
			specialf1 -= 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 20 * sin(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}

		SetOrigin (posi, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}
}
// Sorcerer spell 3 (The Bishop spawner) ------------------------------------
class SorcFX3Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Spawn Sphere";
		Speed 15;
		Radius 22;
		Height 65;
		+NOBLOCKMAP
		+MISSILE
		+NOTELEPORT
		SeeSound "SorcererBishopSpawn";
	}

	States
	{
		Spawn:
			SBS3 ABC 2 Bright;
			Loop;
		Death:
			SBS3 A 4 Bright;
			BISH P 4 A_SorcererBishopEntry;
			BISH ON 4;
			BISH MLKJIH 3;
			BISH G 3 A_SpawnBishop;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcererBishopEntry
	//
	//============================================================================

	void A_SorcererBishopEntry()
	{
		Spawn("SorcFX3Explosion", Pos, ALLOW_REPLACE);
		A_StartSound(SeeSound, CHAN_VOICE);
	}

	//============================================================================
	//
	// A_SpawnBishop
	//
	// Green spell - spawn bishops
	//
	//============================================================================

	void A_SpawnBishop()
	{
		Actor mo = Spawn("Bishop", Pos, ALLOW_REPLACE);
		if (mo)
		{
			if (!mo.TestMobjLocation())
			{
				mo.ClearCounters();
				mo.Destroy ();
			}
			else if (target != null)
			{
				// [RH] Make the new bishops inherit the Heriarch's target
				mo.CopyFriendliness (target, true);
				mo.master = target;
			}
		}
		Destroy ();
	}
}
// Sorcerer spell 4 (The purple projectile) ---------------------------------
class SorcFX4Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Magic Missile";
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		DeathSound "SorcererBallExplode";
	}

	States
	{
		Spawn:
			SBS4 ABC 2 Bright A_SorcFX4Check;
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright A_Explode(20, 128);
			SBS4 FGH 2 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX4Check
	//
	// FX4 - rapid fire balls
	//
	//============================================================================

	void A_SorcFX4Check()
	{
		if (special2-- <= 0)
		{
			SetStateLabel ("Death");
		}
	}
}
// Heresiarch
class SorcBall1New : SorcBall1Base // replaces SorcBall1
{
	States
	{
		Death:
			SBS4 D 0 { bNOBOUNCESOUND = true; }
			SBS4 D 5 A_Explode(255, 255);
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}
}
class SorcBall2New : SorcBall2Base // replaces SorcBall2
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcBall3New : SorcBall3Base // replaces SorcBall3
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcFX1New : SorcFX1Base // replaces SorcFX1
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		BounceType "Hexen";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek();
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}
class SorcFX4New : SorcFX4Base // replaces SorcFX4
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}
class HeresiarchNew : KCUniqueBoss // replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBallBase> StopBall;
	int HPLowRange;
	int HPCritRange;
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 12500; // 50000
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3 NoDelay;
			SORC A 0
			{
				HPLowRange = user_HPLowRange;
				HPCritRange = user_HPCritRange;
			}
			SORC A 2 
			{
				A_ShieldCheck();
				A_SorcSpinBalls();
			}
		Idle:
			SORC A 10 
			{
				A_ShieldCheck();
				A_Look();
			}
			Wait;
		See:
			SORC A 0 
			{
				A_ShieldCheck();
			}
			SORC ABCD 5
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = 1; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_ShieldCheck();
				A_Chase();
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC G 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC GG 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			SORC F 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SpeedBalls();
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Wait;
		Missile1:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC E 6 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_ShieldCheck();
			}
			SORC E 6 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(5); }
				A_SpawnFizzle();
				A_ShieldCheck();
			}
			SORC E 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Goto Missile1+1;
		Missile2:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 2 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_ShieldCheck();
			}
			SORC E 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_SorcBossAttack();
				A_ShieldCheck();
			}
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC H 5 Bright
			{
				A_ShieldCheck();
			}
			SORC I 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC J 5 Bright 
			{
				A_ShieldCheck();
				A_Scream();
			}
			SORC KLMNOPQRST 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC U 5 Bright 
			{
				A_ShieldCheck();
				A_NoBlocking();
			}
			SORC VWXY 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_ShieldCheck()
	{
		if (args[0] <= 0)
		{
			bReflective = false; 
			bInvulnerable = false; 
			bNoPain = false; 
			bNoBlood = false; 
			bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_DEFAULT);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2Base";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) / 2)) && (chance < 200))
		{
			StopBall = "SorcBall3Base";	// Green
		}
		else
		{
			StopBall = "SorcBall1Base";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1Base", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}
class ClericBossNew : KCCreature // replaces ClericBoss
{
	default
	{
		Tag "\c[gold]Traductus, Grand Patriarch of the Church";
		Health 3200; // 12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "Ice", 1.8;
		Painchance "Ice", 90;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		Reactiontime 8;
		MaxTargetRange 2048;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerClericPain";
		DeathSound "PlayerClericCrazyDeath";
		Obituary "$OBCBOSS";
	}
	
	States
	{
		Spawn:
			CLER A 0 NoDelay;
			CLER A 2;
			CLER A 3; //A_ClassBossHealth();
			CLER A 5 A_Look();
			goto Spawn+1;
		See:
			CLER ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			CLER H 4;
			CLER H 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			CLER H 4;
			CLER H 4 A_KCPain();
			CLER HH 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			CLER H 4;
			CLER H 4 A_KCPain();
			CLER HHHH 4;
			Goto See;
		Melee:
		Missile:
			CLER E 0 A_DynamicMusic(); 
			CLER EF 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			CLER G 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_ClericAttack("HolyMissile");
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			CLER I 6;
			CLER K 6 A_Scream();
			CLER LL 6;
			CLER M 6 A_NoBlocking();
			CLER NOP 6;
			CLER Q -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			CLER R 5 A_Scream();
			CLER S 5;
			CLER T 5 A_NoBlocking();
			CLER UVWXYZ 5;
			CLER [ -1;
			Stop;
		Ice:
			CLER \ 5 A_FreezeDeath();
			CLER \ 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			#### # 0 A_TimeFreezeCheckDeath();
			CLER C 5 Bright A_StartSound("PlayerClericBurnDeath");
			FDTH D 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class HolyMissileNew : KCProjectile // replaces HolyMissile
{
	default
	{
		Tag "WraithVerge Shot";
		DamageFunction (4 * random(1,8));
		Speed 30;
		Radius 15;
		Height 8;
		Projectile;
		DamageType "Spiritual";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+EXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			SPIR PPPP 3 Bright 
			{
				A_SpawnItemEx("HolyMissilePuff");
			}
		Death:
			SPIR P 1 Bright 
			{
				A_CHolyAttack2("HolySpiritNew",4,105,85);
			}
			Stop;
	}
}
class HolySpiritNew : KCProjectile // replaces HolySpirit
{
	default
	{
		Tag "WraithVerge Spirit";
		DamageFunction (3 * random(1,8));
		Health 105;
		Speed 12;
		Radius 10;
		Height 6;
		Projectile;
		+RIPPER;
		+SEEKERMISSILE;
		+FOILINVUL;
		+SKYEXPLODE;
		+NOEXPLODEFLOOR;
		+CANBLAST;
		+EXTREMEDEATH;
		DamageType "Spiritual";
		RenderStyle "Translucent";
		Alpha 0.4;
		DeathSound "SpiritDie";
		Obituary "$OB_MPCWEAPWRAITHVERGE";
	}
	
	States
	{
		Spawn:
			SPIR AAB 2 A_CHolySeek;
			SPIR B 2 A_CHolyCheckScream;
			Loop;
		Death:
			SPIR D 4;
			SPIR E 4 A_Scream;
			SPIR FGHI 4;
			Stop;
	}
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilBase s2; 
		s2 = DSparilBase(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				if (random(1,1024) <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}
	
	override bool Slam(Actor thing)
	{
		if (thing.bShootable && thing != target)
		{
			if (multiplayer && !deathmatch && thing.player && target.player)
			{
				// don't attack other co-op players
				return true;
			}
			if (thing.bReflective && (thing.player || thing.bBoss))
			{
				tracer = target;
				target = thing;
				return true;
			}
			if (thing.bIsMonster || thing.player)
			{
				tracer = thing;
			}
			if (random[SpiritSlam]() < 96)
			{
				int dam = 12;
				if (thing.player || thing.bBoss)
				{
					dam = 3;
					// ghost burns out faster when attacking players/bosses
					health -= 6;
				}
				
				thing.DamageMobj(self, target, dam, 'Melee');
				if (random[SpiritSlam]() < 128)
				{
					Spawn("HolyPuff", Pos, ALLOW_REPLACE);
					A_StartSound("SpiritAttack", CHAN_WEAPON);
					if (thing.bIsMonster && random[SpiritSlam]() < 128)
					{
						thing.Howl();
					}
				}
			}
			if (thing.health <= 0)
			{
				tracer = null;
			}
		}
		return true;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		if (tracer == source)
		{
			tracer = target;
			target = source;
		}
		return true;
	}

	//============================================================================
	//
	// CHolyFindTarget
	//
	//============================================================================

	private void CHolyFindTarget ()
	{
		Actor target;

		if ( (target = RoughMonsterSearch (6, true)) )
		{
			tracer = target;
			bNoClip = true;
			bSkullFly = true;
			bMissile = false;
		}
	}

	//============================================================================
	//
	// CHolySeekerMissile
	//
	// Similar to P_SeekerMissile, but seeks to a random Z on the target
	//============================================================================

	private void CHolySeekerMissile (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == NULL)
		{
			return;
		}
		if (!target.bShootable || (!target.bIsMonster && !target.player))
		{
			// Target died/target isn't a player or creature
			tracer = null;
			bNoClip = false;
			bSkullFly = false;
			bMissile = true;
			CHolyFindTarget();
			return;
		}
		double ang = deltaangle(angle, AngleTo(target));
		double delta = abs(ang);
		
		if (delta > thresh)
		{
			delta /= 2;
			if (delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if (ang > 0)
		{
			// Turn clockwise
			angle += delta;
		}
		else
		{
			// Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(level.time&15) 
			|| pos.z > target.pos.z + target.height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + ((random[HolySeeker]()*target.Height) / 256.);
			double deltaZ = newZ - pos.z;
			if (abs(deltaZ) > 15)
			{
				if (deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ / DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_CHolySeek
	//
	//============================================================================

	void A_CHolySeek()
	{
		health--;
		if (health <= 0)
		{
			Vel.X /= 4;
			Vel.Y /= 4;
			Vel.Z = 0;
			SetStateLabel ("Death");
			tics -= random[HolySeeker]()&3;
			return;
		}
		if (tracer)
		{
			CHolySeekerMissile (args[0], args[0]*2.);
			if (!((level.time+7)&15))
			{
				args[0] = 5+(random[HolySeeker]()/20);
			}
		}

		int xyspeed = (random[HolySeeker]() % 5);
		int zspeed = (random[HolySeeker]() % 5);
		A_Weave(xyspeed, zspeed, 4., 2.);
	}

	//============================================================================
	//
	// A_CHolyCheckScream
	//
	//============================================================================

	void A_CHolyCheckScream()
	{
		A_CHolySeek();
		if (random[HolyScream]() < 20)
		{
			A_StartSound("SpiritActive", CHAN_VOICE);
		}
		if (!tracer)
		{
			CHolyFindTarget();
		}
	}
}
class FighterBossNew : KCCreature // replaces FighterBoss
{
	default
	{
		Tag "\c[gold]Zedek, Grand Marshal of the Legion";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 20;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Reactiontime 8;
		Meleerange 72;
		MaxTargetRange 2048;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerFighterPain";
		DeathSound "PlayerFighterCrazyDeath";
		Obituary "$OB_FBOSS";
	}
	
	States
	{
		Spawn:
			PLAY A 0 NoDelay;
			PLAY A 2;
			PLAY A 3; //A_ClassBossHealth();
			PLAY A 5 A_Look();
			goto Spawn+1;
		See:
			PLAY ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			PLAY G 4;
			PLAY G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			PLAY G 4;
			PLAY G 4 A_KCPain();
			PLAY GG 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			PLAY G 4;
			PLAY G 4 A_KCPain();
			PLAY GGGG 4;
			Goto See;
		Melee:
		Missile:
			PLAY E 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			PLAY F 8 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FighterAttack("FSwordMissile");
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			PLAY H 6;
			PLAY I 6 A_Scream();
			PLAY JK 6;
			PLAY L 6 A_NoBlocking();
			PLAY M 6;
			PLAY N -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			PLAY O 5 A_Scream();
			PLAY P 5 A_SkullPop();
			PLAY R 5 A_NoBlocking();
			PLAY STUV 5;
			PLAY W -1;
			Stop;
		Ice:
			PLAY X 5 A_FreezeDeath();
			PLAY X 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			#### # 0 A_TimeFreezeCheckDeath();
			FDTH A 5 Bright A_StartSound("PlayerFighterBurnDeath");
			FDTH B 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class FSwordMissileNew : KCProjectile // replaces FSwordMissile
{
	default
	{
		Tag "Quietus Dart";
		DamageFunction (8 * random(1,8));
		Speed 30;
		Radius 16;
		Height 8;
		Projectile;
		+EXTREMEDEATH;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "FighterSwordExplode";
		Obituary "$OB_MPFWEAPQUIETUS";
	}

	States
	{
		Spawn:
			FSFX ABC 3 Bright;
			Loop;
		Death:
			FSFX D 4 Bright;
			FSFX E 3 Bright A_FSwordFlames();
			FSFX F 4 Bright A_Explode(64, 128, 0);
			FSFX G 3 Bright;
			FSFX H 4 Bright;
			FSFX I 3 Bright;
			FSFX J 4 Bright;
			FSFX KLM 3 Bright;
			Stop;
	}
}
class MageBossNew : KCCreature // replaces MageBoss
{
	default
	{
		Tag "\c[gold]Menelkir, Arch Mage of the Arcanum";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 13;
		DamageFactor "Ice", 0.625;
		Painchance "Ice", 31;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Reactiontime 8;
		MaxTargetRange 2048;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerMagePain";
		DeathSound "PlayerMageCrazyDeath";
		Obituary "$OB_MBOSS"; // "%o couldn't absorb Menelkir's Mana.";
	}
	
	States
	{
		Spawn:
			MAGE A 0 NoDelay;
			MAGE A 2;
			MAGE A 3; //A_ClassBossHealth();
			MAGE A 5 A_Look();
			goto Spawn+1;
		See:
			MAGE ABCD 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MAGE G 4;
			MAGE G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			MAGE G 4;
			MAGE G 4 A_KCPain();
			MAGE GG 4;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			MAGE G 4;
			MAGE G 4 A_KCPain();
			MAGE GGGG 4;
			Goto See;
		Melee:
		Missile:
			MAGE E 0 A_DynamicMusic();
			MAGE E 8
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			MAGE F 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_MageAttack("MageStaffFX2New");
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			MAGE H 6;
			MAGE I 6 A_Scream();
			MAGE JK 6;
			MAGE L 6 A_NoBlocking();
			MAGE M 6;
			MAGE N -1;
			Stop;

		XDeath:
			#### # 0 A_TimeFreezeCheckDeath();
			MAGE O 5 A_Scream();
			MAGE P 5;
			MAGE R 5 A_NoBlocking();
			MAGE S 5;
			MAGE T 5;
			MAGE U 5;
			MAGE V 5;
			MAGE W 5;
			MAGE X -1;
			Stop;
		Ice:
			MAGE Y 5 A_FreezeDeath();
			MAGE Y 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			#### # 0 A_TimeFreezeCheckDeath();
			FDTH E 5 Bright A_StartSound("PlayerMageBurnDeath");
			FDTH F 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class MageStaffFX2New : KCProjectile // replaces MageStaffFX2
{
	default
	{
		Tag "Bloodscourge Star";
		Speed 17;
		Height 8;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE
		+SCREENSEEKER
		+EXTREMEDEATH
		DeathSound "MageStaffExplode";
		Obituary "$OB_MPMWEAPBLOODSCOURGE";
	}
	
	States
	{
		Spawn:
			MSP2 ABCD 2 Bright A_MStaffTrack();
			Loop;
		Death:
			MSP2 E 4 Bright A_SetTranslucent(1, 1);
			MSP2 F 5 Bright A_Explode(80, 192, 0);
			MSP2 GH 5 Bright;
			MSP2 I 4 Bright;
			Stop;
	}
	
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int SpecialMissileHit (Actor victim) // MageStaffFX2Base
	{
		if (victim != target && !victim.player && !victim.bBoss)
		{
			int dam = 10;

			victim.DamageMobj (self, target, dam, 'Fire');
			return 1;	// Keep going
		}
		return -1;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// Reflect to originator
		tracer = target;	
		target = source;
		return true;
	}

	//============================================================================
	//
	// A_MStaffTrack
	//
	//============================================================================

	void A_MStaffTrack()
	{
		if (tracer == null && random[MStaffTrack]() < 50)
		{
			tracer = RoughMonsterSearch (10, true);
		}
		A_SeekerMissile(2, 10);
	}
}
class KoraxSpiritNew : KCBaseZSC // replaces KoraxSpirit
{
	Default
	{
		Speed 8;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			SPIR AB 5 A_KSpiritRoam;
			Loop;
		Death:
			SPIR DEFGHI 5;
			Stop;
	}
	
	//============================================================================
	//
	// A_KSpiritSeeker
	//
	//============================================================================

	private void KSpiritSeeker (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == null)
		{
			return;
		}
		double dir = deltaangle(angle, AngleTo(target));
		double delta = abs(dir);
		if (delta > thresh)
		{
			delta /= 2;
			if(delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if(dir > 0)
		{ // Turn clockwise
			angle += delta;
		}
		else
		{ // Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(Level.maptime&15) 
			|| pos.z > target.pos.z + target.Default.Height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + random[KoraxRoam]() * target.Default.Height / 256;
			double deltaZ = newZ - pos.z;

			if (abs(deltaZ) > 15)
			{
				if(deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ + DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_KSpiritRoam
	//
	//============================================================================

	void A_KSpiritRoam()
	{
		if (health-- <= 0)
		{
			A_StartSound("SpiritDie", CHAN_VOICE);
			SetStateLabel ("Death");
		}
		else
		{
			if (tracer)
			{
				KSpiritSeeker(args[0], args[0] * 2.);
			}
			int xyspeed = random[KoraxRoam](0, 4);
			int zspeed = random[KoraxRoam](0, 4);
			A_Weave(xyspeed, zspeed, 4., 2.);

			if (random[KoraxRoam]() < 50)
			{
				A_StartSound("SpiritActive", CHAN_VOICE, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}
class KoraxBoltNew : KCBaseZSC // replaces KoraxBolt
{
	const KORAX_BOLT_HEIGHT		= 48.;
	const KORAX_BOLT_LIFETIME		= 3;
	
	Default
	{
		Radius 15;
		Height 35;
		Projectile;
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltNew");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
	
	//============================================================================
	//
	// A_KBolt
	//
	//============================================================================

	void A_KBolt()
	{
		// Countdown lifetime
		if (special1-- <= 0)
		{
			Destroy ();
		}
	}

	//============================================================================
	//
	// A_KBoltRaise
	//
	//============================================================================

	void A_KBoltRaise(string actorname = "KoraxBoltNew")
	{
		// Spawn a child upward
		double z = pos.z + KORAX_BOLT_HEIGHT;

		if ((z + KORAX_BOLT_HEIGHT) < ceilingz)
		{
			Actor mo = Spawn(actorname, (pos.xy, z), ALLOW_REPLACE);
			if (mo)
			{
				mo.special1 = KORAX_BOLT_LIFETIME;
			}
		}
	}
}
class KoraxBoltHealing : KoraxBoltNew
{
	default
	{
		Translation "217:223=211:216", "32:32=216:216";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltHealing");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
}
class KoraxNew : KCUniqueBoss // replaces Korax
{
	int lulwat;
	int lultimer1, lultimer1max;
	
	// Korax
	const KORAX_ARM_EXTENSION_SHORT = 40;
	const KORAX_ARM_EXTENSION_LONG = 55;
	const KORAX_ARM1_HEIGHT = 108;
	const KORAX_ARM2_HEIGHT = 82;
	const KORAX_ARM3_HEIGHT = 54;
	const KORAX_ARM4_HEIGHT = 104;
	const KORAX_ARM5_HEIGHT = 86;
	const KORAX_ARM6_HEIGHT = 53;
	const KORAX_FIRST_TELEPORT_TID = 248;
	const KORAX_TELEPORT_TID = 249;
	const KORAX_DELTAANGLE = 85;
	const KORAX_COMMAND_HEIGHT = 120;
	const KORAX_COMMAND_OFFSET = 27;
	const KORAX_SPIRIT_LIFETIME = 5*TICRATE/5;	// 5 seconds
	
	int maxhealchance;
	int timeshealed;
	int maxhealsallowed;
	int user_koraxrepeatchance;
	
	default
	{
		Tag "\c[gold]Korax";
		Health 20000; // 80000;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.05;
		Painchance "Fire", 0; // Korax NEVER flinches from Fire
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 5;
		DamageFactor 0.667;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Speed 20;
		Radius 65;
		Height 115;
		Mass 2000;
		Damage 15;
		Monster;
		+BOSS;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+NOFEAR;
		SeeSound "KoraxSight";
		AttackSound "KoraxAttack";
		PainSound "KoraxPain";
		DeathSound "KoraxDeath";
		ActiveSound "KoraxActive";
		Obituary "$OB_KORAX"; // "%o was swept from the board by Korax."
	}
	
	override void PostBeginPlay()
	{
		maxhealchance = 32 + random(-4,4);
		maxhealsallowed = random(4,6);
		Super.PostBeginPlay();
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	//*******
	//*Korax*
	//*******
	//===========================================================================
	// Korax Variables
	//	tracer		last teleport destination
	//	special2	set if "below half" script not yet run
	//
	// Korax Scripts (reserved)
	//	249		Tell scripts that we are below half health
	//	250-254	Control scripts (254 is only used when less than half health)
	//	255		Death script
	//
	// Korax TIDs (reserved)
	//	245		Reserved for Korax himself
	//  248		Initial teleport destination
	//	249		Teleport destination
	//	250-254	For use in respective control scripts
	//	255		For use in death script (spawn spots)
	//===========================================================================
	void A_KoraxStep(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0)
	{
		A_StartSound("KoraxStep"); 
		A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5); 
	}

	void A_KoraxChase()
	{
		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = (SpawnHealth() / 2); 
										else teleporthealth = (User_MaxHP / 2);
		if ((!special2) && (health <= (teleporthealth)))
		{
			ActorIterator it = level.CreateActorIterator(KORAX_FIRST_TELEPORT_TID);
			Actor spot = it.Next ();
			if (spot != null)
			{
				Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
			}
			ACS_Execute(249, 0);
			special2 = 1;	// Don't run again
			return;
		}

		if (target == null)
		{
			return;
		}
		if (random[KoraxChase]() < 30)
		{
			SetState(MissileState);
		}
		else if (random[KoraxChase]() < 30)
		{
			A_StartSound("KoraxActive", CHAN_VOICE, 1, false, ATTN_NONE);
		}

		// Teleport away
		int teleporthealth2;
		if (User_MaxHP <= 0) teleporthealth2 = SpawnHealth() >> 1; else teleporthealth2 = User_MaxHP >> 1;
		if (health < (teleporthealth2))
		{
			if (random[KoraxChase]() < 10)
			{
				ActorIterator it = level.CreateActorIterator(KORAX_TELEPORT_TID);
				Actor spot;

				if (tracer != null)
				{
					// Find the previous teleport destination
					do
					{
						spot = it.Next ();
					} while (spot != null && spot != tracer);
				}

				// Go to the next teleport destination
				spot = it.Next ();
				tracer = spot;
				if (spot)
				{
					Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
				}
			}
		}
	}

	void A_KoraxDecide()
	{
		if (random[KoraxDecide]() < 220)
		{
			SetStateLabel ("Attack");
		}
		else
		{
			SetStateLabel ("Command");
		}
	}

	void A_KoraxBonePop(int numspirits = 6)
	{
		// Spawn (usually 6?) spirits equalangularly
		double spiritangle = 360.0 / numspirits;
		for (int i = 0; i < numspirits; ++i)
		{
			Actor mo = SpawnMissileAngle ("KoraxSpiritNew", spiritangle*i, 5.);
			if (mo)
			{
				KSpiritInit (mo);
			}
		}
		ACS_Execute(255, 0);
	}

	private void KSpiritInit (Actor spirit)
	{
		spirit.health = KORAX_SPIRIT_LIFETIME;

		spirit.tracer = self;						// Swarm around korax
		spirit.WeaveIndexZ = 32 + (random[Kspiritnit]() & 7);	// Float bob index
		spirit.args[0] = 10; 						// initial turn value
		spirit.args[1] = 0; 						// initial look angle

		// Spawn a tail for spirit
		HolyTail.SpawnSpiritTail (spirit);
	}

	void A_KoraxMissile()
	{
		static const class<Actor> choices[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace"
		};
		static const class<Actor> choices2[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace",
			
			"HolyMissileNew",
			"HolyMissileNew",
			"FSwordMissileNew",
			"FSwordMissileNew",
			"MageStaffFX2New",
			"MageStaffFX2New"
		};
		static const sound sounds[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss"
		};
		static const sound sounds2[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss",
			
			"HolyMissilePuff",
			"HolyMissilePuff",
			"FighterSwordFire",
			"FighterSwordFire",
			"MageStaffFire",
			"MageStaffFire"
		};
		int type = random[KoraxMissile]() % 14;
		int type2 = random[KoraxMissile]() % 20;

		A_StartSound("KoraxAttack", CHAN_VOICE);

		// Fire all 6 missiles at once
		A_StartSound(sounds[type], CHAN_WEAPON, 1, false, ATTN_NONE);

		class<Actor> info = choices[type];

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		// Throws out the fireballs form Korax's arms
		//Console.Printf("Korax Volley 1");
		for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(0.0,0.2));
		if (health <= commandhealth)
		{
			if (random(1,256) <= 192)
			{
				//Console.Printf("Korax Volley 2 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 128)
			{
				//Console.Printf("Korax Volley 3 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 64)
			{
				//Console.Printf("Korax Volley 4 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
			if (random(1,256) <= 32)
			{
				//Console.Printf("Korax Volley 5 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(5.6,5.8));
			}
		}
		else
		{
			if (random(1,256) <= 96)
			{
				//Console.Printf("Korax Volley 2");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 48)
			{
				//Console.Printf("Korax Volley 3");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 24)
			{
				//Console.Printf("Korax Volley 4");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
		}
	}

	void KoraxFire (Class<Actor> type, int arm, double angleerror = 0.0)
	{
		static const int extension[] =
		{
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG
		};
		static const int armheight[] =
		{
			KORAX_ARM1_HEIGHT,
			KORAX_ARM2_HEIGHT,
			KORAX_ARM3_HEIGHT,
			KORAX_ARM4_HEIGHT,
			KORAX_ARM5_HEIGHT,
			KORAX_ARM6_HEIGHT
		};

		double angerr2 = frandom(-angleerror,angleerror);
		double ang = angle + (arm < 3 ? -KORAX_DELTAANGLE : KORAX_DELTAANGLE) + angerr2;
		Vector3 pos = Vec3Angle(extension[arm], ang, armheight[arm] - Floorclip);
		SpawnKoraxMissile (pos, target, type, angerr2);
	}

	private void SpawnKoraxMissile (Vector3 pos, Actor dest, Class<Actor> type, double angleerror = 0.0)
	{
		Actor th = Spawn (type, pos, ALLOW_REPLACE);
		if (th != null)
		{
			th.target = self; // Originator
			double an = th.AngleTo(dest);
			if (dest.bShadow)
			{
				// Invisible target
				an += Random2[KoraxMissile]() * (45/256.);
			}
			an += frandom(-angleerror,angleerror);
			//Console.Printf("angle: %8f, angleerror: %8f", an, angleerror);

			th.angle = an;
			th.VelFromAngle();
			double dist = dest.DistanceBySpeed(th, th.Speed);
			th.Vel.Z = (dest.pos.z - pos.Z + 30) / dist;
			th.CheckMissileSpawn(radius);
		}
	}

	void A_KoraxCommand(int firstscriptnum = 250, int lastscriptnum = 254)
	{
		int numcommands;

		A_StartSound("KoraxCommand", CHAN_VOICE);

		// Shoot stream of lightning to ceiling
		double ang = angle - 90;
		Vector3 pos = Vec3Angle(KORAX_COMMAND_OFFSET, ang, KORAX_COMMAND_HEIGHT);

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		int maxhealchance2 = maxhealchance;
		if (health >= (User_MaxHP * 2)) maxhealchance2 *= 256;
		if (health >= (User_MaxHP * 1.5)) maxhealchance2 *= 1.75;
		if (health >= (User_MaxHP * 1.0)) maxhealchance2 *= 1.5;
		if (health <= (User_MaxHP * 0.75)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.5)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.25)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.0625)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.03125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.015625)) maxhealchance2 *= 0.5;
		if (maxhealchance2 < 1) maxhealchance2 = 1;

		//Console.Printf("\cycommandhealth: %d", commandhealth);
		int maxheals = (maxhealsallowed + (skill * 0.625));
		if (timeshealed <= maxheals)
		{
			int healroll = random(1,maxhealchance2);
			//Console.Printf("\cxhealroll: %d / maxhealchance: %d", healroll, maxhealchance2);
			if (healroll <= 1)
			{
				Spawn("KoraxBoltHealing", pos, ALLOW_REPLACE);
				int healamount;
				healamount = user_MaxHP * (frandompick(frandom(0.0375,0.075), frandom(0.10,0.15), frandom(0.20,0.30)) * (1.00 + ((skill * 0.125))));
				int temphealth = health + healamount;
				if (temphealth > (user_MaxHP * 2)) temphealth = (user_MaxHP * 2);
				health = temphealth;
				A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_StartSound("healing_dq",84,CHANF_DEFAULT,1.0,ATTN_NONE);
				//A_PrintHealingMessage(self, healamount);
				int healscale = frandom(1.25,1.75);
				maxhealchance *= (frandompick(1.125,1.25,1.375,1.5,1.625,1.75,1.875) * (1.00 - (skill * 0.0625)));
				//A_UCIIHealSpark(self,"CustomHealSpark",healscale,healscale,"Heal3Glitter",random(12,20),(healscale*5),(healscale*5),(healscale*5));
				timeshealed++;
				//Console.Printf("\czKorax Healed Himself %d Times So Far!", timeshealed);
			}
			else
			{
				Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
				ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
			}
		}
		else
		{
			Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
			ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
		}
	}
	
	States
	{
		Spawn:
			KORX A 0 NoDelay;
			KORX A 5 A_Look();
			goto Spawn+1;
		See:
			KORX A 0;
			KORX AAA 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX B 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX BBB 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX C 0 A_StartSound("KoraxStep");
			KORX C 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX CCC 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX D 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX DDD 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX A 0 A_StartSound("KoraxStep");
			KORX A 3
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			KORX H 5 A_KCPain();
			KORX H 5;
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			KORX H 5 A_KCPain();
			KORX HH 5;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			KORX H 5 A_KCPain();
			KORX HHH 5;
			Goto See;
		Missile:
			KORX E 0 A_DynamicMusic(); 
			KORX E 2 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				A_FaceTarget();
			}
			KORX E 5 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_KoraxDecide();
				A_FaceTarget();
			}
			Wait;
		Attack:
			KORX E 4 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
		AttackLoop:
			KORX F 8 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_KoraxMissile();
				A_FaceTarget();
			}
			KORX E 8 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(7); }
				A_FaceTarget();
			}
			KORX E 0 Bright
			{
				user_koraxrepeatchance = 32 + (CountInv("MonsterLevel") / 2.5);
				if (user_koraxrepeatchance >= 160) { user_koraxrepeatchance = 160; }

				if (random(1,256) <= user_koraxrepeatchance) { return resolvestate("AttackLoop"); }
				return resolvestate(null);
			}
			Goto See;
		Command:
			KORX E 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			KORX W 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX G 15 Bright 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(75,2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(62,63),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(50,2,true,self)) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(37,38),2,true,self)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(25,2,true,self)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(12,13),2,true,self)) { A_SetTics(14); }
				A_FaceTarget();
				A_KoraxCommand();
			}
			KORX W 10 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX E 5 Bright
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			KORX I 5;
			KORX J 5 A_FaceTarget();
			KORX K 5 A_Scream;
			KORX LMNOP 5;
			KORX Q 10;
			KORX R 5 A_KoraxBonePop(randompick(6,6,6,12,12,18));
			KORX S 5 A_NoBlocking();
			KORX TU 5;
			KORX V -1;
			Stop;
	}
}
class MaulotaurFriendBase : MaulotaurBase
{
	int StartTime;

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		StartTime = -1;
	}

	override void Die (Actor source, Actor inflictor, int dmgflags)
	{
		Super.Die (source, inflictor, dmgflags);

		if (tracer && tracer.health > 0 && tracer.player)
		{
			// Search thinker list for minotaur
			ThinkerIterator it = ThinkerIterator.Create("MaulotaurFriendBase");
			MinotaurFriend mo;

			while ((mo = MinotaurFriend(it.Next())) != null)
			{
				if (mo.health <= 0) continue;
				// [RH] Minotaurs can't be morphed, so this isn't needed
				//if (!(mo.flags&MF_COUNTKILL)) continue;		// for morphed minotaurs
				if (mo.bCorpse) continue;
				if (mo.StartTime >= 0 && (level.maptime - StartTime) >= MAULATORTICS) continue;
				if (mo.tracer != null && mo.tracer.player == tracer.player) break;
			}

			if (mo == null)
			{
				Inventory power = tracer.FindInventory("PowerMinotaur");
				if (power != null)
				{
					power.Destroy ();
				}
			}
		}
	}
}
class MaulotaurFriendNew : MaulotaurFriendBase // replaces MinotaurFriend
{
	default
	{
		Tag "Maulotaur";
		Health 2500;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		PainChance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+FLOORCLIP;
		+NORADIUSDMG;
		+NOTARGET;
		+BOSSDEATH;
		-DROPOFF;
		-BOSS;
		-DONTMORPH;
		+FRIENDLY;
		+NOTARGETSWITCH;
		+STAYMORPHED;
		+TELESTOMP;
		+SUMMONEDMONSTER;
		+AVOIDMELEE;
		RenderStyle "Translucent";
		Alpha 0.3333;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "None";
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
//		MNTR A 15;
//		MNTR A 15 A_SetTranslucent(0.66, 0);
//		MNTR A 3 A_SetTranslucent(1, 0);
//		MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(100,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(80,2,true,self)) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(40,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(20,2,true,self)) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(33,34,34,34),2,true,self)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(22,23),2,true,self)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(randompick(11,11,11,12),2,true,self)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / 22.5));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			#### # 0 A_TimeFreezeCheckPain();
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			#### # 0 A_TimeFreezeCheckDeath();
			Goto FadeOut;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			Goto FadeOut;
	}
}
