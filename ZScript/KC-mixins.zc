mixin class StunItems
{
	bool dideffect;
	
	action int A_GetPlayerLvl(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLvl - StunItems mixin)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	void A_StunInduce(int basestun = 5, double lvlfactor = 0.0667, bool checkberserk = true, double bersmult = 1.5, bool destroyitem = false, bool martialarts = false)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvl(1);
		bool surprised;
		if (!dideffect)
		{
			if (owner)
			{
				if (owner.bBOSS)
				{
					bool reducestun = false;
					if (TruePlayerLevel <= 60 && random(1,16) <= 1) reducestun = true;
					else if (TruePlayerLevel <= random(37,38) && random(1,16) <= 5) reducestun = true;
					else if (TruePlayerLevel <= 15 && random(1,16) <= 9) reducestun = true;
					
					if (reducestun) 
					{
						if (TruePlayerLevel <= 60) basestun *= frandompick(0.334,0.5,0.5,0.5,0.667);
						else if (TruePlayerLevel <= 30) basestun *= frandompick(0.167,0.25,0.25,0.25,0.334);
						if (kcdebug_punchkickstundisplays) Console.Printf("[Boss Reduce Stun] basestun: %d ", basestun);
					}
				}
				else
				{
					bool reducestun = false;
					if (TruePlayerLevel <= 60 && random(1,32) <= 1) reducestun = true;
					else if (TruePlayerLevel <= random(37,38) && random(1,32) <= 5) reducestun = true;
					else if (TruePlayerLevel <= 15 && random(1,32) <= 9) reducestun = true;
					
					if (reducestun) 
					{
						if (TruePlayerLevel <= 60) basestun *= frandompick(0.5,0.75,0.75,0.75,1.0);
						else if (TruePlayerLevel <= 30) basestun *= frandompick(0.25,0.375,0.375,0.375,0.5);
						if (kcdebug_punchkickstundisplays) Console.Printf("[Monster Reduce Stun] basestun: %d ", basestun);
					}
				}
				
				basestun += (TruePlayerLevel * lvlfactor);
				if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) basestun *= bersmult;
				if (skill <= 0) basestun *= frandom(1.25,1.375);
				if (skill == 1) basestun *= frandom(1.125,1.25);
				if (skill == 2) basestun *= frandom(0.975,1.025);
				if (skill == 3) basestun *= frandom(0.75,0.875);
				if (skill >= 4) basestun *= frandom(0.625,0.75);
				if (basestun < 1) basestun = 1;
				int tic = owner.tics + basestun;
				if (kcdebug_punchkickstundisplays) Console.Printf("stun tics [%s]: \c[gold]%d\c- (old: %d, basestun: %d)", GetClassName(), tic, owner.tics, basestun);
				owner.A_SetTics(tic);
				dideffect = true;
			}
		}
	}
	
	bool A_PainStateChecker()
	{
		bool isit = false;
		if (
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Bonk")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Breakfast")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Zap")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Chop")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Cricket")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Lead")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Bop")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Beats")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Dust")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.CherryBomb")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.BRocket")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Spinner")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Popper")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Dashing")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Boiling")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Tank")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Suck")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Musak")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.DoomSpell")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Magic")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Holy")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Dark")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Eldritch")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Fire")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Ice")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Plasma")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Thunder")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Electric")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Lightning")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Shock")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Sceptre")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Fist")) || 
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Kick")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.PoisonNeedle")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Deadlight")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Chainsaw")) ||
			owner.InStateSequence(owner.curstate,owner.ResolveState("Pain.Gauntlets"))
			 )
			isit = true;
			
		return isit;
	}
}

mixin class DmgCalc
{
	action int A_GetPlayerLvl(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLvl - DmgCalc mixin)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}

	action int A_GetPunchDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int PlayerATK;
		int PlayerLevel;
		int TruePlayerLevel = A_GetPlayerLvl(1);
		if (MiscItem) 
		{
			PlayerATK = MiscItem.TruePlayerATK + TruePlayerLevel;
			PlayerLevel = TruePlayerLevel;
		}
		
		string weaponname;
		weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		double damage;
		double previousdamage;
		int strengthcounter;
		String nm, nn, no, np;

		// Character Check [base damage]
		damage = random(18,24);
		if (altfire == 1) damage = random(126,148);
		if (kcdebug_meleedmg) Console.Printf("BaseDmg: %.8f [%s, %s]", damage, weaponname, actorname);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = player.Stamina;
		previousdamage = damage;
		damage = floor(damage * (1.00 + (stamdamagefactor * 0.5)));
		if (kcdebug_meleedmg) Console.Printf("StaminaDmg: %.8f, StamUpgrades: %d - (Previous Dmg: %.8f)", damage, stamdamagefactor, previousdamage);

		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerATK; strengthcounter++)
		{
			double adddmg;
			int rngroll;
			if (random(1,192) <= (191 - (TruePlayerLevel * 0.01875)))
			{
				if (altfire == 0) adddmg = randompick(2,2,3);
				if (altfire == 1) adddmg = randompick(8,10,10);
			}
			else
			{
				if (altfire == 0) adddmg = randompick(4,5,6);
				if (altfire == 1) adddmg = randompick(14,16,18);
				rngroll = 1;
			}
			adddmg *= kc_strmeleescale;
			if (kcdebug_meleedmg) Console.Printf("kc_strmeleescale: %.8f", kc_strmeleescale);
			double mindmg = (1.0 * kc_strmeleescale);
			if (adddmg < mindmg) adddmg = mindmg;
			damage += adddmg;
			if (kcdebug_meleedmg) Console.Printf("\c[fire]strengthcounter %d / %d [Punch/Uppercut (type: %d)]: %.8f (rngroll: %d)\c-", strengthcounter+1, PlayerATK, altfire, adddmg, rngroll);
		}
		if (kcdebug_meleedmg) Console.Printf("\c[fire]StrDmg: %.8f\c- - (Strength: %d) - (Previous Dmg: %.8f)", damage, PlayerATK, previousdamage);

		// Berserk Check
		previousdamage = damage;
		if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) damage = floor(damage * 10);
		if (kcdebug_meleedmg) Console.Printf("BerserkDmg: %.8f - (Previous Dmg: %.8f) [%s, %s]", damage, previousdamage, weaponname, actorname);

		double PerkFactor;
		double temp1, temp2;
		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,1,2,2,2,2,2,3)));
			if (kcdebug_meleedmg) Console.Printf("MeleeDmg [Shockwave]: (\c[green]%s\c-) %.8f - (Previous Dmg: %.8f)", weaponname, damage, previousdamage);
		}
		
		previousdamage = damage;
		if (kcdebug_meleedmg && altfire == 0) Console.Printf("MeleeDmgAltCheck: (\c[green]%s\c-) %.8f - (Previous Dmg: %.8f) [Punch]", weaponname, damage, previousdamage);
		if (kcdebug_meleedmg && altfire == 1) Console.Printf("MeleeDmgAltCheck: (\c[green]%s\c-) %.8f - (Previous Dmg: %.8f) [Uppercut]", weaponname, damage, previousdamage);
		
		if (istarget)
		{
			if (kcdebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: \c[green]%s\c- - Puff: \c[darkgreen]%s\c-) %.8f\c- - \cx(Previous Dmg: %.8f) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (kcdebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: \c[green]%s\c- - Puff: \c[darkgreen]%s\c-) %.8f\c- - \cx(Previous Dmg: %.8f) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (kcdebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: \c[green]%s\c- - Source: \c[darkgreen]%s\c-) %.8f\c- - \cx(Previous Dmg: %.8f) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (kcdebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: \c[green]%s\c- - Source: \c[darkgreen]%s\c-) %.8f\c- - \cx(Previous Dmg: %.8f) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		
		return int(damage);
	}
	
	action int A_GetKickDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int PlayerATK;
		int PlayerLevel;
		int TruePlayerLevel = A_GetPlayerLvl(1);
		if (MiscItem) 
		{
			PlayerATK = MiscItem.TruePlayerATK + TruePlayerLevel;
			PlayerLevel = TruePlayerLevel;
		}

		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		double damage;
		double previousdamage;
		int strengthcounter;

		damage = random(45,60);
		if (kcdebug_meleedmg) Console.Printf("BaseDmg: %.8f", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = player.Stamina;
		previousdamage = damage;
		damage = floor(damage * (1.00 + (stamdamagefactor * 0.5625)));
		if (kcdebug_meleedmg) Console.Printf("StaminaDmg: %.8f, StamUpgrades: %d - (Previous Dmg: %.8f)", damage, stamdamagefactor, previousdamage);

		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerATK; strengthcounter++)
		{
			double adddmg;
			int rngroll;
			if (random(1,128) <= (127 - (TruePlayerLevel * 0.025)))
			{
				adddmg = randompick(3,5,8);
			}
			else
			{
				adddmg = randompick(6,8,10);
				rngroll = 1;
			}
			adddmg *= kc_strmeleescale;
			if (kcdebug_meleedmg) Console.Printf("kc_strmeleescale: %.8f", kc_strmeleescale);
			double mindmg = (1.0 * kc_strmeleescale);
			if (adddmg < mindmg) adddmg = mindmg;
			damage += adddmg;
			if (kcdebug_meleedmg) Console.Printf("\c[fire]strengthcounter %d / %d [Kick]: %.8f (rngroll: %d)\c-", strengthcounter+1, PlayerATK, adddmg, rngroll);
		}
		if (kcdebug_meleedmg) Console.Printf("\c[fire]StrDmg: %.8f\c- - (Strength: %d) - (Previous Dmg: %.8f)", damage, PlayerATK, previousdamage);

		// Reduce Check
		previousdamage = damage;
		if (altfire == 0) damage = floor(damage * (1.00 + (0.05 * random(-4,4))));
		if (altfire == 1) damage = floor(damage * (1.00 + (0.075 * random(-4,4))));
		if (kcdebug_meleedmg) Console.Printf("ReduceDmg: %.8f - (Previous Dmg: %.8f)", damage, previousdamage);

		// Berserk Check
		previousdamage = damage;
		if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) damage = floor(damage * 10);
		if (kcdebug_meleedmg) Console.Printf("BerserkDmg: %.8f - (Previous Dmg: %.8f)", damage, previousdamage);

		double PerkFactor;
		double temp1, temp2;

		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,2,2,2,2,2,3)));
			if (kcdebug_meleedmg) Console.Printf("MeleeDmg [Shockwave]: (%s) %.8f - (Previous Dmg: %.8f (Shockwave)", weaponname, damage, previousdamage);
		}

		previousdamage = damage;
		if (altfire == 0) damage = floor(damage * 1.0);
		if (altfire == 1) damage = floor(damage * 0.25);
		if (kcdebug_meleedmg && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %.8f - (Previous Dmg: %.8f) [Kick]", weaponname, damage, previousdamage);
		if (kcdebug_meleedmg && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %.8f - (Previous Dmg: %.8f) [Roundhouse Kick]", weaponname, damage, previousdamage);

		if (istarget)
		{
			if (kcdebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %.8f\c- - \cx(Previous Dmg: %.8f) [Kick]\c-", weaponname, actorname, damage, previousdamage);
			if (kcdebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %.8f\c- - \cx(Previous Dmg: %.8f) [Roundhouse Kick]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (kcdebug_meleedmg && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %.8f\c- - \cx(Previous Dmg: %.8f) [Kick]\c-", weaponname, actorname, damage, previousdamage);
			if (kcdebug_meleedmg && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %.8f\c- - \cx(Previous Dmg: %.8f) [Roundhouse Kick]\c-", weaponname, actorname, damage, previousdamage);
		}
		
		return int(damage);
	}
}

mixin class MonsterCollider
{
	int targetdummyhitcooldown;
	Actor lastattacker;
	Actor lastattackeratk;
	Actor playeriskiller;
	
	class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
	string nm, nn, no, np;
	
	int A_GetPlayerLvl2(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLvl2 - MonsterCollider mixin)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	void CCCardDeathCheck()
	{
		state CCState = FindState("DeathCC");
		let globalvars = KCGlobalVariables.Get();
		if (globalvars.PlayingCCards)
		{
			//Console.Printf("globalvars.PlayingCCards: %d", globalvars.PlayingCCards);
			if (CCState) SetState(CCState);
		}
	}
	
	
	void A_RecoverHUD(int recovery, int type, bool acculmuatepulse)
	{
		if (kcdebug_hudrecdmgdisplays) Console.Printf("A_RecoverHUD called");
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));

		if (MiscItem && kchud_showhpapdmgrec)
		{
			if (kcdebug_hudrecdmgdisplays) Console.Printf("A_RecoverHUD [MiscItem]");
			if (type == 0) // HP
			{
				// HP Recovery [HUD]
				if (MiscItem.HPRecHUDTimer <= 0) MiscItem.HPRecHUDTimer = 105;
				else
				{
					MiscItem.HPRecHUDTimer += 35;
					if (MiscItem.HPRecHUDTimer < 105 && recovery > (MiscItem.MaxHealthTrue * 0.01)) MiscItem.HPRecHUDTimer = 105;
					if (MiscItem.HPRecHUDTimer > 175) MiscItem.HPRecHUDTimer = 175;
				}
				MiscItem.HPRecHUDAmt += recovery;
				if (acculmuatepulse && recovery > 0)
				{
					if (MiscItem.HPRecHUDAmt > 0 && recovery > 0)
					{
						int healfactor = MiscItem.HPRecHUDAmt * 100 / MiscItem.MaxHealthTrue;
						if (healfactor < 10) MiscItem.HPHUDPulseType = 1;
						if (healfactor >= 10) MiscItem.HPHUDPulseType = 2;
						if (healfactor >= 50) MiscItem.HPHUDPulseType = 3;
						if (healfactor >= 100) MiscItem.HPHUDPulseType = 4;
						MiscItem.HPHUDPulseTimeP = (level.time % randompick(15,25,35));
					}
				}
				if (kcdebug_hudrecdmgdisplays) Console.Printf("HP Gain: %d [%d] (timer: %d)", MiscItem.HPRecHUDAmt, recovery, MiscItem.HPRecHUDTimer);
			}

			if (type == 1) // AP
			{
				// AP Recovery [HUD]
				if (MiscItem.APRecHUDTimer <= 0) MiscItem.APRecHUDTimer = 105;
				else
				{
					MiscItem.APRecHUDTimer += 35;
					if (MiscItem.APRecHUDTimer < 105 && recovery > 1) MiscItem.APRecHUDTimer = 105;
					if (MiscItem.APRecHUDTimer > 175) MiscItem.APRecHUDTimer = 175;
				}
				MiscItem.APRecHUDAmt += recovery;
				if (acculmuatepulse && recovery > 0)
				{
					int armmax;
					if (MiscItem.armtier == 1) armmax = 100;
					if (MiscItem.armtier >= 2) armmax = 200;
					if (armmax > 0)
					{
						if (MiscItem.APRecHUDAmt > 0 && recovery > 0)
						{
							int healfactor = MiscItem.APRecHUDAmt * 100 / armmax;
							if (healfactor < 10) MiscItem.APHUDPulseType = 1;
							if (healfactor >= 10) MiscItem.APHUDPulseType = 2;
							if (healfactor >= 50) MiscItem.APHUDPulseType = 3;
							if (healfactor >= 100) MiscItem.APHUDPulseType = 4;
							MiscItem.APHUDPulseTimeP = (level.time % randompick(15,25,35));
						}
					}
				}
				if (kcdebug_hudrecdmgdisplays) Console.Printf("AP Gain: %d [%d] (timer: %d)", MiscItem.APRecHUDAmt, recovery, MiscItem.APRecHUDTimer);
			}
		}
	}
	
	// Resurrections
	override bool CanResurrect(Actor other, bool passive)
	{
		//Console.Printf("(CanResurrect)");
		int maxviletimesrevived = kc_maxresperarchvile;
		if (maxviletimesrevived <= 0) maxviletimesrevived = 32;
		int maxtimesrevivedpervile = kc_maxarchrespermonster;
		if (maxtimesrevivedpervile <= 0) maxtimesrevivedpervile = 32;

		int maxdiabtimesrevived = kc_maxresperdiabloist;
		if (maxdiabtimesrevived <= 0) maxdiabtimesrevived = 32;
		int maxtimesrevivedperdiab = kc_maxdiabrespermonster;
		if (maxtimesrevivedperdiab <= 0) maxtimesrevivedperdiab = 32;

		bool ResSucceed = true;
		KCPlayerPawn playpawn;
		KCCreature KCMonster;
		KCCreature RevivedMonster;
		KCCreature RevivingMonster;
		RevivingMonster = KCCreature(self);
		RevivedMonster = KCCreature(other);
		if (RevivingMonster && RevivedMonster)
		{
			//Console.Printf("\c[fire]RevivingMonster: %p\c-, \c[green]RevivedMonster: %p\c-", RevivingMonster, RevivedMonster);
			if (!passive) // Monster is the one REVIVING...
			{
				if (GetClassName() == "Archvile" || GetClassName() == "ArchvileNew")
				{
					if (RevivingMonster.timesrevivedamonster < maxviletimesrevived)
					{
						if (RevivedMonster.timesrevivedpervile < maxtimesrevivedpervile)
						{
							if (other.GetClassName() == "ArchvileNew") { if (kc_vilesressurectviles) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Diabloist") { if (kc_vilesressurectdiabs) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "CyberdemonNew") { if (kc_vilesressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Annihilator") { if (kc_vilesressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "SpiderMastermindNew") { if (kc_vilesressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Demolisher") { if (kc_vilesressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
							else { ResSucceed = true; }
							if (ResSucceed > 0)
							{
								if (kc_vilesusehealthtores != 0)
								{
									if (kc_vilesusehealthtores < 0) health -= kc_vilesusehealthtores;
									if (kc_vilesusehealthtores > 0) health -= (health * (kc_vilesusehealthtores * 0.01));
									
									if (health < 1) health = 1;
								}
								RevivingMonster.timesrevivedamonster++;
								if (RevivedMonster) 
								{
									RevivedMonster.timesrevivedpervile++;
									//Console.Printf("\cxRevivedMonster.timesrevivedpervile: %d, timesrevivedamonster: %d\c-", RevivedMonster.timesrevivedpervile, RevivingMonster.timesrevivedamonster);
								}
							}
						}
						else
						{
							ResSucceed = false;
						}
					}
					else
					{
						ResSucceed = false;
					}
				}
				else
				if (GetClassName() == "Diabloist")
				{
					if (RevivingMonster.timesrevivedamonster < maxdiabtimesrevived)
					{
						if (RevivedMonster.timesrevivedperdiabloist < maxtimesrevivedperdiab)
						{
							if (other.GetClassName() == "ArchvileNew") { if (kc_diabsressurectviles) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Diabloist") { if (kc_diabsressurectdiabs) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "CyberdemonNew") { if (kc_diabsressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Annihilator") { if (kc_diabsressurectcybers) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "SpiderMastermindNew") { if (kc_diabsressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
							else if (other.GetClassName() == "Demolisher") { if (kc_diabsressurectspiders) { ResSucceed = true; } else { ResSucceed = false; } }
							else { ResSucceed = true; }
							if (ResSucceed > 0)
							{
								if (kc_diabsusehealthtores != 0)
								{
									if (kc_diabsusehealthtores < 0) health -= kc_diabsusehealthtores;
									if (kc_diabsusehealthtores > 0) health -= (health * (kc_diabsusehealthtores * 0.01));

									if (health < 1) health = 1;
								}
								RevivingMonster.timesrevivedamonster++;
								if (RevivedMonster) 
								{
									RevivedMonster.timesrevivedperdiabloist++;
									//Console.Printf("\cxRevivedMonster.timesrevivedperdiabloist: %d, timesrevivedamonster: %d\c-", RevivedMonster.timesrevivedperdiabloist, RevivingMonster.timesrevivedamonster);
								}
							}
						}
						else
						{
							ResSucceed = false;
						}
					}
					else
					{
						ResSucceed = false;
					}
				}
				
				if (other != self)
				{
					if (ResSucceed && kc_combatlog) 
					{
						string sndname = "Resurrection/Evil";
						if (other.bBOSS) sndname = "Resurrection/EvilBig";
						other.A_StopSound(15);
						other.A_StartSound(sndname,15,CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NONE,frandom(0.8,1.2));
						Console.Printf("\c[red]*\c- \c[brick]%s\c- is resurrecting \c[purple]%s\c-! [%d]", GetTag(), other.GetTag(), gametic);
					}
				}
				else
				{
					if (ResSucceed && kc_combatlog && !other.CountInv("NoRessurrectMessage")) 
					{
						bool notification = true;
						nm = "ClayDevilNew"; extracheck = nm;
						if (other.GetClassName() == nm) notification = false;
						
						if (notification)
						{
							string sndname = "Resurrection/Evil";
							if (bBOSS) sndname = "Resurrection/EvilBig";
							A_StopSound(15);
							A_StartSound(sndname,15,CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NONE,frandom(0.8,1.2));
							Console.Printf("\c[red]*\c- \c[brick]%s\c- is self resurrecting! [%d]", GetTag(), gametic);
						}
					}
				}
			}
			else // Monster is the one BEING REVIVED...
			{
				if (RevivedMonster.cannotres) 
				{
					ResSucceed = false; 
				}
				else
				{
					let Vile = Archvile(self);
					if (Vile) 
					{
						if (Vile.health >= (Vile.SpawnHealth() + Vile.Stamina))
						{
							ResSucceed = true;
							if (kcdebug_ressurrectdisplays) Console.Printf("Succeeded: Vile's Health is High Enough to resurrect %s! [%d]", other.GetTag(), gametic);
						}
						else
						{
							ResSucceed = false;
							if (kcdebug_ressurrectdisplays) Console.Printf("Succeeded: Vile's Health is NOT High Enough (i.e. Max or Higher) to resurrect %s! [%d]", other.GetTag(), gametic);
						}
					}
				}
				//if (kc_combatlog) Console.Printf("\c[red]*\c- \c[purple]%s\c- is being resurrected by \c[brick]%s\c-! [%d]", GetTag(), other.GetTag(), gametic);
			}
		}
		else ResSucceed = true;
		
		return ResSucceed;
	}
	
	// Collisions
	override bool CanCollideWith(Actor other, bool passive)
	{
		ShieldPart shieldpiece;
		shieldpiece = ShieldPart(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			if (kcdebug_generalcollisions) Console.Printf("\c[brick]Collision:\c- NotPassive - \c[orange]%s\c- vs (\c[green]%s\c-) {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
			
			// Pass through certain shield parts, ones that would normally cause a monster to be bumped around by running into them
			if (shieldpiece)
			{
				if (kcdebug_generalcollisions) Console.Printf("\c[sapphire]Collision:  Passive - \c[green]%s\c- [ShieldPiece] vs (\c[orange]%s\c-) {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
				if (ShieldPartMeleeNoReflect(shieldpiece) || ShieldPartMeleeNoReflect(shieldpiece) ||
						KickShieldReflect(shieldpiece) || KickShieldNoReflect(shieldpiece))
				{
					if (kcdebug_generalcollisions) Console.Printf("\c[sapphire]Collision: Passive - \c[green]%s\c- [MeleeShieldPart] vs (\c[orange]%s\c-) {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
					if (ExplosiveBarrel(self)) return false;
					if (ExplosiveBarrel2(self)) return false;
					if (Pod(self)) return false;
					return true;
				}
				return false;
			}

			// Pass through players, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.GetSpecies() == "Players")
			{
				if (kcdebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- NotPassive - \c[orange]%s\c- [Friendly] vs (\c[green]%s\c-) [PlayerType] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false; 
			}

			// Pass through other actors, if the calling monster is Friendly
			if (bFRIENDLY == 1 && other.bFRIENDLY == 1)
			{
				if (kcdebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- NotPassive - \c[orange]%s\c- [Friendly] vs (\c[green]%s\c-) [Friendly] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false; 
			}
		}
		else
		{
			if (kcdebug_generalcollisions) Console.Printf("\c[red]Collision:\c- Passive - (\c[green]%s\c-) vs \c[orange]%s\c- {gametic: %d}", GetClassName(), other.GetClassName(), gametic);
			
			if (shieldpiece)
			{
				if (kcdebug_generalcollisions) Console.Printf("\c[lightblue]Collision:\c- Passive - \c[orange]%s\c- [Friendly] vs (\c[green]%s\c-) [Friendly] = False/No Collision {gametic: %d}", other.GetClassName(), GetClassName(), gametic); 
				return false;
			}
			return true; 
		}

		// We don't really care about others making the check.
		return true;
	}
	
	// Damage Tracking
	int initdmg;
	double, double, double A_DefenseIgnoreFactor(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle, bool wasblastedimpact, bool surprisehit, int angvstype)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvl2(1);
		int predmginr = damage;
		// (Partial) Defense Ignoring Attacks
		double prevDamageFactor;
		double basedmgfactor = DamageFactor;
		double ActorDefenseIgnoreFactor = 0.00;
		if (inflictor == null && source == null) 
		{
			// BLASTED Impact Damage
			if (wasblastedimpact) ActorDefenseIgnoreFactor += (frandom(0.45,0.55) * (1.00 - ActorDefenseIgnoreFactor));
		}
		else
		{
			double WhistleFactor = 0.75;
			if (inflictor && PlayerWhistle(inflictor) || source && PlayerWhistle(source)) ActorDefenseIgnoreFactor += (WhistleFactor * (1.00 - ActorDefenseIgnoreFactor));
			
			double BarrelFactor = 0.50;
			if (skill <= 0) BarrelFactor = 1.0;
			if (skill == 1) BarrelFactor = 0.75;
			if (skill == 2) BarrelFactor = 0.5;
			if (skill == 3) BarrelFactor = 0.25;
			if (skill >= 4) BarrelFactor = 0.0;
			if ((ExplosiveBarrel(inflictor) || 
					 ExplosiveBarrel(source) || 
					 ExplosiveBarrel2(inflictor) || 
					 ExplosiveBarrel2(source) || 
					 Pod(inflictor) || 
					 Pod(source)) && 
					 flags & DMG_EXPLOSION) ActorDefenseIgnoreFactor += (BarrelFactor * (1.00 - ActorDefenseIgnoreFactor));
			
			double RailFactor = frandom(0.3,0.334);
			if (mod == 'Railgun') ActorDefenseIgnoreFactor += (RailFactor * (1.00 - ActorDefenseIgnoreFactor));
			
			/*
			if (inflictor && 
					(inflictor.GetClassName() == "SoulScepterPuff" ||
					 inflictor.GetClassName() == "DualSoulScepterPuff" ||
					 inflictor.GetClassName() == "SoulScepterPuff2" ||
					 inflictor.GetClassName() == "SoulScepterPowerPuff" ||
					 inflictor.GetClassName() == "DualSoulScepterPowerPuff"))
			{
				ActorDefenseIgnoreFactor += (0.50 * (1.00 - ActorDefenseIgnoreFactor));
			}
			*/
			
			double HWShieldFactor = 0.125;
			/*
			if (EvilWarriorShieldBall(inflictor) || EvilWarriorShieldBall(source) ||
					HellWarriorBall2(inflictor) || HellWarriorBall2(source)) ActorDefenseIgnoreFactor += (HWShieldFactor * (1.00 - ActorDefenseIgnoreFactor));
			*/
			
			KCPlayerPawn FoundPlayer;
			FoundPlayer = KCPlayerPawn(source);
			if (!FoundPlayer) FoundPlayer = KCPlayerPawn(inflictor);
			if (FoundPlayer)
			{
				//
				//
				//
			}
			else
			{
				KCCreature OtherA;
				OtherA = KCCreature(source);
				if (!OtherA) OtherA = KCCreature(inflictor);
				if (OtherA)
				{
					//
					//
					//
				}
			}
			
			if (mod == 'Dashing') ActorDefenseIgnoreFactor += (0.2 * (1.00 - ActorDefenseIgnoreFactor));
			if (mod == 'DashingSD') ActorDefenseIgnoreFactor += (0.375 * (1.00 - ActorDefenseIgnoreFactor));
			
			if (mod == 'Massacre') ActorDefenseIgnoreFactor += (1.00 * (1.00 - ActorDefenseIgnoreFactor));
			
			if (surprisehit) ActorDefenseIgnoreFactor += ((random(6,8) * 0.125) * (1.00 - ActorDefenseIgnoreFactor));
			
			//if (CountInv("PWDefenseBuff") > 0) ActorDefenseIgnoreFactor *= 0.25;
		}

		return prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor;
	}
	
	const MTYPE_DEMONIC = 1;
	const MTYPE_UNDEAD = 2;
	const MTYPE_ZOMBIE = 2;
	const MTYPE_HUMANDEMONIC = 3;
	const MTYPE_HADESSCION = 4;
	const MTYPE_CREATURE = 5;
	const MTYPE_INANIMATECREATURE = 6;
	const MTYPE_INANIMATEDEMONIC = 7;
	const MTYPE_HUMANPURE = 8;
	const MTYPE_MECHANICALPURE = 9;
	const MTYPE_HEAVENLY = 10;
	const MTYPE_ANGELIC = 10;
	const MTYPE_AVATARIC = 11;
	const MTYPE_UNDEADDEMONIC = 12;
	const MTYPE_CYBORG = 13;
	const MTYPE_EEEUGH = 42; // Eeeugh? V:
	int A_CheckTargType(actor input)
	{
		int type = 0;
		/*
		// Doom-type
		if (Zombieman(input) || ZombiemanNew(input)) type = 2; // Zombie/Undead
		//if (PlasmaGuy(input)) type = 2; // Zombie/Undead
		//if (RepeaterZombie(input)) type = 2; // Zombie/Undead
		//if (KarasawaGuy(input)) type = 2; // Zombie/Undead
		//if (RocketLauncherGuy(input)) type = 2; // Zombie/Undead
		if (ShotgunGuy(input) || ShotgunGuyNew(input)) type = 2; // Zombie/Undead
		//if (SuperShotgunGuy(input)) type = 2; // Zombie/Undead
		//if (FemaleRailZombie(input)) type = 2; // Zombie/Undead
		if (ChaingunGuy(input) || ChaingunGuyNew(input)) type = 2; // Zombie/Undead
		//if (Minigunner(input)) type = 2; // Zombie/Undead
		//if (BFGGuy(input)) type = 2; // Zombie/Undead
		//if (SuicideBomber(input)) type = 2; // Zombie/Undead
		if (DoomImp(input) || DoomImpNew(input)) type = 1; // Demonic
		//if (DarkImp(input) || STDarkImp(input) || VoidDarkImp(input) || NetherDarkImp(input)) type = 1; // Demonic
		if (Demon(input) || DemonNew(input)) type = 1; // Demonic
		//if (BloodDemon(input)) type = 1; // Demonic
		if (LostSoul(input) || LostSoulNew(input) || LostSoulAnnoying(input) || BetaLostSoul(input)) type = 1; // Demonic
		if (Cacodemon(input) || CacodemonNew(input)) type = 1; // Demonic
		//if (Cacolantern(input)) type = 1; // Demonic
		//if (Abaddon(input)) type = 1; // Demonic
		//if (PainElemental(input) || PainElementalNew(input)) type = 1; // Demonic
		if (Arachnotron(input) || ArachnotronNew(input) || RailArachnotron(input) || FusionArachnotron(input) || ArachnotronMK2(input)) type = 1; // Demonic
		if (Revenant(input) || RevenantNew(input)) type = 2; // Zombie/Undead
		//if (DeathIncarnate(input)) type = 2; // Zombie/Undead
		if (Fatso(input) || MancubusNew(input)) type = 1; // Demonic
		//if (Hectebus(input)) type = 1; // Demonic
		//if (Daedabus(input)) type = 1; // Demonic
		if (HellKnight(input) || HellKnightNew(input)) type = 1; // Demonic
		if (BaronOfHell(input) || BaronOfHellNew(input)) type = 1; // Demonic
		//if (Belphegor(input)) type = 1; // Demonic
		//if (HellWarrior(input)) type = 1; // Demonic
		//if (BruiserDemon(input)) type = 1; // Demonic
		//if (Cybruiser(input)) type = 1; // Demonic
		//if (ArchonOfHell(input)) type = 1; // Demonic
		//if (PyroDemon(input)) type = 1; // Demonic
		if (Archvile(input) || ArchvileNew(input)) type = 1; // Demonic
		//if (Diabloist(input)) type = 1; // Demonic
		if (Cyberdemon(input) || CyberdemonNew(input) || Annihilator(input)) type = 1; // Demonic
		if (SpiderMastermind(input) || SpiderMastermindNew(input) || Demolisher(input)) type = 1; // Demonic
		//if (FlyingBalrog(input) || FlyingBalrogDVDS(input)) type = 1; // Demonic
		//if (HellCleric(input) || HellClericDVDS(input)) type = 3; // Human/Demon
		//if (HadesSphere(input)) type = 4; // Hades Scion
		//if (HSOverlord(input)) type = 4; // Hades Scion
		//if (HadesElemental(input)) type = 4; // Hades Scion
		//if (HadesOverlord(input)) type = 4; // Hades Scion
		// Heretic/Hexen [tbc]
		if (HereticImp(input) || HereticImpNew(input)) type = 5; // Creature
		if (HereticImpLeader(input) || HereticImpLeaderNew(input)) type = 5; // Creature
		if (Mummy(input) || MummyNew(input) || MummyGhost(input) || MummyGhostNew(input)) type = 6; // Inanimate/Creature
		if (MummyLeader(input) || MummyLeaderNew(input) || MummyLeaderGhost(input) || MummyLeaderGhostNew(input)) type = 6; // Inanimate/Creature
		if (Knight(input) || KnightNew(input) || KnightGhost(input) || KnightGhostNew(input)) type = 2; // Zombie/Undead
		if (Wizard(input) || WizardNew(input)) type = 1; // Demonic
		if (Ironlich(input) || IronlichNew(input)) type = 6; // Inanimate/Creature
		if (Beast(input) || BeastNew(input)) type = 5; // Creature
		if (Clink(input) || ClinkNew(input)) type = 5; // Creature
		if (Minotaur(input) || MaulotaurNew(input) || MaulotaurFriendNew(input)) type = 5; // Creature
		if (Snake(input) || SnakeNew(input)) type = 5; // Creature
		if (Sorcerer1(input) || DSparilMountedNew(input)) type = 5; // Creature
		if (Sorcerer2(input) || DSparilUnmountedNew(input)) type = 1; // Demonic
		if (FireDemon(input) || FireDemonNew(input)) type = 5; // Creature
		if (Ettin(input) || EttinNew(input)) type = 5; // Creature
		if (Centaur(input) || CentaurNew(input)) type = 5; // Creature
		if (Demon1(input) || Demon2(input) || GreenChaosSerpentNew(input) || BrownChaosSerpentNew(input)) type = 5; // Creature
		if (Serpent(input) || StalkerNew(input)) type = 5; // Creature
		if (Dragon(input) || DragonNew(input)) type = 2; // Zombie/Undead
		if (Wraith(input) || WraithNew(input)) type = 2; // Zombie/Undead
		if (Korax(input) || KoraxNew(input)) type = 1; // Demonic
		// Strife [tbc]
		if (Rebel(input) || RebelNew(input)) type = 8; // Human
		if (Acolyte(input) || AcolyteNew(input)) type = 13; // Mechanical/Human [Cyborg] Hybrid
		*/
		return type;
	}
	
	// Reduces Damage Based on Type infighting
	int A_TargDmgCalc(int damage, int type)
	{
		if (type == 1) damage /= frandompick(2.5,2.75,3.0); // Demonic foes
		if (type == 2) damage /= frandompick(1.75,1.875,2.0); // Zombie/Undead foes
		if (type == 3) damage /= frandompick(1.375,1.4375,1.5); // Human/Demon hybrid foes
		if (type == 4) damage /= frandompick(2.125,2.3125,2.5); // Hades Scion foes
		if (type == 7) damage /= frandompick(1.75,1.875,2.0); // Inanimate/Demonic-hybrid foes
		if (type == 12) damage /= frandompick(2.125,2.3125,2.5); // Undead/Demonic-Hybrid foes
		return damage;
	}
	
	// INCREASES Damage Based on Type infighting [for angel/reaper checks]
	int A_TargDmgCalcAngVs(int damage, int angvstype)
	{
		if (angvstype == 1) damage *= frandompick(2.5,2.75,3.0); // Demonic foes
		if (angvstype == 2) damage *= frandompick(1.75,1.875,2.0); // Zombie/Undead foes
		if (angvstype == 3) damage *= frandompick(1.375,1.4375,1.5); // Human/Demon hybrid foes
		if (angvstype == 4) damage *= frandompick(2.125,2.3125,2.5); // Hades Scion foes
		if (angvstype == 7) damage *= frandompick(1.75,1.875,2.0); // Inanimate/Demonic-hybrid foes
		if (angvstype == 12) damage *= frandompick(2.125,2.3125,2.5); // Undead/Demonic-Hybrid foes
		return damage;
	}
	
	void A_TypeInfightRetargetChance(int type, actor target, actor dmgsource)
	{
		if (target && dmgsource)
		{
			if (PlayerPawn(target))
			{
				if (type == 1 && random(1,100) <= 95) target = dmgsource;
				if (type == 2 && random(1,100) <= 45) target = dmgsource;
				if (type == 3 && random(1,100) <= 20) target = dmgsource;
				if (type == 4 && random(1,100) <= 70) target = dmgsource;
				if (type == 7 && random(1,100) <= 45) target = dmgsource;
				if (type == 12 && random(1,100) <= 70) target = dmgsource;
			}
			else
			{
				if (type == 1 && random(1,100) <= 80) target = dmgsource;
				if (type == 2 && random(1,100) <= 30) target = dmgsource;
				if (type == 3 && random(1,100) <= 5) target = dmgsource;
				if (type == 4 && random(1,100) <= 55) target = dmgsource;
				if (type == 7 && random(1,100) <= 30) target = dmgsource;
				if (type == 12 && random(1,100) <= 55) target = dmgsource;
			}
		}
	}
	
	void A_TypeInfightRetargetPChance(int angvstype, actor target, actor dmgsource)
	{
		if (target && dmgsource)
		{
			if (angvstype == 1 && random(1,100) <= 95) target = dmgsource;
			if (angvstype == 2 && random(1,100) <= 45) target = dmgsource;
			if (angvstype == 3 && random(1,100) <= 20) target = dmgsource;
			if (angvstype == 4 && random(1,100) <= 70) target = dmgsource;
			if (angvstype == 7 && random(1,100) <= 45) target = dmgsource;
			if (angvstype == 12 && random(1,100) <= 70) target = dmgsource;
		}
	}
	
	void A_TypeInfightRetargetEChance(int angvstype, actor target, actor dmgsource)
	{
		if (target && dmgsource)
		{
			if (angvstype == 1 && random(1,100) <= 80) target = dmgsource;
			if (angvstype == 2 && random(1,100) <= 30) target = dmgsource;
			if (angvstype == 3 && random(1,100) <= 5) target = dmgsource;
			if (angvstype == 4 && random(1,100) <= 55) target = dmgsource;
			if (angvstype == 7 && random(1,100) <= 30) target = dmgsource;
			if (angvstype == 12 && random(1,100) <= 55) target = dmgsource;
		}
	}

	Actor, Actor, int, Name, int, double, int CheckMonType(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		KCPlayerPawn playpawn;
		playpawn = KCPlayerPawn(source);
		
		KCCreature selfKC;
		selfKC = KCCreature(self);
		
		int angvstype;
		
		// LOLE Joke Item. Partial thanks to Naka Teleeli for the inspiration. V:
		if (mod == 'LOLEBowling' && !bFRIENDLY) 
		{
			damage = 1872; // 18 * 8 * 13;
			damage *= 128;
			if (flags & !DMG_NO_PROTECT) flags |= DMG_NO_PROTECT;
			if (flags & !DMG_NO_FACTOR) flags |= DMG_NO_FACTOR;
			if (flags & !DMG_NO_ARMOR) flags |= DMG_NO_ARMOR;
			if (flags & !DMG_FOILINVUL) flags |= DMG_FOILINVUL;
			if (flags & !DMG_THRUSTLESS) flags |= DMG_THRUSTLESS;
		}

		if (selfKC && KCUniqueBoss(selfKC)) 
		{
			nm = "PennywiseBoss";
			string vict = GetClassName();
			if (vict != nm) damage *= 0.5;
		}
		
		return inflictor, source, damage, mod, flags, angle, angvstype;
	}
	
	double A_DamageMobCheckShielding(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		string infl, sour, vict;
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE"; else sour = source.GetClassName();

		int finaldmg = damage;
		double shieldfactor;
		
		shieldfactor = 1.0;
		if (CountInv("HWShieldDefense")) shieldfactor *= 0.134;
		if (CountInv("HWShieldDefenseExtra")) shieldfactor *= 0.0268;
		if (CountInv("ImpWarlordShieldDefend")) shieldfactor *= 0.5;
		if (CountInv("ImpWarlordShieldDefendExtra")) shieldfactor *= 0.1;
		if (CountInv("DKnightShieldDefend")) shieldfactor *= 0.25;
		if (CountInv("DKnightShieldDefendExtra")) shieldfactor *= 0.05;
		if (CountInv("AcolyteShieldDefend")) shieldfactor *= 0.75;
		if (CountInv("AcolyteShieldDefendExtra")) shieldfactor *= 0.30;
		if (CountInv("CentaurShieldDefend")) shieldfactor *= 0.333;
		if (CountInv("CentaurShieldDefendExtra")) shieldfactor *= 0.0666;
		if (CountInv("SlaughtaurShieldDefend")) shieldfactor *= 0.167;
		if (CountInv("SlaughtaurShieldDefendExtra")) shieldfactor *= 0.0333;
		if (CountInv("MaulotaurChargeDefense")) shieldfactor *= 0.25;
		if (CountInv("HeresiarchShieldDefense")) shieldfactor *= 0.125;
		if (CountInv("NightmarePhaseOutDefense")) shieldfactor *= 0.0625;
		//String nm = "ThamuzApocalypseDefendMode"; MiscCheck = nm; if (CountInv(MiscCheck)) shieldfactor *= 0.20;
		shieldfactor *= -1;
		shieldfactor += 1.0;

		if (infl == "HubbleBubble" || infl == "GlimmeringGlobe") shieldfactor *= (random(0,1) * 0.01);
		if (mod == 'Sceptre')
		{
			if (infl == "SceptrePuffSpinning" || infl == "SceptrePuffSpinningSilent") shieldfactor *= (random(75,80) * 0.005);
			else shieldfactor *= (random(75,80) * 0.01);
		}

		shieldfactor *= -1;
		shieldfactor += 1.0;
		if (shieldfactor > 1.0) shieldfactor = 1.0;
		
		finaldmg = ceil(finaldmg * shieldfactor);
		if (finaldmg < 1) finaldmg = 1;
		if (kcdebug_actordmgdisplays && shieldfactor >= 0.01) Console.Printf("    (\czActor Defensive Input [STEP ?? - Shielding Monsters]\c-: finaldmg: %d (prevdamage: %d), shieldfactor: %4f", finaldmg, damage, shieldfactor);

		return finaldmg;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		double firstdmgfactor = DamageFactor;
		if (kcdebug_actordmgdisplays) Console.Printf("firstdmgfactor: %.8f, DamageFactor: %.8f", firstdmgfactor, DamageFactor);
		/*
		if (DeathIncarnate(self))
		{
			if (Wads.CheckNumForName("EE-STAEONS", Wads.ns_global, -1, true) != -1)
			{
				if (mod == 'Zap' || mod == 'Ice') damage *= 2;
			}
		}
		*/
		KCPlayerPawn playpawn;
		KCCreature KCActor;
		KCCreature KCVictim;
		KCProjectile UniqueProjectile;
		KCFastProjectile UniqueProjectileFast;
		KCEffectProjectile ailmentproj;
		KCEffectFastProjectile ailmentprojfast;
		SingleDamageRipper singleripproj;
		SingleDamageFastRipper singlefastripproj;
		
		playpawn = KCPlayerPawn(source);
		if (source) 
		{
			playpawn = KCPlayerPawn(source);
			if (kcdebug_actordmgdisplays && playpawn) Console.Printf("Playpawn (source) Found!");
			KCActor = KCCreature(source);
			if (kcdebug_actordmgdisplays && KCActor) Console.Printf("KCActor (source) Found!");
		}
		if (inflictor)
		{
			UniqueProjectile = KCProjectile(inflictor);
			if (kcdebug_actordmgdisplays && UniqueProjectile) Console.Printf("UniqueProjectile (inflictor) Found!");
			UniqueProjectileFast = KCFastProjectile(inflictor);
			if (kcdebug_actordmgdisplays && UniqueProjectileFast) Console.Printf("UniqueProjectileFast (inflictor) Found!");
			ailmentproj = KCEffectProjectile(inflictor);
			if (kcdebug_actordmgdisplays && ailmentproj) Console.Printf("ailmentproj (inflictor) Found!");
			ailmentprojfast = KCEffectFastProjectile(inflictor);
			if (kcdebug_actordmgdisplays && ailmentprojfast) Console.Printf("ailmentprojfast (inflictor) Found!");
			singleripproj = SingleDamageRipper(inflictor);
			if (kcdebug_actordmgdisplays && singleripproj) Console.Printf("singleripproj (inflictor) Found!");
			singlefastripproj = SingleDamageFastRipper(inflictor);
			if (kcdebug_actordmgdisplays && singlefastripproj) Console.Printf("singlefastripproj (inflictor) Found!");
		}
		
		int previoushealth = health;
		KCCreature selfKC;
		selfKC = KCCreature(self);
		
		int angvstype;
		
		bool isCCardsIllusion = false;
		if (bNOBLOOD == true && 
				bNOPAIN == true &&
				bNOTARGETSWITCH == true &&
				bNOINFIGHTING == true &&
				bFULLVOLACTIVE == false && 
				bFULLVOLDEATH == false &&
				bBOSS == false) isCCardsIllusion = true;
		bool isCCardsGhost = false;
		if (bISMONSTER == false &&
				bBRIGHT == true &&
				bNOBLOOD == true &&
				bNOTARGET == true &&
				bNOCLIP == true &&
				bCANUSEWALLS == false &&
				bACTIVATEMCROSS == false &&
				bCANPUSHWALLS == false &&
				bSHOOTABLE == false) isCCardsGhost = true;
		
		[inflictor, source, damage, mod, flags, angle, angvstype] = CheckMonType(inflictor,source,damage,mod,flags,angle);
		if (damage <= -1) return -1;

		//
		if (Level.MapName == "TITLEMAP")
		{
			let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
			return ret;
		}
		
		bool surprisehit = false;
		if (source && 
				target != source && 
				(PlayerPawn(source) || source.bFRIENDLY) && 
				!bFRIENDLY && 
				!ExplosiveBarrel(self) && 
				!ExplosiveBarrel2(self) && 
				!Pod(self) &&
				!PracticeTarget(self) &&
				!PracticeTarget2(self) &&
				!KCUniqueBoss(self) &&
				!bDORMANT)
		{
			int initdmg = damage;
			surprisehit = true;
			A_StopSound(32);
			if (InStateSequence(curstate,ResolveState("Spawn")) ||
				  (InStateSequence(curstate,ResolveState("Idle")) && Heresiarch(self)))
			{
				A_SetInventory("JustSurprised",1);
				if (kc_hitweaksounds) A_StartSound("Misc/WeaknessHitMid", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
				damage *= frandompick(1.3334,1.50);
			}
			else
			{
				if (kc_hitweaksounds) A_StartSound("Misc/WeaknessHit", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
				damage *= frandompick(1.1667,1.25);
			}
			if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) surprisehit: damage: %d (initdmg: %d)", GetClassName(), damage, initdmg);
		}
		
		bool criticalhit = false;
		KCPlayerPawn FoundPlayer;
		FoundPlayer = KCPlayerPawn(source);
		
		int CritRoll;
		int TruePlayerLevel = A_GetPlayerLvl2(1);
		if (FoundPlayer) 
		{
			if (FoundPlayer.CountInv("DealCriticalHit")) 
			{
				criticalhit = true;
				if (bBOSS && random(1,4) >= 2) 
				{
					criticalhit = false;
					if (source == FoundPlayer || inflictor == FoundPlayer)
					{
						If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
						{
							if (!criticalhit && random(1,16) <= 15) criticalhit = true;
						}
					}
				}
			}
			else
			{
				If (MiscItem)
				{
					CritRoll = MiscItem.CritRoll;
					if (MiscItem.CritRoll <= 1) 
					{
						criticalhit = true;
						if (bBOSS && random(1,4) >= 2) 
						{
							criticalhit = false;
							if (source == FoundPlayer || inflictor == FoundPlayer)
							{
								If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
								{
									if (!criticalhit && random(1,16) <= 15) criticalhit = true;
								}
							}
						}
					}
				}
			}
			if (kcdebug_actordmgdisplays && MiscItem) Console.Printf("DamageMobj [Mixin] (\c[green]%s\c-): Critbase: %d / %d", GetClassName(), MiscItem.CritChance, CritRoll);
			if (FoundPlayer.CountInv("CheatCrit") || FoundPlayer.CountInv("CheatCritUltimate")) criticalhit = true;
		}
		
		initdmg = damage;
		if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [Mixin] (\c[green]%s\c-): initdmg vs Damage: %d vs %d (damagefactor: %.8f)", GetClassName(), initdmg, damage, damagefactor);
		double critdmgmulti = 2.0 + (0.01 * random(-10,10));
		if (criticalhit && !bINVULNERABLE)
		{
			int crittype = 1;
			if (!(ExplosiveBarrel(self) ||
						ExplosiveBarrel2(self) ||
						//ExplosiveBarrelNew(self) ||
						Pod(self)))
			{
				A_SetInventory("TookCriticalHit",1);
				if (source == playpawn || inflictor == playpawn)
				{
					bool supercrit = false;
					If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 1)
					{
						MiscItem.MortalBlowCritBoostTimer = randompick(0,1,1,1,1,1,1,1,1,2);
						supercrit = true;
					}
					else
					if (FoundPlayer.CountInv("CheatCritUltimate")) supercrit = true;
					
					if (supercrit)
					{
						critdmgmulti *= (2.5 + (0.0125 * random(-10,10)));
						A_StartSound("misc/critsnd2", 216, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.625,0.9375));
						A_StartSound("misc/critsnd2", 217, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.9375,1.0625));
						crittype = 2;
					}
				}
				damage *= critdmgmulti;
				if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [Mixin] (\c[green]%s\c-): Critical Hit Dealth: %d vs %d (damagefactor: %.8f)", GetClassName(), initdmg, damage, damagefactor);
				A_StartSound("misc/critsnd2", 218, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, 1.0);

				double heightmult = frandompick(0.9375,1.0,1.0625,1.125,1.125,1.25,1.25,1.25,1.25,1.25);
				actor SMASH;
				bool success;
				[success, SMASH] = A_SpawnItemEx("SMAAAASH",0.0,0.0,(height * heightmult),0.0,0.0,0.0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0,0);
				if (success && SMASH)
				{
					SMAAAASH SMASH2;
					SMASH2 = SMAAAASH(SMASH);
					if (SMASH2)
					{
						double scalebase = frandom(0.875,1.125);
						if (crittype >= 2) scalebase = frandom(1.25,1.50);
						SMASH2.scale.x = (scalebase * self.scale.x);
						SMASH2.scale.y = (scalebase * self.scale.y);
						if (SMASH2.target != self) SMASH2.target = self;
						if (SMASH2.height < (height * heightmult)) SMASH2.height = (height * heightmult);
						SMASH2.initheight = (height * heightmult);
					}
				}
			}
		}
		
		int shieldtype;
		if (kcdebug_actordmgdisplays && source) Console.Printf("(\c[green]%s\c-): dmgsource: \c[brick]%p\c- (\c[red]%s\c-)", GetClassName(), source, source.GetClassName());
		if (kcdebug_actordmgdisplays && inflictor) Console.Printf("(\c[green]%s\c-): dmginflictor: \c[brick]%p\c- (\c[red]%s\c-)", GetClassName(), inflictor, inflictor.GetClassName());
		bool isaghost;
		nm = "CCards_Actor_Ghost"; 
		{
			if (CountInv(nm)) 
			{
				A_SetInventory("CCardGhostMarker",1);
				isaghost = true;
				if (kcdebug_actordmgdisplays) Console.Printf("CCardGhostMarker: %d [health: %d], isaghost: %d", CountInv("CCardGhostMarker"), health, isaghost);
			}
		}
		nm = "CCards_Actor_HasRespawned"; if (CountInv(nm)) A_SetInventory("CCardRespawnedMarker",1);
		nm = "CCards_Actor_AssassinBuff"; if (CountInv(nm)) A_SetInventory("CCardAssassinMarker",1);
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) DamageMobj [Mixin]", GetClassName());
		int oldhealth = health;
		initdmg = damage;
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) initdmg: %d, oldhealth: %d", GetClassName(), initdmg, oldhealth);
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor != null) lastattackeratk = inflictor;
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source != null) lastattacker = source;
		if (source == null) sour = "NONE"; else sour = source.GetClassName();
		
		/*
		if (sour == "BlackBearNew" || infl == "BlackBearNew")
		{
			mod = 'Melee';
			flags |= DMG_THRUSTLESS;
			flags &= ~DMG_EXPLOSION;
		}
		
		if (sour == "JSkull_Image1" || sour == "JSkull_Image2" || sour == "JSkull_Image3" ||
				infl == "JSkull_Image1" || infl == "JSkull_Image2" || infl == "JSkull_Image3")
		{
			flags &= ~DMG_NO_ARMOR;
			flags &= ~DMG_NO_PROTECT;
		}
		
		if (CountInv("PWDefenseBuff") > 0) damage *= 0.25;
		nm = "PennywiseBoss";
		if (vict == nm)
		{
			nn = "PennywiseShield"; 
			if (CountInv(nn)) 
			{
				if (mod != 'Deadlight') 
				{
					damage *= 0.334;
					if (mod == 'Beats') damage *= 0.667;
				}
				if (mod == 'Deadlight') damage *= 9;
			}
			nn = "PennywiseNotShield"; 
			if (CountInv(nn)) 
			{
				if (mod != 'Deadlight') 
				{
					damage *= 3;
					if (mod == 'Beats') damage *= 1.5;
				}
				if (mod == 'Deadlight') damage *= 1;
			}
			if (CountInv("PWDefenseBuff"))
			{
				if (mod == 'Deadlight') 
				{
					if (source && source != self) damage *= 4;
				}
			}
			if (kcdebug_actordmgdisplays) Console.Printf("Pennywise Boss Check: %d (%d)", damage, initdmg);
		}
		*/

		if (score & 16)
		{
			if (GetRenderStyle() != default.GetRenderStyle())
			{
				if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) alpha: %.8f, defalpha: %d", GetClassName(), alpha, default.alpha);
				//if (infl == "VacPuff" && random(1,8) <= 5) A_SetRenderStyle(default.alpha, default.GetRenderStyle());
			}
		}
		
		if (mod == 'PSI') flags |= DMG_NO_ARMOR;
		
		if (ExplosiveBarrel(self) ||
				ExplosiveBarrel2(self) ||
//				ExplosiveBarrelNew(self) ||
				Pod(self))
		{
			//
			//
			//
		}
		
		if (bDORMANT)
		{
			if (!(mod == "SilentMassacre" || mod == "Massacre" || mod == "InstantDeath")) return 0;
		}

		if (kcdebug_actordmgdisplays)
		{
			if (flags & DMG_NO_ARMOR) Console.Printf("    (\cyIgnoresArmor?: yes)");
			if (flags & DMG_INFLICTOR_IS_PUFF) Console.Printf("    (\cyInflictorIsPuff?: yes)");
			if (flags & DMG_THRUSTLESS) Console.Printf("    (\cyThrustless?: yes)");
			if (flags & DMG_FORCED) Console.Printf("    (\cyForcedDamage?: yes)");
			if (flags & DMG_NO_FACTOR) Console.Printf("    (\cyNoDmgFactor?: yes)");
			if (flags & DMG_PLAYERATTACK) Console.Printf("    (\cyPlayerAttack?: yes)");
			if (flags & DMG_FOILINVUL) Console.Printf("    (\cyFoilInvuln?: yes)");
			if (flags & DMG_FOILBUDDHA) Console.Printf("    (\cyFoilBuddha?: yes)");
			if (flags & DMG_NO_PROTECT) Console.Printf("    (\cyBypassPowerProtection?: yes)");
			if (flags & DMG_NO_ENHANCE) Console.Printf("    (\cyBypassPowerDamage?: yes)");
			if (flags & DMG_USEANGLE) Console.Printf("    (\cyUsesAngle?: yes)");
			if (flags & DMG_EXPLOSION) Console.Printf("    (\cyIsAoEBurst?: yes)");
		}
		
		if (bFRIENDLY && ((source && PlayerPawn(source)) || (inflictor && PlayerPawn(inflictor))))
		{
			actor src;
			if (source) src = PlayerPawn(source);
			if (!source && inflictor) src = PlayerPawn(inflictor);
			damage = 0;
			if (kcdebug_actordmgdisplays) 
			{
				if (src) Console.Printf("(\c[green]%s\c-) (\czActor Defensive Input [STEP Z]\c-: END DAMAGE ATTEMPT (FRIENDLY) [src: \c[brick]%p\c- (\c[red]%s\c-)]", GetClassName(), src, src.GetClassName());
						else Console.Printf("(\c[green]%s\c-) (\czActor Defensive Input [STEP Z]\c-: END DAMAGE ATTEMPT (FRIENDLY)", GetClassName());
			}
			return 0;
		}
		bool wasblastedimpact = false;
		if (inflictor == null && source == null && mod == 'Melee') 
		{
			wasblastedimpact = true;
			if (bBLASTED && random(1,20) <= 19) 
			{
				damage *= 0.0625;
				bBLASTED = false;
			}
			else
			{
				damage *= 0.25;
			}
			if (vel.x != 0.0) vel.x *= 0.1;
			if (vel.y != 0.0) vel.y *= 0.1;
			if (kcdebug_actordmgdisplays && wasblastedimpact) Console.Printf("(\c[green]%s\c-) (\czwasblastedimpact?: %d", GetClassName(), wasblastedimpact);
		}
		if (PracticeTarget(self) || PracticeTarget2(self))
		{
			if (targetdummyhitcooldown <= 0) targetdummyhitcooldown = 35;
			if (flags & !DMG_THRUSTLESS) flags |= DMG_THRUSTLESS;
			if (!dydudebug_practicetargetsdebuff)
			{
				if (flags & !DMG_NO_PROTECT) flags |= DMG_NO_PROTECT;
				if (flags & !DMG_NO_ARMOR) flags |= DMG_NO_ARMOR;
			}
			if (flags & !DMG_FOILINVUL) flags |= DMG_FOILINVUL;
		}
		
		//*******
		//*******
		//*******
		int predmginr = damage;
		// (Partial) Defense Ignoring Attacks
		double prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor;
		[prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor] = A_DefenseIgnoreFactor(inflictor, source, damage, mod, flags, angle, wasblastedimpact, surprisehit, angvstype);
		
		int predirdmg = damage;
		prevDamageFactor = DamageFactor;
		// If the Attack was Deflected by the Player
		if (UniqueProjectile && UniqueProjectile.REFLECTEDMONSTERPROJ)
		{
			if (kcdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP 3da - Player-Deflection Checking]\c-: \caUniqueProjectile = %p\c-, \caREFLECTEDMONSTERPROJ = %d\c-)", UniqueProjectile, UniqueProjectile.REFLECTEDMONSTERPROJ);
			predirdmg = damage;
			if (player && player.CountInv("PowerDouble"))
			{
				damage = floor(damage * 2);
				if (kcdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 3dba - Player-Deflection Pre-Check [Double]\c-: \cypredmg = %d\c- / \cydmg = %d\c-)", predirdmg, damage);
			}
			if (player && player.CountInv("PowerHalve"))
			{
				damage = ceil(damage * 0.5);
				if (kcdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 3dba - Player-Deflection Pre-Check [Halve]\c-: \cypredmg = %d\c- / \cydmg = %d\c-)", predirdmg, damage);
			}
			
			double randomdmgmax = 1.25 + (random(0,25) * 0.01); //randomdmgmax = 1.50 + (random(0,50) * 0.01);
			double randmgdiff = ((randomdmgmax - DamageFactor) * frandompick(0.875,0.9375,1.00,1.0625,1.125)); // randmgdiff = ((randomdmgmax - DamageFactor) * frandompick(0.75,0.875,1.00,1.125,1.25));
			if (DamageFactor < randomdmgmax) DamageFactor += randmgdiff;
			if (DamageFactor >= randomdmgmax) DamageFactor = randomdmgmax;
			if (kcdebug_actordmgdisplays && damage > 0) Console.Printf("    (\czActor Defensive Input [STEP 3dc - Player-Deflection Checking]\c-: \caDamageFactor = %.8f\c-, \caprevDamageFactor = %.8f\c-, \carandomdmgmax = %.8f, \cbrandmgdiff = %.8f, \cypredmg = %d\c- / \cydmg = %d\c-)", DamageFactor, prevDamageFactor, randomdmgmax, randmgdiff, predirdmg, damage);
		}
		
		predirdmg = damage;
		damage = A_DamageMobCheckShielding(inflictor, source, damage, mod, flags, angle);
		predmginr = damage;
		// Defense Checks
		if (mod == 'Crush' && !inflictor && !source)
		{
			double basecrushdmgfact;
			if (PowerStrength(FindInventory("PowerStrength")) || KCPowerStrength(FindInventory("KCPowerStrength")))
			{
				basecrushdmgfact = frandompick(25,33.4,33.4,50,50,50,50,50,50,66.7,66.7,75);
			}
			else
			{
				basecrushdmgfact = frandompick(75,87.5,87.5,100,100,100,100,100,100,112.5,112.5,125);
			}
			damage *= double(basecrushdmgfact / (mass * frandompick(0.25,0.334,0.334,0.5,0.5,0.5,0.5,0.5,0.667,0.667,0.75)));
			damage *= (basecrushdmgfact * 0.01);
			if (damage <= (predmginr * 0.334)) damage = (predmginr * 0.334);
			if (damage >= (predmginr * 3)) damage = (predmginr * 3);
			
			if (kcdebug_actordmgdisplays && damage > 0)
			{
				Console.Printf("    (\czActor Defensive Input [Crush]\c-: \cydmg = %d\c, prevdmg: %d, basecrushdmgfact: %.8f, mass: %d)", damage, predmginr, basecrushdmgfact, mass);
			}
		}
		
		//******************************
		//*This ignores damage factors *
		//******************************
		if (ActorDefenseIgnoreFactor > 1.00) ActorDefenseIgnoreFactor = 1.00;
		prevDamageFactor = DamageFactor;
		if (DamageFactor < 1.00) 
		{
			if (criticalhit) ActorDefenseIgnoreFactor = 1.00;
			DamageFactor += ((1.00 - DamageFactor) * ActorDefenseIgnoreFactor); 
		}
		if (kcdebug_actordmgdisplays && damage > 0)
		{
			if (ActorDefenseIgnoreFactor > 0.00) Console.Printf("    (\czActor Defensive Input [Def Ignoring]\c-: \caDefenseIgnoreFactor = %.8f\c-, \cadmgfactor = %.8f\c-, \caprevdmgfactor = %.8f\c-, \cypredmg = %d\c-, \cydmg = %d\c- (Monster Actor))", ActorDefenseIgnoreFactor, DamageFactor, prevDamageFactor, predmginr, damage);
																			else Console.Printf("    (\czActor Defensive Input [Def Ignoring]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", predmginr);
		}
		
		KCCreature check;
		check = KCCreature(self);
		// Healing from Punching/Kicking Practice Targets ala SW
		if (PracticeTarget(self) || PracticeTarget2(self))
		{
			if ((mod == 'Fist' || mod == 'Kick'))
			{
				if (!(flags & DMG_EXPLOSION))
				{
					double multfactorHP = 1.0;
					int randbonusincreaseHP = randompick(3,3,4) * frandom(3.75,5.25) * frandom(0.5,1.5);
					if (mod == 'Fist' && infl == "UppercutPuff") multfactorHP *= frandompick(1.125,1.1875);
					if (mod == 'Kick') multfactorHP *= frandompick(1.0834,1.1667);
					randbonusincreaseHP *= multfactorHP;
					if (criticalhit) randbonusincreaseHP *= critdmgmulti;
					//if (dydudebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d", randbonusincreaseHP);
					if (MiscItem) MiscItem.HPRegenBoostTimer += randbonusincreaseHP;
					
					if (playpawn)
					{
						int prehealth = playpawn.player.mo.health;
						int phealmax;
						if (MiscItem) 
						{
							phealmax = MiscItem.MaxHealthTrue;
							phealmax *= (1.0 + (TruePlayerLevel * 0.005));
							if (phealmax > MiscItem.MaxHealthTrue * 3.0) phealmax = (MiscItem.MaxHealthTrue * 3.0);
						}
						if ((prehealth < phealmax) && random(1,16) <= random(7,9))
						{
							int targhealamt = (randompick(1,1,1,1,1,1,1,1,1,1,1,2) * critdmgmulti * multfactorHP);
							prehealth += targhealamt;
							A_RecoverHUD(targhealamt, 0, true);
							//if ((dvds_showdamagemessages & 1) && targhealamt > 0) A_PrintHealingMessage(playpawn, targhealamt);
							//Console.Printf("prehealth: %d, phealmax: %d, targhealamt: %d", prehealth, phealmax, targhealamt);
							if (prehealth > phealmax) prehealth = phealmax;
							playpawn.player.mo.health = playpawn.player.health = prehealth;
						}
					}
				}
			}
		}
		
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Pre-Function Call: damage: %d (initdmg: %d) isaghost: %d", GetClassName(), damage, initdmg, isaghost);
		double ssa = 1.00;
		damage *= ssa;
		
		bool miracle = false;
		if ((CountInv("MiracleBoss") > 0 || CountInv("MiracleMonster") > 0) && kc_monstershavemiracles)
		{
			bBUDDHA = true;
			miracle = true;
		}
		if (mod == 'IceWater') mod = 'Ice';
		if (kcdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [Pre?]\c-: \cyDamageFactor: %.8f)", DamageFactor);
		//************************************************************************
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		//************************************************************************
		if (kcdebug_actordmgdisplays) Console.Printf("    (\czActor Defensive Input [Post?]\c-: \cyDamageFactor: %.8f)", DamageFactor);
		if (miracle && kc_monstershavemiracles)
		{
			if (ret >= previoushealth) 
			{
				int newhealth = (SpawnHealth() + Stamina);
				if (CountInv("MiracleBoss") > 0) newhealth *= frandom(0.75,1.000);
				if (CountInv("MiracleMonster") > 0) newhealth *= frandom(0.334,1.000);
				health = newhealth;
				A_SpawnItemEx("MiracleCircle",0,0,(height*0.5),flags:SXF_NOCHECKPOSITION);
				
				double pitchch = frandom(-0.125,0.125);
				if (CountInv("MiracleMonster") > 0 || CountInv("MiracleBoss") > 0)
				{
					A_StartSound("misc/harpkey",544,CHANF_DEFAULT,1.0,ATTN_NORM,(1.00+pitchch));
					A_StartSound("misc/harpkey",545,CHANF_DEFAULT,1.0,ATTN_NORM,(frandom(0.95,1.05)+pitchch));
				}
				if (CountInv("MiracleBoss") > 0)
				{
					A_StartSound("misc/harpkey",546,CHANF_DEFAULT,1.0,ATTN_NORM,(frandom(0.90,1.10)+pitchch));
					A_StartSound("misc/harpkey",547,CHANF_DEFAULT,1.0,ATTN_NORM,(frandom(0.85,1.15)+pitchch));
				}
				A_GiveInventory("MiraclesUsed",1);
			}
			else miracle = false;
			if (bBUDDHA) bBUDDHA = false;
		}
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Post-Function Call: ret: %d (pre-function damage: %d) (initdmg: %d), isaghost: %d", GetClassName(), ret, damage, initdmg, isaghost);
		
		// Stun Inflict Items to give if they take damage from specific attacks
		bool givemeleeitem = true;
		if (isCCardsIllusion) givemeleeitem = false;
		if ((isCCardsGhost || isaghost) && health <= 0) givemeleeitem = false;
		if (kcdebug_actordmgdisplays) Console.Printf("givemeleeitem: %d [%p (%s)], isCCardsIllusion: %d, isCCardsGhost: %d, isaghost: %d", givemeleeitem, self, GetClassName(), isCCardsIllusion, isCCardsGhost, isaghost);
		if (givemeleeitem)
		{
			if (!miracle)
			{
				if ((KickPuff(inflictor) || KickPuffNoThrust(inflictor) || mod == 'Kick') && ret > 0) A_SetInventory("JustKicked",1);
				if ((UppercutPuff(inflictor) && mod == 'Fist') && ret > 0) A_SetInventory("JustUppercutted",1);
				if ((FistPuff(inflictor) && mod == 'Fist') && ret > 0) A_SetInventory("JustPunched",1);
				if (mod == 'DashingSD' && ret > 0) A_SetInventory("JustShieldDashed",1);
			}
		}
		
		if (miracle && kc_monstershavemiracles)
		{
			if (CountInv("MiracleBoss") > 0 && random(1,100) <= 90) A_TakeInventory("MiracleBoss",1);
			if (CountInv("MiracleMonster") > 0 && random(1,100) <= 99) A_TakeInventory("MiracleMonster",1);
			miracle = false;
		}
		
		if (((initdmg > 0 && ret == 0) || bINVULNERABLE || bNODAMAGE))
		{
			bool showdmglog;
			int tempdmgval = 10000;
			double tempdmgfactor = damagefactor;
			damagefactor = 1.0;
			int moddedDMG = ApplyDamageFactor(mod, tempdmgval);
			damagefactor = tempdmgfactor;
			double outputdmgfactor = 1.0;
			outputdmgfactor *= moddedDMG;
			outputdmgfactor /= tempdmgval;
			if (kcdebug_actordmgdisplays || dydudebug_hitsounds) Console.Printf("(\c[green]%s\c-) moddedDMG: %d (%.8f) (%s), damagefactor: %.8f", GetClassName(), moddedDMG, outputdmgfactor, mod, damagefactor);

			if (kc_monsternodmgvol > 0.0)
			{
				if (moddedDMG <= (tempdmgval * 0.6666667) || bINVULNERABLE || bNODAMAGE)
				{
					if ((source && PlayerPawn(source)) || (inflictor && PlayerPawn(inflictor)))
					{
						showdmglog = true;
						A_StopSound(14);
						A_StartSound("misc/hitnodmg", 14, CHANF_DEFAULT, (kc_monsternodmgvol * frandom(0.875,1.375)), ATTN_NONE, frandompick(0.8,1,1.25));
					}
					else
					if ((source && source.bFRIENDLY) || (inflictor && inflictor.bFRIENDLY))
					{
						showdmglog = true;
						A_StopSound(14);
						A_StartSound("misc/hitnodmg", 14, CHANF_DEFAULT, (kc_monsternodmgvol * frandom(0.875,1.375)), ATTN_NONE, frandompick(0.5,0.625,0.78125));
					}
					else
					if (source || inflictor)
					{
						showdmglog = true;
						A_StopSound(14);
						A_StartSound("misc/hitnodmg", 14, CHANF_DEFAULT, (kc_monsternodmgvol * frandom(0.875,1.375)), ATTN_NONE, frandompick(1.1,1.375,1.71875));
					}
				}
			}
			if (kc_combatlog && showdmglog)
			{
				string victname = GetTag();
				string atkrname = "(?)";
				string attkernam;
				if (!GetTag()) victname = vict;
				if (source)
				{
					if (source.GetTag()) attkernam = source.GetTag();
													else attkernam = source.GetClassName();
				}
				if (inflictor)
				{
					if (inflictor.GetTag()) atkrname = inflictor.GetTag();
														 else atkrname = inflictor.GetClassName();
				}
				string comblog = "";
				comblog.AppendFormat("\c[red]*\c- ");
				if (mod == 'NONE') mod = 'Typeless';
				comblog.AppendFormat("\c[red]%s\c-", victname);
				if (bINVULNERABLE) comblog.AppendFormat(" is currently \c[purple]invulnerable\c- from", victname);
											else comblog.AppendFormat(" took \c[purple]no damage\c- from", victname);
				if (inflictor && source && (inflictor != source)) comblog.AppendFormat(" \c[purple]%s's", attkernam);
				if (inflictor) comblog.AppendFormat(" \c[red]%s\c-!", atkrname);
				comblog.AppendFormat(" [\c[lightblue]%s\c-]", mod);
				if (dydudebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
				
				Console.Printf(comblog);
			}
		}
		initdmg = 0;
		
		if (ret > 0 && !bFRIENDLY)
		{
			bool ck = false;
			if ((KCPlayerPawn(inflictor) || KCPlayerPawn(source))) ck = true;
			if (!ck && ((source && source.bISMONSTER && source.bFRIENDLY) || (inflictor && inflictor.bISMONSTER && inflictor.bFRIENDLY))) ck = true;
			if (ck)
			{
				KCCreature expchek;
				expchek = KCCreature(self);
				if (expchek)
				{
					if (expchek.user_MaxHP > 0)
					{
						expchek.expshare += double((ret * 1.0) / (expchek.user_MaxHP * 1.0));
						if (expchek.expshare > 1.00) expchek.expshare = 1.00;
						if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Wrapping Up: expshare: %.8f, ret: %d, user_MaxHP: %d", GetClassName(), expchek.expshare, ret, expchek.user_MaxHP);
					}
					else
					if ((expchek.SpawnHealth() + expchek.Stamina) > 0)
					{
						expchek.expshare += double((ret * 1.0) / ((expchek.SpawnHealth() + expchek.Stamina) * 1.0));
						if (expchek.expshare > 1.00) expchek.expshare = 1.00;
						if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Wrapping Up: expshare: %.8f, ret: %d, user_MaxHP: %d", GetClassName(), expchek.expshare, ret, expchek.user_MaxHP);
					}
				}
			}
		}
		
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Wrapping Up [1]: \cyDamageFactor: %.8f\c-, firstdmgfactor: %.8f", GetClassName(), DamageFactor, firstdmgfactor);
		DamageFactor = firstdmgfactor;
		if (kcdebug_actordmgdisplays) Console.Printf("(\c[green]%s\c-) Wrapping Up [2]: finaldmg: %d, \cgDamageFactor: %.8f\c-, firstdmgfactor: %.8f", GetClassName(), ret, DamageFactor, firstdmgfactor);
		return ret;
	}
	
	override void PostBeginPlay()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvl2(1);
		//
		//
		//
	}
	
	void A_KCHealThing(int healvalue = 0, int healtarget = 0, int silentheal = 0)
	{
		if (healvalue > 0)
		{
			health += healvalue;
			if (health > healtarget) health = healtarget;
		}
		if (silentheal)
		{
			//if (CountInv("DamageTracker")) A_SetInventory("SilentHeal",1);
		}
	}
}

mixin class CollisionChecker
{
	string infl;
	actor projowner;
	// Checks for certain projectiles from charmed/friendly allies to pass through other friendlies instead of colliding
	int A_CheckFriendCollisionProjTypeFriendlyDoom()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyDoom:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHeretic()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHeretic:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyHexen()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyHexen:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyStrife()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyStrife:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyOthers()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendlyOthers:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendly1()
	{
		infl = GetClassName();
		
		int type;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypeFriendly1:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer(Actor actr)
	{
		infl = actr.GetClassName();
		projowner = actr.target;
		actor PlayPawn = PlayerPawn(projowner);
		actor ProjD;
		ProjD = KCProjectile(actr);
		
		int type;
		if (ProjD && PlayPawn) type = 1;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer2(Actor actr)
	{
		infl = actr.GetClassName();

		int type;
		if (
				// Circus 2 Stuff
				infl == "Sparkles" ||
				//CrazyBits1(actr) ||
				infl == "Popcorn_Shrap1" ||
				infl == "Popcorn_Shrap7" ||
				infl == "CrazyBalls" ||
				infl == "CrazyBall" ||
				infl == "CrazyBallDD"
			 ) type = 1;
		
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]CheckFriendCollisionProjTypePlayer2:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckCollisionProjShieldExemptionE(Actor actr)
	{
		infl = actr.GetClassName();

		int type;
	
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]A_CheckCollisionProjShieldExemptionE:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
	
	int A_CheckCollisionProjShieldExemption(Actor actr)
	{
		infl = actr.GetClassName();

		int type;
		//if () type = 1;
	
		if (kcdebug_generalcollisions) Console.Printf("\c[brick]A_CheckCollisionProjShieldExemption:\c- %s [type: %d] {gametic: %d}", infl, type, gametic);
		return type;
	}
}

mixin class InvWeaponShare
{
	// Misc
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;
	
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -7.5;
	const spread1angle2 = 7.5;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -3.75;
	const spread2angle2 = 3.75;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -3.75;
	const spread2pitch2 = 3.75;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;
	
	//===========================================================================
	//
	// A_ThrowGrenadeAngle
	//
	// Throws a grenade (like Hexen's fighter flechette) with the added options to tweak
	// the randomized angle-range used, and if to use fixed/doubles or ints for the angles.
	//
	//===========================================================================
	action bool, Actor A_ThrowGrenadeAngle(class<Actor> missile, double zheight = 0, double zheightoffset = 35, double xyvel = 0, double zvel = 0, double angularspreadmin = -4.0, double angularspreadmax = 3.0, bool usefixedangles = false, bool useammo = true, bool checkspawn = true)
	{
		if (kcdebug_attackstuff) Console.Printf("zheight: %.4f, xyvel: %.4f, zvel: %.4f, angularspreadmin: %.4f, angularspreadmax: %.4f", zheight, xyvel, zvel, angularspreadmin, angularspreadmax);
		double anglemin = angularspreadmin;
		double anglemax = angularspreadmax;
		if (!usefixedangles)
		{
			anglemin = int(angularspreadmin); 
			anglemax = int(angularspreadmax);
		}
		else
		{
			anglemin = angularspreadmin; 
			anglemax = angularspreadmax;
		}
		if (kcdebug_attackstuff) Console.Printf("anglemin: %.4f, anglemax: %.4f", anglemin, anglemax);

		if (missile == NULL)
		{
			return false, null;
		}
		if (stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			let player = self.player;
			if (player == null) return false, null;
			let weapon = player.ReadyWeapon;
			// Used from a weapon, so use some ammo

			if (weapon == NULL || (useammo && !weapon.DepleteAmmo(weapon.bAltFire)))
			{
				return true, null;
			}
		}

		let bo = Spawn(missile, pos + (0, 0, (-Floorclip + GetBobOffset() + zheight + zheightoffset + (player? player.crouchoffset : 0.))), ALLOW_REPLACE);
		if (bo)
		{
			if (kcdebug_attackfuncinfo) Console.Printf("bo [spawned]");
			self.PlaySpawnSound(bo);
			if (xyvel != 0)
				bo.Speed = xyvel;
			if (usefixedangles) bo.Angle = Angle + (frandom[grenade](anglemin, anglemax) * (360./256.));
										 else bo.Angle = Angle + (random[grenade](anglemin, anglemax) * (360./256.));

			let pitch = -self.Pitch;
			let angle = bo.Angle;

			// There are two vectors we are concerned about here: xy and z. We rotate
			// them separately according to the shooter's pitch and then sum them to
			// get the final velocity vector to shoot with.

			double xy_xyscale = bo.Speed * cos(pitch);
			double xy_velz = bo.Speed * sin(pitch);
			double xy_velx = xy_xyscale * cos(angle);
			double xy_vely = xy_xyscale * sin(angle);

			pitch = self.Pitch;
			double z_xyscale = zvel * sin(pitch);
			double z_velz = zvel * cos(pitch);
			double z_velx = z_xyscale * cos(angle);
			double z_vely = z_xyscale * sin(angle);

			bo.Vel.X = xy_velx + z_velx + Vel.X / 2;
			bo.Vel.Y = xy_vely + z_vely + Vel.Y / 2;
			bo.Vel.Z = xy_velz + z_velz;

			bo.target = self;
			if (checkspawn) 
			{
				if (kcdebug_attackfuncinfo) Console.Printf("bo: checkspawn: %d", checkspawn);
				if (!bo.CheckMissileSpawn(radius))
				{
					if (kcdebug_attackfuncinfo) Console.Printf("bo: null");
					bo = null;
				}
			}
			return true, bo;
		} 
		else
		{
			return false, null;
		}
	}
}