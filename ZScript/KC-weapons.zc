class KCWeaponBase : Weapon
{
	mixin DmgCalc;
	mixin InvWeaponShare;
	mixin ActorStateReplace;
	mixin HUDRecovery;

	int temp1;
	int tommybarrageno;
	
	int ActualLevel;
	int kickspeed;
	int punchspeed;
	int uppercutspeed;
	int buttons;
	int PlayerLevel;

	// Misc
	bool PickupUseVoice;
	bool PickupUseVoice2;
	string PickupSnd2;
	property PickUpVoice: PickupUseVoice;
	property PickUpVoice2: PickupUseVoice2;
	property PickupSound2: PickupSnd2;
	
	default
	{
		+WEAPON.NOAUTOAIM;
		+DONTGIB;
	}
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (toucher != NULL && toucher.CheckLocalView())
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
		}
		else
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_MAYBE_LOCAL;
		}
		//Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);

		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			}
		}
		toucher.A_StopSound(chan);
		toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		
		if (PickupSnd2 != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			//Console.Printf("Channel: %d [PUV2: %d]", chan, PickupUseVoice2);
			
			double maskpitch = 1.00;
			if (PickupUseVoice2) 
			{
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
			}
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
		}
	}
	
	action double A_GetHandToHandSpd(int type)
	{
		double output;
		if (type <= 0) output = kc_punchspdlvlint;
		if (type == 1) output = kc_upcutspdlvlint;
		if (type >= 2) output = kc_kickspdlvlint;
		double oldoutput = output;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			if (type >= 2) // If Kicking
			{
				/*
				if (player.ReadyWeapon is "FistHeiwa")
				{
					output *= (1.0 / frandompick(1.334,1.5,1.5,1.5,1.667));
				}
				if (player.ReadyWeapon is "EvilWarriorShield")
				{
					if (CountInv("EWShieldDefendMode")) output *= (1.0 / frandompick(0.50,0.65,0.65,0.65,0.80));
																				 else output *= (1.0 / frandompick(0.875,0.9,0.9,0.9,0.925));
					if (MiscItem.HellWarriorShieldLevel) output *= (1.0 / (1.0 - (MiscItem.HellWarriorShieldLevel * 0.05)));
				}
				*/
			}
		}
		if (CountInv("PowerHaste")) output *= (1.0 / 1.334);
		if (CountInv("PowerSlow")) output *= (1.0 / 0.75);
		if (output <= 0.05) output = 0.05;
		if (kcdebug_meleeinformation) Console.Printf("[type: %d] output: %.8f [%.8f]", type, output, oldoutput);
		return output;
	}

	action bool A_CheckBerserk()
	{
		bool check = false;
		if (CountInv("PowerStrength") || CountInv("KCPowerStrength")) check = true;
		return check;
	}
	
	action bool A_CheckInfiniteAmmo()
	{
		actor playera = players[0].mo;
		bool check = false;
		if (playera.CountInv("PowerInfiniteAmmo")) check = true;
		return check;
	}
	
	action int A_GetMeleeSPDLvl(int type = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetMeleeSPDLvl - DDWeapon)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	action void A_FireBulletsEx(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		let player = player;
		if (!player) return;

		let pawn = PlayerPawn(self);
		let weapon = player.ReadyWeapon;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags & FBF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;
		FTranslatedLineTarget t;

		if ((flags & FBF_USEAMMO) && weapon &&  stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}
		
		if (range == 0)	range = PLAYERMISSILERANGE;

		if (!(flags & FBF_NOFLASH)) pawn.PlayAttacking2 ();

		if (!(flags & FBF_NOPITCH)) bslope = BulletSlope();
		bangle = Angle;

		if (pufftype == NULL) pufftype = 'BulletPuff';

		if (weapon != NULL)
		{
			A_StartSound(weapon.AttackSound, CHAN_WEAPON);
		}

		if ((numbullets == 1 && !player.refire) || numbullets == 0)
		{
			int damage = damageperbullet;

			if (!(flags & FBF_NORANDOM))
				damage *= random[cabullet](1, 3);

			let puff = LineAttack(bangle, range, bslope, damage, 'Hitscan', pufftype, laflags, t);

			if (missile != null)
			{
				bool temp = false;
				double ang = Angle - 90;
				Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
				Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
				if (proj)
				{
					if (!puff)
					{
						temp = true;
						puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
					}
					AimBulletMissile(proj, puff, flags, temp, false);
					if (t.unlinked)
					{
						// Arbitary portals will make angle and pitch calculations unreliable.
						// So use the angle and pitch we passed instead.
						proj.Angle = bangle;
						proj.Pitch = bslope;
						proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
					}
				}
			}
		}
		else 
		{
			if (numbullets < 0)
				numbullets = 1;
			for (i = 0; i < numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags & FBF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cabullet]() / 255.;
					slope += spread_z * Random2[cabullet]() / 255.;
				}

				int damage = damageperbullet;

				if (!(flags & FBF_NORANDOM))
					damage *= random[cabullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags, t);

				if (missile != null)
				{
					bool temp = false;
					double ang = Angle - 90;
					Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
					Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
					if (proj)
					{
						if (!puff)
						{
							temp = true;
							puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
						}
						AimBulletMissile(proj, puff, flags, temp, false);
						if (t.unlinked)
						{
							// Arbitary portals will make angle and pitch calculations unreliable.
							// So use the angle and pitch we passed instead.
							proj.Angle = bangle;
							proj.Pitch = bslope;
							proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
						}
					}
				}
			}
		}
	}
	
	action void A_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		int sflags = flags;
		if (sflags & FBF_USEAMMO) sflags -= FBF_USEAMMO;
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
		if (playera.CountInv("KCPowerSpread2"))
		{
			playera.angle -= spread2angle;
			playera.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle -= spread2angle;
			playera.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
			playera.pitch = pptc;
		}
		if (playera.CountInv("KCPowerSpread2") || playera.CountInv("KCPowerSpread1"))
		{
			playera.angle -= spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
			
			playera.angle += spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			playera.angle = pang;
		}
		A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, flags, range, missile, Spawnheight, Spawnofs_xy);
	}

	action Actor, Actor A_FireProjectileEx(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)	
	{
		let player = self.player;
		if (!player) return null;

		let weapon = player.ReadyWeapon;

		FTranslatedLineTarget t;

			// Only use ammo if called from a weapon
		if (useammo && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return null;	// out of ammo
		}

		if (missiletype) 
		{
			double ang = self.Angle - 90;
			Vector2 ofs = AngleToVector(ang, spawnofs_xy);
			double shootangle = self.Angle;

			if (flags & FPF_AIMATANGLE) shootangle += angle;

			// Temporarily adjusts the pitch
			double saved_player_pitch = self.Pitch;
			self.Pitch += pitch;

			Actor misl, realmisl;
			[misl, realmisl] = SpawnPlayerMissile (missiletype, shootangle, ofs.X, ofs.Y, spawnheight, t, false, (flags & FPF_NOAUTOAIM) != 0);
			self.Pitch = saved_player_pitch;

			if (realmisl && flags & FPF_TRANSFERTRANSLATION)
				realmisl.Translation = Translation;

			// automatic handling of seeker missiles
			if (misl)
			{
				if (t.linetarget && !t.unlinked && misl.bSeekerMissile)
					misl.tracer = t.linetarget;
				if (!(flags & FPF_AIMATANGLE))
				{
					// This original implementation is to aim straight ahead and then offset
					// the angle from the resulting direction. 
					misl.Angle += angle;
					misl.VelFromAngle(misl.Vel.XY.Length());
				}
			}
			if (kcdebug_weaponstatdisplays)
			{
				if (misl) Console.Printf("\c[green](A_FireProjectileEx)\c- misl: %p [%s]", misl, misl.GetClassName());
				if (realmisl) Console.Printf("\c[green](A_FireProjectileEx)\c- realmisl: %p [%s]", realmisl, realmisl.GetClassName());
			}
			return misl, realmisl;
		}
		return null, null;
	}
	
	//action Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor A_FireProjectile(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
	action void A_FireProjectile(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
	{
		actor misl1, misl2, misl3, misl4, misl5, misl6, misl7;
		actor realmisl1, realmisl2, realmisl3, realmisl4, realmisl5, realmisl6, realmisl7;
		
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
		if (playera.CountInv("KCPowerSpread2"))
		{
			playera.angle -= spread2angle;
			playera.pitch -= spread2pitch;
			[misl7, realmisl7] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle -= spread2angle;
			playera.pitch += spread2pitch;
			[misl6, realmisl6] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch -= spread2pitch;
			[misl5, realmisl5] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch += spread2pitch;
			[misl4, realmisl4] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
			playera.pitch = pptc;
		}
		if (playera.CountInv("KCPowerSpread2") || playera.CountInv("KCPowerSpread1"))
		{
			playera.angle -= spread1angle;
			[misl3, realmisl3] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
			
			playera.angle += spread1angle;
			[misl2, realmisl2] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			playera.angle = pang;
		}
		[misl1, realmisl1] = A_FireProjectileEx(missiletype, angle, useammo, spawnofs_xy, spawnheight, flags, pitch);
		if (kcdebug_weaponstatdisplays)
		{
			if (misl1) Console.Printf("\c[yellow](A_FireProjectile)\c- misl1: %p [%s]", misl1, misl1.GetClassName());
			if (realmisl1) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl1: %p [%s]", realmisl1, realmisl1.GetClassName());
			if (misl2) Console.Printf("\c[yellow](A_FireProjectile)\c- misl2: %p [%s]", misl2, misl2.GetClassName());
			if (realmisl2) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl2: %p [%s]", realmisl2, realmisl2.GetClassName());
			if (misl3) Console.Printf("\c[yellow](A_FireProjectile)\c- misl3: %p [%s]", misl3, misl3.GetClassName());
			if (realmisl3) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl3: %p [%s]", realmisl3, realmisl3.GetClassName());
			if (misl4) Console.Printf("\c[yellow](A_FireProjectile)\c- misl4: %p [%s]", misl4, misl4.GetClassName());
			if (realmisl4) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl4: %p [%s]", realmisl4, realmisl4.GetClassName());
			if (misl5) Console.Printf("\c[yellow](A_FireProjectile)\c- misl5: %p [%s]", misl5, misl5.GetClassName());
			if (realmisl5) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl5: %p [%s]", realmisl5, realmisl5.GetClassName());
			if (misl6) Console.Printf("\c[yellow](A_FireProjectile)\c- misl6: %p [%s]", misl6, misl6.GetClassName());
			if (realmisl6) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl6: %p [%s]", realmisl6, realmisl6.GetClassName());
			if (misl7) Console.Printf("\c[yellow](A_FireProjectile)\c- misl7: %p [%s]", misl7, misl7.GetClassName());
			if (realmisl7) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl7: %p [%s]", realmisl7, realmisl7.GetClassName());
		}
		//return misl1, realmisl1, misl2, realmisl2, misl3, realmisl3, misl4, realmisl4, misl5, realmisl5, misl6, realmisl6, misl7, realmisl7;
	}
	
	action void A_CustomPunchEx(int damage, bool norandom = false, int flags = CPF_USEAMMO, class<Actor> pufftype = "BulletPuff", double range = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus", sound MeleeSound = 0, sound MissSound = "")
	{
		let player = self.player;
		if (!player) return;

		let weapon = player.ReadyWeapon;

		double angle;
		double pitch;
		FTranslatedLineTarget t;
		int	actualdamage;

		if (!norandom)
			damage *= random[cwpunch](1, 8);

		angle = self.Angle + random2[cwpunch]() * (5.625 / 256);
		if (range == 0) range = DEFMELEERANGE;
		pitch = AimLineAttack (angle, range, t, 0., ALF_CHECK3D);

		// only use ammo when actually hitting something!
		if ((flags & CPF_USEAMMO) && t.linetarget && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}

		if (pufftype == NULL)
			pufftype = 'BulletPuff';
		int puffFlags = LAF_ISMELEEATTACK | ((flags & CPF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0);

		Actor puff;
		[puff, actualdamage] = LineAttack (angle, range, pitch, damage, 'Melee', pufftype, puffFlags, t);

		if (!t.linetarget)
		{
			if (MissSound) A_StartSound(MissSound, CHAN_WEAPON);
		}
		else
		{
			if (lifesteal > 0 && !(t.linetarget.bDontDrain))
			{
				if (flags & CPF_STEALARMOR)
				{
					if (armorbonustype == NULL)
					{
						armorbonustype = 'ArmorBonus';
					}
					if (armorbonustype != NULL)
					{
						let armorbonus = BasicArmorBonus(Spawn(armorbonustype));
						if (armorbonus)
						{
							armorbonus.SaveAmount *= int(actualdamage * lifesteal);
							if (lifestealmax > 0) armorbonus.MaxSaveAmount = lifestealmax;
							armorbonus.bDropped = true;
							armorbonus.ClearCounters();

							if (!armorbonus.CallTryPickup(self))
							{
								armorbonus.Destroy();
							}
						}
					}
				}
				else
				{
					GiveBody (int(actualdamage * lifesteal), lifestealmax);
				}
			}
			if (weapon != NULL)
			{
				if (MeleeSound) A_StartSound(MeleeSound, CHAN_WEAPON);
				else A_StartSound(weapon.AttackSound, CHAN_WEAPON);
			}

			if (!(flags & CPF_NOTURN))
			{
				// turn to face target
				self.Angle = t.angleFromSource;
			}

			if (flags & CPF_PULLIN) self.bJustAttacked = true;
			if (flags & CPF_DAGGER) 
			{
				actor playera = players[0].mo;
				if (!(playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3")))
				{
					t.linetarget.DaggerAlert(self);
				}
			}
		}
	}

	action void A_CustomPunch(int damage, bool norandom = false, int flags = CPF_USEAMMO, class<Actor> pufftype = "BulletPuff", double range = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus", sound MeleeSound = 0, sound MissSound = "")
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
		if (playera.CountInv("KCPowerSpread2"))
		{
			playera.angle -= spread2angle;
			playera.pitch -= spread2pitch;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle -= spread2angle;
			playera.pitch += spread2pitch;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch -= spread2pitch;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch += spread2pitch;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
			playera.pitch = pptc;
		}
		if (playera.CountInv("KCPowerSpread2") || playera.CountInv("KCPowerSpread1"))
		{
			playera.angle -= spread1angle;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
			
			playera.angle += spread1angle;
			A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
			playera.angle = pang;
		}
		A_CustomPunchEx(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, MeleeSound, MissSound);
	}
	action int A_CheckMeleeDestroyProj(int type = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;

		int debugmelee = kcdebug_meleeinformation;
		int MeleeDestroyProjectiles = 0;
		double MaxCheck = 16;
		double checkvalfactor = frandom(0.075,0.125);
		if (type == 0) // Punch
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= 0.5;
		}
		if (type == 1) // Uppercut
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= 0.875;
		}
		if (type == 2) // Kick
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= frandompick(0.875,1,1.125);
		}
		checkvalfactor *= 1.5;
		if (A_CheckBerserk()) checkvalfactor *= frandompick(3,3.5,3.5,4.0,4.0,4.0,4.375,4.375,4.375,4.375,4.375,4.75,4.75,4.75,5.125,5.125,5.5);
		if (MiscItem) 
		{
			if (A_CheckBerserk()) MaxCheck = (2.6667 - (((TruePlayerLevel+1) * checkvalfactor) * 6));
											 else MaxCheck = (16 - ((TruePlayerLevel+1) * checkvalfactor));
		}

		if (MaxCheck <= 0.01) MaxCheck = 0.01;
		double randomroll = frandom(0.01,MaxCheck);
		if (randomroll <= 1.0) MeleeDestroyProjectiles = 1;
		if (debugmelee) Console.Printf("\c[green]MeleeDestroyProjectiles [weapon]:\c- type: %d, RandomRoll / MaxCheck: %.4f / %.4f, MeleeDestroyProjectiles: %d, checkvalfactor: %.4f (\c[gold]%.4f\c-)", type, randomroll, MaxCheck, MeleeDestroyProjectiles, checkvalfactor, (checkvalfactor * (TruePlayerLevel+1)));

		return MeleeDestroyProjectiles;
	}
	
	action void A_MeleeSetUpAttach(actor mo, double xpos = 0.0, double ypos = 0.0, double zpos = 0.0, double ang = 0.0, double ptc = 0.0)
	{
		if (mo)
		{
			if (kcdebug_showvisibleshieldparts) Console.Printf("[mo]: %s", mo.GetClassName());
			ShieldPartBase SHmo;
			SHmo = ShieldPartBase(mo);
			if (SHmo)
			{
				actor playera = players[0].mo;
				if (kcdebug_showvisibleshieldparts) Console.Printf("[SHmo]: %s", SHmo.GetClassName());
				SHmo.attachx = xpos;
				SHmo.attachy = ypos;
				SHmo.attachz = zpos;
				SHmo.attachang = ang;
				SHmo.attachptc = ptc;
				SHmo.shieldee = playera;
				SHmo.target = playera;
				if (kcdebug_showvisibleshieldparts) Console.Printf("attachx: %.2f, attachy: %.2f, attachz: %.2f, shieldee: %s", SHmo.attachx, SHmo.attachy, SHmo.attachz, SHmo.shieldee.GetClassName());
			}
		}
	}
	
	// Used to Create Multiple "Shields" for Punches/Melee
	action void A_MeleeShieldPiece(string attackname = "", int spawnheight = 32, int spawndistance = 0, double angoffset = 0.0, double ptcoffset = 0.0)
	{
		bool spawned;
		actor mo;
		
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
		if (playera.CountInv("KCPowerSpread2"))
		{
			A_SetAngle(angle+spread2angle);
			A_SetPitch(pitch+spread2pitch);
			angoffset += spread2angle;
			ptcoffset += spread2pitch;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle-spread2angle);
			A_SetPitch(pitch-spread2pitch);
			angoffset -= spread2angle;
			ptcoffset -= spread2pitch;
			
			A_SetAngle(angle+spread2angle);
			A_SetPitch(pitch-spread2pitch);
			angoffset += spread2angle;
			ptcoffset -= spread2pitch;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle-spread2angle);
			A_SetPitch(pitch+spread2pitch);
			angoffset -= spread2angle;
			ptcoffset += spread2pitch;
			
			A_SetAngle(angle-spread2angle);
			A_SetPitch(pitch+spread2pitch);
			angoffset -= spread2angle;
			ptcoffset += spread2pitch;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle+spread2angle);
			A_SetPitch(pitch-spread2pitch);
			angoffset += spread2angle;
			ptcoffset -= spread2pitch;
			
			A_SetAngle(angle-spread2angle);
			A_SetPitch(pitch-spread2pitch);
			angoffset -= spread2angle;
			ptcoffset -= spread2pitch;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle+spread2angle);
			A_SetPitch(pitch+spread2pitch);
			angoffset += spread2angle;
			ptcoffset += spread2pitch;
		}
		if (playera.CountInv("KCPowerSpread2") || playera.CountInv("KCPowerSpread1"))
		{
			A_SetAngle(angle+spread1angle);
			angoffset += spread1angle;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle-spread1angle);
			angoffset -= spread1angle;
			
			A_SetAngle(angle-spread1angle);
			angoffset -= spread1angle;
			[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
			A_SetAngle(angle+spread1angle);
			angoffset += spread1angle;
		}
		[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
		if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action double A_LowerRaiseCheck(double movespeed)
	{
		string nm, nn, no, np, nq, nr;
		double bufffactor = 1.0;
		double weaponfactor = 1.0;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = invoker.ActualLevel;
			int PlayerSPD;
			
			if (MiscItem) 
			{
				PlayerSPD = MiscItem.TruePlayerSPD;
				movespeed *= (1.0 + ((TruePlayerLevel + PlayerSPD) * 0.02));
				
				movespeed *= bufffactor;
				
				if (player.ReadyWeapon is "TommyGun") weaponfactor -= 0.10;
				nm = "ImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.25 + (TruePlayerLevel * 0.025));
					if (temp < -0.25) temp = -0.25;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "DualImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.375 + (TruePlayerLevel * 0.025));
					if (temp < -0.375) temp = -0.375;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "ScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.1667;
				nm = "DualScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.125;
				
				if (player.ReadyWeapon is "FistMarine") weaponfactor += 1.00;
				if (player.ReadyWeapon is "ChainsawMarine") weaponfactor += 0.50;
				if (player.ReadyWeapon is "PistolMarine") weaponfactor += 0.50;
				if (player.ReadyWeapon is "Glock21") weaponfactor += 0.75;
				movespeed *= weaponfactor;
				

				if (A_CheckBerserk()) movespeed *= 1.5;
			}
			if (movespeed > 80) movespeed = 80;
			
			if (kcdebug_weaponstatdisplays) Console.Printf("movespeed: %d, bufffactor: %.4f, weaponfactor: %.4f", movespeed, bufffactor, weaponfactor);
		}
		return movespeed;
	}
	
	action void A_Lower(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Lower: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (null == player.ReadyWeapon)
		{
			player.mo.BringUpWeapon();
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;
		if (player.morphTics || player.cheats & CF_INSTANTWEAPSWITCH)
		{
			psp.y = WEAPONBOTTOM;
		}
		else
		{
			psp.y += movespeed;
		}
		if (psp.y < WEAPONBOTTOM)
		{ // Not lowered all the way yet
			return;
		}
		ResetPSprite(psp);
		
		if (player.playerstate == PST_DEAD)
		{ // Player is dead, so don't bring up a pending weapon
			// Player is dead, so keep the weapon off screen
			player.SetPsprite(PSP_FLASH, null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		// [RH] Clear the flash state. Only needed for Strife.
		player.SetPsprite(PSP_FLASH, null);
		player.mo.BringUpWeapon ();
		return;
	}
	
	action void A_Raise(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Raise: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			player.mo.DropWeapon();
			return;
		}
		if (player.ReadyWeapon == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;

		if (psp.y <= WEAPONBOTTOM)
		{
			ResetPSprite(psp);
		}
		psp.y -= movespeed;
		if (psp.y > WEAPONTOP)
		{ // Not raised all the way yet
			return;
		}
		psp.y = WEAPONTOP;
		
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
	}
	
	action int A_WeaponCheckDoubleFireRate()
	{
		int result = 0;
		if (CountInv("PowerDoubleFiringSpeed")) result = 1;
		return result;
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	action int A_HoldInWeapon(int type = 0)
	{
		int buttons;

		int result = 0;
		if (CountInv("IsUnconscious")) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS);
			if (buttons & BT_ALTATTACK) result = 1;
			else if (buttons & BT_ATTACK) result = 2;
		}
		return result;
	}
	
	action void A_QMWKickInit()
	{
		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!(playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3")))
				{
					invoker.A_KCAlertMonsters(); 
				} // Sometimes a swing will be enough to wake up all monsters in the area.
			}
		}
	}
	
	override void Tick()
	{
		super.Tick();
		Double Dbl;
		Sector Sec;
		[Dbl,Sec] = CurSector.LowestFloorAt(Pos.XY);
		if (pos.z <= Dbl && !owner)
		{
			if (cursector.damagetype == 'InstantDeath' ||
					cursector.damagetype == 'Massacre')
			{
				if (bCOUNTITEM) level.total_items--;
				Spawn("ItemFallSpot", (pos.x, pos.y, pos.z), NO_REPLACE);
				if (kcdebug_itempitfalls) Console.Printf("%s [%p] \c[green](EEWeapon)\c- fell into a bottomless pit! [tic: %d]", GetClassName(), self, gametic);
				Destroy();
			}
		}
	}
	

	// Fist Block Function
	action void A_PFistBlockOn()
	{
		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;
		
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		if (MiscItem)
		{
			if (TruePlayerLevel >= 0 && TruePlayerLevel <= 19)
			{
				A_SetInventory("FistPlayerBlock",1);
				A_SetInventory("FistPlayerSpeedFactor",1);
			}
			if (TruePlayerLevel >= 20 && TruePlayerLevel <= 49)
			{
				A_SetInventory("FistPlayerBlock2",1);
				A_SetInventory("FistPlayerSpeedFactor2",1);
			}
			if (TruePlayerLevel >= 50 && TruePlayerLevel <= 89)
			{
				A_SetInventory("FistPlayerBlock3",1);
				A_SetInventory("FistPlayerSpeedFactor3",1);
			}
			if (TruePlayerLevel >= 90)
			{
				A_SetInventory("FistPlayerBlock4",1);
				A_SetInventory("FistPlayerSpeedFactor4",1);
			}
		}
		else
		{
			A_SetInventory("FistPlayerBlock",0);
			A_SetInventory("FistPlayerSpeedFactor",1);
		}
		if (random(1,16) <= 1) 
		{
			A_SetInventory("FistPlayerBlockExtra",1); 
			if (random(1,16) <= 1 && TruePlayerLevel >= 50)
			{
				A_SetInventory("FistPlayerBlockExtra2",1); 
			}
		}
	}

	action void A_PFistBlockOff()
	{
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		A_SetInventory("FistPlayerBlockItem",0);
		//bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}

	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		double result = basedist;
		return result;
	}

	action void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		int debugrecoil = kcdebug_showrecoilinformation;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int BerserkAdd;
		int PlayerLevel;
		int PlayerATK;
		int PlayerSPD;
		double recoil;
		double recoilmulti;
		
		if (MiscItem)
		{
			PlayerLevel = MiscItem.TruePlayerLevel;
			PlayerATK = MiscItem.TruePlayerATK;
			PlayerSPD = MiscItem.TruePlayerSPD;
		}
		
		if (kc_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				// Base "Recoil"
				double baserecoil = -0.0500;
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * random(0,4);
				if (attacktype == 0) recoil = baserecoil * (random(0,4) + BerserkAdd);
				if (attacktype == 1) recoil = baserecoil * (random(2,10) + BerserkAdd);
				if (attacktype == 2) recoil = baserecoil * (random(4,8) + BerserkAdd);
				if (attacktype == 3) recoil = baserecoil * (random(8,20) + BerserkAdd);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (A_CheckBerserk())
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerATK * 0.000390625) - (PlayerSPD * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);


				A_Recoil(recoil);
			}
		}
	}

	action void A_GetKickSwingRecoil(int attacktype = 0)
	{
		bool debugmelee = kcdebug_showmeleeinformation;
		bool debugrecoil = kcdebug_showrecoilinformation;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PlayerLevel;
		int PlayerATK;
		int PlayerSPD;
		double recoil;
		double recoilmulti;
		
		if (MiscItem)
		{
			PlayerLevel = MiscItem.TruePlayerLevel;
			PlayerATK = MiscItem.TruePlayerATK;
			PlayerSPD = MiscItem.TruePlayerSPD;
		}
		
		if (kc_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				// Base "Recoil"
				double baserecoil = -0.0500;
				recoil = baserecoil * random(-4,4);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (A_CheckBerserk()) 
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerATK * 0.000390625) - (PlayerSPD * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}
	
	action void A_Saw(sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2, class<Actor> pufftype = "BulletPuff", int flags = 0, double range = 0, double spread_xy = 2.8125, double spread_z = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus")
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}

		if (pufftype == null)
		{
			pufftype = 'BulletPuff';
		}
		if (damage == 0)
		{
			damage = 2;
		}
		if (!(flags & SF_NORANDOM))
		{
			damage *=  random[Saw](1, 10);
		}
		if (range == 0)
		{ 
			range = MeleeRange + MELEEDELTA + (1. / 65536.); // MBF21 SAWRANGE;
		}

		double ang = angle + spread_xy * (Random2[Saw]() / 255.);
		double slope = AimLineAttack (ang, range, t) + spread_z * (Random2[Saw]() / 255.);

		Weapon weap = player.ReadyWeapon;
		if (weap != null && !(flags & SF_NOUSEAMMO) && !(!t.linetarget && (flags & SF_NOUSEAMMOMISS)) && !weap.bDehAmmo &&
			invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire))
				return;
		}

		int puffFlags = (flags & SF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0;

		Actor puff;
		int actualdamage;
		[puff, actualdamage] = LineAttack (ang, range, slope, damage, 'Melee', pufftype, puffFlags, t);

		if (!t.linetarget)
		{
			if ((flags & SF_RANDOMLIGHTMISS) && (Random[Saw]() > 64))
			{
				player.extralight = !player.extralight;
			}
			A_StartSound (fullsound, CHAN_WEAPON);
			return;
		}

		if (flags & SF_RANDOMLIGHTHIT)
		{
			int randVal = Random[Saw]();
			if (randVal < 64)
			{
				player.extralight = 0;
			}
			else if (randVal < 160)
			{
				player.extralight = 1;
			}
			else
			{
				player.extralight = 2;
			}
		}

		if (lifesteal && !t.linetarget.bDontDrain)
		{
			if (flags & SF_STEALARMOR)
			{
				if (armorbonustype == null)
				{
					armorbonustype = "ArmorBonus";
				}
				if (armorbonustype != null)
				{
					BasicArmorBonus armorbonus = BasicArmorBonus(Spawn(armorbonustype));
					armorbonus.SaveAmount = int(armorbonus.SaveAmount * actualdamage * lifesteal);
					armorbonus.MaxSaveAmount = lifestealmax <= 0 ? armorbonus.MaxSaveAmount : lifestealmax;
					armorbonus.bDropped = true;
					armorbonus.ClearCounters();

					if (!armorbonus.CallTryPickup (self))
					{
						armorbonus.Destroy ();
					}
				}
			}

			else
			{
				GiveBody (int(actualdamage * lifesteal), lifestealmax);
			}
		}

		A_StartSound (hitsound, CHAN_WEAPON);
			
		// turn to face target
		if (!(flags & SF_NOTURN))
		{
			double anglediff = deltaangle(angle, t.angleFromSource);

			if (anglediff < 0.0)
			{
				if (anglediff < -4.5)
					angle = t.angleFromSource + 90.0 / 21;
				else
					angle -= 4.5;
			}
			else
			{
				if (anglediff > 4.5)
					angle = t.angleFromSource - 90.0 / 21;
				else
					angle += 4.5;
			}
		}
		if (!(flags & SF_NOPULLIN))
			bJustAttacked = true;
	}

	protected action void GunShot(int accurate, Class<Actor> pufftype, double pitch)
	{
		int damage = 5;
		int randpick = randompick[GunShot](1,2,3);
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			if (MiscItem.PlayerLuck >= 50) randpick = randompick[GunShot](1,2,2,2,3);
			if (MiscItem.PlayerLuck >= 100) randpick = randompick[GunShot](1,2,3,3,3);
			if (MiscItem.PlayerLuck >= 150) randpick = randompick[GunShot](2,3,3,3,3);
			if (MiscItem.PlayerLuck >= 200) randpick = randompick[GunShot](3,3,3,3,3,3,3,3,3,4);
		}
		
		damage *= randpick;
		
		double ang = angle;
		double randang = 5.625;
		double randpth = 3.549;
		if (accurate == -1) // Pistol Alt-Fire
		{
			randang *= 1.5;
			randpth *= 1.5;
		}
		if (accurate == -2) // Chaingun Alt-Fire
		{
			randang *= frandompick(1.25,1.75);
			randpth *= frandompick(1.875,2.5);
		}

		if (accurate <= 0)
		{
			if (kcdebug_attackstuff) Console.Printf("randang: %.8f, randpth: %.8f", randang, randpth);
			double rando = frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			ang += Random2[GunShot]() * ((randang * rando) / 256);

			if (GetCVar("vertspread") && !sv_novertspread)
			{
				pitch += Random2[GunShot]() * ((randpth * rando) / 256);
			}
		}
		
		LineAttack(ang, PLAYERMISSILERANGE, pitch, damage, 'Bullet', pufftype);
	}
	
	action void A_FirePistol(int type = 0)
	{
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			A_TakeInventory("Clip",1);
			A_StartSound ("weapons/pistol", CHAN_WEAPON);
			for (int i = 0; i < 1; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = !player.refire ? 0.0 : (3.549 * 0.5);
				double randangle = !player.refire ? 0.0 : (5.625 * 0.5);
				if (type > 0)
				{
					randpitch = (3.549 * 0.625);
					randangle = (5.625 * 0.625);
				}
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (5 * random(1,3));
					}
				}
			}
		}
		else
		{
			int accurate;
			if (type > 0) accurate = -1;

			if (player != null)
			{
				Weapon weap = player.ReadyWeapon;
				if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
				{
					if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
						return;

					player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
				}
				player.mo.PlayAttacking2();

				accurate = !player.refire;
				if (type > 0) accurate = -1;
			}
			else
			{
				accurate = 1;
			}

			A_StartSound ("weapons/pistol", CHAN_WEAPON);
			GunShot(accurate, "KCBulletPuff2", BulletSlope());
		}

	}
	
	action void A_FireShotgun()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			A_TakeInventory("Shell",1);
			A_StartSound ("weapons/shotgf", CHAN_WEAPON);
			for (int i = 0; i < 7; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = 0.0;
				double randangle = (5.625 * 0.5);
				randangle *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (5 * random(1,3));
					}
				}
			}
		}
		else 
		{
			if (player == null)
			{
				return;
			}

			A_StartSound ("weapons/shotgf", CHAN_WEAPON);
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
					return;
				
				player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
			}
			player.mo.PlayAttacking2 ();
			
			double pitch = BulletSlope ();
			
			for (int i = 0; i < 7; i++)
			{
				GunShot(false, "KCBulletPuff2", pitch);
			}
		}
	}
	
	action void A_FireShotgun2()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			A_TakeInventory("Shell",2);
			A_StartSound ("weapons/sshotf", CHAN_WEAPON);
			for (int i = 0; i < 20; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = (7.097 * 0.5);
				double randangle = (11.25 * 0.5);
				randangle *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				randpitch *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (5 * random(1,3));
					}
				}
			}
		}
		else 
		{
			if (player == null)
			{
				return;
			}

			A_StartSound ("weapons/sshotf", CHAN_WEAPON);
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 2))
					return;
				
				player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
			}
			player.mo.PlayAttacking2 ();

			double pitch = BulletSlope ();
				
			for (int i = 0 ; i < 20 ; i++)
			{
				int damage = 5 * random[FireSG2](1, 3);
				
				double ang = Random2[FireSG2]() * (11.25 / 256);
				ang *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				ang += angle;
				double ptc = Random2[FireSG2]() * (7.097 / 256);
				ptc *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				ptc += pitch;
				
				// Doom adjusts the bullet slope by shifting a random number [-255,255]
				// left 5 places. At 2048 units away, this means the vertical position
				// of the shot can deviate as much as 255 units from nominal. So using
				// some simple trigonometry, that means the vertical angle of the shot
				// can deviate by as many as ~7.097 degrees.
				
				LineAttack (ang, PLAYERMISSILERANGE, ptc, damage, 'Bullet', "BulletPuff");
			}
		}
	}
	
	action void A_OpenShotgun2() 
	{ 
		A_StartSound("weapons/sshoto", CHAN_WEAPON); 
	}
	
	action void A_LoadShotgun2() 
	{ 
		A_StartSound("weapons/sshotl", CHAN_WEAPON); 
	}
	
	action void A_CloseShotgun2() 
	{ 
		A_StartSound("weapons/sshotc", CHAN_WEAPON);
		A_Refire();
	}
	
	action void A_FireCGun(int type)
	{
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			A_TakeInventory("Clip",1);
			A_StartSound ("weapons/chngun", CHAN_WEAPON);
			for (int i = 0; i < 1; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = !player.refire ? 0.0 : (3.549 * 0.5);
				double randangle = !player.refire ? 0.0 : (5.625 * 0.5);
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (5 * random(1,3));
					}
				}
			}
		}
		else
		{
			int accurate;
			if (type > 0) accurate = -2;
			
			if (player == null)
			{
				return;
			}

			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
					return;

				A_StartSound ("weapons/chngun", CHAN_WEAPON);

				State flash = weap.FindState('Flash');
				if (flash != null)
				{
					// Removed most of the mess that was here in the C++ code because SetSafeFlash already does some thorough validation.
					State atk = weap.FindState('Fire');
					let psp = player.GetPSprite(PSP_WEAPON);
					if (psp) 
					{
						State cur = psp.CurState;
						int theflash = atk == cur? 0:1;
						player.SetSafeFlash(weap, flash, theflash);
					}
				}
				accurate = !player.refire;
				if (type > 0) accurate = -2;
			}
			
			player.mo.PlayAttacking2 ();
			GunShot (accurate, "KCBulletPuff2", BulletSlope ());
		}
	}
	
	action void A_FireMissile()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		SpawnPlayerMissile ("Rocket");
	}
	
	//===========================================================================
	//
	// A_FireSTGrenade: not exactly backported from ST, but should work the same
	//
	//===========================================================================

	action void A_FireSTGrenade(class<Actor> grenadetype = "Grenade")
	{
		if (grenadetype == null)
			return;

		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
			
		// Temporarily raise the pitch to send the grenadetype slightly upwards
		double savedpitch = pitch;
		pitch -= 6.328125;
		SpawnPlayerMissile(grenadetype);
		pitch = SavedPitch;
	}
	
	action void A_FirePlasma()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
			
			State flash = weap.FindState('Flash');
			if (flash != null)
			{
				player.SetSafeFlash(weap, flash, random[FirePlasma](0, 1));
			}
			
		}
		
		SpawnPlayerMissile ("PlasmaBall");
	}
	
	action void A_FireBFG()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, deh.BFGCells))
				return;
		}

		SpawnPlayerMissile("BFGBallNew", angle, nofreeaim:sv_nobfgaim);
	}
	
	action void A_FireOldBFG()
	{
		bool doesautoaim = false;

		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;

		if (invoker != weap || stateinfo == null || stateinfo.mStateType != STATE_Psprite) weap = null;
		if (weap != null)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;

			doesautoaim = weap.bNoAutoaim;
			weap.bNoAutoaim = true;
		}
		player.extralight = 2;

		// Save values temporarily
		double SavedPlayerAngle = angle;
		double SavedPlayerPitch = pitch;
		for (int i = 0; i < 2; i++) // Spawn two plasma balls in sequence
		{
			angle += random[OldBFG](-64, 63) * (90./768);
			pitch += random[OldBFG](-64, 63) * (90./640);
			SpawnPlayerMissile (i == 0? (class<Actor>)("PlasmaBall1New") : (class<Actor>)("PlasmaBall2New"));
			// Restore saved values
			angle = SavedPlayerAngle;
			pitch = SavedPlayerPitch;
		}
		// Restore autoaim setting
		if (weap != null) weap.bNoAutoaim = doesautoaim;
	}
	
	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
				let weapon = player.ReadyWeapon;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (player.mo.health > 0)
				{
					if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2a [%d]", GetClassName(), gametic);
					if (GetPlayerInput(INPUT_BUTTONS) & BT_USER1)
					{
						if (CountInv("IsUnconscious"))
						{
							A_PrintBold(String.Format("\cgYou're currently incapacitated, and thus can't quick kick!"), frandom(1.0875,1.25));
						}
						else
						{
							string nm = "CCards_Actor_BodySwap";
							if (CountInv(nm))
							{
								A_PrintBold(String.Format("\cgYou're currently cursed with a body swap, and thus can't quick kick!"), frandom(1.0875,1.25));
							}
							else
							{
								if (MiscItem && MiscItem.cankick) A_Overlay(-2,"Kick",true);
							}
						}
					}
				}
				else
				{
					if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2b [%d]", GetClassName(), gametic);
					A_ClearOverlays(-2,-2,true);
					A_ClearOverlays(8,8,true);
				}
				invoker.ActualLevel = A_GetMeleeSPDLvl(1);
				if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2c: invoker.ActualLevel: %d [%d]", GetClassName(), invoker.ActualLevel, gametic);
			}
			loop;
	}
}

// Weapon Base Class
class MarineWeapon : KCWeaponBase
{
	default
	{
		KCWeaponBase.PickUpVoice true;
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	states
	{
		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickStart: // 19
			LEG2 A 2 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 B 2
			{
				A_SetInventory("IsKicking",1);
				A_StartSound("fistswingmedium0",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 C 1
			{
				A_SetInventory("IsKicking",1);
				if (random(1,256) >= 128) 
				{
					A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
				}
			}
			LEG2 D 1
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 E 2 
			{
				A_SetInventory("IsKicking",1);
				A_OverlayOffset(-2,0,0,0);
				int tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 8 [shields/hit]: %d", tic);
				A_SetTics(tic);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				// Base "Recoil"
				int BerserkAdd;
				double recoil = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recoil = recoil * (random(7,17) + BerserkAdd);
				if (kcdebug_weaponrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);
				
				double reclbase = 0.0234375;
				double output = 1.0;
				double recoilmulti = (1.0 - (TruePlayerLevel * reclbase));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (waterlevel >= 3) recoil *= 0;
				if (bNOGRAVITY || bFLY) recoil *= 0.125;
				A_Recoil(recoil);
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				string kicktype = "KickPuff";
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && buttons & BT_USER1 && random(1,16) <= random(11,15)) kicktype = "KickPuffNoThrust";
				A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				double rand1 = randompick(8,8,8,8,8,8,8,8,8,10,10,12);
				double xoff1 = (random(-rand1,rand1)*frandom(3,5));
				double yoff1 = 32.0+(random(-6,2)*frandom(3,5));
				
				double rand2 = randompick(12,12,12,12,12,12,12,12,12,15,15,18);
				double xoff2 = (random(-rand2,rand2)*frandom(3,5));
				double yoff2 = 32.0+(random(-6,2)*frandom(3,5));
				double ang = angle;
				double pch = pitch;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21)) 
				{
					A_SetAngle(angle+(xoff1*0.667));
					A_SetPitch(pitch+((yoff1-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25)) 
				{
					A_SetAngle(angle+(xoff2*0.667));
					A_SetPitch(pitch+((yoff2-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17))
				{
					double rand = frandompick(2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,3.334,3.334,4.0);
					double xoff = (random(-rand,rand)*frandom(1.5,2.5));
					double yoff = 32.0+(frandom(-2,0.667)*frandom(1.5,2.5));
					A_OverlayOffset(-2,xoff,yoff,0);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,16) <= 5))
					{
						int layer = -3;
						A_Overlay(layer,"KickImage1",true);
						A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
						A_OverlayOffset(layer,xoff1,yoff1,0);
						A_OverlayRenderStyle(layer,STYLE_Translucent);
						A_OverlayAlpha(layer,0.667);
						if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) && random(1,16) <= 5) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,32) <= 3))
						{
							int layer = -4;
							A_Overlay(layer,"KickImage2",true);
							A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
							A_OverlayOffset(layer,xoff2,yoff2,0);
							A_OverlayRenderStyle(layer,STYLE_Translucent);
							A_OverlayAlpha(layer,0.334);
						}
					}
				}
				//player.mo.A_SetInventory("IsKicking",1);
				/*
				if (A_CheckBerserk()) A_SetTics(1);
				
				A_GetKickSwingRecoil(0);
				string kicktype = "KickPuff";
				A_CustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,kicktype,104,0,0,"","","");
	
				double output = kc_kickspdlvlint;
				double oldoutput = output;
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				*/
			}
			LEG2 F 5 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
			}
			LEG2 E 2 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 D 1 
			{ 
				A_SetInventory("IsKicking",1);
			}
			LEG2 C 1 
			{ 
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 B 1
			{
				A_SetInventory("IsKicking",1);
			}
			LEG2 A 1 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 A 0 { return resolvestate("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_SetInventory("IsKicking",0);
			}
			stop;
	}
}

// ??????? ????? Weapon Base Class
class HeiwaWeapon : KCWeaponBase
{
	default
	{
		KCWeaponBase.PickUpVoice true;
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	
	states
	{
		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0 A_QMWKickInit();
			goto KickStart;

		KickStart:
			TNT1 A 0
			{
			}
		KickWindUp:
			TNT1 A 1 // [1]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 1)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 1: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [2]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 2: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [3]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 3: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [4]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 4: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [5]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 5: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
		Kicking:
			DKIC A 1 // [6]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("PreKick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 1: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC B 1 // [7]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 13)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 2: %d", tic);
				A_SetTics(tic);
				
				if (A_CheckBerserk())
				{
					if (random(1,4) <= 1) A_StartSound("fistswingheavy0",CHAN_BODY);
													 else A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC C 1 // [8]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 3: %d", tic);
				A_SetTics(tic);
				
				int basechance = 128;
				if (A_CheckBerserk()) basechance *= frandompick(1.5,1.5,1.5,1.625,1.625,1.75);
				if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (A_CheckBerserk()) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = 0;
					//if (randvoice == 1) voicenm = "heiwa/Jump";
					if (kc_heiwaextravoices && randvoice > 0)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				} 
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC D 1 // [9]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 4: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC E 1 // [10]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 5: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC F 1 // [11]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 16)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 6: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC G 1 // [12]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 7: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
		KickHit:
			DKIC H 1 // 1 [13] (Attack)
			{
				A_OverlayOffset(-2,0,0,0);
				int tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 8 [shields/hit]: %d", tic);
				A_SetTics(tic);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				// Base "Recoil"
				int BerserkAdd;
				double recoil = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recoil = recoil * (random(7,17) + BerserkAdd);
				if (kcdebug_weaponrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);
				
				double reclbase = 0.0234375;
				double output = 1.0;
				double recoilmulti = (1.0 - (TruePlayerLevel * reclbase));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (waterlevel >= 3) recoil *= 0;
				if (bNOGRAVITY || bFLY) recoil *= 0.125;
				A_Recoil(recoil);
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				string kicktype = "KickPuff";
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && buttons & BT_USER1 && random(1,16) <= random(11,15)) kicktype = "KickPuffNoThrust";
				A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				double rand1 = randompick(8,8,8,8,8,8,8,8,8,10,10,12);
				double xoff1 = (random(-rand1,rand1)*frandom(3,5));
				double yoff1 = 32.0+(random(-6,2)*frandom(3,5));
				
				double rand2 = randompick(12,12,12,12,12,12,12,12,12,15,15,18);
				double xoff2 = (random(-rand2,rand2)*frandom(3,5));
				double yoff2 = 32.0+(random(-6,2)*frandom(3,5));
				double ang = angle;
				double pch = pitch;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21)) 
				{
					A_SetAngle(angle+(xoff1*0.667));
					A_SetPitch(pitch+((yoff1-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25)) 
				{
					A_SetAngle(angle+(xoff2*0.667));
					A_SetPitch(pitch+((yoff2-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17))
				{
					double rand = frandompick(2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,3.334,3.334,4.0);
					double xoff = (random(-rand,rand)*frandom(1.5,2.5));
					double yoff = 32.0+(frandom(-2,0.667)*frandom(1.5,2.5));
					A_OverlayOffset(-2,xoff,yoff,0);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,16) <= 5))
					{
						int layer = -3;
						A_Overlay(layer,"KickImage1",true);
						A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
						A_OverlayOffset(layer,xoff1,yoff1,0);
						A_OverlayRenderStyle(layer,STYLE_Translucent);
						A_OverlayAlpha(layer,0.667);
						if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) && random(1,16) <= 5) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,32) <= 3))
						{
							int layer = -4;
							A_Overlay(layer,"KickImage2",true);
							A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
							A_OverlayOffset(layer,xoff2,yoff2,0);
							A_OverlayRenderStyle(layer,STYLE_Translucent);
							A_OverlayAlpha(layer,0.334);
						}
					}
				}
				//player.mo.A_SetInventory("IsKicking",1);
			}
		KickRetract:
			DKIC G 1 // 1 [14]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 9: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC F 1 // 1 [15]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 10: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC E 1 // [16]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 11: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC D 1 // [17]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 12: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC C 1 // [18]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 11)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 13: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC B 1 // [19]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 14)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 14: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			DKIC A 1 // [20]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 15: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
				
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				if (buttons & BT_USER1)
				{
					int kickrchance = 4 + random(-1,1);
					int remchance;
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 1)) kickrchance = 12 + random(-1,1);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 2)) kickrchance = 32 + random(-2,2);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) kickrchance = 48 + random(-2,2);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) kickrchance = 72 + random(-3,3);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) kickrchance = 96 + random(-4,4);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) kickrchance = 128 + random(-4,4);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) kickrchance = 144 + random(-5,5);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) kickrchance = 160 + random(-5,5);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) kickrchance = 176 + random(-6,6);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) kickrchance = 192 + random(-7,7);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 11)) kickrchance = 212 + random(-7,7);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) kickrchance = 224 + random(-8,8);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 13)) kickrchance = 240 + random(-8,8);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 14)) kickrchance = 248 + random(-9,9);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) kickrchance = 254 + random(-9,9);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 16)) kickrchance = 256;
					if (kickrchance >= 256) kickrchance = 256;
					remchance = 256 - kickrchance;
					if (A_CheckBerserk())
					{
						if (remchance > 0) 
						{
							if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) kickrchance += (remchance * frandompick(0.75,0.875,0.875,0.875,1.0));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) kickrchance += (remchance * frandompick(0.625,0.75,0.75,0.75,0.875));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) kickrchance += (remchance * frandompick(0.5,0.625,0.625,0.625,0.75));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) kickrchance += (remchance * frandompick(0.375,0.5,0.5,0.5,0.625));
							else kickrchance += (remchance * frandompick(0.25,0.375,0.375,0.375,0.5));
						}
					}
					if (kcdebug_meleeinformation) Console.Printf("kickrchance: %d, remchance: %d", kickrchance, remchance);
					if (kickrchance >= 256) kickrchance = 256;
					
					if (random(1,256) <= kickrchance) return resolvestate("Kicking");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		KickWindDown:
			TNT1 A 1 // [21]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 1: %d", tic);
				A_SetTics(tic);
				
				//player.mo.A_SetInventory("IsKicking",1);
			}
			TNT1 A 1 // [22]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 2: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [23]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 3: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [24]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 4: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [25]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 2)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 5: %d", tic);
				A_SetTics(tic);
			}
			goto KickEnd;
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				//player.mo.A_SetInventory("IsKicking",0);
			}
			stop;
			
		// Extra
		KickImage1:
			DKIC H 1;
			DKIC H 1
			{
				A_OverlayAlpha(-3,0.334);
			}
			stop;
		
		KickImage2:
			DKIC H 1;
			DKIC H 1
			{
				A_OverlayAlpha(-4,0.1667);
			}
			stop;
	}
}

class FistMarine : MarineWeapon replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
	}
	
	States
	{
		Ready:
			PUNG A 1
			{
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PUNG A 1 
			{
				A_Lower(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Select: 
			PUNG A 1 
			{
				A_Raise(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Fire: // 22 Tics
			TNT1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
			}
		PunchSuccess:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_SetInventory("IsUppercutting",0);
			}
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			PUNG B 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);
			}
			PUNG C 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);
				
				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUNG D 5
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
			}
			PUNG C 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);
			}
			PUNG B 5
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
				A_Refire();
			}
			PUNG B 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",0);
			}
			goto Ready;

		RightPunch:
			PUNG F 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);
			}
			PUNG G 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);

				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUNG H 5
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
			}
			PUNG G 4
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(2);
			}
			PUNG F 5
			{
				A_SetInventory("IsPunching",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
				A_Refire();
			}
			PUNG F 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",1);
			}
			goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		// 23 Tics
		UppercutStart:
			MPU0 A 1 
			{
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 B 1 
			{
				A_SetInventory("IsUppercutting",0); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU0 C 1 
			{
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 D 1 
			{
				A_SetInventory("IsUppercutting",0); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU0 E 1 { A_SetInventory("IsUppercutting",0); }
			MPU1 A 1
			{
				A_SetInventory("IsUppercutting",1);
				if (A_CheckBerserk()) A_SetTics(0);
				
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else 
					{
						actor playera = players[0].mo;
						let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
						if (!(playera.CountInv("KCTimeFreezer1") ||
									playera.CountInv("KCTimeFreezer2") ||
									playera.CountInv("KCTimeFreezer3")))
						{
							invoker.A_KCAlertMonsters(); 
						} // Sometimes a swing will be enough to wake up all monsters in the area.
					}
				}
				if (random(1,256) <= 75) { A_StartSound("*grunt",CHAN_VOICE); }
				A_StartSound("fistswingheavy",1); // D [Left] or B [Right] 
			}
			MPU1 B 1 
			{
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 D 1 
			{
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 F 1
			{
				A_SetInventory("IsUppercutting",1);
				double frange = 58.0;
				A_GetPunchSwingRecoil(1);
				A_CustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
					}
				}
			}
			MPU1 G 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 F 1 
			{
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 D 1 
			{
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 B 1 
			{
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 A 1 
			{
				A_SetInventory("IsUppercutting",1); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
				return resolvestate("UppercutEnd"); 
			}
		UppercutEnd:
			TNT1 A 0
			{
				A_SetInventory("IsUppercutting",0);
				A_SetInventory("UsingMeleeAttack",0); 
			}
			MPU0 E 1 
			{
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 D 1 
			{
				A_SetInventory("IsUppercutting",0); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU0 C 1 
			{
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 B 1 
			{
				A_SetInventory("IsUppercutting",0); 
				if (A_CheckBerserk()) A_SetTics(0);
			}
			MPU0 A 1 
			{
				A_SetInventory("IsUppercutting",0); 
			}
			TNT1 A 0
			{
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;
			
		// Guard
		User4:
			DPDF A 1
			{
				A_PFistBlockOn();
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF B 1
			{
				A_PFistBlockOn();
			}
			DPDF C 1
			{
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn();
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF D 1
			{
				A_PFistBlockOn();
			}
			DPDF E 1
			{
				A_PFistBlockOn();
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF F 1
			{
				A_PFistBlockOn();
			}
			DPDF G 1
			{
				A_PFistBlockOn();
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF H 1
			{
				A_PFistBlockOn();
			}
			DPDF I 1
			{
				A_PFistBlockOn();
				if (A_CheckBerserk()) A_SetTics(0);
			}
		User4Hold:
			DPDF J 1 // BRIGHT
			{
				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				return resolvestate(null);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			DPDF I 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF H 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF G 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF F 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF E 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF D 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF C 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF B 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 1
			{
				A_PFistBlockOn(); 
				A_SetInventory("FistPlayerBlockHold",0);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			DPDF A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}
class ChainsawMarine : MarineWeapon replaces Chainsaw
{
	Default
	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/sawup";
		Weapon.ReadySound "weapons/sawidle";
		Inventory.PickupMessage "$GOTCHAINSAW";
		Obituary "$OB_MPCHAINSAW";
		Tag "$TAG_CHAINSAW";
		+WEAPON.MELEEWEAPON		
		+WEAPON.NOAUTOSWITCHTO
	}
	States
	{
		Ready:
			SAWG CD 4 A_WeaponReady;
			Loop;
		Deselect:
			SAWG C 1 A_Lower(12);
			Loop;
		Select:
			SAWG C 1 A_Raise(12);
			Loop;
		Fire:
			SAWG AB 4 A_Saw(pufftype:"ChainsawPuff");
			SAWG B 0 A_ReFire;
			Goto Ready;
		
		Spawn:
		Idle:
			CSAW A 1
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!bDROPPED && 
						playera.GetClassName() == "KCPlayer" && 
						playera.CountInv("ChainsawMarine"))
				{
					int user_type = random(1,11);
					string droptype = "Backpack";
					if (user_type == 1) 
					{
						droptype = "Pistol";
						if (playera.GetClassName() == "KCPlayer") droptype = "PistolMarine";
						if (random(1,4) <= 1 && playera.CountInv(droptype)) droptype = "Glock21";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 2) 
					{
						droptype = "Chaingun";
						if (playera.GetClassName() == "KCPlayer") droptype = "ChaingunMarine";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 3) 
					{
						droptype = "Shotgun";
						if (playera.GetClassName() == "KCPlayer") droptype = "ShotgunMarine";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,32) <= 1) droptype = "SuperShotgunMarine";
							if (playera.CountInv(droptype)) droptype = "Backpack";
						}
					}
					if (user_type == 4) 
					{
						droptype = "TommyGun";
						if (playera.CountInv(droptype)) 
						{
							droptype = "DualTommyGuns";
							if (playera.CountInv(droptype)) droptype = "Backpack";
																				 else droptype = "TommyGun";
						}
						else droptype = "TommyGun";
					}
					if (user_type == 5) 
					{
						droptype = "SuperShotgun";
						if (playera.GetClassName() == "KCPlayer") droptype = "SuperShotgunMarine";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 6) 
					{
						droptype = "RocketLauncher";
						if (playera.GetClassName() == "KCPlayer") droptype = "RocketLauncherMarine";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 7) 
					{
						droptype = "BFG9000";
						if (playera.GetClassName() == "KCPlayer") droptype = "BFG9000Marine";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 8)
					{
						droptype = "PlasmaRifle";
						if (playera.GetClassName() == "KCPlayer") droptype = "PlasmaRifleMarine";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 9)
					{
						droptype = "Devastator";
						if (playera.CountInv(droptype)) 
						{
							droptype = "DualDevastators";
							if (playera.CountInv(droptype)) droptype = "Backpack";
																				 else droptype = "DevastatorGenerator";
						}
						else droptype = "DevastatorGenerator";
					}
					if (user_type == 10)
					{
						droptype = "SawThrower";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					if (user_type == 11)
					{
						droptype = "ImpalerXBow";
						if (playera.CountInv(droptype)) droptype = "Backpack";
					}
					A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION);
					Destroy();
				}
			}
			Loop;
	}
}
class PistolMarine : MarineWeapon replaces Pistol
{
	Default
	{
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Obituary "$OB_MPPISTOL";
		+WEAPON.WIMPY_WEAPON
		Inventory.Pickupmessage "$PICKUP_PISTOL_DROPPED";
		Tag "$TAG_PISTOL";
	}
	
	States
	{
		Spawn:
		Idle:
			2PIS E -1;
			Loop;
		Ready:
			2PIS A 1 A_WeaponReady();
			Loop;
		Deselect:
			2PIS D 1 A_Lower(12);
			Loop;
		Select:
			2PIS F 1 A_Raise(12);
			Loop;
		Fire:
			2PIS A 1;
			2PIS B 4 bright A_FirePistol(0);
			2PIS C 4;
			2PIS F 4;
			2PIS D 4 A_ReFire();
			Goto Ready;
		AltFire:
			2PIS A 1
			{
				A_SetTics(randompick(0,0,0,1,1));
			}
			2PIS B 4 bright
			{
				A_FirePistol(1);
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS C 4
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS F 4
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS D 4 
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			Goto Ready;
	}
}
class ShotgunMarine : MarineWeapon replaces Shotgun
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Inventory.PickupMessage "$GOTSHOTGUN";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
	}
	
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHTG A 1 A_Lower(12);
			Loop;
		Select:
			SHTG A 1 A_Raise(12);
			Loop;
		Fire:
			SHTG A 3;
			SHTG A 7 A_FireShotgun();
			SHTG BC 5;
			SHTG D 4;
			SHTG CB 5;
			SHTG A 3;
			SHTG A 7 A_ReFire;
			Goto Ready;
		Flash:
			SHTF A 4 Bright A_Light1;
			SHTF B 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
		Idle:
			SHOT A -1;
			Stop;
	}
}
class SuperShotgunMarine : MarineWeapon replaces SuperShotgun
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Inventory.PickupMessage "$GOTSHOTGUN2";
		Obituary "$OB_MPSSHOTGUN";
		Tag "$TAG_SUPERSHOTGUN";
	}
	States
	{
		Ready:
			SHT2 A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHT2 A 1 A_Lower(12);
			Loop;
		Select:
			SHT2 A 1 A_Raise(12);
			Loop;
		Fire:
			SHT2 A 3;
			SHT2 A 7 
			{
				A_FireShotgun2();
			}
			SHT2 B 7;
			SHT2 C 7 A_CheckReload;
			SHT2 D 7 A_OpenShotgun2;
			SHT2 E 7;
			SHT2 F 7 A_LoadShotgun2;
			SHT2 G 6;
			SHT2 H 6 A_CloseShotgun2;
			SHT2 A 5 A_ReFire;
			Goto Ready;
		// unused states
			SHT2 B 7;
			SHT2 A 3;
			Goto Deselect;
		Flash:
			SHT2 I 4 Bright A_Light1;
			SHT2 J 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
		Idle:
			SGN2 A -1;
			Stop;
	}
}
class ChaingunMarine : MarineWeapon replaces Chaingun
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Inventory.PickupMessage "$GOTCHAINGUN";
		Obituary "$OB_MPCHAINGUN";
		Tag "$TAG_CHAINGUN";
	}
	
	action void A_ShootMinigun()
	{
		actor playera = players[0].mo;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_TakeInventory("Clip",2);
			for (int i = 0; i < 2; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = !player.refire ? 0.0 : (3.55 * 0.5);
				double randangle = !player.refire ? 0.0 : (7.1 * 0.5);
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (5 * random(1,3));
					}
				}
			}
		}
		else
		{
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_FireBullets(frandom(-7.1,7.1), frandom(-3.55,3.55), 1, (5*random(1,3)), "KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
			A_FireBullets(frandom(-7.1,7.1), frandom(-3.55,3.55), 1, (5*random(1,3)), "KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
		}
	}
	
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady();
			Loop;
		Deselect:
			CHGG A 1 A_Lower(12);
			Loop;
		Select:
			CHGG A 1 A_Raise(12);
			Loop;
		Fire:
			CHGF A 1 bright A_FireCGun(0);
			CHGG EFG 1;
			CHGF B 1 bright A_FireCGun(0);
			CHGG EFG 1;
			TNT1 A 0 A_ReFire();
			CHGG HIBBCCDD 1 A_WeaponReady();
			CHGG AAABBBCCCDDD 1 A_WeaponReady();
			CHGG AAAABBBBCCCCDDDD 1 A_WeaponReady();
			Goto Ready;
		AltFire:
			CHGF A 1 bright A_ShootMinigun();
			CHGG F 1;
			CHGF B 1 bright A_ShootMinigun();
			CHGG G 1;
			TNT1 A 0 A_ReFire();
			CHGG HBCD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AAABBBCCCDDD 1 A_WeaponReady();
			CHGG AAAABBBBCCCCDDDD 1 A_WeaponReady();
			Goto Ready;
		Spawn:
		Idle:
			MGUN A -1;
			Stop;
	}
}
class RocketLauncherMarine : MarineWeapon replaces RocketLauncher
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RocketAmmo";
		Weapon.AmmoType1 "RocketAmmo";
		Weapon.AmmoType2 "RocketAmmo";
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "$GOTLAUNCHER";
		Tag "$TAG_ROCKETLAUNCHER";
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			MISG A 1 A_Lower(12);
			Loop;
		Select:
			MISG A 1 A_Raise(12);
			Loop;
		Fire:
			MISG B 4 
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
				A_GunFlash();
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 4 
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					double angoffset = 0;
					double ptcoffset = 0;
					double baserecoil = frandom(7.5,8.5);
					A_StartSound("howitzer/shot",CHAN_7);
					A_Recoil(baserecoil);
					A_Quake((2.0 - (CountInv("PlayerATK") / 24)), 8, 0, 1024, "nosound/silent");
					A_Quake((4.0 - (CountInv("PlayerATK") / 36)), 8, 0, 512, "nosound/silent");
					A_Quake((6.0 - (CountInv("PlayerATK") / 48)), 8, 0, 256, "nosound/silent");
					
					actor playera = players[0].mo;
					if (playera.CountInv("KCTimeFreezer") ||
							playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3"))
					{
						A_TakeInventory("RocketAmmo",1);
						for (int i = 0; i < 1; i++)
						{
							actor BombShotsB, BombShots;
							KCPlayerPawn KCP;
							KCP = KCPlayerPawn(playera);
							double origang = playera.angle;
							double randpitch = ptcoffset;
							double randangle = angoffset;
							double shotheight = 36;
							if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
							[BombShotsB, BombShots] = A_FireProjectileEx("KCHowitzerTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
							if (BombShots)
							{
								KCBulletTracer BS1;
								BS1 = KCBulletTracer(BombShots);
								if (BS1)
								{
									BS1.DamageType = 'Explosive';
									BS1.finaldamagedealt = (40 * random(1,8));
								}
							}
						}
					}
					else
					{
						A_FireBullets(angoffset, ptcoffset, 1, (40*random(1,8)), "HowitzerBase", FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ,32768);
					}
				}
				else
				{
					double angoffset = 0.0;
					double ptcoffset = 0.0;
					double ofsxyset = 0.0;
					double heightoffset = 0.0;
					string firetype = "RocketPlayer";
					if (CountInv("RLMode") == 1) firetype = "STGrenade";
					if (CountInv("RLMode") == 2) firetype = "RocketPlayerSeeking";
					A_FireProjectile(firetype,angoffset,true,ofsxyset,heightoffset,FPF_NOAUTOAIM,ptcoffset);
				}
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 0 A_ReFire;
			Goto Ready;
		AltFire:
			MISG B 3 
			{
				if (CountInv("RLMode") == 3) A_SetTics(6);
				A_GunFlash("AltFlash");
			}
			MISG B 2 
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(4);
					double angoffset = frandom(-15,15);
					double ptcoffset = frandom(-15,15);
					double baserecoil = frandom(7.5,8.5);
					A_StartSound("howitzer/shot",CHAN_7);
					A_Recoil(baserecoil);
					A_Quake((2.0 - (CountInv("PlayerATK") / 24)), 8, 0, 1024, "nosound/silent");
					A_Quake((4.0 - (CountInv("PlayerATK") / 36)), 8, 0, 512, "nosound/silent");
					A_Quake((6.0 - (CountInv("PlayerATK") / 48)), 8, 0, 256, "nosound/silent");
					
					actor playera = players[0].mo;
					if (playera.CountInv("KCTimeFreezer") ||
							playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3"))
					{
						A_TakeInventory("RocketAmmo",1);
						for (int i = 0; i < 1; i++)
						{
							actor BombShotsB, BombShots;
							KCPlayerPawn KCP;
							KCP = KCPlayerPawn(playera);
							double origang = playera.angle;
							double randpitch = ptcoffset;
							double randangle = angoffset;
							double shotheight = 36;
							if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
							[BombShotsB, BombShots] = A_FireProjectileEx("KCHowitzerTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
							if (BombShots)
							{
								KCBulletTracer BS1;
								BS1 = KCBulletTracer(BombShots);
								if (BS1)
								{
									BS1.DamageType = 'Explosive';
									BS1.finaldamagedealt = (40 * random(1,8));
								}
							}
						}
					}
					else
					{
						A_FireBullets(angoffset, ptcoffset, 1, (40*random(1,8)), "HowitzerBase", FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ,32768);
					}
				}
				else
				{
					double angoffset = frandom(-3.75,3.75);
					double ptcoffset = frandom(-3.75,3.75);
					double ofsxyset = 0.0;
					double heightoffset = 0.0;
					string firetype = "RocketPlayer";
					if (CountInv("RLMode") == 1) firetype = "STGrenade";
					if (CountInv("RLMode") == 2) firetype = "RocketPlayerDrunk";
					A_FireProjectile(firetype,angoffset,true,ofsxyset,heightoffset,FPF_NOAUTOAIM,ptcoffset);
				}
			}
			MISG B 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG B 0 A_ReFire;
			Goto Ready;

		// Fire Mode
		User4:
			MISG A 0
			{
				if (CountInv("RLMode") == 0)
				{
					A_SetInventory("RLMode",1);
					A_Print("Using Grenades");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 1)
				{
					A_SetInventory("RLMode",2);
					A_Print("Using Homing Rockets");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 2)
				{
					A_SetInventory("RLMode",3);
					A_Print("Using Howitzer");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 3)
				{
					A_SetInventory("RLMode",0);
					A_Print("Using Rockets");
					A_StartSound("GetRockets",0);
				}
			}
			MISG A 8;
			goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		AltFlash:
			MISF A 1 Bright A_Light1();
			MISF B 2 Bright;
			MISF CD 2 Bright A_Light2();
			Goto LightDone;
		Spawn:
		Idle:
			LAUN A -1;
			Stop;
	}
}
class PlasmaRifleMarine : MarineWeapon replaces PlasmaRifle
{
	int cooldownmeter;
	int burstamt;
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Tag "$TAG_PLASMARIFLE";
		Inventory.PickupMessage "Picked up a \cvplasma rifle\c-! \cx[Slot 6]\c-";
	}
	States
	{
		Ready:
			PLSG A 1
			{
				A_WeaponReady();
				invoker.cooldownmeter = 0;
			}
			Loop;
		Deselect:
			PLSG A 1 
			{
				A_Lower(12);
				invoker.cooldownmeter = 0;
			}
			Loop;
		Select:
			PLSG A 1 
			{
				A_Raise(12);
				invoker.cooldownmeter = 0;
			}
			Loop;
		Fire:
			PLSG B 1 BRIGHT 
			{
				A_FireProjectile("PlasmaBallNew",0.0,true,0,0,FPF_NOAUTOAIM,0.0);
				if (random(1,256) <= 240) invoker.cooldownmeter++;
			}
			PLSG CA 1;
			PLSG A 1 
			{
				if (invoker.cooldownmeter >= 50) return resolvestate("Cooldown");
																		 else A_ReFire();
				return resolvestate(null);
			}
			goto CoolDown;
		AltFire:
			PLSG B 0
			{
				if (CountInv("Cell") >= 2 || 
						A_CheckInfiniteAmmo())
				{
					invoker.burstamt = 3 * randompick(1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,5);
					int shotcost = (invoker.burstamt * 2 / 3);
					if (!A_CheckInfiniteAmmo())
					{
						if (CountInv("Cell") < shotcost) return resolvestate("Ready");
																				else A_TakeInventory("Cell",shotcost);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else return resolvestate("Ready");
				
				return resolvestate(null);
			}
			PLSG B 1 BRIGHT 
			{
				double spread = (1.5 * (invoker.burstamt / 3));
				for (int i; i < invoker.burstamt; i++)
				{
					A_FireProjectile("AltPlasmaBall",frandom(-spread,spread),false,0,0,FPF_NOAUTOAIM,frandom(-spread,spread));
				}
				//A_FirePlasma(); 
				if (random(1,256) <= 240) invoker.cooldownmeter += invoker.burstamt;
			}
			PLSG CA 1;
			PLSG A 1 
			{
				if (invoker.cooldownmeter >= 50) return resolvestate("Cooldown");
																		else A_ReFire();
				return resolvestate(null);
			}
			goto CoolDown;
		Cooldown:
			PLSG D 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
			}
			PLSG E 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
			}
			PLSG F 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(1);
			}
			PLSG G 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
				if (invoker.cooldownmeter >= 50) A_SetTics(3);
			}
			PLSG H 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(1);
			}
			PLSG I 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
				if (invoker.cooldownmeter >= 50) A_SetTics(3);
			}
			PLSG IIII 1
			{
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(3);
				if (invoker.cooldownmeter >= randompick(43,44,44,44)) A_SetTics(4);
				if (invoker.cooldownmeter >= 50) A_SetTics(5);
			}
			PLSG I 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
				if (invoker.cooldownmeter >= 50) A_SetTics(3);
			}
			PLSG H 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(1);
			}
			PLSG G 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
				if (invoker.cooldownmeter >= 50) A_SetTics(3);
			}
			PLSG F 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(1);
			}
			PLSG E 1
			{
				if (invoker.cooldownmeter >= 25) A_SetTics(2);
				if (invoker.cooldownmeter >= 50) A_SetTics(3);
			}
			PLSG D 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= random(12,13)) A_SetTics(1);
				if (invoker.cooldownmeter >= random(37,38)) A_SetTics(1);
				invoker.cooldownmeter = 0;
			}
			Goto Ready;
		Spawn:
		Idle:
			PLAS A -1;
			Stop;
	}
}
class BFG9000Marine : MarineWeapon replaces BFG9000
{
	Default
	{
		Height 20;
		Weapon.SelectionOrder 2800;
		Weapon.AmmoUse1 40;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		+WEAPON.NOAUTOFIRE;
		Inventory.PickupMessage "$GOTBFG9000";
		Tag "$TAG_BFG9000";
	}
	States
	{
		Ready:
			BFGG A 1 A_WeaponReady;
			Loop;
		Deselect:
			BFGG A 1 A_Lower(12);
			Loop;
		Select:
			BFGG A 1 A_Raise(12);
			Loop;
		Fire:
			BFGG A 20 A_BFGsound;
			BFGG B 10 A_GunFlash;
			BFGG B 10 A_FireBFG;
			BFGG B 20 A_ReFire;
			Goto Ready;
		Flash:
			BFGF A 11 Bright A_Light1;
			BFGF B 6 Bright A_Light2;
			Goto LightDone;
		AltFire:
			BFGG A 10 A_BFGsound;
			BFGG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
			BFGG B 0 A_Light0;
			BFGG B 20 A_ReFire;
			Goto Ready;
		Spawn:
		Idle:
			BFUG A -1;
			Stop;
	}
}

// Glock
class Glock21 : MarineWeapon
{
	default
	{
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got the Glock 21!";
		Obituary "%o was capped by %k's Glock.";
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.SlotNumber 2;
		Weapon.Kickback 75;
		Weapon.UpSound "weapons/glockup";
		//AttackSound "weapons/glockfire";
		Scale 0.5;
	}
	
	States
	{
		Ready:
			LIBG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			LIBG A 1 A_Lower(12);
			Loop;
		Select:
			LIBG A 1 A_Raise(12);
			Loop;
		Fire:
			LIBF A 0 A_GunFlash;
			LIBF A 0 
			{
				int randdmg = randompick(5,6,6,6,7)*random(1,3);
				actor playera = players[0].mo;
				if (playera.CountInv("KCTimeFreezer") ||
						playera.CountInv("KCTimeFreezer1") ||
						playera.CountInv("KCTimeFreezer2") ||
						playera.CountInv("KCTimeFreezer3"))
				{
					A_TakeInventory("Clip",1);
					A_StartSound ("weapons/glockfire", CHAN_WEAPON);
					for (int i = 0; i < 1; i++)
					{
						actor BombShotsB, BombShots;
						KCPlayerPawn KCP;
						KCP = KCPlayerPawn(playera);
						double origang = playera.angle;
						double randpitch = !player.refire ? 0.0 : (3.0 * 0.5);
						double randangle = !player.refire ? 0.0 : (2.0 * 0.5);
						double shotheight = 36;
						if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
						[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
						if (BombShots)
						{
							KCBulletTracer BS1;
							BS1 = KCBulletTracer(BombShots);
							if (BS1)
							{
								BS1.DamageType = 'Bullet';
								BS1.finaldamagedealt = (randdmg);
							}
						}
					}
				}
				else
				{
					A_StartSound ("weapons/glockfire", CHAN_WEAPON);
					A_FireBullets(2,3,1,(randdmg),"KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM);
				}
			}
			LIBF A 1 BRIGHT;
			LIBG DCBA 1;
			LIBG A 4;
			LIBF A 0 A_CheckforReload(12,"Ready");
			Goto DryFire;
		AltFire:
			LIBF A 0 A_GunFlash;
			LIBF A 0 
			{
				int randdmg = randompick(5,6,6,6,7)*random(1,3);
				actor playera = players[0].mo;
				if (playera.CountInv("KCTimeFreezer") ||
						playera.CountInv("KCTimeFreezer1") ||
						playera.CountInv("KCTimeFreezer2") ||
						playera.CountInv("KCTimeFreezer3"))
				{
					A_TakeInventory("Clip",1);
					A_StartSound ("weapons/glockfire", CHAN_WEAPON);
					for (int i = 0; i < 1; i++)
					{
						actor BombShotsB, BombShots;
						KCPlayerPawn KCP;
						KCP = KCPlayerPawn(playera);
						double origang = playera.angle;
						double randpitch = (6.75 * 0.5);
						double randangle = (4.5 * 0.5);
						double shotheight = 36;
						if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
						[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
						if (BombShots)
						{
							KCBulletTracer BS1;
							BS1 = KCBulletTracer(BombShots);
							if (BS1)
							{
								BS1.DamageType = 'Bullet';
								BS1.finaldamagedealt = (randdmg);
							}
						}
					}
				}
				else
				{
					A_StartSound ("weapons/glockfire", CHAN_WEAPON);
					A_FireBullets(4.25,6.75,-1,(randdmg),"KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM);
				}
			}
			LIBF A 1 BRIGHT;
			LIBG D 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG C 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG B 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG A 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG A 4
			{
				A_SetTics(randompick(1,1,1,2,2));
			}
			LIBF A 0 A_CheckforReload(12,"Ready");
			Goto DryFire;
		DryFire:
			LIBG A 12 A_StartSound("weapons/glockdry");
			Goto Reload+1;
		Reload:
			TNT1 A 0 A_CheckforReload(1,"Ready",true);
			LIBG A 1 A_StartSound("weapons/glockout");
			LIBM AB 1;
			LIBR ABC 2;
			LIBR D 0 A_StartSound("weapons/glockin");
			LIBR D 2 A_ResetReloadCounter;
			LIBR EF 1;
			LIBG A 3;
			Goto Ready;
		Flash:
			TNT1 A 2 A_Light2;
			TNT1 A 1 A_Light1;
			TNT1 A 0 A_Light0;
			Stop;
		Spawn:
		Idle:
			LIBG X -1;
			Stop;
	}
}

class DualTommyGunPickup : CustomInventoryExt
{
	default
	{
		Inventory.PickupMessage "You picked up an Extra Thompson Machine Gun! \c[gold]Can Now Dual Wield!\c-";
		Inventory.PickupSound "TOMPKP";
		+DONTGIB
		-COUNTITEM;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Scale 0.6;
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
		Idle:
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTommyGuns"))
				{
					A_SpawnItemEx("TommyGun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Destroy();
				}
			}
			Loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera) 
				{
					playera.A_GiveInventory("DualTommyGuns",1);
					playera.A_GiveInventory("TommAmmo",50);
				}
			}
			stop;
	}
}

// Tommy Gun
class TommyGun : MarineWeapon
{
	default
	{
		Inventory.PickupMessage "You picked up a Thompson Machine Gun!";
		Weapon.AmmoType1 "TommAmmo";
		Weapon.AmmoType2 "TommAmmo";
		Weapon.AmmoGive 50;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.BobSpeed 0.334;
		Weapon.BobStyle "Smooth";
		Inventory.PickupSound "TOMPKP";
		Decal "Bulletchip";
		Attacksound "DSTOMFR";
		Scale 0.6;
		Weapon.Kickback 150;
	}
	
	action bool A_DualTMGCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (CountInv("DualTommyGuns") && !CountInv("DualTommyGunsDisabled")) check = true;
		return check;
	}
	
	action void A_TommyShot(int type, int handedness)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int temp1 = randompick(3,3,3,3,3,3,4,4,4,4,5,5) * random(randompick(1,1,1,2,2,3),randompick(3,3,3,4,4,5));
		double barrageangoffset = 0.0;
		double offsetmulti = 1.0;
		double accuracyx = 1.0;
		double accuracyy = 1.0;
		barrageangoffset = 0.0;
		if (type == 0)
		{
			accuracyx = frandom(0.5,1.0);
			accuracyy = frandom(0.5,1.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = -0.5;
			if (invoker.tommybarrageno == 2) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 0.0;
			if (invoker.tommybarrageno >= 4) barrageangoffset = 0.5;
		}
		else
		{
			accuracyx = frandom(3.0,6.0);
			accuracyy = frandom(3.0,6.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 2) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 4) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 5) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 6) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 7) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 8) barrageangoffset = 16.0;
			if (invoker.tommybarrageno == 9) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 10) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 11) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 12) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 13) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 14) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 15) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 16) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 17) barrageangoffset = -2.0;
			if (invoker.tommybarrageno == 18) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 19) barrageangoffset = -6.0;
			if (invoker.tommybarrageno == 20) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 21) barrageangoffset = -2.0;
			if (invoker.tommybarrageno >= 22) barrageangoffset = 0.0;
			if (handedness == 1) barrageangoffset *= -1;
			barrageangoffset *= offsetmulti;
			if (kcdebug_weaponstatdisplays) Console.Printf("invoker.tommybarrageno: %d, barrageangoffset: %.4f [tic: %d]", invoker.tommybarrageno, barrageangoffset, gametic);
		}
		if (A_DualTMGCheck())
		{
			double genaccu = frandompick(1.75,1.875,2.0,2.125,2.25,2.375,2.5);
			accuracyx *= genaccu;
			accuracyy *= genaccu;
		}
		if (kcdebug_weaponstatdisplays) Console.Printf("dmg: %d, accuracyx: %.4f, accuracyy: %.4f [tic: %d]", temp1, accuracyx, accuracyy, gametic);
		
		double currang = angle;
		A_SetAngle(angle+barrageangoffset);
		
		int randdmg = temp1;
		if (playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3"))
		{
			
			int shotamt = 1;
			if (A_DualTMGCheck()) shotamt = 2;
			A_TakeInventory("TommAmmo",shotamt);
			A_StartSound ("DSTOMFR", CHAN_WEAPON);
			for (int i = 0; i < shotamt; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				double origang = playera.angle;
				double randpitch = accuracyy;
				double randangle = accuracyx;
				double shotheight = 36;
				if (KCP) shotheight = ((KCP.height / 2) + KCP.AttackZOffSet);
				[BombShotsB, BombShots] = A_FireProjectileEx("KCBulletTracer",frandom(-randangle,randangle),false,0,0,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCBulletTracer BS1;
					BS1 = KCBulletTracer(BombShots);
					if (BS1)
					{
						BS1.DamageType = 'Bullet';
						BS1.finaldamagedealt = (randdmg);
					}
				}
			}
		}
		else
		{
			A_FireBullets(accuracyx,accuracyy,-1,(temp1),"KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
		}
		A_SetAngle(currang);
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
		Idle:
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("TommyGun")) 
				{
					if (!playera.CountInv("DualTommyGuns"))
					{
						A_SpawnItemEx("DualTommyGunPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}
				}
			}
			Loop;
		
		Select:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Raise(12);
			Loop;
		Deselect:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Lower(12);
			Loop;
		Ready:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
			
		LeftReady:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 1
			{
			}
			Stop;
			
		LeftPrep:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 12
			{
			}
			Stop;
		
		Fire:
			TOMF A 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftFire",false);
			}
			TOMF ABCD 2 bright 
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_TommyShot(0,0);
					A_TommyShot(0,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_TommyShot(0,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;
		
		LeftFire:
			TOF3 A 0 bright 
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF3 ABCD 2 bright 
			{
				if (CountInv("TommAmmo") <= 1) return resolvestate("LeftFireEnd");
				return resolvestate(null);
			}
		LeftFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;

		AltFire:
			TOF2 E 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftAltFire",false);
			}
			TOF2 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_TommyShot(1,0);
					A_TommyShot(1,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_TommyShot(1,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;

		LeftAltFire:
			TOF4 E 0 Bright
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF4 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					return resolvestate(null);
				}
			}
		LeftAltFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;
			
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTommyGuns"))
				{
					A_StopSound(10);
					A_StartSound("TOMPKP",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (playera.CountInv("DualTommyGunsDisabled"))
					{
						playera.A_SetInventory("DualTommyGunsDisabled",0);
						A_Overlay(3,"LeftPrep",false);
					}
					else 
					{
						playera.A_SetInventory("DualTommyGunsDisabled",1);
						A_Overlay(3,null,false);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class TommAmmo : Ammo
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 50;
		Inventory.MaxAmount 500;
		Ammo.BackpackAmount 50;
		Ammo.BackpackMaxAmount 1000;
		Inventory.PickupMessage "Picked up some \c[blue]ammo for the tommygun\c-.";
		Inventory.Icon "TOMAA0";
	}
	
	States
	{
		Spawn:
			TOMA A 1 Bright;
			Loop;
	}
}

class TommAmmoBig : TommAmmo
{
	default
	{
		Inventory.Amount 250;
		Inventory.PickupMessage "Picked up a ton of \c[blue]ammo for the tommygun\c-.";
	}
	
	States
	{
		Spawn:
			TOMA B 1 Bright;
			Loop;
	}
}

// *******************
// ** DEVASTATOR[S] **
// *******************
class Devastator : MarineWeapon
{
	int speedtype, speedtype2;
	int shotsfired, shotsfiredthreshold;
	int readytimer;
	int altammocost;
	default
	{
		Scale 0.75;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got the Devastator Weapon!";
		Weapon.AmmoType1 "MiniRockets";
		Weapon.AmmoType2 "MiniRockets";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
	}
	
	action bool A_DualDevCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		if (CountInv("DualDevastators") && !CountInv("DualDevastatorsDisabled")) check = true;
		return check;
	}
	
	action void A_FireDevastator(int type)
	{
		double mult = 1.0;
		if (type == 1 || type == 3) mult = -1.0;
		double pangle = 2.0;
		double pangle2 = -2.0;
		double ppitch = 2.0;
		double ppitch2 = -2.0;
		double pspwnoff = (2.0*mult);
		double pspwnhgt = 4.0;
		double pspwnhgt2 = 6.0;
		int shotsfired;
		string firetype;

		A_StartSound("weapons/devshot",101,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		A_StartSound("weapons/devburt",102,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		if (type == -2)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 1.1875;
			pangle2 = -1.1875;
			ppitch = -1.1875;
			ppitch2 = 1.1875;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.75;
			pspwnhgt2 = 3.25;
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		if (type == -1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 0.625;
			pangle2 = -0.625;
			ppitch = -0.625;
			ppitch2 = 0.625;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.25;
			pspwnhgt2 = 2.75;
		}
		if (type >= 0 && type <= 1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 1.5;
			pangle2 = -1.5;
			ppitch = -1.5;
			ppitch2 = 1.5;
			pspwnoff = (2.0*mult);
			pspwnhgt = 4.5;
			pspwnhgt2 = 5.5;
		}
		if (type >= 2 && type <= 3)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 3.125;
			pangle2 = -3.125;
			ppitch = -3.125;
			ppitch2 = 3.125;
			pspwnoff = (2.0*mult);
			pspwnhgt = 3.0;
			pspwnhgt2 = 7.0;
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		for (int i = 0; i < shotsfired; i++)
		{
			A_FireProjectile(firetype,frandom(pangle,pangle2),false,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
			A_FireProjectile(firetype,frandom(pangle,pangle2),true,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
		}
		invoker.shotsfired++;
		invoker.readytimer = 0;
		if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfired: %d / %d, invoker.readytimer: %d", invoker.shotsfired, invoker.shotsfiredthreshold, invoker.readytimer);
	}
	
	action void A_DevPreReady()
	{
		invoker.altammocost = 5; // Set to affect the alt-fire cost and number of total shots [x2 the value of missiles] V:
		invoker.readytimer++;
		if (invoker.readytimer >= random(3,4))
		{
			invoker.shotsfired = 0;
			invoker.shotsfiredthreshold = randompick(10,random(12,13),random(12,13),15,15,15,15,15,15,15,random(17,18),random(17,18),20);
			if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfiredthreshold [set]: %d", invoker.shotsfiredthreshold);
		}
	}
	
	States
	{
		Spawn:
			DVGG A 4
			{
				A_SpawnItemEx("DevastatorGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy();
			}
			Loop;
		
		Ready:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;

		ReadyDual:
			DEVG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			goto Ready;

		Deselect:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("DeselectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Lower(12);
			Loop;
		DeselectDual:
			DEVG A 1 A_Lower(12);
			goto Deselect;
		Select:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("SelectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Raise(12);
			Loop;
		SelectDual:
			DEVG A 1 A_Raise(12);
			goto Select;
		
		Fire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(0,0,1,1,1) + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype = randompick(0,0,0,0,1) + 1;
				invoker.speedtype2 = 1 + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype2 = randompick(0,0,1,1,1) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					return resolvestate("FireDual");
				}
				return resolvestate(null);
			}
			DEV1 B 1 
			{
				A_Light2();
				A_FireDevastator(-1);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;

		FireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "FireLeft");
		FireRight:
			DEVG B 1 
			{
				A_Light2();
				A_FireDevastator(0);
				A_SetTics(invoker.speedtype2);
			}
			DEVG C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		FireLeft:
			DEVG J 1 
			{
				A_Light2();
				A_FireDevastator(1);
				A_SetTics(invoker.speedtype2);
			}
			DEVG L 1 
			{
				A_Light0();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(1,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype = randompick(1,1,1,2) + 1;
				invoker.speedtype2 = randompick(1,2,2,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype2 = randompick(0,1,1,1,1,2) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					if (CountInv("MiniRockets") >= invoker.altammocost) return resolvestate("AltFireDual");
					return resolvestate("Ready");
				}
				else
				{
					if (CountInv("MiniRockets") < invoker.altammocost) return resolvestate("Ready");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DEV1 B 2 
			{
				A_Light2();
				A_FireDevastator(-2);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;
		
		AltFireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "AltFireLeft");
		AltFireRight:
			DEVG B 2 
			{
				A_Light2();
				A_FireDevastator(2);
			}
			DEVG C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		AltFireLeft:
			DEVG J 2 
			{
				A_Light2();
				A_FireDevastator(3);
			}
			DEVG L 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualDevastators"))
				{
					A_StopSound(10);
					A_StartSound("weapons/devswap",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (playera.CountInv("DualDevastatorsDisabled"))
					{
						playera.A_SetInventory("DualDevastatorsDisabled",0);
					}
					else 
					{
						playera.A_SetInventory("DualDevastatorsDisabled",1);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class Devcheck : Ammo
{
	default
	{
		Inventory.MaxAmount 1;
	}
}
class MiniRockets : Ammo
{
	default
	{
		Inventory.Amount 10;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 400;
		Inventory.PickupMessage "Picked up some \c[blue]mini rockets\c-.";
		Inventory.Icon "MNRAA0";
	}
	
	States
	{
		Spawn:
			MNRA A -1;
			Loop;
	}
}

class MiniRocketBox : MiniRockets
{
	default
	{
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 50;
		Inventory.PickupMessage "Picked up a box of \c[blue]mini rockets\c-.";
	}
	
	States
	{
		Spawn:
			MNRB A -1;
			Loop;
	}
}

class DevastatorGenerator : CustomInventory
{
	default
	{
		+FLOORCLIP;
		+INVENTORY.AUTOACTIVATE;
		Scale 0.75;
		Inventory.MaxAmount 2;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got a \c[orange]Devastator Weapon!";
	}
	
	States
	{ 
		Spawn: 
			DVGG A -1;
			Loop;
		Pickup: 
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!playera.CountInv("Devastator")) 
				{
					playera.A_GiveInventory("Devastator", 1);
				}
				else
				{
					if (!playera.CountInv("DualDevastators")) playera.A_GiveInventory("DualDevastators", 1);
					playera.A_GiveInventory("MiniRockets", 20);
				}
				playera.A_GiveInventory("MiniRockets", 20);
				playera.A_TakeInventory("DevastatorGenerator", 1);
			}
			Stop;
	} 
}

// ***************
// * SAW THROWER *
// ***************
class SawThrower : MarineWeapon
{
	int revtimes;
	int sawrange;
	int inputmode;
	default
	{
		Weapon.SelectionOrder 120;
		Inventory.PickupSound "weapons/slot7weapon2";
		Inventory.PickupMessage "You got the Saw Thrower!";
		Obituary "%o was gutted by %k's saw.";
		//AttackSound "weapons/throwsawcut";
		Weapon.AmmoType1 "Saws";
		Weapon.AmmoType2 "Saws";
		Weapon.AmmoGive 6;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.KickBack 20;
		Scale 0.9;
	}
	
	States
	{
		Spawn:
			THRS A -1;
			Stop;
		Ready:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1 
			{
				A_WeaponReady();
				invoker.revtimes = 0;
			}
			Goto Ready+1;
			TSWG A 1
			{
				A_WeaponReady();
				invoker.revtimes = 0;
			}
			Goto Ready+2;
		Deselect:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1
			{
				A_Lower(12);
				invoker.revtimes = 0;
			}
			Goto Deselect+1;
			TSWG A 1
			{
				A_Lower(12);
				invoker.revtimes = 0;
			}
			Goto Deselect+2;
		Select:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1
			{
				A_Raise(12);
				invoker.revtimes = 0;
			}
			Goto Select+1;
			TSWG A 1
			{
				A_Raise(12);
				invoker.revtimes = 0;
			}
			Goto Select+2;
		Fire:
			TSWG D 0 A_StartSound("weapons/throwsawlaunch",CHAN_WEAPON);
			TSWG D 0 A_Recoil(1.5);
			TSWG D 4 { A_FireProjectile("SawShot",0.0,true,0.0,0.0,FPF_NOAUTOAIM,0.0); }
			TSWG D 5 A_Recoil(-1.5);
			TSWG D 0 A_JumpIfNoAmmo(5);
			TSWG E 4;
			TSWG F 3;
			TSWG A 3;
			TSWG A 0 A_ReFire;
			Goto Ready;
			TSWG G 7;
			TSWG G 0 A_CheckReload;
			Goto Ready+2;
		AltFire:
			TSWG A 0 
			{
				A_JumpIfNoAmmo(7);
				invoker.sawrange = 56;
			}
			TSWG A 8;
		AltRevUp:
			TSWG A 0 A_StartSound("weapons/throwsawup",CHAN_WEAPON);
			TSWG BBC 3
			{
				A_CustomPunch((1*random(1,4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
		AltRevUp2:
			TSWG BB 1 A_CustomPunch((1*random(random(1,2),4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			TSWG C 0 A_ReFire;
			Goto AltHold+6;
			TSWG G 7;
			TSWG G 0 A_CheckReload;
			Goto Ready+2;
		AltHold:
			TSWG B 0 
			{
				if (invoker.revtimes >= 20)
				{
					if (invoker.revtimes % 2) 
					{
						A_StartSound("weapons/throwsawready",CHAN_WEAPON);
						A_StartSound("weapons/throwsawready",11,CHANF_DEFAULT,0.5);
					}
				}
				else
				{
					A_StartSound("weapons/throwsawready",CHAN_WEAPON);
				}
			}
			TSWG B 1 
			{
				if (invoker.revtimes >= 20) A_CustomPunch((random(2,3)*random(2,4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG B 1 
			{
				if (invoker.revtimes >= 20) A_SetTics(0);
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG C 1 
			{
				if (invoker.revtimes >= 20) A_CustomPunch((random(2,3)*random(2,4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG C 1 
			{
				if (invoker.revtimes >= 20) A_SetTics(0);
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG C 0 
			{
				invoker.revtimes++;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				if (buttons & BT_ATTACK)
				{
					if (invoker.revtimes >= 20)
					{
						return resolvestate("RevFire");
					}
					else
					{
						A_ReFire();
						return resolvestate(null);
					}
				}
				else
				{
					A_ReFire();
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			TSWG B 0
			{
				if (invoker.revtimes >= 20)
				{
					if (invoker.revtimes % 2) 
					{
						A_StartSound("weapons/throwsawready",CHAN_WEAPON);
						A_StartSound("weapons/throwsawready",11,CHANF_DEFAULT,0.5);
					}
				}
				else
				{
					A_StartSound("weapons/throwsawready",CHAN_WEAPON);
				}
			}
		AltEnd:
			TSWG CCBBCC 1 
			{
				A_CustomPunch((2*random(random(1,2),4)),0,0,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.9;
				A_Refire("AltRevUp2");
			}
			TSWG BBBCCCBBB 1 
			{
				A_CustomPunch((random(1,2)*random(random(1,2),4)),0,0,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.8;
				A_Refire("AltRevUp2");
			}
			TSWG CCCCBBBB 1 
			{
				A_CustomPunch((1*random(random(1,2),4)),0,0,"SawPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.6; 
				A_Refire("AltRevUp");
			}
			TSWG C 6 
			{
				invoker.revtimes *= 0.4; 
				A_Refire("AltRevUp");
			}
			TSWG A 9 
			{
				invoker.revtimes *= 0.2; 
				A_Refire("AltRevUp");
			}
			Goto Ready;

		RevFire:
			TSWG D 0
			{
				A_StartSound("weapons/throwsawlaunch",CHAN_WEAPON,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("weapons/throwsawlaunch",101,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.875,1.125));
				A_StartSound("weapons/throwsawlaunch",102,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			}
			TSWG D 0 A_Recoil(1.5);
			TSWG D 4 { A_FireProjectile("SSawShot",0.0,true,0.0,0.0,FPF_NOAUTOAIM,0.0); }
			TSWG D 5 A_Recoil(-1.5);
			TSWG D 0 A_JumpIfNoAmmo(5);
			TSWG E 4;
			TSWG F 3;
			TSWG A 3;
			Goto Ready;
			TSWG G 7;
			TSWG G 0 A_CheckReload;
			Goto Ready+2;


		// Fire Mode
		User4:
			TSWG G 0
			{
				if (invoker.inputmode == 0)
				{
					invoker.inputmode = 1;
					A_Print("Fire = Melee, AltFire = Ranged");
					A_StartSound("weapons/throwsawcut",0);
				}
				else
				if (invoker.inputmode == 1)
				{
					invoker.inputmode = 0;
					A_Print("Fire = Melee, AltFire = Ranged");
					A_StartSound("weapons/throwsawcut",0);
				}
			}
			TSWG G 8;
			goto Ready;
	}
}

class Saws : Ammo
{
	default
	{
		Inventory.Amount 3;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 3;
		Ammo.BackpackMaxAmount 100;
		Inventory.PickupMessage "Picked up some \c[blue]saws\c-.";
		//Inventory.PickupSound "weapons/ammo13";
		Inventory.Icon "SAWAA0";
	}
	
	States
	{
		Spawn:
			SAWA A -1;
			Stop;
	}
}

class SawBox : Saws
{
	default
	{
		Inventory.Amount 15;
		Inventory.PickupMessage "Picked up a box of \c[blue]saws\c-.";
	}
	
	States
	{
		Spawn:
			SAWB A -1;
			Stop;
	}
}

class ImpalerBowZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ImpalerBowFakeReady : PlaceholderItem { }
class ImpalerBowRealReady : PlaceholderItem { }
class ImpalerXBow : MarineWeapon
{
	default
	{
		Inventory.PickupMessage "Impaler Crossbow";
		Weapon.AmmoGive 15;
		Weapon.AmmoType1 "ImpalerBolts";
		Weapon.AmmoType2 "ImpalerBolts";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 3;
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.KickBack 20;
		+WEAPON.NOALERT;
	}
	
	action int A_BowBerserkCheck(int tic)
	{
		if (A_CheckBerserk()) tic *= frandompick(0.25,0.25,0.5,0.5,0.5,0.5,0.75,0.75);
		return tic;
	}
	
	action double A_GetXBowSpd()
	{
		double output = 10;
		double oldoutput = output;
		if (output <= 1.0) output = 1.0;
		if (kcdebug_meleeinformation) Console.Printf("output: %.8f [%.8f]", output, oldoutput);
		return output;
	}
	
	action void A_SetSonicNailStats(actor BombShots, int type)
	{
		int TruePlayerLevel = invoker.ActualLevel;
		double dmgfactor = 1.0;
		double dmgfactor2 = 1.0;
		int basedmg = (75 + (random(-25,25)));
		if (type == 1) basedmg = (50 + (random(randompick(-16,-17,-17),randompick(16,17,17))));
		if (type >= 2) basedmg = (25 + (random(randompick(-8,-8,-9),randompick(8,8,9))));
		//Console.Printf("basedmg: %d", basedmg);
		if (BombShots)
		{
			if (CountInv("ImpalerBowZoom") <= 0)
			{
				dmgfactor = (1.0 + (TruePlayerLevel * 0.015625));
				if (dmgfactor >= 2.0) dmgfactor = 2.0;
				dmgfactor2 = 1.0;
			}
			else
			if (CountInv("ImpalerBowZoom") == 1)
			{
				BombShots.speed *= 1.25;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.0234375));
				if (dmgfactor >= 3.0) dmgfactor = 3.0;
				dmgfactor2 = 1.125;
			}
			else
			if (CountInv("ImpalerBowZoom") == 2) 
			{
				BombShots.speed *= 1.5;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.03125));
				if (dmgfactor >= 4.0) dmgfactor = 4.0;
				dmgfactor2 = 1.25;
			}
			else
			if (CountInv("ImpalerBowZoom") == 3)
			{
				BombShots.speed *= 2.0;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.0625));
				if (dmgfactor >= 8.0) dmgfactor = 8.0;
				dmgfactor2 = 1.5;
			}
			else
			if (CountInv("ImpalerBowZoom") >= 4)
			{
				BombShots.speed *= 4.0;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.125));
				if (dmgfactor >= 16.0) dmgfactor = 16.0;
				dmgfactor2 = 2.0;
			}
			
			basedmg *= dmgfactor;
			basedmg *= dmgfactor2;
			//Console.Printf("basedmg: %d [dmgfactor: %.8f, dmgfactor2: %.8f]", basedmg, dmgfactor, dmgfactor2);
			
			KCBaseZSC BShot;
			BShot = KCBaseZSC(BombShots);
			if (BShot) BShot.finaldamagedealt = basedmg;
		}
	}
	
	action void A_XBowRecoil(double base)
	{
		double newbase = base;
		int TruePlayerLevel = invoker.ActualLevel;
		newbase *= (1.0 - (TruePlayerLevel * (frandompick(0.0375,0.05,0.05,0.05,0.0625) * frandompick(0.5,1,1,1,1,1,1,2))));
		if ((newbase > 0.00 && base <= 0.00) || 
				(newbase < 0.00 && base >= 0.00)) newbase = 0.00; 
		A_Recoil(newbase);
	}
	
	action void A_BowSetZoom()
	{
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		A_StartSound("Weapon/XBowLoad", 21, CHANF_DEFAULT, 0.75, ATTN_NORM, 1.25);
		A_StartSound("Weapon/XBowLoad", 22, CHANF_DEFAULT, 0.875, ATTN_NORM, 1.125);

		if (buttons & BT_USER3)
		{
			if (CountInv("ImpalerBowZoom") == 0) 
			{
				A_ZoomFactor(4.0); A_SetInventory("ImpalerBowZoom",4); A_Print("4x Zoom"); 
			}
			else
			{
				A_TakeInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.25); A_Print("1.25x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 0) { A_ZoomFactor(1.0); A_Print("No Zoom"); }
			}
		}
		else
		{
			A_GiveInventory("ImpalerBowZoom",1);
			if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.25); A_Print("1.25x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 5) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
		}
	}
	
	States
	{
		Spawn:
			CBOW Z -1;
			Stop;
		Select:
			CBOW E 1 A_Raise(12);
			Loop;
		Deselect:
			CBOW E 1 A_Lower(12);
			Loop;
		Ready:
			CBOW E 0 A_JumpIfNoAmmo("FakeReady");
			CBOW EF 5;
		RealReady:
			CBOW A 1 
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			CBOW E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			CBOW B 6 
			{
				actor BombShots;
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				BombShots = A_FireProjectileEx("ImpalerMissile",0,1);
				A_SetSonicNailStats(BombShots,0);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 6;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.50)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW C 8 
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 8;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.75)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
				A_XBowRecoil(1.75);
				
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 7)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW E 5 
			{
				A_CheckReload();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW F 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW A 12
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 12;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.375)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			Goto RealReady;
		
		AltFire:
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				double xspread = frandompick(1.25,2.5,2.5,2.5,3.75);
				actor BombShots;
				BombShots = A_FireProjectileEx("ImpalerMissile",0,1);
				A_SetSonicNailStats(BombShots,0);
				BombShots = A_FireProjectileEx("ImpalerMissile2",xspread,0);
				A_SetSonicNailStats(BombShots,1);
				BombShots = A_FireProjectileEx("ImpalerMissile2",-xspread,0);
				A_SetSonicNailStats(BombShots,1);
				BombShots = A_FireProjectileEx("ImpalerMissile3",(xspread*2),0);
				A_SetSonicNailStats(BombShots,2);
				BombShots = A_FireProjectileEx("ImpalerMissile3",(-xspread*2),0);
				A_SetSonicNailStats(BombShots,2);
				
				A_XBowRecoil(2.1875);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 9;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 12;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.9375)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.8125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.6875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6.5625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 7.5)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW D 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 7.334)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW E 5 
			{
				A_CheckReload();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.667)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW F 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5.334)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 6.667)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW A 12
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 18;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				if (random(1,2) <= 1)
				{
					if (TruePlayerLevel >= (A_GetXBowSpd() * 3.25)) tic -= 1;
					if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 3.5)) tic -= 1;
				}
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			Goto RealReady;
		
		// Zoom :V
		User4:
			CBOW A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			CBOW E 17
			{
				A_SetTics(random(17,18));
				A_BowSetZoom();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 14)) tic -= 1;
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			goto FakeReady;
		User4Real:
			CBOW A 17
			{
				A_SetTics(random(17,18));
				A_BowSetZoom();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 14)) tic -= 1;
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			goto RealReady;
	}	
}

class ImpalerBolts : Ammo
{
	default
	{
		Inventory.PickupMessage "Grabbed a pack of \c[blue]Steel bolts\c-";
		Inventory.Amount 10;
		Inventory.MaxAmount 40;
		Inventory.Icon "CBWAA0";
		Ammo.BackpackAmount 5;
		Ammo.BackpackMaxAmount 80;
	}
	
	States
	{
		Spawn:
			CBWA A -1;
			Stop;
	}
}

class TeslaCannon : MarineWeapon
{
	default
	{
		Weapon.SlotNumber 6;
		inventory.pickupmessage "you found the TeslaCannon!!!";
		radius 20;
		height 16;
		weapon.selectionorder 700;
		weapon.kickback 100;
		weapon.ammotype1 "Bolts";
		weapon.ammotype2 "Bolts";
		weapon.ammouse1 1;
		weapon.ammouse2 10;
		weapon.ammogive 100;
		Weapon.Kickback 50;
		//attacksound "Tesla/Fire1";
	}
	
	action void A_Tesla1()
	{
		A_StartSound("Tesla/Fire1",CHAN_WEAPON);
		A_FireProjectile("TeslaShot",0,1,0,0);
	}
	
	action void A_Tesla2()
	{
		A_StartSound("Tesla/AltFire2",CHAN_WEAPON);
		A_FireProjectile("TeslaShot2",0,1,0,0);
	}
	
	states
	{
		Spawn:
			TSLC A -1;
			Loop;
		Ready:
			EGUN AAABBBCCCDDDEEE 1 A_WeaponReady();
			loop;
		Select:
			EGUN A 1 A_Raise(12);
			loop;
		Deselect:
			EGUN A 1 A_Lower(12);
			Loop;
		Fire:
			NULL A 0 A_StartSound("Tesla/Start",CHAN_WEAPON);
			EGUN FGHIJ 1 bright;
		Hold:
			EGUN K 1 bright A_GunFlash();
			EGUN L 1 bright A_Tesla1();
			EGUN M 1 bright A_GunFlash();
			EGUN N 1 bright A_Tesla1();
			EGUN O 1 bright A_GunFlash();
			EGUN P 1 bright A_Tesla1();
			EGUN Q 1 bright A_GunFlash();
			EGUN R 1 bright A_Tesla1();
			EGUN S 1 bright A_GunFlash();
			EGUN T 1 bright A_Tesla1();
			NULL A 0 A_ReFire();
			NULL A 0 A_StartSound("Tesla/End");
			EGUN UVWXY 3;
			goto ready;
		AltFire:
			NULL A 0 A_StartSound("Tesla/AltCharge2",CHAN_WEAPON);
			EGUN FGHIJ 2 bright;
			EGUN LMNOPQRST 2 bright A_StartSound("Tesla/End");
			EGUN LMNOPQRST 1 bright A_StartSound("Tesla/End");
			NULL A 0 A_Tesla2();
			EGU2 ABCDEFG 2 bright;
			EGUN UVWXY 3;
			goto ready;
	}
}
class TeslaShot : PlasmaBallNew
{
	default
	{
		DamageType "Lightning";
		Damage 10;
		SeeSound "";
		RenderStyle "Add";
		alpha 0.5;
		scale 0.3;
		Decal "none";
		-EXTREMEDEATH;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn: 
			MRS2 A 1 bright A_SpawnItemEx("TeslaExtra1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL A 0 A_SpawnItem("TeslaTail");
			MRS2 B 1 bright A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL A 0 A_SpawnItem("TeslaExtra1");
			Loop;
		Death:
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 CDEFG 2 bright;
			Stop;
	}
}
class TeslaShot2 : PlasmaBallNew
{
	default
	{
		DamageType "Lightning";
		Damage 80;
		SeeSound "";
		DeathSound "TSLPRJC2";
		RenderStyle "Add";
		alpha 0.5;
		height 10;
		radius 10;
		Decal "none";
		ExplosionRadius 192;
		ExplosionDamage 128;
		-EXTREMEDEATH;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+FORCERADIUSDMG;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn: 
			MRS2 A 1 bright A_SpawnItem("TeslaTail1");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 B 1 bright A_SpawnItem("TeslaExtra3");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			Loop;
		Death:
			NULL A 0 A_Explode(135,256,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning");
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 CDEFG 2 bright;
			Stop;
	}
}
class TeslaExtra : KCBaseZSC
{
	default
	{
		DamageType "Lightning";
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.2;
		RenderStyle "Add";
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}

	States
	{
		Spawn:
			ZAPR ABC 1 Bright;
			NULL A 0 A_Jump(160,1);
			Loop;
			ZAPR ABC 1 Bright;
			ZAPR DE 1 Bright A_FadeOut();
			Wait;
		Death:
			NULL A 1;
			Stop;
	}
}

class Teslatail : KCBaseZSC
{
	default
	{
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NOGRAVITY;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.05;
		RenderStyle "Add";
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}

	States
	{
		Spawn:
			MRS2 AB 1 bright A_FadeOut();
			wait;
	}
}
class TeslaExtra1 : TeslaExtra
{
	default
	{
		Scale 0.1;
	}
}
class TeslaExtra3 : TeslaExtra
{
	default
	{
		Scale 0.6;
	}
}
class Teslatail1 : Teslatail
{
	default
	{
		Scale 0.3;
	}
}

class Bolts : Ammo
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 50;
		Inventory.MaxAmount 450;
		Ammo.BackpackAmount 100;
		scale 0.3;
		RenderStyle "Translucent";
		Alpha 0.9;
		Ammo.BackpackMaxAmount 900;
		Inventory.PickupMessage "Picked up a Bolt Charge.";
		Inventory.Icon "BOLTA0";
	}
	States
	{
		Spawn:
			BOLT A 1;
			Loop;
	}
}

class BoltsLarge : Bolts
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 200;
		scale 0.75;
		RenderStyle "Translucent";
		Alpha 0.9;
		Inventory.PickupMessage "Picked up a Large Bolt Charge.";
		Inventory.Icon "BOLTA0";
	}
	States
	{
		Spawn:
			BOLT A 1;
			Loop;
	}
}
