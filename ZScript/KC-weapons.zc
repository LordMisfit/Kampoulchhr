class KCProjectile : KampoulchhrBase
{
	bool isillusionaryproj;
	int user_projtimer;
	float user_ignoreaoeimmunity;
	int saveddmg; // Save damage from things like A_CustomPunch for puffs
	int user_canafflict;
	int user_ailmentmaxchance;
	
	int user_hitsparkrand;
	int user_sparksizelevel;
	double user_sparkscalemulti;
	int user_noseektimer;
	
	actor OriginalActor;
	string OriginalActorType;
	bool REFLECTEDMONSTERPROJ;
	
	double bonusmultiplier;
	
	int xyspreadtime;
	int zspreadtime;
	int ipprojid;
	double basespreadspeed;

	bool hitawall;
	bool hitaceiling;
	bool hitafloor;

	int timesrippedoverall;
	int maxtimesrippedoverall;
	
	int BaseSigilMaxHealth;
	int MaxHealthTrue;
	int stamdamagefactor;
	int accudamagefactor;
	
	int PlayerLevel;
	PlayerPawn playpawn;
	KCCreature kcactor;
	
	private class<Inventory> iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4, iDTech1Check5, iDTech1Check6, iDTech1Check7, iDTech1Check8;

	default
	{
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (bonusmultiplier <= 0.0) bonusmultiplier = 1.0;

		if (target) 
		{
			playpawn = PlayerPawn(target);
			if (playpawn)
			{
				let MiscItem = PlayerStatItem(playpawn.FindInventory("PlayerStatItem"));
				if (MiscItem) PlayerLevel = MiscItem.TruePlayerLevel;
			}
			
			if (target.bNOBLOOD == true && 
					target.bNOPAIN == true &&
					target.bNOTARGETSWITCH == true &&
					target.bNOINFIGHTING == true &&
					target.bFULLVOLACTIVE == false && 
					target.bFULLVOLDEATH == false &&
					target.bBOSS == false) isillusionaryproj = true;
					
			let IsPlayer = PlayerPawn(target);
			let IsAMonster = KCCreature(target);
			if (IsAMonster)
			{
				OriginalActor = IsAMonster;
				OriginalActorType = IsAMonster.GetClassName();
			}
		}
	}
	
	void A_KCPostPain()
	{
		string nm;
		nm = "JustKicked"; if (CountInv(nm) > 0) A_SetInventory(nm,0);
		nm = "JustPunched"; if (CountInv(nm) > 0) A_SetInventory(nm,0);
		nm = "JustUppercutted"; if (CountInv(nm) > 0) A_SetInventory(nm,0);
		nm = "JustShieldDashed"; if (CountInv(nm) > 0) A_SetInventory(nm,0);
	}
	
	override void Tick()
	{
		if (target)
		{
			if (PlayerPawn(target))
			{
				if (target.CountInv("PowerTimeFreezer") ||
						target.CountInv("KCMiscTimeFreezer") ||
						target.CountInv("DebugTimeFreezer") ||
						target.CountInv("KCTimeFreezer") ||
						target.CountInv("KCTimeFreezer1") ||
						target.CountInv("KCTimeFreezer2") ||
						target.CountInv("KCTimeFreezer3") ||
						target.CountInv("DashTimeFreezer") ||
						!target.player.timefreezer)
				{
					if (target.CountInv("DebugTimeFreezer"))
					{
						if (!dydudebug_timefreezedebugaffectproj && !bNOTIMEFREEZE) bNOTIMEFREEZE = true;
						if (dydudebug_timefreezedebugaffectproj) bNOTIMEFREEZE = false;
					}
					else
					{
						if (!bNOTIMEFREEZE) bNOTIMEFREEZE = true;
					}
				}
				else
				{
					if (bNOTIMEFREEZE) bNOTIMEFREEZE = false;
				}
			}
			else
			{
				if (!bNOTIMEFREEZE)
				{
					if (target && target.bNOTIMEFREEZE) bNOTIMEFREEZE = true;
				}
				else
				{
					if (target && !target.bNOTIMEFREEZE) bNOTIMEFREEZE = false;
				}
			}
		}
		
		if (OriginalActor != null) 
		{ 
			if (target != OriginalActor && target == KCPlayerPawn(target)) REFLECTEDMONSTERPROJ = true;
		}
		
		if (REFLECTEDMONSTERPROJ && bDONTREFLECT == false) 
		{
			//Console.Printf("REFLECTEDMONSTERPROJ (%d)", level.time);
			bDONTREFLECT = true;
		}
		
		Super.Tick();
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		KCPlayerPawn playpawn;
		KCPlayerPawn playpawn2;
		Actor KCActor;
		Actor KCActor2;
		playpawn = KCPlayerPawn(target);
		playpawn2 = KCPlayerPawn(other);
		KCActor = Actor(target);
		KCActor2 = Actor(other);
		
		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			if (dydudebug_projectilecollisions && (other.bSHOOTABLE && other != target)) Console.Printf("\c[brick]Collision:\c- %s (%p @ %.2f, %.2f, %.2f) vs %s (%p @ %.2f, %.2f, %.2f) [%d, f: %d]", GetClassName(), self, pos.x, pos.y, pos.z, other.GetClassName(), other, other.pos.x, other.pos.y, other.pos.z, GetAge(), frame);
			
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					//if (A_CheckFriendCollisionProjTypePlayer(self)) return false;
					//if (A_CheckFriendCollisionProjTypePlayer2(self)) return false;
				}
			}
			else
			if (KCActor && KCActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					//if (A_CheckFriendCollisionProjTypeFriendlyDoom()) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHeretic()) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHexen()) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyStrife()) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyOthers()) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendly1()) return false;
				}
			}
			else 
			{
			}
		}
		
		// We don't really care about others making the check.
		return true;
	}
	
	override int DoSpecialDamage(Actor target, int damage, Name damagetype)
	{
		if (kcdebug_dospecialdmg) Console.Printf("DoSpecialDamage: KCProjectile, target: %s, damage: %d, damagetype: %s", target.GetClassName(), damage, damagetype);
		damage = super.DoSpecialDamage(target, damage, damagetype);
		// New Code goes here
		return damage;
	}
	//
	//
	//
}

class KCEffectProjectile : KCProjectile
{
	default
	{
		+HITMASTER;
	}
	
	void A_InflictHalve(int basetime = 35, int sndchannel = 401)
	{
		actor player = players[0].mo;
		if (!player.CountInv("PowerHalve"))
		{
			player.SetInventory("PowerHalve",1);
			let BluntItem = PowerHalve(player.FindInventory("PowerHalve"));
			if (BluntItem) BluntItem.EffectTics = basetime;
		}
		else
		{
			let BluntItem = PowerHalve(player.FindInventory("PowerHalve"));
			if (BluntItem) BluntItem.EffectTics += basetime;
		}
		player.A_StartSound("debuff/atkdown",sndchannel,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
		if (kcdebug_inflictstatuseffect) Console.Printf("(A_InflictHalve)");
	}
	
	void A_InflictWeaken(int basetime = 35, int sndchannel = 401)
	{
		actor player = players[0].mo;
		if (!player.CountInv("PowerWeaken"))
		{
			player.SetInventory("PowerWeaken",1);
			let SapItem = PowerWeaken(player.FindInventory("PowerWeaken"));
			if (SapItem) SapItem.EffectTics = basetime;
		}
		else
		{
			let SapItem = PowerWeaken(player.FindInventory("PowerWeaken"));
			if (SapItem) SapItem.EffectTics += basetime;
		}
		player.A_StartSound("debuff/defdown",sndchannel,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
		if (kcdebug_inflictstatuseffect) Console.Printf("(A_InflictWeaken)");
	}
	
	void A_InflictSlow(int basetime = 35, int sndchannel = 401)
	{
		actor player = players[0].mo;
		if (!player.CountInv("PowerSlow"))
		{
			player.SetInventory("PowerSlow",1);
			let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
			if (SlowItem) SlowItem.EffectTics = basetime;
		}
		else
		{
			let SlowItem = PowerSlow(player.FindInventory("PowerSlow"));
			if (SlowItem) SlowItem.EffectTics += basetime;
		}
		player.A_StartSound("debuff/spddown",sndchannel,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.9,1.1));
		if (kcdebug_inflictstatuseffect) Console.Printf("(A_InflictSlow)");
	}
	
	int A_StatusEffectChecker(int basechance)
	{
		if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile [\c[green]%s\c[orange])", GetClassName());
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		user_ailmentmaxchance = basechance;
		if (master && master == player)
		{
			if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- master == player");
			if (player.CountInv("EWShieldIdleMode") > 0) 
			{
				if (player.CountInv("EWShieldDefendMode") > 0)
				{
					if (player.CountInv("EWShieldDefendModeExtra") > 0) 
					{
						user_ailmentmaxchance *= 20;
						if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- HWShield [Extra Guarding]");
					}
					else 
					{
						user_ailmentmaxchance *= 12;
						if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- HWShield [Guarding]");
					}
				}
				else
				{
					user_ailmentmaxchance *= 4;
					if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- HWShield [Equipped but Idle]");
				}
			}
		}

		user_canafflict = 1;
		if (master)
		{
			if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Health Check");
			if (master.health <= 0) 
			{
				user_canafflict = 0;
				if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Health Is < 0");
			}

			if (master.CountInv("EvadeAnAttack") > 0 || 
					master.CountInv("PlayerDashing") > 0) 
					{
						user_canafflict = 0;
						if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Evaded/Dashing");
					}
		}

		KCPlayerPawn playpawn;
		if (master)
		{
			if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Invuln Check");
			playpawn = KCPlayerPawn(master);
			if (playpawn)
			{
				if (playpawn.player.cheats & CF_GODMODE2 || playpawn.player.cheats & CF_GODMODE || playpawn.bINVULNERABLE) user_canafflict = 0;
				if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Invuln Check [found player]: %d", user_canafflict);
			}
			else
			{
				if (master.bINVULNERABLE) user_canafflict = 0;
				if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- Invuln Check [found non-player]: %d", user_canafflict);
			}
		}
		if (kcdebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectProjectile - A_StatusEffectChecker:)\c- user_ailmentmaxchance: %d (basechance: %d), user_canafflict: %d", user_ailmentmaxchance, basechance, user_canafflict);
		return user_ailmentmaxchance;
	}
}


// Base FastProjectile Class
class KCFastProjectile : KCProjectile abstract
{
	Default
	{
		Projectile;
		MissileHeight 0;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}
	
	virtual void Effect()
	{
		class<Actor> trail = MissileName;
		if (trail != null)
		{
			double hitz = pos.z - 8;

			if (hitz < floorz)
			{
				hitz = floorz;
			}
			// Do not clip this offset to the floor.
			hitz += MissileHeight;
			
			Actor act = Spawn (trail, (pos.xy, hitz), ALLOW_REPLACE);
			if (act != null)
			{
				if (bGetOwner && target != null)
					act.target = target;
				else
					act.target = self;
				
				act.angle = angle;
				act.pitch = pitch;
			}
		}
	}
	
	//----------------------------------------------------------------------------
	//
	// AFastProjectile :: Tick
	//
	// Thinker for the ultra-fast projectiles used by Heretic and Hexen
	//
	//----------------------------------------------------------------------------

	override void Tick ()
	{
		if (target)
		{
			if (KCPlayerPawn(target))
			{
				if (target.CountInv("PowerTimeFreezer") ||
						target.CountInv("KCMiscTimeFreezer") ||
						target.CountInv("DebugTimeFreezer") ||
						target.CountInv("KCTimeFreezer") ||
						target.CountInv("KCTimeFreezer1") ||
						target.CountInv("KCTimeFreezer2") ||
						target.CountInv("KCTimeFreezer3") ||
						target.CountInv("DashTimeFreezer") ||
						!target.player.timefreezer)
				{
					if (target.CountInv("DebugTimeFreezer"))
					{
						if (!dydudebug_timefreezedebugaffectproj && !bNOTIMEFREEZE) bNOTIMEFREEZE = true;
					}
					else
					{
						if (!bNOTIMEFREEZE) bNOTIMEFREEZE = true;
					}
				}
				else
				{
					if (bNOTIMEFREEZE) bNOTIMEFREEZE = false;
				}
			}
			else
			{
				if (!bNOTIMEFREEZE)
				{
					if (target && target.bNOTIMEFREEZE) bNOTIMEFREEZE = true;
				}
				else
				{
					if (target && !target.bNOTIMEFREEZE) bNOTIMEFREEZE = false;
				}
			}
		}
		
		ClearInterpolation();
		double oldz = pos.Z;

		if (isFrozen())
			return;

		// [RH] Ripping is a little different than it was in Hexen
		FCheckPosition tm;
		tm.DoRipping = bRipper;

		int count = 8;
		if (radius > 0)
		{
			while (abs(Vel.X) >= radius * count || abs(Vel.Y) >= radius * count)
			{
				// we need to take smaller steps.
				count += count;
			}
		}

		if (height > 0)
		{
			while (abs(Vel.Z) >= height * count)
			{
				count += count;
			}
		}

		// Handle movement
		bool ismoved = Vel != (0, 0, 0)
			// Check Z position set during previous tick.
			// It should be strictly equal to the argument of SetZ() function.
			|| (   (pos.Z != floorz           ) /* Did it hit the floor?   */
				&& (pos.Z != ceilingz - Height) /* Did it hit the ceiling? */ );

		if (ismoved)
		{
			// force some lateral movement so that collision detection works as intended.
			if (bMissile && Vel.X == 0 && Vel.Y == 0 && !IsZeroDamage())
			{
				VelFromAngle(MinVel);
			}

			Vector3 frac = Vel / count;
			int changexy = frac.X != 0 || frac.Y != 0;
			int ripcount = count / 8;
			for (int i = 0; i < count; i++)
			{
				if (changexy)
				{
					if (--ripcount <= 0)
					{
						tm.ClearLastRipped();	// [RH] Do rip damage each step, like Hexen
					}
					
					if (!TryMove (Pos.XY + frac.XY, true, false, tm))
					{ // Blocked move
						if (!bSkyExplode)
						{
							let l = tm.ceilingline;
							if (l &&
								l.backsector &&
								l.backsector.GetTexture(sector.ceiling) == skyflatnum)
							{
								let posr = PosRelative(l.backsector);
								if (pos.Z >= l.backsector.ceilingplane.ZatPoint(posr.XY))
								{
									// Hack to prevent missiles exploding against the sky.
									// Does not handle sky floors.
									Destroy ();
									return;
								}
							}
							// [RH] Don't explode on horizon lines.
							if (BlockingLine != NULL && BlockingLine.special == Line_Horizon)
							{
								Destroy ();
								return;
							}
						}

						ExplodeMissile (BlockingLine, BlockingMobj);
						return;
					}
				}
				AddZ(frac.Z);
				UpdateWaterLevel();
				oldz = pos.Z;
				if (oldz <= floorz)
				{ // Hit the floor

					if (floorpic == skyflatnum && !bSkyExplode)
					{
						// [RH] Just remove the missile without exploding it
						//		if this is a sky floor.
						Destroy ();
						return;
					}

					SetZ(floorz);
					HitFloor ();
                    Destructible.ProjectileHitPlane(self, SECPART_Floor);
					ExplodeMissile (NULL, NULL);
					return;
				}
				if (pos.Z + height > ceilingz)
				{ // Hit the ceiling

					if (ceilingpic == skyflatnum && !bSkyExplode)
					{
						Destroy ();
						return;
					}

					SetZ(ceilingz - Height);
                    Destructible.ProjectileHitPlane(self, SECPART_Ceiling);
					ExplodeMissile (NULL, NULL);
					return;
				}
				CheckPortalTransition();
				if (changexy && ripcount <= 0) 
				{
					ripcount = count >> 3;

					// call the 'Effect' method.
					Effect();
				}
			}
		}
		if (!CheckNoDelay())
			return;		// freed itself
		// Advance the state
		if (tics != -1)
		{
			if (tics > 0) tics--;
			while (!tics)
			{
				if (!SetState (CurState.NextState))
				{ // mobj was removed
					return;
				}
			}
		}
	}
}

class KCEffectFastProjectile : KCFastProjectile
{
	default
	{
		+HITMASTER;
	}
	
	int A_StatusEffectChecker(int basechance)
	{
		if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile [\c[green]%s\c[orange])", GetClassName());
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		user_ailmentmaxchance = basechance;
		if (master && master == player)
		{
			if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- master == player");
			if (player.CountInv("EWShieldIdleMode") > 0) 
			{
				if (player.CountInv("EWShieldDefendMode") > 0)
				{
					if (player.CountInv("EWShieldDefendModeExtra") > 0) 
					{
						user_ailmentmaxchance *= 20;
						if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- HWShield [Extra Guarding]");
					}
					else 
					{
						user_ailmentmaxchance *= 12;
						if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- HWShield [Guarding]");
					}
				}
				else
				{
					user_ailmentmaxchance *= 4;
					if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- HWShield [Equipped but Idle]");
				}
			}
		}

		user_canafflict = 1;
		if (master)
		{
			if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Health Check");
			if (master.health <= 0) 
			{
				user_canafflict = 0;
				if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Health Is < 0");
			}

			if (master.CountInv("EvadeAnAttack") > 0 || 
					master.CountInv("PlayerDashing") > 0) 
					{
						user_canafflict = 0;
						if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Evaded/Dashing");
					}
		}

		KCPlayerPawn playpawn;
		if (master)
		{
			if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Invuln Check");
			playpawn = KCPlayerPawn(master);
			if (playpawn)
			{
				if (playpawn.player.cheats & CF_GODMODE2 || playpawn.player.cheats & CF_GODMODE || playpawn.bINVULNERABLE) user_canafflict = 0;
				if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Invuln Check [found player]: %d", user_canafflict);
			}
			else
			{
				if (master.bINVULNERABLE) user_canafflict = 0;
				if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- Invuln Check [found non-player]: %d", user_canafflict);
			}
		}
		if (dydudebug_inflictstatuseffect) Console.Printf("\c[orange](KCEffectFastProjectile - A_StatusEffectChecker:)\c- user_ailmentmaxchance: %d (basechance: %d), user_canafflict: %d", user_ailmentmaxchance, basechance, user_canafflict);
		return user_ailmentmaxchance;
	}
}

// Base Bullet Tracer Class
class KCBulletTracer : KCFastProjectile
{
	int damagebase;
	default
	{
		Tag "Shot";
		Damagetype "Hitscan";
		DamageFunction (finaldamagedealt);
		Radius 2;
		Height 2;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+NODAMAGETHRUST;
		Renderstyle "Add";
		Alpha 1.0;
		Scale 1.0;
		decal "BulletChip";
	}
	
	override void PostBeginPlay()
	{
		KCFastProjectile.PostBeginPlay();
		A_ScaleVelocity(kc_tracervelmulti);
		
		if (finaldamagedealt <= 0) finaldamagedealt = (5 * random(1,3));
	}
	
	action void A_SpawnTracerTrail(string name = "KCBulletTracerTrail", int extranum = 6, double spread = -2.5)
	{
		double posx = 0.0;
		A_SpawnItemEx(name,posx,0,0,0,0,0,0,128,0);
		for (int trailnum = 0; trailnum < extranum; trailnum++)
		{
			posx += spread;
			A_SpawnItemEx(name,posx,0,0,0,0,0,0,128,0);
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("KCBulletTracerTrail",6,-2.5);
			loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("BulletPuff")
			stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("BulletPuff");
			stop;
	}
}

class KCBulletTracerTrail : KampoulchhrBase
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		Renderstyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			stop;
	}
}

// Projectiles derived from this class should rip through actors,
// but not actually hit them more than once.
class SingleDamageRipper : KCProjectile abstract
{
	default
	{
		Projectile;
		+RIPPER;
	}
	
	Array<Actor> ActorsAlreadyHit;
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		KCPlayerPawn playpawn;
		KCPlayerPawn playpawn2;
		Actor KCActor;
		Actor KCActor2;
		playpawn = KCPlayerPawn(target);
		playpawn2 = KCPlayerPawn(other);
		KCActor = Actor(target);
		KCActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					//if (A_CheckFriendCollisionProjTypePlayer(self)) return false;
					//if (A_CheckFriendCollisionProjTypePlayer2(self)) return false;
				}
			}
			else
			if (KCActor && KCActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					//if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			else 
			{
			}
		}
		// We don't really care about others making the check.

		for (let i = 0, size = ActorsAlreadyHit.Size(); i < size; i++)
				if (other == ActorsAlreadyHit[i])
						return false;
		
		return true;
	}
}

class SingleDamageFastRipper : KCFastProjectile abstract
{
	default
	{
		Projectile;
		+RIPPER;
	}
	
	Array<Actor> ActorsAlreadyHit;
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		KCPlayerPawn playpawn;
		KCPlayerPawn playpawn2;
		Actor KCActor;
		Actor KCActor2;
		playpawn = KCPlayerPawn(target);
		playpawn2 = KCPlayerPawn(other);
		KCActor = Actor(target);
		KCActor2 = Actor(other);

		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// if fired by a player actor, check for friendliness from the passive actor
			if (playpawn) 
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
				{
					//if (A_CheckFriendCollisionProjTypePlayer(self)) return false;
					//if (A_CheckFriendCollisionProjTypePlayer2(self)) return false;
				}
			}
			else
			if (KCActor && KCActor.bFRIENDLY)
			{
				// Pass through different species of select types or players
				if (other.bFRIENDLY == 1 || playpawn2)
				{
					//if (A_CheckFriendCollisionProjTypeFriendlyDoom() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHeretic() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyHexen() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyStrife() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendlyOthers() > 0) return false;
					//else if (A_CheckFriendCollisionProjTypeFriendly1() > 0) return false;
				}
			}
			else 
			{
			}
		}
		// We don't really care about others making the check.

		for (let i = 0, size = ActorsAlreadyHit.Size(); i < size; i++)
				if (other == ActorsAlreadyHit[i])
						return false;
		
		return true;
	}
}

class KCWeaponBase : Weapon
{
	int temp1;
	int tommybarrageno;
	
	int ActualLevel;
	int kickspeed;
	int punchspeed;
	int uppercutspeed;
	int buttons;
	int PlayerLevel;

	const spread1angle = 7.5;
	const spread2angle = 3.75;
	const spread2pitch = 3.75;
	
	bool PickupUseVoice;
	bool PickupUseVoice2;
	string PickupSnd2;
	property PickUpVoice: PickupUseVoice;
	property PickUpVoice2: PickupUseVoice2;
	property PickupSound2: PickupSnd2;
	
	default
	{
		+WEAPON.NOAUTOAIM;
		+DONTGIB;
	}
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (toucher != NULL && toucher.CheckLocalView())
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
		}
		else
		{
			if (PickupUseVoice) chan = CHAN_VOICE;
										 else chan = CHAN_ITEM;
			flags = CHANF_MAYBE_LOCAL;
		}
		//Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);

		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			}
		}
		toucher.A_StopSound(chan);
		toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		
		if (PickupSnd2 != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			//Console.Printf("Channel: %d [PUV2: %d]", chan, PickupUseVoice2);
			
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
			double maskpitch = 1.00;
			if (PickupUseVoice2) 
			{
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
			}
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
		}
	}
	
	action void A_FireBulletsEx(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		let player = player;
		if (!player) return;

		let pawn = PlayerPawn(self);
		let weapon = player.ReadyWeapon;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags & FBF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;
		FTranslatedLineTarget t;

		if ((flags & FBF_USEAMMO) && weapon &&  stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}
		
		if (range == 0)	range = PLAYERMISSILERANGE;

		if (!(flags & FBF_NOFLASH)) pawn.PlayAttacking2 ();

		if (!(flags & FBF_NOPITCH)) bslope = BulletSlope();
		bangle = Angle;

		if (pufftype == NULL) pufftype = 'BulletPuff';

		if (weapon != NULL)
		{
			A_StartSound(weapon.AttackSound, CHAN_WEAPON);
		}

		if ((numbullets == 1 && !player.refire) || numbullets == 0)
		{
			int damage = damageperbullet;

			if (!(flags & FBF_NORANDOM))
				damage *= random[cabullet](1, 3);

			let puff = LineAttack(bangle, range, bslope, damage, 'Hitscan', pufftype, laflags, t);

			if (missile != null)
			{
				bool temp = false;
				double ang = Angle - 90;
				Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
				Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
				if (proj)
				{
					if (!puff)
					{
						temp = true;
						puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
					}
					AimBulletMissile(proj, puff, flags, temp, false);
					if (t.unlinked)
					{
						// Arbitary portals will make angle and pitch calculations unreliable.
						// So use the angle and pitch we passed instead.
						proj.Angle = bangle;
						proj.Pitch = bslope;
						proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
					}
				}
			}
		}
		else 
		{
			if (numbullets < 0)
				numbullets = 1;
			for (i = 0; i < numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags & FBF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cabullet]() / 255.;
					slope += spread_z * Random2[cabullet]() / 255.;
				}

				int damage = damageperbullet;

				if (!(flags & FBF_NORANDOM))
					damage *= random[cabullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags, t);

				if (missile != null)
				{
					bool temp = false;
					double ang = Angle - 90;
					Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
					Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
					if (proj)
					{
						if (!puff)
						{
							temp = true;
							puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
						}
						AimBulletMissile(proj, puff, flags, temp, false);
						if (t.unlinked)
						{
							// Arbitary portals will make angle and pitch calculations unreliable.
							// So use the angle and pitch we passed instead.
							proj.Angle = bangle;
							proj.Pitch = bslope;
							proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
						}
					}
				}
			}
		}
	}
	
	action void A_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0)
	{
		int sflags = flags;
		if (sflags & FBF_USEAMMO) sflags -= FBF_USEAMMO;
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		double pang = player.angle;
		double pptc = player.pitch;
		if (player.CountInv("KCPowerSpread2"))
		{
			player.angle -= spread2angle;
			player.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
			player.pitch = pptc;

			player.angle -= spread2angle;
			player.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
			player.pitch = pptc;

			player.angle += spread2angle;
			player.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
			player.pitch = pptc;

			player.angle += spread2angle;
			player.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
			player.pitch = pptc;
		}
		if (player.CountInv("KCPowerSpread2") || player.CountInv("KCPowerSpread1"))
		{
			player.angle -= spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
			
			player.angle += spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy);
			player.angle = pang;
		}
		A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, flags, range, missile, Spawnheight, Spawnofs_xy);
	}

	action Actor, Actor A_FireProjectileEx(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)	
	{
		let player = self.player;
		if (!player) return null;

		let weapon = player.ReadyWeapon;

		FTranslatedLineTarget t;

			// Only use ammo if called from a weapon
		if (useammo && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return null;	// out of ammo
		}

		if (missiletype) 
		{
			double ang = self.Angle - 90;
			Vector2 ofs = AngleToVector(ang, spawnofs_xy);
			double shootangle = self.Angle;

			if (flags & FPF_AIMATANGLE) shootangle += angle;

			// Temporarily adjusts the pitch
			double saved_player_pitch = self.Pitch;
			self.Pitch += pitch;

			Actor misl, realmisl;
			[misl, realmisl] = SpawnPlayerMissile (missiletype, shootangle, ofs.X, ofs.Y, spawnheight, t, false, (flags & FPF_NOAUTOAIM) != 0);
			self.Pitch = saved_player_pitch;

			if (realmisl && flags & FPF_TRANSFERTRANSLATION)
				realmisl.Translation = Translation;

			// automatic handling of seeker missiles
			if (misl)
			{
				if (t.linetarget && !t.unlinked && misl.bSeekerMissile)
					misl.tracer = t.linetarget;
				if (!(flags & FPF_AIMATANGLE))
				{
					// This original implementation is to aim straight ahead and then offset
					// the angle from the resulting direction. 
					misl.Angle += angle;
					misl.VelFromAngle(misl.Vel.XY.Length());
				}
			}
			if (kcdebug_weaponstatdisplays)
			{
				if (misl) Console.Printf("\c[green](A_FireProjectileEx)\c- misl: %p [%s]", misl, misl.GetClassName());
				if (realmisl) Console.Printf("\c[green](A_FireProjectileEx)\c- realmisl: %p [%s]", realmisl, realmisl.GetClassName());
			}
			return misl, realmisl;
		}
		return null, null;
	}
	
	action Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor, Actor A_FireProjectile(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
	{
		actor misl1, misl2, misl3, misl4, misl5, misl6, misl7;
		actor realmisl1, realmisl2, realmisl3, realmisl4, realmisl5, realmisl6, realmisl7;
		
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		double pang = player.angle;
		double pptc = player.pitch;
		if (player.CountInv("KCPowerSpread2"))
		{
			player.angle -= spread2angle;
			player.pitch -= spread2pitch;
			[misl7, realmisl7] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
			player.pitch = pptc;

			player.angle -= spread2angle;
			player.pitch += spread2pitch;
			[misl6, realmisl6] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
			player.pitch = pptc;

			player.angle += spread2angle;
			player.pitch -= spread2pitch;
			[misl5, realmisl5] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
			player.pitch = pptc;

			player.angle += spread2angle;
			player.pitch += spread2pitch;
			[misl4, realmisl4] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
			player.pitch = pptc;
		}
		if (player.CountInv("KCPowerSpread2") || player.CountInv("KCPowerSpread1"))
		{
			player.angle -= spread1angle;
			[misl3, realmisl3] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
			
			player.angle += spread1angle;
			[misl2, realmisl2] = A_FireProjectileEx(missiletype, angle, false, spawnofs_xy, spawnheight, flags, pitch);
			player.angle = pang;
		}
		[misl1, realmisl1] = A_FireProjectileEx(missiletype, angle, useammo, spawnofs_xy, spawnheight, flags, pitch);
		if (kcdebug_weaponstatdisplays)
		{
			if (misl1) Console.Printf("\c[yellow](A_FireProjectile)\c- misl1: %p [%s]", misl1, misl1.GetClassName());
			if (realmisl1) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl1: %p [%s]", realmisl1, realmisl1.GetClassName());
			if (misl2) Console.Printf("\c[yellow](A_FireProjectile)\c- misl2: %p [%s]", misl2, misl2.GetClassName());
			if (realmisl2) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl2: %p [%s]", realmisl2, realmisl2.GetClassName());
			if (misl3) Console.Printf("\c[yellow](A_FireProjectile)\c- misl3: %p [%s]", misl3, misl3.GetClassName());
			if (realmisl3) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl3: %p [%s]", realmisl3, realmisl3.GetClassName());
			if (misl4) Console.Printf("\c[yellow](A_FireProjectile)\c- misl4: %p [%s]", misl4, misl4.GetClassName());
			if (realmisl4) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl4: %p [%s]", realmisl4, realmisl4.GetClassName());
			if (misl5) Console.Printf("\c[yellow](A_FireProjectile)\c- misl5: %p [%s]", misl5, misl5.GetClassName());
			if (realmisl5) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl5: %p [%s]", realmisl5, realmisl5.GetClassName());
			if (misl6) Console.Printf("\c[yellow](A_FireProjectile)\c- misl6: %p [%s]", misl6, misl6.GetClassName());
			if (realmisl6) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl6: %p [%s]", realmisl6, realmisl6.GetClassName());
			if (misl7) Console.Printf("\c[yellow](A_FireProjectile)\c- misl7: %p [%s]", misl7, misl7.GetClassName());
			if (realmisl7) Console.Printf("\c[yellow](A_FireProjectile)\c- realmisl7: %p [%s]", realmisl7, realmisl7.GetClassName());
		}
		return misl1, realmisl1, misl2, realmisl2, misl3, realmisl3, misl4, realmisl4, misl5, realmisl5, misl6, realmisl6, misl7, realmisl7;
	}
	
	action bool A_CheckBerserk()
	{
		actor player = players[0].mo;
		bool check = false;
		if (player.CountInv("PowerStrength") || player.CountInv("KCPowerStrength")) check = true;
		return check;
	}

	action bool A_CheckInfiniteAmmo()
	{
		actor player = players[0].mo;
		bool check = false;
		if (player.CountInv("PowerInfiniteAmmo")) check = true;
		return check;
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action double A_LowerRaiseCheck(double movespeed)
	{
		string nm, nn, no, np, nq, nr;
		double bufffactor = 1.0;
		double weaponfactor = 1.0;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = invoker.ActualLevel;
			
			if (MiscItem) 
			{
				movespeed *= (1.0 + (TruePlayerLevel * 0.02));
				
				movespeed *= bufffactor;
				
				if (player.ReadyWeapon is "TommyGun") weaponfactor -= 0.10;
				nm = "ImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.25 + (TruePlayerLevel * 0.025));
					if (temp < -0.25) temp = -0.25;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "DualImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.375 + (TruePlayerLevel * 0.025));
					if (temp < -0.375) temp = -0.375;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "ScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.1667;
				nm = "DualScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.125;
				movespeed *= weaponfactor;
				
				if (player.mo.CountInv("PowerStrength") || player.mo.CountInv("KCPowerStrength")) movespeed *= 1.5;
			}
			if (movespeed > 80) movespeed = 80;
			
			if (kcdebug_weaponstatdisplays) Console.Printf("movespeed: %d, bufffactor: %.4f, weaponfactor: %.4f", movespeed, bufffactor, weaponfactor);
		}
		return movespeed;
	}
	
	action void A_Lower(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Lower: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (null == player.ReadyWeapon)
		{
			player.mo.BringUpWeapon();
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;
		if (player.morphTics || player.cheats & CF_INSTANTWEAPSWITCH)
		{
			psp.y = WEAPONBOTTOM;
		}
		else
		{
			psp.y += movespeed;
		}
		if (psp.y < WEAPONBOTTOM)
		{ // Not lowered all the way yet
			return;
		}
		ResetPSprite(psp);
		
		if (player.playerstate == PST_DEAD)
		{ // Player is dead, so don't bring up a pending weapon
			// Player is dead, so keep the weapon off screen
			player.SetPsprite(PSP_FLASH, null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		// [RH] Clear the flash state. Only needed for Strife.
		player.SetPsprite(PSP_FLASH, null);
		player.mo.BringUpWeapon ();
		return;
	}
	
	action void A_Raise(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Raise: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			player.mo.DropWeapon();
			return;
		}
		if (player.ReadyWeapon == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;

		if (psp.y <= WEAPONBOTTOM)
		{
			ResetPSprite(psp);
		}
		psp.y -= movespeed;
		if (psp.y > WEAPONTOP)
		{ // Not raised all the way yet
			return;
		}
		psp.y = WEAPONTOP;
		
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
	}
	
	action int A_WeaponCheckDoubleFireRate()
	{
		int result = 0;
		if (CountInv("PowerDoubleFiringSpeed")) result = 1;
		return result;
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	action int A_HoldInWeapon(int type = 0)
	{
		int buttons;

		int result = 0;
		if (CountInv("IsUnconscious")) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS);
			if (buttons & BT_ALTATTACK) result = 1;
			else if (buttons & BT_ATTACK) result = 2;
		}
		return result;
	}
	
	action void A_QMWKickInit()
	{
		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
		}
	}
	
	override void Tick()
	{
		super.Tick();
		Double Dbl;
		Sector Sec;
		[Dbl,Sec] = CurSector.LowestFloorAt(Pos.XY);
		if (pos.z <= Dbl && !owner)
		{
			if (cursector.damagetype == 'InstantDeath' ||
					cursector.damagetype == 'Massacre')
			{
				if (bCOUNTITEM) level.total_items--;
				Spawn("ItemFallSpot", (pos.x, pos.y, pos.z), NO_REPLACE);
				if (kcdebug_itempitfalls) Console.Printf("%s [%p] \c[green](EEWeapon)\c- fell into a bottomless pit! [tic: %d]", GetClassName(), self, gametic);
				Destroy();
			}
		}
	}
	
	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
			}
			loop;
	}
}

// ??????? ????? Weapon Base Class
class HeiwaWeapon : KCWeaponBase
{
	default
	{
		KCWeaponBase.PickUpVoice true;
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
}

// ***************
// ** TOMMY GUN **
// ***************
class DualTommyGunPickup : CustomInventoryExt
{
	default
	{
		Inventory.PickupMessage "You picked up an Extra Thompson Machine Gun! \c[gold]Can Now Dual Wield!\c-";
		Inventory.PickupSound "TOMPKP";
		+DONTGIB
		-COUNTITEM;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Scale 0.6;
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (player.CountInv("DualTommyGuns"))
				{
					A_SpawnItemEx("TommyGun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Destroy();
				}
			}
			Loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (player) 
				{
					player.A_GiveInventory("DualTommyGuns",1);
					player.A_GiveInventory("TommAmmo",50);
				}
			}
			stop;
	}
}

// Tommy Gun
class TommyGun : KCWeaponBase
{
	default
	{
		Inventory.PickupMessage "You picked up a Thompson Machine Gun!";
		Weapon.AmmoType1 "TommAmmo";
		Weapon.AmmoType2 "TommAmmo";
		Weapon.AmmoGive 50;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.BobSpeed 0.334;
		Weapon.BobStyle "Smooth";
		Inventory.PickupSound "TOMPKP";
		Decal "Bulletchip";
		Attacksound "DSTOMFR";
		Scale 0.6;
		Weapon.Kickback 150;
	}
	
	action bool A_DualTMGCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		if (CountInv("DualTommyGuns") && !CountInv("DualTommyGunsDisabled")) check = true;
		return check;
	}
	
	action void A_TommyShot(int type, int handedness)
	{
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		
		int temp1 = randompick(3,3,3,3,3,3,4,4,4,4,5,5) * random(randompick(1,1,1,2,2,3),randompick(3,3,3,4,4,5));
		double barrageangoffset = 0.0;
		double offsetmulti = 1.0;
		double accuracyx = 1.0;
		double accuracyy = 1.0;
		barrageangoffset = 0.0;
		if (type == 0)
		{
			accuracyx = frandom(0.5,1.0);
			accuracyy = frandom(0.5,1.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = -0.5;
			if (invoker.tommybarrageno == 2) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 0.0;
			if (invoker.tommybarrageno >= 4) barrageangoffset = 0.5;
		}
		else
		{
			accuracyx = frandom(3.0,6.0);
			accuracyy = frandom(3.0,6.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 2) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 4) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 5) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 6) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 7) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 8) barrageangoffset = 16.0;
			if (invoker.tommybarrageno == 9) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 10) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 11) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 12) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 13) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 14) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 15) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 16) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 17) barrageangoffset = -2.0;
			if (invoker.tommybarrageno == 18) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 19) barrageangoffset = -6.0;
			if (invoker.tommybarrageno == 20) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 21) barrageangoffset = -2.0;
			if (invoker.tommybarrageno >= 22) barrageangoffset = 0.0;
			if (handedness == 1) barrageangoffset *= -1;
			barrageangoffset *= offsetmulti;
			if (kcdebug_weaponstatdisplays) Console.Printf("invoker.tommybarrageno: %d, barrageangoffset: %.4f [tic: %d]", invoker.tommybarrageno, barrageangoffset, gametic);
		}
		if (A_DualTMGCheck())
		{
			double genaccu = frandompick(1.75,1.875,2.0,2.125,2.25,2.375,2.5);
			accuracyx *= genaccu;
			accuracyy *= genaccu;
		}
		if (kcdebug_weaponstatdisplays) Console.Printf("dmg: %d, accuracyx: %.4f, accuracyy: %.4f [tic: %d]", temp1, accuracyx, accuracyy, gametic);
		double currang = angle;
		A_SetAngle(angle+barrageangoffset);
		A_FireBullets(accuracyx,accuracyy,-1,(temp1),"BulletPuff",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
		A_SetAngle(currang);
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (player.CountInv("TommyGun")) 
				{
					if (!player.CountInv("DualTommyGuns"))
					{
						A_SpawnItemEx("DualTommyGunPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}
				}
			}
			Loop;
		
		Select:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Raise(12);
			Loop;
		Deselect:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Lower(12);
			Loop;
		Ready:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
			
		LeftReady:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 1
			{
			}
			Stop;
			
		LeftPrep:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 12
			{
			}
			Stop;
		
		Fire:
			TOMF A 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftFire",false);
			}
			TOMF ABCD 2 bright 
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_TommyShot(0,0);
					A_TommyShot(0,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_TommyShot(0,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;
		
		LeftFire:
			TOF3 A 0 bright 
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF3 ABCD 2 bright 
			{
				if (CountInv("TommAmmo") <= 1) return resolvestate("LeftFireEnd");
				return resolvestate(null);
			}
		LeftFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;

		AltFire:
			TOF2 E 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftAltFire",false);
			}
			TOF2 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_TommyShot(1,0);
					A_TommyShot(1,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_TommyShot(1,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;

		LeftAltFire:
			TOF4 E 0 Bright
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF4 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					return resolvestate(null);
				}
			}
		LeftAltFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;
			
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (player.CountInv("DualTommyGuns"))
				{
					A_StopSound(10);
					A_StartSound("TOMPKP",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (player.CountInv("DualTommyGunsDisabled"))
					{
						player.A_SetInventory("DualTommyGunsDisabled",0);
						A_Overlay(3,"LeftPrep",false);
					}
					else 
					{
						player.A_SetInventory("DualTommyGunsDisabled",1);
						A_Overlay(3,null,false);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class TommAmmo : Ammo
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 50;
		Inventory.MaxAmount 500;
		Ammo.BackpackAmount 50;
		Ammo.BackpackMaxAmount 1000;
		Inventory.PickupMessage "Picked up some ammo for the tommygun.";
		Inventory.Icon "TOMAA0";
	}
	
	States
	{
		Spawn:
			TOMA A 1 Bright;
			Loop;
	}
}

class TommAmmoBig : TommAmmo
{
	default
	{
		Inventory.Amount 250;
		Inventory.PickupMessage "Picked up a ton of ammo for the tommygun.";
	}
	
	States
	{
		Spawn:
			TOMA B 1 Bright;
			Loop;
	}
}

// *******************
// ** DEVASTATOR[S] **
// *******************
class Devastator : KCWeaponBase
{
	int speedtype, speedtype2;
	int shotsfired, shotsfiredthreshold;
	int readytimer;
	int altammocost;
	default
	{
		Scale 0.75;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got the Devastator Weapon!";
		Weapon.AmmoType1 "MiniRockets";
		Weapon.AmmoType2 "MiniRockets";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
	}
	
	action bool A_DualDevCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		if (CountInv("DualDevastators") && !CountInv("DualDevastatorsDisabled")) check = true;
		return check;
	}
	
	action void A_FireDevastator(int type)
	{
		double mult = 1.0;
		if (type == 1 || type == 3) mult = -1.0;
		double pangle = 2.0;
		double pangle2 = -2.0;
		double ppitch = 2.0;
		double ppitch2 = -2.0;
		double pspwnoff = (2.0*mult);
		double pspwnhgt = 4.0;
		double pspwnhgt2 = 6.0;
		int shotsfired;
		string firetype;

		A_StartSound("weapons/devshot",101,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		A_StartSound("weapons/devburt",102,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		if (type == -2)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 1.1875;
			pangle2 = -1.1875;
			ppitch = -1.1875;
			ppitch2 = 1.1875;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.75;
			pspwnhgt2 = 3.25;
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		if (type == -1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 0.625;
			pangle2 = -0.625;
			ppitch = -0.625;
			ppitch2 = 0.625;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.25;
			pspwnhgt2 = 2.75;
		}
		if (type >= 0 && type <= 1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 1.5;
			pangle2 = -1.5;
			ppitch = -1.5;
			ppitch2 = 1.5;
			pspwnoff = (2.0*mult);
			pspwnhgt = 4.5;
			pspwnhgt2 = 5.5;
		}
		if (type >= 2 && type <= 3)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 3.125;
			pangle2 = -3.125;
			ppitch = -3.125;
			ppitch2 = 3.125;
			pspwnoff = (2.0*mult);
			pspwnhgt = 3.0;
			pspwnhgt2 = 7.0;
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		for (int i = 0; i < shotsfired; i++)
		{
			A_FireProjectile(firetype,frandom(pangle,pangle2),false,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
			A_FireProjectile(firetype,frandom(pangle,pangle2),true,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
		}
		invoker.shotsfired++;
		invoker.readytimer = 0;
		if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfired: %d / %d, invoker.readytimer: %d", invoker.shotsfired, invoker.shotsfiredthreshold, invoker.readytimer);
	}
	
	action void A_DevPreReady()
	{
		invoker.altammocost = 5; // Set to affect the alt-fire cost and number of total shots [x2 the value of missiles] V:
		invoker.readytimer++;
		if (invoker.readytimer >= random(3,4))
		{
			invoker.shotsfired = 0;
			invoker.shotsfiredthreshold = randompick(10,random(12,13),random(12,13),15,15,15,15,15,15,15,random(17,18),random(17,18),20);
			if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfiredthreshold [set]: %d", invoker.shotsfiredthreshold);
		}
		let globalvars = KCGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
	}
	
	States
	{
		Spawn:
			DVST A -1;
			Loop;
		Ready:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;

		ReadyDual:
			DEVG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			goto Ready;

		Deselect:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("DeselectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Lower(12);
			Loop;
		DeselectDual:
			DEVG A 1 A_Lower(12);
			goto Deselect;
		Select:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("SelectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Raise(12);
			Loop;
		SelectDual:
			DEVG A 1 A_Raise(12);
			goto Select;
		
		Fire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(0,0,1,1,1) + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype = randompick(0,0,0,0,1) + 1;
				invoker.speedtype2 = 1 + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype2 = randompick(0,0,1,1,1) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					return resolvestate("FireDual");
				}
				return resolvestate(null);
			}
			DEV1 B 1 
			{
				A_Light2();
				A_FireDevastator(-1);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;

		FireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "FireLeft");
		FireRight:
			DEVG B 1 
			{
				A_Light2();
				A_FireDevastator(0);
				A_SetTics(invoker.speedtype2);
			}
			DEVG C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		FireLeft:
			DEVG J 1 
			{
				A_Light2();
				A_FireDevastator(1);
				A_SetTics(invoker.speedtype2);
			}
			DEVG L 1 
			{
				A_Light0();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(1,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype = randompick(1,1,1,2) + 1;
				invoker.speedtype2 = randompick(1,2,2,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype2 = randompick(0,1,1,1,1,2) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					if (CountInv("MiniRockets") >= invoker.altammocost) return resolvestate("AltFireDual");
					return resolvestate("Ready");
				}
				else
				{
					if (CountInv("MiniRockets") < invoker.altammocost) return resolvestate("Ready");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DEV1 B 2 
			{
				A_Light2();
				A_FireDevastator(-2);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;
		
		AltFireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "AltFireLeft");
		AltFireRight:
			DEVG B 2 
			{
				A_Light2();
				A_FireDevastator(2);
			}
			DEVG C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		AltFireLeft:
			DEVG J 2 
			{
				A_Light2();
				A_FireDevastator(3);
			}
			DEVG L 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (player.CountInv("DualDevastators"))
				{
					A_StopSound(10);
					A_StartSound("weapons/devswap",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (player.CountInv("DualDevastatorsDisabled"))
					{
						player.A_SetInventory("DualDevastatorsDisabled",0);
					}
					else 
					{
						player.A_SetInventory("DualDevastatorsDisabled",1);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class Devcheck : Ammo
{
	default
	{
		Inventory.MaxAmount 1;
	}
}
class MiniRockets : Ammo
{
	default
	{
		Inventory.Amount 10;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 400;
		Inventory.PickupMessage "Picked up some mini rockets.";
		Inventory.Icon "MNRAA0";
	}
	
	States
	{
		Spawn:
			MNRA A -1;
			Loop;
	}
}

class DevastatorShot : KCProjectile
{
	int explrand;
	int expdmg, exprad, expfullrad;
	default
	{
		Radius 4;
		Height 4;
		Speed 24;
		Scale 0.125;
		DamageFunction (38);
		DamageType "Explosive";
		PROJECTILE;
		ExplosionDamage 10; // 20
		ExplosionRadius 48; // 48
		SeeSound "weapons/devlnch";
		DeathSound "weapons/devexpl";
	}
	
	States
	{
		Spawn:
			MNSS A 1 Bright;
			MNSS A 1 Bright A_SpawnItem("DevRockTrail");
			Loop;
		Death:
			GRNE A 0 
			{
				explrand = randompick(1,4);
				if (explrand <= 3)
				{
					expdmg = 10;
					exprad = 48;
					expfullrad = 24;
				}
				if (explrand >= 4)
				{
					expdmg = 20;
					exprad = 60;
					expfullrad = 30;
				}
				A_SetScale(0.20,0.20);
			}
			GRNE A 3 Bright 
			{
				A_Explode(expdmg,exprad,XF_HURTSOURCE,true,expfullrad,0,0,"","Explosive");
				if (random(1,64) <= 1) A_Explode(expdmg,exprad,XF_HURTSOURCE,true,expfullrad,0,0,"","Explosive");
			}
			GRNE BCDEFGHIJKLMN 3 Bright;
			Stop;
	}
}

class DevastatorShot2 : DevastatorShot
{
	default
	{
		Speed 42;
		Scale 0.1;
		DamageFunction (randompick(26,32,32,32,38,38,38,38,38,38,38,38,34,44,44,50));
	}
	
	States
	{
		Spawn:
			MNSS AA 1 Bright;
			MNSS A 1 Bright A_SpawnItem("DevRockTrail");
			Loop;
	}
}

class MiniRocketBox : MiniRockets
{
	default
	{
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 50;
		Inventory.PickupMessage "Picked up a box of mini rockets.";
	}
	
	States
	{
		Spawn:
			MNRB A -1;
			Loop;
	}
}

class DevastatorGenerator : CustomInventory
{
	default
	{
		+FLOORCLIP;
		+INVENTORY.AUTOACTIVATE;
		Scale 0.75;
		Inventory.MaxAmount 2;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got a Devastator!";
	}
	
	States
	{ 
		Spawn: 
			DVGG A -1;
			Loop;
		Pickup: 
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (!player.CountInv("Devastator")) 
				{
					player.A_GiveInventory("Devastator", 1);
				}
				else
				{
					if (!player.CountInv("DualDevastators")) player.A_GiveInventory("DualDevastators", 1);
					player.A_GiveInventory("MiniRockets", 20);
				}
				player.A_GiveInventory("MiniRockets", 20);
				player.A_TakeInventory("DevastatorGenerator", 1);
			}
			Stop;
	} 
}
class DevRockTrail : Actor
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		Scale 0.125;
		RenderStyle "Add";
		Alpha 0.5;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			PDBA VWXYZ 1 A_FadeOut(0.1);
			wait;
	}
}