class KCWeaponBase : Weapon
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	mixin DmgCalc;
	mixin InvWeaponShare;
	mixin ActorStateReplace;
	mixin HUDRecovery;

	int temp1;
	int tommybarrageno;
	int tauntyell;
	
	int ActualLevel;
	int kickspeed;
	int punchspeed;
	int uppercutspeed;
	int buttons;
	int PlayerLevel;

	// Misc
	bool PickupUseVoice;
	bool PickupUseVoice2;
	bool PickupUseVoiceHeiwa;
	bool PickupUseVoiceHeiwa2;
	string PickupSnd2;
	string PickupSndHeiwa;
	string PickupSndHeiwa2;
	double DmgIgnoreFctr1;
	double DmgIgnoreFctr2;
	double DmgIgnoreFctr3;
	double DmgIgnoreFctr4;
	double DmgIgnoreFctr5;
	property PickUpVoice: PickupUseVoice;
	property PickUpVoice2: PickupUseVoice2;
	property PickUpVoiceHeiwa: PickupUseVoiceHeiwa;
	property PickUpVoiceHeiwa2: PickupUseVoiceHeiwa2;
	property PickupSound2: PickupSnd2;
	property PickupSoundHeiwa: PickupSndHeiwa;
	property PickupSoundHeiwa2: PickupSndHeiwa2;
	property DamageIgnoreFactor1: DmgIgnoreFctr1;
	property DamageIgnoreFactor2: DmgIgnoreFctr2;
	property DamageIgnoreFactor3: DmgIgnoreFctr3;
	property DamageIgnoreFactor4: DmgIgnoreFctr4;
	property DamageIgnoreFactor5: DmgIgnoreFctr5;
	
	default
	{
		+WEAPON.NOAUTOAIM;
		+DONTGIB;
	}
	override void PlayPickupSound (Actor toucher)
	{
		double atten;
		int chan;
		int flags = 0;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));

		if (bNoAttenPickupSound)
		{
			atten = ATTN_NONE;
		}
		/*
		else if ((ItemFlags & IF_FANCYPICKUPSOUND) &&
			(toucher == NULL || toucher->CheckLocalView()))
		{
			atten = ATTN_NONE;
		}
		*/
		else
		{
			atten = ATTN_NORM;
		}

		if (PickupSound != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice) chan = CHAN_VOICE;
											 else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice) chan = CHAN_VOICE;
											 else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUV: %d]", chan, PickupUseVoice);
		}

		double maskpitch = 1.00;
		if (PickupUseVoice) 
		{
			if (MiscItem && MiscItem.CanTalkUnderwater)
			{
				if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			}
		}
		toucher.A_StopSound(chan);
		toucher.A_StartSound(PickupSound, chan, flags, 1.0, atten, maskpitch);
		
		if (PickupSnd2 != "")
		{
			if (toucher != NULL && toucher.CheckLocalView())
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
			}
			else
			{
				if (PickupUseVoice2) chan = CHAN_VOICE;
												else chan = CHAN_ITEM;
				flags = CHANF_MAYBE_LOCAL;
			}
			if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUV2: %d]", chan, PickupUseVoice2);
			
			double maskpitch = 1.00;
			if (PickupUseVoice2) 
			{
				if (MiscItem && MiscItem.CanTalkUnderwater)
				{
					if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				}
			}
			toucher.A_StopSound(chan);
			toucher.A_StartSound(PickupSnd2, chan, flags, 1.0, atten, maskpitch);
		}
		
		// Plays Heiwa-Unique Lines for weapon drops
		if (A_CheckForHeiwaSnds())
		{
			if (kcdebug_pickupsounds) Console.Printf("PickupSounds: A_CheckForHeiwaSnds() found");
			if (PickupSndHeiwa != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSndHeiwa: %s", PickupSndHeiwa);
				if (toucher != NULL && toucher.CheckLocalView())
				{
					if (PickupUseVoiceHeiwa) chan = CHAN_VOICE;
															else chan = CHAN_ITEM;
					flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
				}
				else
				{
					if (PickupUseVoiceHeiwa) chan = CHAN_VOICE;
															else chan = CHAN_ITEM;
					flags = CHANF_MAYBE_LOCAL;
				}
				if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUVH: %d]", chan, PickupUseVoiceHeiwa);
				
				double maskpitch = 1.00;
				if (PickupUseVoiceHeiwa) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
				}
				toucher.A_StopSound(chan);
				toucher.A_StartSound(PickupSndHeiwa, chan, flags, 1.0, atten, maskpitch);
			}
			
			if (PickupSndHeiwa2 != "")
			{
				if (kcdebug_pickupsounds) Console.Printf("PickupSndHeiwa2: %s", PickupSndHeiwa2);
				if (toucher != NULL && toucher.CheckLocalView())
				{
					if (PickupUseVoiceHeiwa2) chan = CHAN_VOICE;
															 else chan = CHAN_ITEM;
					flags = CHANF_NOPAUSE | CHANF_MAYBE_LOCAL;
				}
				else
				{
					if (PickupUseVoiceHeiwa2) chan = CHAN_VOICE;
															 else chan = CHAN_ITEM;
					flags = CHANF_MAYBE_LOCAL;
				}
				if (kcdebug_pickupsounds) Console.Printf("Channel: %d [PUVH2: %d]", chan, PickupUseVoiceHeiwa2);
				
				double maskpitch = 1.00;
				if (PickupUseVoiceHeiwa2) 
				{
					if (MiscItem && MiscItem.CanTalkUnderwater)
					{
						if (toucher.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					}
				}
				toucher.A_StopSound(chan);
				toucher.A_StartSound(PickupSndHeiwa2, chan, flags, 1.0, atten, maskpitch);
			}
		}
	}
	
	action bool A_CheckForHeiwaSnds()
	{
		actor playera = players[0].mo;
		bool result = false;
		if (playera)
		{
			if (playera.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(playera)) result = true;
		}
		return result;
	}
	
	action double A_GetHandToHandSpd(int type)
	{
		double output;
		if (type <= 0) output = kc_punchspdlvlint;
		if (type == 1) output = kc_upcutspdlvlint;
		if (type >= 2) output = kc_kickspdlvlint;
		double oldoutput = output;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			if (type >= 2) // If Kicking
			{
				if (player.ReadyWeapon is "FistHeiwa" ||
						player.ReadyWeapon is "KnifeHeiwa")
				{
					output *= (1.0 / frandompick(1.334,1.5,1.5,1.5,1.667));
				}
				if (player.ReadyWeapon is "EvilWarriorShield")
				{
					if (CountInv("EWShieldDefendMode")) output *= (1.0 / frandompick(0.50,0.65,0.65,0.65,0.80));
																				 else output *= (1.0 / frandompick(0.875,0.9,0.9,0.9,0.925));
					if (MiscItem.HellWarriorShieldLevel) output *= (1.0 / (1.0 - (MiscItem.HellWarriorShieldLevel * 0.05)));
				}
			}
		}
		if (CountInv("PowerHaste")) output *= (1.0 / 1.334);
		if (CountInv("PowerSlow")) output *= (1.0 / 0.75);
		if (output <= 0.05) output = 0.05;
		if (kcdebug_meleeinformation) Console.Printf("[type: %d] output: %.8f [%.8f]", type, output, oldoutput);
		return output;
	}

	action bool A_CheckBerserk()
	{
		bool check = false;
		if (CountInv("PowerStrength") || CountInv("KCPowerStrength")) check = true;
		return check;
	}
	
	action bool A_CheckInfiniteAmmo()
	{
		actor playera = players[0].mo;
		bool check = false;
		if (playera.CountInv("PowerInfiniteAmmo")) check = true;
		return check;
	}
	
	action int A_GetMeleeSPDLvl(int type = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetMeleeSPDLvl - DDWeapon)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	action void A_FireBulletsEx(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0, double defenseignorefactor = 0.00)
	{
		let player = player;
		if (!player) return;

		let pawn = PlayerPawn(self);
		let weapon = player.ReadyWeapon;

		int i;
		double bangle;
		double bslope = 0.;
		int laflags = (flags & FBF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;
		FTranslatedLineTarget t;

		if ((flags & FBF_USEAMMO) && weapon &&  stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}
		
		if (range == 0)	range = PLAYERMISSILERANGE;

		if (!(flags & FBF_NOFLASH)) pawn.PlayAttacking2 ();

		if (!(flags & FBF_NOPITCH)) bslope = BulletSlope();
		bangle = Angle;

		if (pufftype == NULL) pufftype = 'BulletPuff';

		if (weapon != NULL)
		{
			A_StartSound(weapon.AttackSound, CHAN_WEAPON);
		}

		if ((numbullets == 1 && !player.refire) || numbullets == 0)
		{
			int damage = damageperbullet;

			if (!(flags & FBF_NORANDOM))
				damage *= random[cabullet](1, 3);

			let puff = LineAttack(bangle, range, bslope, damage, 'Hitscan', pufftype, laflags, t);
			if (puff)
			{
				KCPuff newpuff;
				newpuff = KCPuff(puff);
				if (newpuff)
				{
					newpuff.defenseignorefactor = defenseignorefactor;
				}
			}

			if (missile != null)
			{
				bool temp = false;
				double ang = Angle - 90;
				Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
				Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
				if (proj)
				{
					if (!puff)
					{
						temp = true;
						puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
					}
					AimBulletMissile(proj, puff, flags, temp, false);
					if (t.unlinked)
					{
						// Arbitary portals will make angle and pitch calculations unreliable.
						// So use the angle and pitch we passed instead.
						proj.Angle = bangle;
						proj.Pitch = bslope;
						proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
					}
				}
			}
		}
		else 
		{
			if (numbullets < 0)
				numbullets = 1;
			for (i = 0; i < numbullets; i++)
			{
				double pangle = bangle;
				double slope = bslope;

				if (flags & FBF_EXPLICITANGLE)
				{
					pangle += spread_xy;
					slope += spread_z;
				}
				else
				{
					pangle += spread_xy * Random2[cabullet]() / 255.;
					slope += spread_z * Random2[cabullet]() / 255.;
				}

				int damage = damageperbullet;

				if (!(flags & FBF_NORANDOM))
					damage *= random[cabullet](1, 3);

				let puff = LineAttack(pangle, range, slope, damage, 'Hitscan', pufftype, laflags, t);
				if (puff)
				{
					KCPuff newpuff;
					newpuff = KCPuff(puff);
					if (newpuff)
					{
						newpuff.defenseignorefactor = defenseignorefactor;
					}
				}
				

				if (missile != null)
				{
					bool temp = false;
					double ang = Angle - 90;
					Vector2 ofs = AngleToVector(ang, Spawnofs_xy);
					Actor proj = SpawnPlayerMissile(missile, bangle, ofs.X, ofs.Y, Spawnheight);
					if (proj)
					{
						if (!puff)
						{
							temp = true;
							puff = LineAttack(bangle, range, bslope, 0, 'Hitscan', pufftype, laflags | LAF_NOINTERACT, t);
						}
						AimBulletMissile(proj, puff, flags, temp, false);
						if (t.unlinked)
						{
							// Arbitary portals will make angle and pitch calculations unreliable.
							// So use the angle and pitch we passed instead.
							proj.Angle = bangle;
							proj.Pitch = bslope;
							proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
						}
					}
				}
			}
		}
	}
	
	action void A_FireBullets(double spread_xy, double spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", int flags = 1, double range = 0, class<Actor> missile = null, double Spawnheight = 32, double Spawnofs_xy = 0, double defenseignorefactor = 0.00)
	{
		int sflags = flags;
		if (sflags & FBF_USEAMMO) sflags -= FBF_USEAMMO;
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
		A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, flags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
		/*
		if (playera.CountInv("KCPowerSpread2"))
		{
			playera.angle -= spread2angle;
			playera.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle -= spread2angle;
			playera.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch -= spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
			playera.pitch = pptc;

			playera.angle += spread2angle;
			playera.pitch += spread2pitch;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
			playera.pitch = pptc;
		}
		if (playera.CountInv("KCPowerSpread2") || playera.CountInv("KCPowerSpread1"))
		{
			playera.angle -= spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
			
			playera.angle += spread1angle;
			A_FireBulletsEx(spread_xy, spread_z, numbullets, damageperbullet, pufftype, sflags, range, missile, Spawnheight, Spawnofs_xy, defenseignorefactor);
			playera.angle = pang;
		}
		*/
	}

	action Actor, Actor A_FireProjectile(class<Actor> missiletype, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)	
	{
		let player = self.player;
		if (!player) return null, null;

		let weapon = player.ReadyWeapon;

		FTranslatedLineTarget t;

			// Only use ammo if called from a weapon
		if (useammo && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return null, null;	// out of ammo
		}

		if (missiletype) 
		{
			double ang = self.Angle - 90;
			Vector2 ofs = AngleToVector(ang, spawnofs_xy);
			double shootangle = self.Angle;

			if (flags & FPF_AIMATANGLE) shootangle += angle;

			// Temporarily adjusts the pitch
			double saved_player_pitch = self.Pitch;
			self.Pitch += pitch;

			Actor misl, realmisl;
			[misl, realmisl] = SpawnPlayerMissile (missiletype, shootangle, ofs.X, ofs.Y, spawnheight, t, false, (flags & FPF_NOAUTOAIM) != 0);
			self.Pitch = saved_player_pitch;

			if (realmisl && flags & FPF_TRANSFERTRANSLATION)
				realmisl.Translation = Translation;

			// automatic handling of seeker missiles
			if (misl)
			{
				if (t.linetarget && !t.unlinked && misl.bSeekerMissile)
					misl.tracer = t.linetarget;
				if (!(flags & FPF_AIMATANGLE))
				{
					// This original implementation is to aim straight ahead and then offset
					// the angle from the resulting direction. 
					misl.Angle += angle;
					misl.VelFromAngle(misl.Vel.XY.Length());
				}
			}
			if (kcdebug_weaponstatdisplays)
			{
				if (misl) Console.Printf("\c[green](A_FireProjectile)\c- misl: %p [%s]", misl, misl.GetClassName());
				if (realmisl) Console.Printf("\c[green](A_FireProjectile)\c- realmisl: %p [%s]", realmisl, realmisl.GetClassName());
			}
			return misl, realmisl;
		}
		return null, null;
	}
	
	action void A_CustomPunch(int damage, bool norandom = false, int flags = CPF_USEAMMO, class<Actor> pufftype = "BulletPuff", double range = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus", sound MeleeSound = 0, sound MissSound = "")
	{
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;

		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;

		let globalvars = KCGlobalVariables.Get();
		if (!player) return;

		let weapon = player.ReadyWeapon;

		double angle;
		double pitch;
		FTranslatedLineTarget t;
		int	actualdamage;
		//Name modtype = 'Melee';

		if (!norandom)
			damage *= random[cwpunch](1, 8);

		angle = self.Angle + random2[cwpunch]() * (5.625 / 256);
		if (range == 0) range = DEFMELEERANGE;
		pitch = AimLineAttack (angle, range, t, 0., ALF_CHECK3D);

		// only use ammo when actually hitting something!
		if ((flags & CPF_USEAMMO) && t.linetarget && weapon && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire, true))
				return;	// out of ammo
		}

		// >:) [for later special checks]
		if (t.linetarget && !t.linetarget.bDORMANT)
		{
			nm = "CCards_Actor_Ghost";
			if (t.linetarget.CountInv(nm))
			{
				//
				//
			}
		}
		
		if (pufftype == NULL)
			pufftype = 'BulletPuff';
		int puffFlags = LAF_ISMELEEATTACK | ((flags & CPF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0);

		Actor puff;
		[puff, actualdamage] = LineAttack (angle, range, pitch, damage, 'Melee', pufftype, puffFlags, t);
		if (puff)
		{
			let KickingPuff = KickPuff(puff);
			if (KickingPuff && pufftype == 'KickPuff')
			{
				if (MiscItem)
				{
					KickingPuff.ProjectileKickBack = (375 * (1.0 + (TruePlayerLevel * 0.0334)));
					if (player.mo.CountInv("PowerStrength") || player.mo.CountInv("KCPowerStrength"))
					{
						KickingPuff.ProjectileKickBack *= 2.5;
					}
					//Console.Printf("ProjectileKickBack (KickingPuff): %d", KickingPuff.ProjectileKickBack);
				}
			}
		}

		if (!t.linetarget)
		{
			if (MissSound) A_StartSound(MissSound, CHAN_WEAPON);
		}
		else // The attack hits and deals feasible damage
		{
			bool isCCardsIllusion = false;
			if (t.linetarget.bNOBLOOD == true && 
					t.linetarget.bNOPAIN == true &&
					t.linetarget.bNOTARGETSWITCH == true &&
					t.linetarget.bNOINFIGHTING == true &&
					t.linetarget.bFULLVOLACTIVE == false && 
					t.linetarget.bFULLVOLDEATH == false &&
					t.linetarget.bBOSS == false) isCCardsIllusion = true;

			if (lifesteal > 0 && 
					!(t.linetarget.bDontDrain) && 
					!isCCardsIllusion && 
					!t.linetarget.bDORMANT)
			{
				if (flags & CPF_STEALARMOR)
				{
					if (armorbonustype == NULL)
					{
						armorbonustype = 'KCArmorBonus';
					}
					if (armorbonustype != NULL)
					{
						let armorbonus = KCArmorBonus(Spawn(armorbonustype));
						if (armorbonus)
						{
							armorbonus.SaveAmount *= int(actualdamage * lifesteal);
							if (lifestealmax > 0) armorbonus.MaxSaveAmount = lifestealmax;
							
							armorbonus.bDropped = true;
							armorbonus.ClearCounters();

							if (!armorbonus.CallTryPickup(self))
							{
								armorbonus.Destroy();
							}
						}
					}
				}
				else // Other Steal HP :V
				{
					bool canstealHP = true;
					
					if (canstealHP)
					{
						int prevhealth = player.mo.health;
						int stealamt = (actualdamage * lifesteal);
						if (stealamt > lifestealmax) stealamt = lifestealmax;
						GiveBody(stealamt);
						//GiveBody (int(actualdamage * lifesteal), lifestealmax);
						int draindiff = player.mo.health - prevhealth;
						if (draindiff) 
						{
							player.mo.A_SetBlend("ff ee ee",0.1875,random(21,31));
							player.mo.A_StopSound(17);
							player.mo.A_StopSound(18);
							player.mo.A_StartSound("player/hpdrain",17,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(1.35,1.65));
							player.mo.A_StartSound("player/hpdrain",18,CHANF_DEFAULT,frandom(0.75,1.00),ATTN_NORM,frandom(1.8,2.2));
							//invoker.A_RecoverHUD(draindiff, 0, true);
							
							if (kc_combatlog)
							{
								string comblog = "";
								comblog.AppendFormat("\c[red]*\c- ");
								comblog.AppendFormat("\c[brick]%d\c- HP \c[green]drained\c-", draindiff);
								if (t.linetarget) comblog.AppendFormat(" from \c[red]%s\c-", t.linetarget.GetTag());
								comblog.AppendFormat("!");
								if (kcdebug_showgametic) comblog.AppendFormat(" [%d]", gametic);
								
								Console.Printf(comblog);
							}
						}
					}
				}
			}
			
			if (actualdamage > 0 && (t.linetarget && t.linetarget.health > 0))
			{
				if (!KCCreature(t.linetarget) && 
						t.linetarget.bISMONSTER && 
						!t.linetarget.bNOPAIN &&
						!t.linetarget.bDORMANT)
				{
					bool doeet = false;
					if (t.linetarget.bBOSS)
					{
						if (random(1,4) <= randompick(1,1,1,1,1,1,2)) doeet = true;
					}
					else doeet = true;
					if (doeet)
					{
						if (pufftype == 'FistPuff') t.linetarget.A_SetInventory("JustPunched",1);
						if (pufftype == 'UppercutPuff') t.linetarget.A_SetInventory("JustUppercutted",1);
						if (pufftype == "KickPuff" || pufftype == "KickPuffNoThrust") t.linetarget.A_SetInventory("JustKicked",1);
						if (pufftype == "KnifePuff" || pufftype == "KnifePuffNoSound") t.linetarget.A_SetInventory("JustKnifed",1);
					}
				}
			}
			
			if (weapon != NULL)
			{
				if (MeleeSound) A_StartSound(MeleeSound, CHAN_WEAPON);
				else A_StartSound(weapon.AttackSound, CHAN_WEAPON);
			}

			if (!(flags & CPF_NOTURN))
			{
				// turn to face target
				if (!t.linetarget.bFRIENDLY) self.Angle = t.angleFromSource;
			}

			if (flags & CPF_PULLIN) self.bJustAttacked = true;
			if (flags & CPF_DAGGER) 
			{
				actor playera = players[0].mo;
				if (!(playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3")))
				{
					t.linetarget.DaggerAlert(self);
				}
			}
		}
	}
	
	action int A_CheckMeleeDestroyProj(int type = 0)
	{
		int TrueGameSkill = skill;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;

		int debugmelee = kcdebug_meleeinformation;
		int MeleeDestroyProjectiles = 0;
		double MaxCheck = 16;
		double checkvalfactor = frandom(0.075,0.125);
		if (type == 0) // Punch
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= 0.5;
		}
		if (type == 1) // Uppercut
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= 0.875;
		}
		if (type == 2) // Kick
		{
			if (skill <= 0) checkvalfactor = frandom(0.09,0.15);
			if (skill == 1) checkvalfactor = frandom(0.0825,0.1375);
			if (skill == 2) checkvalfactor = frandom(0.075,0.125);
			if (skill == 3) checkvalfactor = frandom(0.0675,0.1125);
			if (skill >= 4) checkvalfactor = frandom(0.06,0.10);
			checkvalfactor *= frandompick(0.875,1,1.125);
		}
		checkvalfactor *= 1.5;
		if (A_CheckBerserk()) checkvalfactor *= frandompick(3,3.5,3.5,4.0,4.0,4.0,4.375,4.375,4.375,4.375,4.375,4.75,4.75,4.75,5.125,5.125,5.5);
		if (MiscItem) 
		{
			if (A_CheckBerserk()) MaxCheck = (2.6667 - (((TruePlayerLevel+1) * checkvalfactor) * 6));
											 else MaxCheck = (16 - ((TruePlayerLevel+1) * checkvalfactor));
		}

		if (MaxCheck <= 0.01) MaxCheck = 0.01;
		double randomroll = frandom(0.01,MaxCheck);
		if (randomroll <= 1.0) MeleeDestroyProjectiles = 1;
		if (debugmelee) Console.Printf("\cxMeleeDestroyProjectiles [weapon]:\c- type: %d, RandomRoll / MaxCheck: %.4f / %.4f, MeleeDestroyProjectiles: %d, checkvalfactor: %.4f (\c[gold]%.4f\c-)", type, randomroll, MaxCheck, MeleeDestroyProjectiles, checkvalfactor, (checkvalfactor * (TruePlayerLevel+1)));

		return MeleeDestroyProjectiles;
	}
	
	action void A_MeleeSetUpAttach(actor mo, double xpos = 0.0, double ypos = 0.0, double zpos = 0.0, double ang = 0.0, double ptc = 0.0)
	{
		if (mo)
		{
			if (kcdebug_showvisibleshieldparts == 1 ||
					kcdebug_showvisibleshieldparts >= 3) Console.Printf("[\cxA_MeleeSetUpAttach [weapons.zc]\c- - mo]: %s", mo.GetClassName());
			ShieldPartBase SHmo;
			SHmo = ShieldPartBase(mo);
			if (SHmo)
			{
				actor playera = players[0].mo;
				if (kcdebug_showvisibleshieldparts == 1 ||
						kcdebug_showvisibleshieldparts >= 3) Console.Printf("[\cxA_MeleeSetUpAttach [weapons.zc]\c- - SHmo]: %s", SHmo.GetClassName());
				SHmo.attachx = xpos;
				SHmo.attachy = ypos;
				SHmo.attachz = zpos;
				SHmo.attachang = ang;
				SHmo.attachptc = ptc;
				SHmo.shieldee = playera;
				SHmo.target = playera;
				if (kcdebug_showvisibleshieldparts == 1 ||
						kcdebug_showvisibleshieldparts >= 3) Console.Printf("\cxA_MeleeSetUpAttach [weapons.zc]\c- - attachx: %.2f, attachy: %.2f, attachz: %.2f, shieldee: %s", SHmo.attachx, SHmo.attachy, SHmo.attachz, SHmo.shieldee.GetClassName());
			}
		}
	}
	
	// Used to Create Multiple "Shields" for Punches/Melee
	action void A_MeleeShieldPiece(string attackname = "", int spawnheight = 32, int spawndistance = 0, double angoffset = 0.0, double ptcoffset = 0.0)
	{
		bool spawned;
		actor mo;
		[spawned, mo] = A_SpawnItemEx(attackname, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
		if (mo) A_MeleeSetUpAttach(mo, cos(-pitch) * spawndistance, 0, spawnheight + (sin(-pitch) * spawndistance), angoffset, ptcoffset);
		
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		double pang = playera.angle;
		double pptc = playera.pitch;
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action double A_LowerRaiseCheck(double movespeed)
	{
		string nm, nn, no, np, nq, nr;
		double bufffactor = 1.0;
		double weaponfactor = 1.0;
		if (player.mo)
		{
			let MiscItem = PlayerStatItem(Player.mo.FindInventory("PlayerStatItem"));
			int TruePlayerLevel = invoker.ActualLevel;
			int PlayerSPD;
			
			if (MiscItem) 
			{
				PlayerSPD = MiscItem.TruePlayerSPD;
				movespeed *= (1.0 + ((TruePlayerLevel + PlayerSPD) * 0.02));
				
				movespeed *= bufffactor;
				
				if (player.ReadyWeapon is "FistHeiwa") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 1.00;
				}
				if (player.ReadyWeapon is "KnifeHeiwa") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 0.50;
				}
				if (player.ReadyWeapon is "Glock21") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 0.25;
														else weaponfactor += 0.75;
				}
				if (player.ReadyWeapon is "BlasterPistol") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 0.25;
														else weaponfactor += 0.125;
				}
				if (player.ReadyWeapon is "BlasterPistols") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 0.1875;
														else weaponfactor += 0.09375;
				}
				if (player.ReadyWeapon is "TommyGun") 
				{
					if (A_CheckForHeiwa()) weaponfactor += 0.15;
														else weaponfactor -= 0.10;
				}
				if (player.ReadyWeapon is "BlasterRifle") 
				{
					if (A_CheckForHeiwa()) weaponfactor -= 0.1875;
														else weaponfactor -= 0.09375;
				}
				if (player.ReadyWeapon is "RiotGun") 
				{
					if (A_CheckForHeiwa()) weaponfactor -= 0.1875;
														else weaponfactor -= 0.093875;
				}
				if (player.ReadyWeapon is "BHGen") 
				{
					if (A_CheckForHeiwa()) weaponfactor -= 0.5;
														else weaponfactor -= 0.25;
				}
				if (player.ReadyWeapon is "Devastator") 
				{
					bool dualdevs = false;
					if (player.mo.CountInv("DualDevastators") && !player.mo.CountInv("DualDevastatorsDisabled")) dualdevs = true;
					if (dualdevs)
					{
						if (A_CheckForHeiwa()) weaponfactor -= 0.375;
															else weaponfactor -= 0.1875;
					}
					else
					{
						if (A_CheckForHeiwa()) weaponfactor -= 0.1875;
															else weaponfactor -= 0.093875;
					}
				}
				if (player.ReadyWeapon is "Deviation") 
				{
					if (A_CheckForHeiwa()) weaponfactor -= 0.25;
														else weaponfactor -= 0.125;
				}
				if (player.ReadyWeapon is "Sawthrower") 
				{
					if (A_CheckForHeiwa()) weaponfactor -= 0.0625;
														else weaponfactor -= 0.1875;
				}
				nm = "ImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.25 + (TruePlayerLevel * 0.025));
					if (temp < -0.25) temp = -0.25;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "DualImpalerXBow";
				if (player.ReadyWeapon is nm)  
				{
					double temp = (-0.375 + (TruePlayerLevel * 0.025));
					if (temp < -0.375) temp = -0.375;
					if (temp > 0.25) temp = 0.25;
					weaponfactor += temp;
				}
				nm = "ScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.1667;
				nm = "DualScepterOfSouls";
				if (player.ReadyWeapon is nm) weaponfactor += 0.125;
				
				if (player.ReadyWeapon is "FistMarine") weaponfactor += 1.00;
				if (player.ReadyWeapon is "ChainsawMarine") weaponfactor += 0.25;
				if (player.ReadyWeapon is "PistolMarine") weaponfactor += 0.25;
				if (player.ReadyWeapon is "BFG9000Marine") weaponfactor -= 0.25;
				movespeed *= weaponfactor;
				

				if (A_CheckBerserk()) movespeed *= 1.5;
			}
			if (movespeed > 80) movespeed = 80;
			
			if (kcdebug_weaponstatdisplays) Console.Printf("movespeed: %d, bufffactor: %.4f, weaponfactor: %.4f", movespeed, bufffactor, weaponfactor);
		}
		return movespeed;
	}
	
	action int A_LowerEmu(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		return movespeed;
	}
	
	action void A_Lower(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Lower: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (null == player.ReadyWeapon)
		{
			player.mo.BringUpWeapon();
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;
		if (player.morphTics || player.cheats & CF_INSTANTWEAPSWITCH)
		{
			psp.y = WEAPONBOTTOM;
		}
		else
		{
			psp.y += movespeed;
		}
		if (psp.y < WEAPONBOTTOM)
		{ // Not lowered all the way yet
			return;
		}
		ResetPSprite(psp);
		
		if (player.playerstate == PST_DEAD)
		{ // Player is dead, so don't bring up a pending weapon
			// Player is dead, so keep the weapon off screen
			player.SetPsprite(PSP_FLASH, null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		// [RH] Clear the flash state. Only needed for Strife.
		player.SetPsprite(PSP_FLASH, null);
		player.mo.BringUpWeapon ();
		return;
	}
	
	action int A_RaiseEmu(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		return movespeed;
	}
	
	action void A_Raise(int movespeed = 6)
	{
		movespeed = A_LowerRaiseCheck(movespeed);
		if (kcdebug_weaponstatdisplays) Console.Printf("A_Raise: (%d)", movespeed);
		let player = player;

		if (null == player)
		{
			return;
		}
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			player.mo.DropWeapon();
			return;
		}
		if (player.ReadyWeapon == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;

		if (psp.y <= WEAPONBOTTOM)
		{
			ResetPSprite(psp);
		}
		psp.y -= movespeed;
		if (psp.y > WEAPONTOP)
		{ // Not raised all the way yet
			return;
		}
		psp.y = WEAPONTOP;
		
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
	}
	
	action int A_WeaponCheckDoubleFireRate()
	{
		int result = 0;
		if (CountInv("PowerDoubleFiringSpeed")) result = 1;
		return result;
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [Base]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	action int A_HoldInWeapon(int type = 0)
	{
		int buttons;

		int result = 0;
		if (CountInv("IsUnconscious")) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS);
			if (buttons & BT_ALTATTACK) result = 1;
			else if (buttons & BT_ATTACK) result = 2;
		}
		return result;
	}
	
	action void A_QMWKickInit()
	{
		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!(playera.CountInv("KCTimeFreezer1") ||
							playera.CountInv("KCTimeFreezer2") ||
							playera.CountInv("KCTimeFreezer3")))
				{
					invoker.A_KCAlertMonsters(1024); 
				} // Sometimes a swing will be enough to wake up all monsters in the area.
			}
		}
	}
	
	override void Tick()
	{
		super.Tick();
		Double Dbl;
		Sector Sec;
		[Dbl,Sec] = CurSector.LowestFloorAt(Pos.XY);
		if (pos.z <= Dbl && !owner)
		{
			if (cursector.damagetype == 'InstantDeath' ||
					cursector.damagetype == 'Massacre')
			{
				if (bCOUNTITEM) level.total_items--;
				Spawn("ItemFallSpot", (pos.x, pos.y, pos.z), NO_REPLACE);
				if (kcdebug_itempitfalls) Console.Printf("%s [%p] \c[green](EEWeapon)\c- fell into a bottomless pit! [tic: %d]", GetClassName(), self, gametic);
				Destroy();
			}
		}
	}
	

	// Fist Block Function
	action void A_PFistBlockOn()
	{
		let player = self.player;
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;
		
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		if (MiscItem)
		{
			if (TruePlayerLevel >= 0 && TruePlayerLevel <= 19)
			{
				A_SetInventory("FistPlayerBlock",1);
				A_SetInventory("FistPlayerSpeedFactor",1);
			}
			if (TruePlayerLevel >= 20 && TruePlayerLevel <= 49)
			{
				A_SetInventory("FistPlayerBlock2",1);
				A_SetInventory("FistPlayerSpeedFactor2",1);
			}
			if (TruePlayerLevel >= 50 && TruePlayerLevel <= 89)
			{
				A_SetInventory("FistPlayerBlock3",1);
				A_SetInventory("FistPlayerSpeedFactor3",1);
			}
			if (TruePlayerLevel >= 90)
			{
				A_SetInventory("FistPlayerBlock4",1);
				A_SetInventory("FistPlayerSpeedFactor4",1);
			}
		}
		else
		{
			A_SetInventory("FistPlayerBlock",0);
			A_SetInventory("FistPlayerSpeedFactor",1);
		}
		if (random(1,16) <= 1) 
		{
			A_SetInventory("FistPlayerBlockExtra",1); 
			if (random(1,16) <= 1 && TruePlayerLevel >= 50)
			{
				A_SetInventory("FistPlayerBlockExtra2",1); 
			}
		}
	}

	action void A_PFistBlockOff()
	{
		A_SetInventory("FistPlayerBlock",0);
		A_SetInventory("FistPlayerBlock2",0);
		A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerBlock4",0);
		A_SetInventory("FistPlayerSpeedFactor",0);
		A_SetInventory("FistPlayerSpeedFactor2",0);
		A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerSpeedFactor4",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockExtra2",0);
		A_SetInventory("FistPlayerBlockItem",0);
		//bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}

	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		double result = basedist;
		return result;
	}

	action void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		int debugrecoil = kcdebug_showrecoilinformation;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int BerserkAdd;
		int PlayerLevel;
		int PlayerATK;
		int PlayerSPD;
		double recoil;
		double recoilmulti;
		
		if (MiscItem)
		{
			PlayerLevel = MiscItem.TruePlayerLevel;
			PlayerATK = MiscItem.TruePlayerATK;
			PlayerSPD = MiscItem.TruePlayerSPD;
		}
		
		if (kc_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				// Base "Recoil"
				double baserecoil = -0.0500;
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * random(0,4);
				if (attacktype == 0) recoil = baserecoil * (random(0,4) + BerserkAdd);
				if (attacktype == 1) recoil = baserecoil * (random(2,10) + BerserkAdd);
				if (attacktype == 2) recoil = baserecoil * (random(4,8) + BerserkAdd);
				if (attacktype == 3) recoil = baserecoil * (random(8,20) + BerserkAdd);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (A_CheckBerserk())
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerATK * 0.000390625) - (PlayerSPD * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);


				A_Recoil(recoil);
			}
		}
	}

	action void A_GetKickSwingRecoil(int attacktype = 0)
	{
		bool debugmelee = kcdebug_showmeleeinformation;
		bool debugrecoil = kcdebug_showrecoilinformation;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PlayerLevel;
		int PlayerATK;
		int PlayerSPD;
		double recoil;
		double recoilmulti;
		
		if (MiscItem)
		{
			PlayerLevel = MiscItem.TruePlayerLevel;
			PlayerATK = MiscItem.TruePlayerATK;
			PlayerSPD = MiscItem.TruePlayerSPD;
		}
		
		if (kc_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				// Base "Recoil"
				double baserecoil = -0.0500;
				recoil = baserecoil * random(-4,4);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (A_CheckBerserk()) 
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerATK * 0.000390625) - (PlayerSPD * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);

				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}
	

	action int A_GetChainsawDamage(int sawtype)
	{
		int debugmelee = kcdebug_meleeinformation;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int PlayerLevel;
		int PlayerATK;
		int PlayerSPD;
		int previousdamage;
		int randmizer;

		if (sawtype <= 1) // Normal Chainsaw
		{
			randmizer = random(1,10);
			damage = ((2 + (PlayerATK * frandompick(0.25,0.3334))) * randmizer); // 2 - 20 + (Attack * 25%)
		}
		if (sawtype >= 2) // Double-Bladed Chainsaw
		{
			randmizer = random(3,12);
			damage = (((randompick(8,9,9,9,9,9,10) / 2) + (PlayerATK * frandompick(0.5625,0.7502))) * randmizer); // 13.5 - 54 + (Attack * 62.5%)
		}

		if (debugmelee) Console.Printf("BaseDmg (Chainsaw): %d (PlayerSTR: %d) (randmizer: %d)", damage, PlayerATK, randmizer);

		if (debugmelee) Console.Printf("FinalMeleeDmg (Chainsaw): (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Chainsaw]", weaponname, actorname, damage, previousdamage);

		return damage;
	}
	
	/*
	action void A_Saw(sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2, class<Actor> pufftype = "BulletPuff", int flags = 0, double range = 0, double spread_xy = 2.8125, double spread_z = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus")
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}

		if (pufftype == null)
		{
			pufftype = 'BulletPuff';
		}
		if (damage == 0)
		{
			damage = 2;
		}
		if (!(flags & SF_NORANDOM))
		{
			damage *=  random[Saw](1, 10);
		}
		if (range == 0)
		{ 
			range = MeleeRange + MELEEDELTA + (1. / 65536.); // MBF21 SAWRANGE;
		}

		double ang = angle + spread_xy * (Random2[Saw]() / 255.);
		double slope = AimLineAttack (ang, range, t) + spread_z * (Random2[Saw]() / 255.);

		Weapon weap = player.ReadyWeapon;
		if (weap != null && !(flags & SF_NOUSEAMMO) && !(!t.linetarget && (flags & SF_NOUSEAMMOMISS)) && !weap.bDehAmmo &&
			invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire))
				return;
		}

		int puffFlags = (flags & SF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0;

		Actor puff;
		int actualdamage;
		[puff, actualdamage] = LineAttack (ang, range, slope, damage, 'Melee', pufftype, puffFlags, t);

		if (!t.linetarget)
		{
			if ((flags & SF_RANDOMLIGHTMISS) && (Random[Saw]() > 64))
			{
				player.extralight = !player.extralight;
			}
			A_StartSound (fullsound, CHAN_WEAPON);
			return;
		}

		if (flags & SF_RANDOMLIGHTHIT)
		{
			int randVal = Random[Saw]();
			if (randVal < 64)
			{
				player.extralight = 0;
			}
			else if (randVal < 160)
			{
				player.extralight = 1;
			}
			else
			{
				player.extralight = 2;
			}
		}

		if (lifesteal && !t.linetarget.bDontDrain)
		{
			if (flags & SF_STEALARMOR)
			{
				if (armorbonustype == null)
				{
					armorbonustype = "ArmorBonus";
				}
				if (armorbonustype != null)
				{
					BasicArmorBonus armorbonus = BasicArmorBonus(Spawn(armorbonustype));
					armorbonus.SaveAmount = int(armorbonus.SaveAmount * actualdamage * lifesteal);
					armorbonus.MaxSaveAmount = lifestealmax <= 0 ? armorbonus.MaxSaveAmount : lifestealmax;
					armorbonus.bDropped = true;
					armorbonus.ClearCounters();

					if (!armorbonus.CallTryPickup (self))
					{
						armorbonus.Destroy ();
					}
				}
			}

			else
			{
				GiveBody (int(actualdamage * lifesteal), lifestealmax);
			}
		}

		A_StartSound (hitsound, CHAN_WEAPON);
			
		// turn to face target
		if (!(flags & SF_NOTURN))
		{
			double anglediff = deltaangle(angle, t.angleFromSource);

			if (anglediff < 0.0)
			{
				if (anglediff < -4.5)
					angle = t.angleFromSource + 90.0 / 21;
				else
					angle -= 4.5;
			}
			else
			{
				if (anglediff > 4.5)
					angle = t.angleFromSource - 90.0 / 21;
				else
					angle += 4.5;
			}
		}
		if (!(flags & SF_NOPULLIN))
			bJustAttacked = true;
	}
	*/
	protected action void GunShot(int accurate, Class<Actor> pufftype, double pitch, double defenseignorefactor)
	{
		int damage = 5;
		int randpick = randompick[GunShot](1,2,3);
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (MiscItem)
		{
			if (MiscItem.PlayerLUCK >= 50) randpick = randompick[GunShot](1,2,2,2,3);
			if (MiscItem.PlayerLUCK >= 100) randpick = randompick[GunShot](1,2,3,3,3);
			if (MiscItem.PlayerLUCK >= 150) randpick = randompick[GunShot](2,3,3,3,3);
			if (MiscItem.PlayerLUCK >= 200) randpick = randompick[GunShot](3,3,3,3,3,3,3,3,3,4);
		}
		
		damage *= randpick;
		
		double ang = angle;
		double randang = 5.625;
		double randpth = 3.549;
		if (accurate == -1) // Pistol Alt-Fire
		{
			randang *= 1.5;
			randpth *= 1.5;
		}
		if (accurate == -2) // Chaingun Alt-Fire
		{
			randang *= frandompick(1.25,1.75);
			randpth *= frandompick(1.875,2.5);
		}

		if (accurate <= 0)
		{
			if (kcdebug_attackstuff) Console.Printf("randang: %.8f, randpth: %.8f", randang, randpth);
			double rando = frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			ang += Random2[GunShot]() * ((randang * rando) / 256);

			if (GetCVar("vertspread") && !sv_novertspread)
			{
				pitch += Random2[GunShot]() * ((randpth * rando) / 256);
			}
		}
		
		let puff = LineAttack(ang, PLAYERMISSILERANGE, pitch, damage, 'Bullet', pufftype);
		if (puff)
		{
			KCPuff newpuff;
			newpuff = KCPuff(puff);
			if (newpuff)
			{
				newpuff.defenseignorefactor = defenseignorefactor;
			}
		}
	}
	
	action void A_SetBulletTracerDmg(actor BombShotsB, actor BombShots, double dmg, name dmgtype, double defenseignorefactor)
	{
		if (BombShots)
		{
			KCBulletTracer BS1;
			BS1 = KCBulletTracer(BombShots);
			if (BS1)
			{
				BS1.DamageType = dmgtype;
				BS1.finaldamagedealt = dmg;
				BS1.defenseignorefactor = defenseignorefactor;
			}
		}
	}
	
	action void A_SetBulletTracerRipperDmg(actor BombShotsB, actor BombShots, double dmg, name dmgtype, double defenseignorefactor)
	{
		if (BombShots)
		{
			KCBulletTracerSingleRipper BS1;
			BS1 = KCBulletTracerSingleRipper(BombShots);
			if (BS1)
			{
				BS1.DamageType = dmgtype;
				BS1.finaldamagedealt = dmg;
				BS1.defenseignorefactor = defenseignorefactor;
			}
		}
	}
	
	action void A_PistolTracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		A_TakeInventory("Clip",1);
		A_StartSound ("weapons/pistol", CHAN_WEAPON);
		for (int i = 0; i < 1; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = !player.refire ? 0.0 : (shotpitch * 0.5);
			double randangle = !player.refire ? 0.0 : (shotangle * 0.5);
			if (type > 0)
			{
				randpitch = (shotpitch * 0.625);
				randangle = (shotangle * 0.625);
			}
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (5 * random(1,3)), 'Bullet', 0.0);
		}
	}
	
	action bool A_CheckTracerConditions(bool check = false)
	{
		actor playera = players[0].mo;
		if ((playera.CountInv("KCTimeFreezer") ||
				playera.CountInv("KCTimeFreezer1") ||
				playera.CountInv("KCTimeFreezer2") ||
				playera.CountInv("KCTimeFreezer3")) ||
				kc_playertracers) check = true;
		
		return check;
	}
	
	action double A_GetShotHeightTracer(double shotheight = 36)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		if (KCP) shotheight = ((KCP.AttackZOffSet) * KCP.player.crouchfactor);
		
		return shotheight;
	}
	
	action void A_FirePistol(int type = 0)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 3.549;
		double shotangle = 5.625;
		if (A_CheckTracerConditions())
		{
			A_PistolTracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else
		{
			int accurate;
			if (type > 0) accurate = -1;
			
			if (player != null)
			{
				Weapon weap = player.ReadyWeapon;
				if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
				{
					if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
						return;
			
					player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
				}
				player.mo.PlayAttacking2();
			
				accurate = !player.refire;
				if (type > 0) accurate = -1;
			}
			else
			{
				accurate = 1;
			}
			
			A_StartSound ("weapons/pistol", CHAN_WEAPON);
			GunShot(accurate, "KCBulletPuff2", BulletSlope(), 0.0);
		}
	}
	
	action void A_Shotgun1Tracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		A_TakeInventory("Shell",1);
		A_StartSound ("weapons/shotgf", CHAN_WEAPON);
		for (int i = 0; i < 7; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = (shotpitch * 0.5);
			double randangle = (shotangle * 0.5);
			randpitch *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			randangle *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (5 * random(1,3)), 'Bullet', 0.0);
		}
	}
	
	action void A_FireShotgun(int type)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 0.0;
		double shotangle = 5.625;
		if (type >= 1)
		{
			shotpitch = (5.625 * 0.75);
			shotangle = (5.625 * 1.25);
			A_Recoil(0.75 * random(randompick(0,1,1,1),randompick(3,3,3,4)));
		}

		if (A_CheckTracerConditions())
		{
			A_Shotgun1Tracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else 
		{
			if (player == null)
			{
				return;
			}

			A_StartSound ("weapons/shotgf", CHAN_WEAPON);
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
					return;
				
				player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
			}
			player.mo.PlayAttacking2 ();
			
			double pitch = BulletSlope ();
			
			for (int i = 0; i < 7; i++)
			{
				GunShot(false, "KCBulletPuff2", pitch, 0.0);
			}
		}
	}

	action void A_Shotgun2Tracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		A_TakeInventory("Shell",2);
		A_StartSound ("weapons/sshotf", CHAN_WEAPON);
		for (int i = 0; i < 20; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = (shotpitch * 0.5);
			double randangle = (shotangle * 0.5);
			randangle *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			randpitch *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (5 * random(1,3)), 'Bullet', 0.0);
		}
	}
	
	action void A_FireShotgun2(int type)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 7.097;
		double shotangle = 11.25;
		if (type >= 1)
		{
			shotpitch = (7.097 * 2.125);
			shotangle = (11.25 * 1.375);
			A_Recoil(3.0 * random(randompick(0,1,1,1),randompick(3,3,3,4)));
		}

		if (A_CheckTracerConditions())
		{
			A_Shotgun2Tracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else 
		{
			if (player == null)
			{
				return;
			}

			A_StartSound ("weapons/sshotf", CHAN_WEAPON);
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 2))
					return;
				
				player.SetPsprite(PSP_FLASH, weap.FindState('Flash'), true);
			}
			player.mo.PlayAttacking2 ();

			double pitch = BulletSlope ();
				
			for (int i = 0 ; i < 20 ; i++)
			{
				int damage = 5 * random[FireSG2](1, 3);
				
				double ang = Random2[FireSG2]() * (shotangle / 256);
				ang *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				ang += angle;
				double ptc = Random2[FireSG2]() * (shotpitch / 256);
				ptc *= frandompick(0.25,0.334,0.334,0.334,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.445,0.445,0.445,0.5);
				ptc += pitch;
				
				// Doom adjusts the bullet slope by shifting a random number [-255,255]
				// left 5 places. At 2048 units away, this means the vertical position
				// of the shot can deviate as much as 255 units from nominal. So using
				// some simple trigonometry, that means the vertical angle of the shot
				// can deviate by as many as ~7.097 degrees.
				
				LineAttack (ang, PLAYERMISSILERANGE, ptc, damage, 'Bullet', "BulletPuff");
			}
		}
	}
	
	action void A_OpenShotgun2() 
	{ 
		A_StartSound("weapons/sshoto", CHAN_WEAPON); 
	}
	
	action void A_LoadShotgun2() 
	{ 
		A_StartSound("weapons/sshotl", CHAN_WEAPON); 
	}
	
	action void A_CloseShotgun2() 
	{ 
		A_StartSound("weapons/sshotc", CHAN_WEAPON);
		A_Refire();
	}
	
	action void A_ChaingunTracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		A_TakeInventory("Clip",1);
		A_StartSound ("weapons/chngun", CHAN_WEAPON);
		for (int i = 0; i < 1; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = !player.refire ? 0.0 : (shotpitch * 0.5);
			double randangle = !player.refire ? 0.0 : (shotangle * 0.5);
			if (type > 0)
			{
				randpitch = (shotpitch * 0.625);
				randangle = (shotangle * 0.625);
			}
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (5 * random(1,3)), 'Bullet', 0.0);
		}
	}
	
	action void A_FireCGun(int type)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 3.549;
		double shotangle = 5.625;
		if (A_CheckTracerConditions())
		{
			A_ChaingunTracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else
		{
			int accurate;
			if (type > 0) accurate = -2;
			
			if (player == null)
			{
				return;
			}
			
			Weapon weap = player.ReadyWeapon;
			if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
					return;
			
				A_StartSound ("weapons/chngun", CHAN_WEAPON);
			
				State flash = weap.FindState('Flash');
				if (flash != null)
				{
					// Removed most of the mess that was here in the C++ code because SetSafeFlash already does some thorough validation.
					State atk = weap.FindState('Fire');
					let psp = player.GetPSprite(PSP_WEAPON);
					if (psp) 
					{
						State cur = psp.CurState;
						int theflash = atk == cur? 0:1;
						player.SetSafeFlash(weap, flash, theflash);
					}
				}
				accurate = !player.refire;
				if (type > 0) accurate = -2;
			}
			
			player.mo.PlayAttacking2 ();
			GunShot(accurate, "KCBulletPuff2", BulletSlope(), 0.0);
		}
	}
	
	action void A_FireMissile()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		SpawnPlayerMissile ("Rocket");
	}
	
	//===========================================================================
	//
	// A_FireSTGrenade: not exactly backported from ST, but should work the same
	//
	//===========================================================================

	action void A_FireSTGrenade(class<Actor> grenadetype = "Grenade")
	{
		if (grenadetype == null)
			return;

		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
			
		// Temporarily raise the pitch to send the grenadetype slightly upwards
		double savedpitch = pitch;
		pitch -= 6.328125;
		SpawnPlayerMissile(grenadetype);
		pitch = SavedPitch;
	}
	
	action void A_FirePlasma()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
			
			State flash = weap.FindState('Flash');
			if (flash != null)
			{
				player.SetSafeFlash(weap, flash, random[FirePlasma](0, 1));
			}
			
		}
		
		SpawnPlayerMissile ("PlasmaBall");
	}
	
	action void A_FireBFG()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, deh.BFGCells))
				return;
		}

		SpawnPlayerMissile("BFGBallNew", angle, nofreeaim:sv_nobfgaim);
	}
	
	action void A_FireOldBFG()
	{
		bool doesautoaim = false;

		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;

		if (invoker != weap || stateinfo == null || stateinfo.mStateType != STATE_Psprite) weap = null;
		if (weap != null)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;

			doesautoaim = weap.bNoAutoaim;
			weap.bNoAutoaim = true;
		}
		player.extralight = 2;

		// Save values temporarily
		double SavedPlayerAngle = angle;
		double SavedPlayerPitch = pitch;
		for (int i = 0; i < 2; i++) // Spawn two plasma balls in sequence
		{
			angle += random[OldBFG](-64, 63) * (90./768);
			pitch += random[OldBFG](-64, 63) * (90./640);
			SpawnPlayerMissile (i == 0? (class<Actor>)("PlasmaBall1New") : (class<Actor>)("PlasmaBall2New"));
			// Restore saved values
			angle = SavedPlayerAngle;
			pitch = SavedPlayerPitch;
		}
		// Restore autoaim setting
		if (weap != null) weap.bNoAutoaim = doesautoaim;
	}

	action bool A_GunKiaiCheckTarget()
	{
		bool check = false;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		actor dmtarget;
		PlayerPawn playpawn;
		playpawn = PlayerPawn(self);
		if (playpawn) 
		{
			if (AimTarget()) 
			{
				dmtarget = AimTarget();
				if (dmtarget)
				{
					if (ShieldPartBase(dmtarget)) dmtarget == null;
					if (ExplosiveBarrel(dmtarget)) dmtarget = null;
					if (ExplosiveBarrel2(dmtarget)) dmtarget = null;
					if (Pod(dmtarget)) dmtarget = null;
					if (dmtarget && !dmtarget.bISMONSTER) dmtarget = null;
				}
				if (dmtarget != null) check = true;
			}
		}
		return check;
	}

	// Allows Heiwa to occasionally shout kiais/taunts when firing certain weapons
	action void A_HeiwaRGunKiais(int basechance = 0)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		bool voicecheck = false;
		if (A_CheckForHeiwa() && 
				MiscItem.OneLinerCooldown <= 0 &&
				MiscItem.OneLinerTimerCool <= 0)
		{
			if (basechance <= 0) basechance = kc_heiwaonelinerbasechance;
			if (basechance > 0)
			{
				if (playera.CountInv("DecentHealth")) basechance *= 1.25;
				if (playera.CountInv("LowHealth")) basechance *= 1.5;
				if (playera.CountInv("CriticalHealth")) basechance *= 1.875;
				if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) basechance *= frandompick(1.25,1.25,1.25,1.5,1.5,2);
				int maxchance = 256;
				if (A_GunKiaiCheckTarget()) 
				{
					basechance *= frandom(3.2,4.8);
					maxchance *= frandom(0.625,0.875);
				}
				//Console.Printf("%d / %d", basechance, maxchance);
				if (random(1,maxchance) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
				{
					double maskpitch = 1.00;
					if (playera.waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(1.25,1.75);
					if (playera.CountInv("PowerStrength") || playera.CountInv("KCPowerStrength")) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = random(1,2);
					if (kc_heiwaextravoices && 
							MiscItem.OneLinerTimerCool <= 0 &&
							randvoice > 0)
					{
						if (randvoice == 1) 
						{
							MiscItem.OneLinerTimerCool = ceil(int(1.127 * TICRATE));
							voicenm = "Heiwa/BangBangBang"; //
							Console.Printf("\c[HeiwaDeluge]'Bangbangbang-bang!!'\c-"); //
						}
						if (randvoice == 2) 
						{
							MiscItem.OneLinerTimerCool = ceil(int(0.735 * TICRATE));
							voicenm = "Heiwa/DanceForMe"; //
							Console.Printf("\c[HeiwaDeluge]'DANCE!!!'\c-"); //
						}
						
						//Console.Printf("One-Liner: %d", randvoice);
						//
						//
						//
						if (randvoice > 0)
						{
							playera.A_StopSound(CHAN_VOICE);
							playera.A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
							MiscItem.OneLinerCooldown += (frandom(1.75,3.0) * TICRATE);
						}
					}
				}
			}
		}
	}
	
	action void A_IncGunKiaiCounter(int mode = 0)
	{
		if (!mode)
		{
			//SetActorProperty(0, APROP_SPEED, 6.0);
		}
		else
		{
			invoker.tauntyell += mode;
			if (invoker.tauntyell >= 180)
			{
				A_HeiwaRGunKiais(randompick(12,16,16,16,16,20));
				invoker.tauntyell -= randompick(90,120,120,120,120,150);
				if (invoker.tauntyell < 0) invoker.tauntyell = 0;
			}
		}
	}
	
	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
				let weapon = player.ReadyWeapon;
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				if (player.mo.health > 0)
				{
					if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2a [%d]", GetClassName(), gametic);
					if (GetPlayerInput(INPUT_BUTTONS) & BT_USER1)
					{
						if (CountInv("IsUnconscious"))
						{
							A_PrintBold(String.Format("\cgYou're currently incapacitated, and thus can't quick kick!"), frandom(1.0875,1.25));
						}
						else
						{
							string nm = "CCards_Actor_BodySwap";
							if (CountInv(nm))
							{
								A_PrintBold(String.Format("\cgYou're currently cursed with a body swap, and thus can't quick kick!"), frandom(1.0875,1.25));
							}
							else
							{
								if (MiscItem && MiscItem.cankick) A_Overlay(-2,"Kick",true);
							}
						}
					}
				}
				else
				{
					if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2b [%d]", GetClassName(), gametic);
					A_ClearOverlays(-2,-2,true);
					A_ClearOverlays(8,8,true);
				}
				invoker.ActualLevel = A_GetMeleeSPDLvl(1);
				if (kcdebug_weaponstatdisplays2) Console.Printf("GrandControlLayer (%s) - 2c: invoker.ActualLevel: %d [%d]", GetClassName(), invoker.ActualLevel, gametic);
			}
			loop;
	}
}

// Weapon Base Class
class MarineWeapon : KCWeaponBase
{
	default
	{
		KCWeaponBase.PickUpVoice true;
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	
	action void A_KickKiais(int basechance = 128)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		if (MiscItem && MiscItem.OneLinerTimerCool <= 0)
		{
			//if (A_CheckBerserk()) basechance *= frandom(0.7,0.8);
			if (random(1,256) >= basechance) 
			{
				if (A_CheckForHeiwa()) A_StartSound("HeiwaKiais",CHAN_VOICE,CHANF_DEFAULT,10.0);
													else A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
			}
		}
	}
	
	states
	{
		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickStart: // 19
			LEG2 A 2 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 B 2
			{
				A_SetInventory("IsKicking",1);
				A_StartSound("fistswingmedium0",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 C 1
			{
				A_SetInventory("IsKicking",1);
				A_KickKiais(128);
			}
			LEG2 D 1
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 E 2 
			{
				A_SetInventory("IsKicking",1);
				A_OverlayOffset(-2,0,0,0);
				int tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 8 [shields/hit]: %d", tic);
				A_SetTics(tic);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				// Base "Recoil"
				int BerserkAdd;
				double recoil = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recoil = recoil * (random(7,17) + BerserkAdd);
				if (kcdebug_weaponrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);
				
				double reclbase = 0.0234375;
				double output = 1.0;
				double recoilmulti = (1.0 - (TruePlayerLevel * reclbase));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (waterlevel >= 3) recoil *= 0;
				if (bNOGRAVITY || bFLY) recoil *= 0.125;
				A_Recoil(recoil);
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				string kicktype = "KickPuff";
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && buttons & BT_USER1 && random(1,16) <= random(11,15)) kicktype = "KickPuffNoThrust";
				A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				double rand1 = randompick(8,8,8,8,8,8,8,8,8,10,10,12);
				double xoff1 = (random(-rand1,rand1)*frandom(3,5));
				double yoff1 = 32.0+(random(-6,2)*frandom(3,5));
				
				double rand2 = randompick(12,12,12,12,12,12,12,12,12,15,15,18);
				double xoff2 = (random(-rand2,rand2)*frandom(3,5));
				double yoff2 = 32.0+(random(-6,2)*frandom(3,5));
				double ang = angle;
				double pch = pitch;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21)) 
				{
					A_SetAngle(angle+(xoff1*0.667));
					A_SetPitch(pitch+((yoff1-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25)) 
				{
					A_SetAngle(angle+(xoff2*0.667));
					A_SetPitch(pitch+((yoff2-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17))
				{
					double rand = frandompick(2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,3.334,3.334,4.0);
					double xoff = (random(-rand,rand)*frandom(1.5,2.5));
					double yoff = 32.0+(frandom(-2,0.667)*frandom(1.5,2.5));
					A_OverlayOffset(-2,xoff,yoff,0);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,16) <= 5))
					{
						int layer = -3;
						A_Overlay(layer,"KickImage1",true);
						A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
						A_OverlayOffset(layer,xoff1,yoff1,0);
						A_OverlayRenderStyle(layer,STYLE_Translucent);
						A_OverlayAlpha(layer,0.667);
						if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) && random(1,16) <= 5) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,32) <= 3))
						{
							int layer = -4;
							A_Overlay(layer,"KickImage2",true);
							A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
							A_OverlayOffset(layer,xoff2,yoff2,0);
							A_OverlayRenderStyle(layer,STYLE_Translucent);
							A_OverlayAlpha(layer,0.334);
						}
					}
				}
				A_SetInventory("IsKicking",1);
				/*
				if (A_CheckBerserk()) A_SetTics(1);
				
				A_GetKickSwingRecoil(0);
				string kicktype = "KickPuff";
				A_CustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,kicktype,104,0,0,"","","");
	
				double output = kc_kickspdlvlint;
				double oldoutput = output;
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				*/
			}
			LEG2 F 5 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(random(2,3));
			}
			LEG2 E 2 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			LEG2 D 1 
			{ 
				A_SetInventory("IsKicking",1);
			}
			LEG2 C 1 
			{ 
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 B 1
			{
				A_SetInventory("IsKicking",1);
			}
			LEG2 A 1 
			{
				A_SetInventory("IsKicking",1);
				if (A_CheckBerserk()) A_SetTics(0);
			}
			LEG2 A 0 { return resolvestate("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_SetInventory("IsKicking",0);
			}
			stop;
	}
}

// ??????? ????? Weapon Base Class
class HeiwaWeapon : KCWeaponBase
{
	default
	{
		KCWeaponBase.PickUpVoice true;
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CountInv("IsUnconscious"))
		{
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (Pre [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (post [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);
		
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (kcdebug_weaponstatdisplays2) Console.Printf("A_WeaponReady: Flags (final [QuickMelee]) (%s): %d [%d]", GetClassName(), flags, gametic);
	}
	
	
	states
	{
		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0 A_QMWKickInit();
			goto KickStart;

		KickStart:
			TNT1 A 0
			{
			}
		KickWindUp:
			TNT1 A 1 // [1]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 1)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 1: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [2]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 2: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [3]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 3: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [4]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 4: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [5]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindUp 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
		Kicking:
			HKIC A 1 // [6]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("PreKick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC B 1 // [7]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 13)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 2: %d", tic);
				A_SetTics(tic);
				
				if (A_CheckBerserk())
				{
					if (random(1,4) <= 1) A_StartSound("fistswingheavy0",CHAN_BODY);
													 else A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				else
				{
					A_StartSound("fistswingmedium0",CHAN_BODY);
				}
				
				A_SetInventory("IsKicking",1);
			}
			HKIC C 1 // [8]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 3: %d", tic);
				A_SetTics(tic);
				
				int basechance = 128;
				if (A_CheckBerserk()) basechance *= frandompick(1.5,1.5,1.5,1.625,1.625,1.75);
				if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
				{
					double maskpitch = 1.00;
					if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
					string voicenm;
					double voicevol = frandom(0.90,1.45);
					if (A_CheckBerserk()) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
					int randvoice = 0;
					//if (randvoice == 1) voicenm = "heiwa/Jump";
					if (kc_heiwaextravoices && 
							MiscItem.OneLinerTimerCool <= 0 &&
							randvoice > 0)
					{
						A_StopSound(CHAN_VOICE);
						A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
					}
				} 
				
				A_SetInventory("IsKicking",1);
			}
			HKIC D 1 // [9]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 4: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC E 1 // [10]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC F 1 // [11]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 16)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 6: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC G 1 // [12]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 7: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
		KickHit:
			HKIC H 1 // 1 [13] (Attack)
			{
				A_OverlayOffset(-2,0,0,0);
				int tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 8 [shields/hit]: %d", tic);
				A_SetTics(tic);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				// Base "Recoil"
				int BerserkAdd;
				double recoil = frandompick(-0.125,-0.075,-0.025,0.025,0.075,0.125);
				if (A_CheckBerserk()) BerserkAdd = randompick(1,1,1,1,2,2,2,2,3); else BerserkAdd = 0;
				recoil = recoil * (random(7,17) + BerserkAdd);
				if (kcdebug_weaponrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);
				
				double reclbase = 0.0234375;
				double output = 1.0;
				double recoilmulti = (1.0 - (TruePlayerLevel * reclbase));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (waterlevel >= 3) recoil *= 0;
				if (bNOGRAVITY || bFLY) recoil *= 0.125;
				A_Recoil(recoil);
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				string kicktype = "KickPuff";
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && buttons & BT_USER1 && random(1,16) <= random(11,15)) kicktype = "KickPuffNoThrust";
				A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
				if (A_CheckMeleeDestroyProj(2) > 0)
				{
					int mkheight = random(28,30);
					int mkdist1 = 24;
					int mkdist2 = 56;
					int mkdist3 = 88;
					string mk = "KickShieldNoReflect";
					if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
					
					A_MeleeShieldPiece(mk,mkheight,mkdist1);
					A_MeleeShieldPiece(mk,mkheight,mkdist2);
					A_MeleeShieldPiece(mk,mkheight,mkdist3);
				}
				double rand1 = randompick(8,8,8,8,8,8,8,8,8,10,10,12);
				double xoff1 = (random(-rand1,rand1)*frandom(3,5));
				double yoff1 = 32.0+(random(-6,2)*frandom(3,5));
				
				double rand2 = randompick(12,12,12,12,12,12,12,12,12,15,15,18);
				double xoff2 = (random(-rand2,rand2)*frandom(3,5));
				double yoff2 = 32.0+(random(-6,2)*frandom(3,5));
				double ang = angle;
				double pch = pitch;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21)) 
				{
					A_SetAngle(angle+(xoff1*0.667));
					A_SetPitch(pitch+((yoff1-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25)) 
				{
					A_SetAngle(angle+(xoff2*0.667));
					A_SetPitch(pitch+((yoff2-32.0)*-0.334));
					A_CustomPunch(A_GetKickDamage(0,0,false),true,CPF_NOTURN,kicktype,104,0,0,"","","");
					if (A_CheckMeleeDestroyProj(2) > 0)
					{
						int mkheight = random(28,30);
						int mkdist1 = 24;
						int mkdist2 = 56;
						int mkdist3 = 88;
						string mk = "KickShieldNoReflect";
						if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "KickShieldReflect";
						
						A_MeleeShieldPiece(mk,mkheight,mkdist1);
						A_MeleeShieldPiece(mk,mkheight,mkdist2);
						A_MeleeShieldPiece(mk,mkheight,mkdist3);
					}
					A_SetAngle(ang);
					A_SetPitch(pch);
				}
				
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17))
				{
					double rand = frandompick(2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,2.667,3.334,3.334,4.0);
					double xoff = (random(-rand,rand)*frandom(1.5,2.5));
					double yoff = 32.0+(frandom(-2,0.667)*frandom(1.5,2.5));
					A_OverlayOffset(-2,xoff,yoff,0);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,16) <= 5))
					{
						int layer = -3;
						A_Overlay(layer,"KickImage1",true);
						A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
						A_OverlayOffset(layer,xoff1,yoff1,0);
						A_OverlayRenderStyle(layer,STYLE_Translucent);
						A_OverlayAlpha(layer,0.667);
						if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 25) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 21) && random(1,16) <= 5) || (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 17) && random(1,32) <= 3))
						{
							int layer = -4;
							A_Overlay(layer,"KickImage2",true);
							A_OverlayFlags(layer,PSPF_ALPHA|PSPF_FORCESTYLE,true);
							A_OverlayOffset(layer,xoff2,yoff2,0);
							A_OverlayRenderStyle(layer,STYLE_Translucent);
							A_OverlayAlpha(layer,0.334);
						}
					}
				}
				A_SetInventory("IsKicking",1);
			}
		KickRetract:
			HKIC G 1 // 1 [14]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 9: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC F 1 // 1 [15]
			{
				A_OverlayOffset(-2,0,0,0);
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick2");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 10: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC E 1 // [16]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 11: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC D 1 // [17]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 12: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC C 1 // [18]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");

				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 11)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 13: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC B 1 // [19]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 14)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 2) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 14: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			HKIC A 1 // [20]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				//A_ForcePlayState("Kick");
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) tic = 0;
				else if (A_CheckBerserk() && random(1,9) <= 7) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("Kicking 15: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
				
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				if (buttons & BT_USER1)
				{
					int kickrchance = 4 + random(-1,1);
					int remchance;
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 1)) kickrchance = 12 + random(-1,1);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 2)) kickrchance = 32 + random(-2,2);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) kickrchance = 48 + random(-2,2);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) kickrchance = 72 + random(-3,3);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 5)) kickrchance = 96 + random(-4,4);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) kickrchance = 128 + random(-4,4);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 7)) kickrchance = 144 + random(-5,5);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) kickrchance = 160 + random(-5,5);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 9)) kickrchance = 176 + random(-6,6);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) kickrchance = 192 + random(-7,7);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 11)) kickrchance = 212 + random(-7,7);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) kickrchance = 224 + random(-8,8);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 13)) kickrchance = 240 + random(-8,8);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 14)) kickrchance = 248 + random(-9,9);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) kickrchance = 254 + random(-9,9);
					if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 16)) kickrchance = 256;
					if (kickrchance >= 256) kickrchance = 256;
					remchance = 256 - kickrchance;
					if (A_CheckBerserk())
					{
						if (remchance > 0) 
						{
							if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 15)) kickrchance += (remchance * frandompick(0.75,0.875,0.875,0.875,1.0));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 12)) kickrchance += (remchance * frandompick(0.625,0.75,0.75,0.75,0.875));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) kickrchance += (remchance * frandompick(0.5,0.625,0.625,0.625,0.75));
							else if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 3)) kickrchance += (remchance * frandompick(0.375,0.5,0.5,0.5,0.625));
							else kickrchance += (remchance * frandompick(0.25,0.375,0.375,0.375,0.5));
						}
					}
					if (kcdebug_meleeinformation) Console.Printf("kickrchance: %d, remchance: %d", kickrchance, remchance);
					if (kickrchance >= 256) kickrchance = 256;
					
					if (random(1,256) <= kickrchance) return resolvestate("Kicking");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		KickWindDown:
			TNT1 A 1 // [21]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 10)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsKicking",1);
			}
			TNT1 A 1 // [22]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 8)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 2: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [23]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 6)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 3: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [24]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 4)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 4: %d", tic);
				A_SetTics(tic);
			}
			TNT1 A 1 // [25]
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(2) * 2)) tic = 0;
				else if (A_CheckBerserk() && random(1,2) <= 1) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("KickWindDown 5: %d", tic);
				A_SetTics(tic);
			}
			goto KickEnd;
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_SetInventory("IsKicking",0);
			}
			stop;
			
		// Extra
		KickImage1:
			HKIC H 1;
			HKIC H 1
			{
				A_OverlayAlpha(-3,0.334);
			}
			stop;
		
		KickImage2:
			HKIC H 1;
			HKIC H 1
			{
				A_OverlayAlpha(-4,0.1667);
			}
			stop;
	}
}

class FistMarine : MarineWeapon replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	action void A_PunchKiais(int basechance = 75)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		if (MiscItem && MiscItem.OneLinerTimerCool <= 0)
		{
			if (random(1,256) >= basechance) 
			{
				if (A_CheckForHeiwa()) A_StartSound("HeiwaKiais",CHAN_VOICE,CHANF_DEFAULT,10.0);
													else A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
			}
		}
	}
	
	States
	{
		Ready:
			PUND A 1
			{
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PUND A 1 
			{
				A_Lower(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Select: 
			PUND A 1 
			{
				A_Raise(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Fire: // 22 Tics
			TNT1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
			}
		PunchSuccess:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_SetInventory("IsUppercutting",0);
			}
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			PUND B 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 9)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 15)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 21)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsPunching",1);
			}
			PUND C 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 16)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 22)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 2 [shields/hit]: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				
				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(1024); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUND D 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 5;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 8)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 14)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 20)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 26)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 1) tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND C 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 7)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 13)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 19)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 4: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND B 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 5;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 11)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 17)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 23)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 29)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 5: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				A_Refire();
			}
			PUND B 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",0);
			}
			goto Ready;

		RightPunch:
			PUND F 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 9)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 15)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 21)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("RightPunch 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsPunching",1);
			}
			PUND G 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 16)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 22)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("RPunch 2 [shields/hit]: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				
				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(1024); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUND H 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 5;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 8)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 14)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 20)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 26)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 1) tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND G 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 7)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 13)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 19)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 4: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND F 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 5;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 11)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 17)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 23)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 29)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 5: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				A_Refire();
			}
			PUND F 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",1);
			}
			goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		// 23 Tics
		UppercutStart:
			MPU0 A 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 10)) tic -= 1; // 50 [10]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 1: %d", tic);
				A_SetTics(tic);
			}
			MPU0 B 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) tic -= 1; // 25 [5]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 2: %d", tic);
				A_SetTics(tic);
			}
			MPU0 C 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 13)) tic -= 1; // 65 [13]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 3: %d", tic);
				A_SetTics(tic);
			}
			MPU0 D 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 7)) tic -= 1; // 35 [7]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 4: %d", tic);
				A_SetTics(tic);
			}
			MPU0 E 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) tic -= 1; // 55 [11]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 5: %d", tic);
				A_SetTics(tic);
			}
		Uppercut:
			MPU1 A 1
			{
				A_SetInventory("IsUppercutting",1);
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 4)) tic -= 1; // 20 [4]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 1: %d", tic);
				A_SetTics(tic);
				
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else 
					{
						actor playera = players[0].mo;
						let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
						if (!(playera.CountInv("KCTimeFreezer1") ||
									playera.CountInv("KCTimeFreezer2") ||
									playera.CountInv("KCTimeFreezer3")))
						{
							invoker.A_KCAlertMonsters(1024); 
						} // Sometimes a swing will be enough to wake up all monsters in the area.
					}
				}
				A_PunchKiais(75);
				
				A_StartSound("fistswingheavy",1); // D [Left] or B [Right] 
			}
			MPU1 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) tic -= 1; // 55 [11]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 2: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) tic -= 1; // 40 [8]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 3: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 14)) tic -= 1; // 70 [14]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 4: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) tic -= 1; // 10 [2]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 F 1
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) tic -= 1; // 10 [2]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1);
				double frange = 58.0;
				A_GetPunchSwingRecoil(1);
				A_CustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
					}
				}
			}
			MPU1 G 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				A_SetTics(1);

				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 F 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) tic -= 1; // 15 [3]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 7: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) tic -= 1; // 55 [11]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 8: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) tic -= 1; // 30 [6]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 9: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 14)) tic -= 1; // 70 [14]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 10: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 7)) tic -= 1; // 35 [7]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 11: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 A 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) tic -= 1; // 55 [10]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 12: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
				return resolvestate("UppercutEnd"); 
			}
		UppercutEnd:
			TNT1 A 0
			{
				A_SetInventory("IsUppercutting",0);
				A_SetInventory("UsingMeleeAttack",0); 
			}
			MPU0 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) tic -= 1; // 45 [9]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 13)) tic -= 1; // 65 [13]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 2: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 1)) tic -= 1; // 5 [1]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 10)) tic -= 1; // 50 [10]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 4: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 A 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) tic -= 1; // 15 [3]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			TNT1 A 0
			{
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;
			
		// Guard
		User4:
			DPDF A 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF B 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF C 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) { A_SetTics(0); }
				}
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn();
			}
			DPDF D 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF E 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF F 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF G 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF H 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF I 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
		User4Hold:
			DPDF J 1 // BRIGHT
			{
				int TruePlayerLevel = invoker.ActualLevel;
				A_PFistBlockOn();

				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			DPDF I 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF H 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF G 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF F 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF E 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF D 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF C 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF B 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				A_PFistBlockOn();
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) { A_SetTics(0); }
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

class WeaponSpawner : CustomInventoryExt
{
	action bool A_CheckForHeiwa()
	{
		bool result = false;
		actor playera = players[0].mo;
		if (playera.GetClassName() == "HeiwaPlayer" || HeiwaPlayer(playera)) result = true;
		return result;
	}
	
	void A_AmmoSpawn(string droptype, string droptypeammo, string droptypeammobig)
	{
		bool spawned;
		actor mo;
		
		// Main Ammo Drop [transfer TIDs to maintain script pickups :V ]
		droptype = droptypeammo;
		if (random(1,4) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
		[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
		if (mo) { mo.bDROPPED = bDROPPED; }
		
		// Extra Drop chance [no TID transferrance]
		if (random(1,4) <= randompick(1,1,1,1,1,2,2,3)) droptype = droptypeammobig;
		[spawned, mo] = A_SpawnItemEx(droptype,frandom(-4,4),frandom(-4,4),frandom(0,0),frandom(-4,4),frandom(-4,4),frandom(0,8),flags:SXF_NOCHECKPOSITION);
		if (mo) { mo.bDROPPED = bDROPPED; }
	}
	
	void A_WeaponSpawn(string droptype)
	{
		bool spawned;
		actor mo;
		// Main Weapon Drop [transfer TIDs to maintain script pickups :V ]
		[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
		if (mo) { mo.bDROPPED = bDROPPED; }
	}
}

class ChainsawSpawner : WeaponSpawner replaces Chainsaw
{
	void A_SpawnOtherWeapon(int type)
	{
		bool spawned;
		actor mo;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int user_type;
		string droptype;
		bool spawnweapon;

		if (type == 1)
		{
			droptype = "BackPack";
			user_type = random(1,10);
			spawnweapon = false;
			if (random(1,8) <= 1) 
			{
				spawnweapon = true;
			}
			else
			{
				droptype = "Translocator";
				if (playera.CountInv(droptype)) spawnweapon = true;
			}
			
			if (spawnweapon)
			{
				if (user_type == 1) 
				{
					if (random(1,16) <= 1)
					{
						droptype = "BlasterPickup";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,16) <= 1) droptype = "CombatPack";
																else droptype = "Backpack";
						}
					}
					else
					{
						droptype = "Glock21";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,16) <= 1) droptype = "CombatPack";
																else droptype = "Backpack";
						}
					}
				}
				if (user_type == 2) 
				{
					droptype = "TommyGun";
					if (playera.CountInv(droptype)) 
					{
						droptype = "DualTommyGuns";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,16) <= 1) droptype = "CombatPack";
																else droptype = "Backpack";
						}
						else droptype = "TommyGun";
					}
					else droptype = "TommyGun";
				}
				if (user_type == 3) 
				{
					if (random(1,16) <= 1)
					{
						droptype = "Deviation";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,16) <= 1) droptype = "CombatPack";
																else droptype = "Backpack";
						}
					}
					else
					{
						droptype = "Devastator";
						if (playera.CountInv(droptype)) 
						{
							droptype = "DualDevastators";
							if (playera.CountInv(droptype)) 
							{
								if (random(1,16) <= 1) droptype = "CombatPack";
																	else droptype = "Backpack";
							}
							else droptype = "DevastatorGenerator";
						}
						else droptype = "DevastatorGenerator";
					}
				}
				if (user_type == 4) 
				{
					droptype = "BlasterRifle";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
				if (user_type == 5)
				{
					droptype = "TeslaCannon";
					if (playera.CountInv(droptype)) 
					{
						droptype = "DualTeslaCannons";
						if (playera.CountInv(droptype)) 
						{
							if (random(1,16) <= 1) droptype = "CombatPack";
																else droptype = "Backpack";
						}
						else droptype = "TeslaCannon";
					}
					else droptype = "TeslaCannon";
				}
				if (user_type == 6)
				{
					droptype = "SawThrower";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
				if (user_type == 7)
				{
					droptype = "ImpalerXBow";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
				if (user_type == 8)
				{
					droptype = "RiotGun";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
				if (user_type == 9) 
				{
					droptype = "BHGen";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
				if (user_type == 10)
				{
					if (random(1,16) <= 4) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
		}
		else
		{
			droptype = "BackPack";
			user_type = random(1,11);
			if (user_type == 1) 
			{
				droptype = "Pistol";
				if (playera.GetClassName() == "KCPlayer") droptype = "PistolMarine";
				if (random(1,4) <= 1 && playera.CountInv(droptype)) droptype = "Glock21";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 2) 
			{
				droptype = "Chaingun";
				if (playera.GetClassName() == "KCPlayer") droptype = "ChaingunMarine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 3) 
			{
				droptype = "Shotgun";
				if (playera.GetClassName() == "KCPlayer") droptype = "ShotgunMarine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,32) <= 1) droptype = "SuperShotgunMarine";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
				}
			}
			if (user_type == 4) 
			{
				droptype = "TommyGun";
				if (playera.CountInv(droptype)) 
				{
					droptype = "DualTommyGuns";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
					else droptype = "TommyGun";
				}
				else droptype = "TommyGun";
			}
			if (user_type == 5) 
			{
				droptype = "SuperShotgun";
				if (playera.GetClassName() == "KCPlayer") droptype = "SuperShotgunMarine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 6) 
			{
				droptype = "RocketLauncher";
				if (playera.GetClassName() == "KCPlayer") droptype = "RocketLauncherMarine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 7) 
			{
				droptype = "BFG9000";
				if (playera.GetClassName() == "KCPlayer") droptype = "BFG9000Marine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 8)
			{
				droptype = "PlasmaRifle";
				if (playera.GetClassName() == "KCPlayer") droptype = "PlasmaRifleMarine";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 9)
			{
				droptype = "Devastator";
				if (playera.CountInv(droptype)) 
				{
					droptype = "DualDevastators";
					if (playera.CountInv(droptype)) 
					{
						if (random(1,16) <= 1) droptype = "CombatPack";
															else droptype = "Backpack";
					}
					else droptype = "DevastatorGenerator";
				}
				else droptype = "DevastatorGenerator";
			}
			if (user_type == 10)
			{
				droptype = "SawThrower";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
			if (user_type == 11)
			{
				droptype = "ImpalerXBow";
				if (playera.CountInv(droptype)) 
				{
					if (random(1,16) <= 1) droptype = "CombatPack";
														else droptype = "Backpack";
				}
			}
		}
		if (kcdebug_weaponspawners) Console.Printf ("\c[fire][ChainsawSpawner]\c- type: %d, user_type: %d, [%s]", type, user_type, droptype);
		[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
		if (mo) { mo.bDROPPED = bDROPPED; }
		Destroy();
	}
	
	states
	{
		Spawn:
		Idle:
			CSAW A 0 NoDelay
			{
				bool spawned;
				actor mo;
				string droptype = "Backpack";
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!bDROPPED)
				{
					if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- Not Dropped");
					if (playera.GetClassName() == "KCPlayer")
					{
						if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- Not Dropped - KCPlayer");
						if (playera.CountInv("ChainsawMarine"))
						{
							if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- ChainsawMarine [has]");
							if (random(1,4) <= 1)
							{
								if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- Translocator [has Chainsaw]");
								droptype = "Translocator";
								[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
								if (mo) { mo.bDROPPED = bDROPPED; }
								Destroy();
							}
							else
							{
								if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- SpawnOtherWeapon [has Chainsaw]");
								invoker.A_SpawnOtherWeapon(0);
							}
						}
						else
						{
							if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- ChainsawMarine [hasn't]");
							if (!playera.CountInv("Translocator"))
							{
								if (random(1,4) <= 1)
								{
									if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- Translocator [hasn't Chainsaw]");
									droptype = "Translocator";
									[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
									if (mo) { mo.bDROPPED = bDROPPED; }
									Destroy();
								}
								else
								if (random(1,8) <= 1)
								{
									if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- SpawnOtherWeapon [hasn't Chainsaw]");
									invoker.A_SpawnOtherWeapon(0);
								}
								else
								{
									if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- SpawnOtherWeapon: ChainsawMarine [1]");
									droptype = "ChainsawMarine";
									[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
									if (mo) { mo.bDROPPED = bDROPPED; }
									Destroy();
								}
							}
							else
							if (random(1,8) <= 1)
							{
								if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- SpawnOtherWeapon [hasn't Chainsaw (2)]");
								invoker.A_SpawnOtherWeapon(0);
							}
							else
							{
								if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- SpawnOtherWeapon: ChainsawMarine [2]");
								droptype = "ChainsawMarine";
								[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
								if (mo) { mo.bDROPPED = bDROPPED; }
								Destroy();
							}
						}
					}
					else
					if (A_CheckForHeiwa())
					{
						if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- Not Dropped - HeiwaPlayer");
						invoker.A_SpawnOtherWeapon(1);
					}
				}
				else
				{
					if (kcdebug_weaponspawners) Console.Printf("\c[fire][ChainsawSpawner]\c- ChainsawMarine [2]");
					droptype = "ChainsawMarine";
					[spawned, mo] = A_SpawnItemEx(droptype,flags:SXF_NOCHECKPOSITION,tid:tid);
					if (mo) { mo.bDROPPED = bDROPPED; }
					Destroy();
				}
			}
			stop;
	}
}

class ChainsawMarine : MarineWeapon // replaces Chainsaw
{
	Default
	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/sawup";
		Weapon.ReadySound "weapons/sawidle";
		Inventory.PickupMessage "Picked up a \caChainsaw\c-! Find some meat! \cx[Slot 1]\c-";
		Obituary "$OB_MPCHAINSAW";
		Tag "$TAG_CHAINSAW";
		+WEAPON.MELEEWEAPON		
		+WEAPON.NOAUTOSWITCHTO
		Inventory.RestrictedTo "KCPlayer";
	}
	
	States
	{
		Ready:
			SAWG AB 4 A_WeaponReady; // SAWG CD 4 A_WeaponReady;
			Loop;
		Deselect:
			SAWG A 1 A_Lower(12); // SAWG C 1 A_Lower(12);
			TNT1 A 0 A_StopSound(5);
			Loop;
		Select:
			SAWG A 1 A_Raise(12); // SAWG C 1 A_Raise(12);
			Loop;
		/*
		Fire:
			SAWG AB 4 A_Saw(pufftype:"ChainsawPuff");
			SAWG B 0 A_ReFire;
			Goto Ready;
		*/
		Fire:
			SAWG CD 1;
		Hold:
			SAWG E 2;
			SAWG F 2 
			{
				A_Saw(damage:A_GetChainsawDamage(1),pufftype:"ChainsawPlayerPuff");
			}
			SAWG E 2;
			SAWG F 2
			{
				A_Saw(damage:A_GetChainsawDamage(1),pufftype:"ChainsawPlayerPuff");
			}
			TNT1 A 0 A_ReFire;
			TNT1 A 0 A_StopSound(5);
			SAWG FEDC 1 A_WeaponReady();
			Goto Ready;
		
		Spawn:
			CSAW A -1;
			stop;
	}
}

class PistolSpawner : WeaponSpawner replaces Pistol
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "PistolMarine";
		string droptypebase = "PistolMarine";
		string droptypespecial = "PistolMarine";
		string droptypeammo = "ClipNew";
		string droptypeammobig = "ClipBoxNew";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 2;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 2;
		}
		if (A_CheckForHeiwa())
		{
			if (random(1,8) <= 1) 
			{
				droptypespecial = "BlasterPickup";
				droptypeammo = "CellNew";
				droptypeammobig = "CellPackNew";
			}
			else 
			{
				droptypespecial = "Glock21";
				droptypeammo = "ClipNew";
				droptypeammobig = "ClipBoxNew";
			}
		}
		else
		{
			droptypespecial = "Glock21";
			droptypeammo = "ClipNew";
			droptypeammobig = "ClipBoxNew";
		}
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				if (random(1,5) <= 1) dropammo = true;
												 else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
		
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		
		Destroy();
	}
	
	States
	{
		Spawn:
			2PIS E 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}
class PistolMarine : MarineWeapon //replaces Pistol
{
	Default
	{
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Obituary "$OB_MPPISTOL";
		+WEAPON.WIMPY_WEAPON
		Inventory.PickupMessage "Picked up a \cupistol\c-! \cx[Slot 2]\c-";
		Tag "$TAG_PISTOL";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	States
	{
		Spawn:
			2PIS E 0 NoDelay
			{
			}
		Idle:
			2PIS E -1;
			Loop;
		Ready:
			2PIS A 1 A_WeaponReady();
			Loop;
		Deselect:
			2PIS D 1 A_Lower(12);
			Loop;
		Select:
			2PIS F 1 A_Raise(12);
			Loop;
		Fire:
			2PIS A 1;
			2PIS B 4 bright A_FirePistol(0);
			2PIS C 4;
			2PIS F 4;
			2PIS D 4 A_ReFire();
			Goto Ready;
		AltFire:
			2PIS A 1
			{
				A_SetTics(randompick(0,0,0,1,1));
			}
			2PIS B 4 bright
			{
				A_FirePistol(1);
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS C 4
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS F 4
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			2PIS D 4 
			{
				A_SetTics(randompick(1,1,2,2,2));
			}
			Goto Ready;
	}
}

class ShotgunSpawner : WeaponSpawner replaces Shotgun
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "ShotgunMarine";
		string droptypebase = "ShotgunMarine";
		string droptypespecial = "ShotgunMarine";
		string droptypeammo = "ShellNew";
		string droptypeammobig = "ShellNew";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 2;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 2;
		}
		if (A_CheckForHeiwa()) 
		{
			if (random(1,16) <= 1)
			{
				droptypespecial = "RiotGun";
				droptypeammo = "ShellNew";
				droptypeammobig = "ShellBoxNew";
			}
			else
			{
				droptypespecial = "ImpalerXBow";
				droptypeammo = "ImpalerBolts";
				droptypeammobig = "ImpalerBoltsBig";
			}
		}
		else
		{
			droptypespecial = "ImpalerXBow";
			droptypeammo = "ImpalerBolts";
			droptypeammobig = "ImpalerBoltsBig";
		}
		if (random(1,16) <= 1) droptypebase = "SuperShotgunMarine";
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				if (random(1,5) <= 1) dropammo = true;
												 else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			SHOT A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class ShotgunMarine : MarineWeapon //replaces Shotgun
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Weapon.AmmoType1 "Shell";
		Weapon.AmmoType2 "Shell";
		Inventory.PickupMessage "Picked up a \cushotgun\c-! \cx[Slot 3]\c-";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	States
	{
		Ready:
			SHTC A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHTC A 1 A_Lower(12);
			Loop;
		Select:
			SHTC A 1 A_Raise(12);
			Loop;
		Fire:
			/*
			SHTG A 3;
			SHTG A 7 A_FireShotgun(0);
			SHTG BC 5;
			SHTG D 4;
			SHTG CB 5;
			SHTG A 3;
			*/
			SHTF A 2 BRIGHT;
			SHTF B 2 BRIGHT;
			SHTC B 1 A_FireShotgun(0);
			SHTC C 1;
			SHTC D 1;
			SHTC A 1;
			SHTC E 1;
			SHTC G 1;
			SHTC I 1;
			SHTC K 2;
			SHTC M 2;
			SHTC O 2;
			SHTC Q 3;
			SHTC R 2;
			SHTC QPONMLKJIHGFE 1;
			SHTC A 7 A_ReFire;
			Goto Ready;
		AltFire:
			/*
			SHTG A 3
			{
				A_SetTics(random(1,2));
			}
			SHTG A 7
			{
				A_SetTics(random(3,4));
				A_FireShotgun(1);
			}
			SHTG BC 5
			{
				A_SetTics(random(2,3));
			}
			SHTG D 4
			{
				A_SetTics(2);
			}
			SHTG CB 5
			{
				A_SetTics(random(2,3));
			}
			SHTG A 3
			{
				A_SetTics(random(1,2));
			}
			*/
			SHTF A 2 BRIGHT 
			{
				A_SetTics(1);
			}
			SHTF B 2 BRIGHT
			{
				A_SetTics(1);
			}
			SHTC B 1 A_FireShotgun(1);
			SHTC C 1
			{
				A_SetTics(0);
			}
			SHTC D 1;
			SHTC A 1
			{
				A_SetTics(0);
			}
			SHTC E 1;
			SHTC G 1
			{
				A_SetTics(0);
			}
			SHTC I 1;
			SHTC KMO 2
			{
				A_SetTics(1);
			}
			SHTC Q 3
			{
				A_SetTics(random(1,2));
			}
			SHTC R 2
			{
				A_SetTics(1);
			}
			SHTC Q 1;
			SHTC P 1
			{
				A_SetTics(0);
			}
			SHTC O 1;
			SHTC N 1
			{
				A_SetTics(0);
			}
			SHTC M 1;
			SHTC L 1
			{
				A_SetTics(0);
			}
			SHTC K 1;
			SHTC J 1
			{
				A_SetTics(0);
			}
			SHTC I 1;
			SHTC H 1
			{
				A_SetTics(0);
			}
			SHTC G 1;
			SHTC F 1
			{
				A_SetTics(0);
			}
			SHTC E 1;
			SHTC A 7
			{
				A_SetTics(random(3,4));
				A_ReFire();
			}
			Goto Ready;
		Flash:
			SHTF A 4 Bright A_Light1;
			SHTF B 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
		Idle:
			SHOT A -1;
			Stop;
	}
}

class SuperShotgunSpawner : WeaponSpawner replaces SuperShotgun
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "SuperShotgunMarine";
		string droptypebase = "SuperShotgunMarine";
		string droptypespecial = "SuperShotgunMarine";
		string droptypeammo = "ShellNew";
		string droptypeammobig = "ShellNew";
		int dropchancemax = 7;
		int dropchance = randompick(4,4,5);
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 2;
		}
		else
		{
			dropchancemax = 7;
			dropchance = randompick(4,4,5);
		}
		if (A_CheckForHeiwa()) 
		{
			if (random(1,8) <= 1)
			{
				droptypespecial = "RiotGun";
				droptypeammo = "ShellNew";
				droptypeammobig = "ShellBoxNew";
			}
			else
			{
				droptypespecial = "ImpalerXBow";
				droptypeammo = "ImpalerBolts";
				droptypeammobig = "ImpalerBoltsBig";
			}
		}
		else
		{
			droptypespecial = "ImpalerXBow";
			droptypeammo = "ImpalerBolts";
			droptypeammobig = "ImpalerBoltsBig";
		}
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				if (random(1,5) <= 1) dropammo = true;
												 else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			SGN2 A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class SuperShotgunMarine : MarineWeapon //replaces SuperShotgun
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 2;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Weapon.AmmoType1 "Shell";
		Weapon.AmmoType2 "Shell";
		Inventory.PickupMessage "Picked up a \cusuper shotgun\c-! \cx[Slot 3]\c-";
		Obituary "$OB_MPSSHOTGUN";
		Tag "$TAG_SUPERSHOTGUN";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	States
	{
		Ready:
			SHT4 A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHT4 A 1 A_Lower(12);
			Loop;
		Select:
			SHT4 A 1 A_Raise(12);
			Loop;
		Fire:
			/*
			SHT2 A 3;
			SHT2 A 7 
			{
				A_FireShotgun2(0);
			}
			SHT2 B 7;
			SHT2 C 7 A_CheckReload();
			SHT2 D 7 A_OpenShotgun2;
			SHT2 E 7;
			SHT2 F 7 A_LoadShotgun2;
			SHT2 G 6;
			SHT2 H 6 A_CloseShotgun2;
			SHT2 A 5 A_ReFire;
			*/
			SG4F A 2 BRIGHT;
			SG4F B 2 BRIGHT A_FireShotgun2(0);
			SHT4 B 1;
			SHT4 C 1;
			SHT4 D 1;
			SHT4 A 1;
			SHT4 A 1;
			SHT4 A 1;
			SHT4 A 1;
			SHT4 A 1;
			SHT4 A 2 A_CheckReload();
			SHT4 E 2;
			SHT4 F 2;
			SHT4 G 2;
			SHT4 H 2;
			SHT4 I 2;
			SHT4 J 2;
			SHT4 K 2;
			TNT1 A 0 A_OpenShotgun2();
			SHT4 L 2;
			SHT4 M 2;
			SHT4 N 2;
			SHT4 O 2;
			SHT4 P 2;
			SHT4 Q 1;
			SHT4 R 1;
			SHT4 S 1;
			SHT4 T 1 A_LoadShotgun2();
			SHT4 U 2;
			SHT4 V 2;
			SHT4 W 2;
			SHT4 X 2;
			SHT4 Y 2;
			SHT4 Z 2;
			SH4F A 1 A_StartSound("weapons/sshotc", CHAN_WEAPON);
			SH4F A 1;
			SH4F B 1;
			SHT4 A 1 A_WeaponReady();
			Goto Ready;
		// unused states
			SHT4 B 7;
			SHT4 A 3;
			Goto Deselect;
		AltFire:
			/*
			SHT2 A 3
			{
				A_SetTics(random(1,2));
			}
			SHT2 A 7 
			{
				A_SetTics(random(3,4));
				A_FireShotgun2(1);
			}
			SHT2 B 7
			{
				A_SetTics(random(3,4));
			}
			SHT2 C 7 
			{
				A_SetTics(random(3,4));
				A_CheckReload();
			}
			SHT2 D 7 
			{
				A_SetTics(random(3,4));
				A_OpenShotgun2();
			}
			SHT2 E 7
			{
				A_SetTics(random(3,4));
			}
			SHT2 F 7 
			{
				A_SetTics(random(3,4));
				A_LoadShotgun2();
			}
			SHT2 G 6
			{
				A_SetTics(3);
			}
			SHT2 H 6 
			{
				A_SetTics(3);
				A_CloseShotgun2();
			}
			SHT2 A 5 
			{
				A_SetTics(random(2,3));
				A_ReFire();
			}
			*/
			SG4F A 2 BRIGHT 
			{
				A_SetTics(1);
			}
			SG4F B 2 BRIGHT
			{
				A_SetTics(1);
				A_FireShotgun2(1);
			}
			SHT4 B 1;
			SHT4 C 1
			{
				A_SetTics(0);
			}
			SHT4 D 1;
			SHT4 A 1
			{
				A_SetTics(0);
			}
			SHT4 A 1;
			SHT4 A 1
			{
				A_SetTics(0);
			}
			SHT4 A 1;
			SHT4 A 1
			{
				A_SetTics(0);
			}
			SHT4 A 2 
			{
				A_SetTics(1);
				A_CheckReload();
			}
			SHT4 E 2
			{
				A_SetTics(1);
			}
			SHT4 F 2
			{
				A_SetTics(1);
			}
			SHT4 G 2
			{
				A_SetTics(1);
			}
			SHT4 H 2
			{
				A_SetTics(1);
			}
			SHT4 I 2
			{
				A_SetTics(1);
			}
			SHT4 J 2
			{
				A_SetTics(1);
			}
			SHT4 K 2
			{
				A_SetTics(1);
			}
			TNT1 A 0 A_OpenShotgun2();
			SHT4 L 2
			{
				A_SetTics(1);
			}
			SHT4 M 2
			{
				A_SetTics(1);
			}
			SHT4 N 2
			{
				A_SetTics(1);
			}
			SHT4 O 2
			{
				A_SetTics(1);
			}
			SHT4 P 2
			{
				A_SetTics(1);
			}
			SHT4 Q 1;
			SHT4 R 1
			{
				A_SetTics(0);
			}
			SHT4 S 1;
			SHT4 T 1
			{
				A_SetTics(0);
				A_LoadShotgun2();
			}
			SHT4 U 2
			{
				A_SetTics(1);
			}
			SHT4 V 2
			{
				A_SetTics(1);
			}
			SHT4 W 2
			{
				A_SetTics(1);
			}
			SHT4 X 2
			{
				A_SetTics(1);
			}
			SHT4 Y 2
			{
				A_SetTics(1);
			}
			SHT4 Z 2
			{
				A_SetTics(1);
			}
			SH4F A 1 
			{
				A_SetTics(0);
				A_StartSound("weapons/sshotc", CHAN_WEAPON);
			}
			SH4F A 1;
			SH4F B 1
			{
				A_SetTics(0);
			}
			SHT4 A 1 
			{
				A_WeaponReady();
			}
			Goto Ready;
		// unused states
			SHT4 B 7
			{
				A_SetTics(random(3,4));
			}
			SHT4 A 3
			{
				A_SetTics(random(1,2));
			}
			Goto Deselect;
		Flash:
			SHT2 I 4 Bright A_Light1;
			SHT2 J 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
		Idle:
			SGN2 A -1;
			Stop;
	}
}

class ChaingunSpawner : WeaponSpawner replaces Chaingun
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "ChaingunMarine";
		string droptypebase = "ChaingunMarine";
		string droptypespecial = "ChaingunMarine";
		string droptypeammo = "Clip";
		string droptypeammobig = "ClipBox";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 2;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 2;
		}
		if (A_CheckForHeiwa())
		{
			if (bDROPPED)
			{
				dropchancemax = 35;
				dropchance = 4;
			}
			else
			{
				dropchancemax = 7;
				dropchance = 4;
			}
			if (random(1,8) <= 1) 
			{
				droptypespecial = "BlasterRifle";
				droptypeammo = "CellNew";
				droptypeammobig = "CellPackNew";
			}
			else 
			{
				droptypespecial = "TommyGun";
				droptypeammo = "TommAmmo";
				droptypeammobig = "TommAmmoBig";
			}
		}
		else
		{
			if (bDROPPED)
			{
				dropchancemax = 35;
				dropchance = 2;
			}
			else
			{
				dropchancemax = 7;
				dropchance = 2;
			}
			droptypespecial = "TommyGun";
			droptypeammo = "TommAmmo";
			droptypeammobig = "TommAmmoBig";
		}
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (tempdroptype == "TommyGun")
			{
				if (playera.CountInv(tempdroptype))
				{
					tempdroptype = "DualTommyGuns";
					if (playera.CountInv(tempdroptype))
					{
						if (random(1,5) <= 1) dropammo = true;
														 else dropweap = true;
					}
					else dropweap = true;
				}
				else dropweap = true;
			}
			else
			{
				if (playera.CountInv(tempdroptype))
				{
					if (random(1,5) <= 1) dropammo = true;
													else dropweap = true;
				}
				else dropweap = true;
			}
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			MGUN A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class ChaingunMarine : MarineWeapon //replaces Chaingun
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Inventory.PickupMessage "Picked up a \cuchaingun\c-! \cx[Slot 4]\c-";
		Obituary "$OB_MPCHAINGUN";
		Tag "$TAG_CHAINGUN";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	action void A_MinigunTracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		A_StartSound("weapons/minigunfire", CHAN_WEAPON);
		A_StartSound("weapons/minigunfire", CHAN_WEAPON);
		A_TakeInventory("Clip",2);
		for (int i = 0; i < 2; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = !player.refire ? 0.0 : (shotpitch * 0.5);
			double randangle = !player.refire ? 0.0 : (shotangle * 0.5);
			if (type > 0)
			{
				randpitch = (shotpitch * 0.625);
				randangle = (shotangle * 0.625);
			}
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (5 * random(1,3)), 'Bullet', 0.0);
		}
	}

	action void A_ShootMinigun(int type)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 3.55;
		double shotangle = 7.1;

		if (A_CheckTracerConditions())
		{
			A_MinigunTracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else
		{
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_StartSound("weapons/minigunfire", CHAN_WEAPON);
			A_FireBullets(frandom(-shotangle,shotangle), frandom(-shotpitch,shotpitch), 1, (5*random(1,3)), "KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
			A_FireBullets(frandom(-shotangle,shotangle), frandom(-shotpitch,shotpitch), 1, (5*random(1,3)), "KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ);
		}
	}
	
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady();
			Loop;
		Deselect:
			CHGG A 1 A_Lower(12);
			Loop;
		Select:
			CHGG A 1 A_Raise(12);
			Loop;
		Fire:
			CHGF A 1 bright A_FireCGun(0);
			CHGG EFG 1;
			CHGF B 1 bright A_FireCGun(0);
			CHGG EFG 1;
			TNT1 A 0 A_ReFire();
			CHGG HIBBCCDD 1 A_WeaponReady();
			CHGG AAABBBCCCDDD 1 A_WeaponReady();
			CHGG AAAABBBBCCCCDDDD 1 A_WeaponReady();
			Goto Ready;
		AltFire:
			CHGF A 1 bright A_ShootMinigun(0);
			CHGG F 1;
			CHGF B 1 bright A_ShootMinigun(0);
			CHGG G 1;
			TNT1 A 0 A_ReFire();
			CHGG HBCD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AABBCCDD 1 A_WeaponReady();
			CHGG AAABBBCCCDDD 1 A_WeaponReady();
			CHGG AAAABBBBCCCCDDDD 1 A_WeaponReady();
			Goto Ready;
		Spawn:
		Idle:
			MGUN A -1;
			Stop;
	}
}

class RocketLauncherSpawner : WeaponSpawner replaces RocketLauncher
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "RocketLauncherMarine";
		string droptypebase = "RocketLauncherMarine";
		string droptypespecial = "RocketLauncherMarine";
		string droptypeammo = "RocketAmmoNew";
		string droptypeammobig = "RocketBoxNew";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 4;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 4;
		}
		if (A_CheckForHeiwa())
		{
			if (random(1,8) <= 1) 
			{
				droptypespecial = "Deviation";
				droptypeammo = "RocketAmmoNew";
				droptypeammobig = "RocketBoxNew";
			}
			else 
			{
				droptypespecial = "Devastator";
				droptypeammo = "MiniRockets";
				droptypeammobig = "MiniRocketBox";
			}
		}
		else
		{
			droptypespecial = "Devastator";
			droptypeammo = "MiniRockets";
			droptypeammobig = "MiniRocketBox";
		}
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				tempdroptype = "DualDevastators";
				if (playera.CountInv(tempdroptype))
				{
					if (random(1,5) <= 1) dropammo = true;
													 else dropweap = true;
				}
				else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			LAUN A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class RocketLauncherMarine : MarineWeapon //replaces RocketLauncher
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RocketAmmo";
		Weapon.AmmoType1 "RocketAmmo";
		Weapon.AmmoType2 "RocketAmmo";
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOALERT;
		Inventory.PickupMessage "Picked up a \carocket launcher\c-! \cx[Slot 5]\c-";
		Tag "$TAG_ROCKETLAUNCHER";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	action void A_Howitizer(int type)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double angoffset = 0;
		double ptcoffset = 0;
		double baserecoil = frandom(7.5,8.5);
		A_StartSound("howitzer/shot",CHAN_7);
		invoker.A_KCAlertMonsters();
		A_Recoil(baserecoil);
		A_Quake((2.0 - (CountInv("PlayerATK") / 24)), 8, 0, 1024, "nosound/silent");
		A_Quake((4.0 - (CountInv("PlayerATK") / 36)), 8, 0, 512, "nosound/silent");
		A_Quake((6.0 - (CountInv("PlayerATK") / 48)), 8, 0, 256, "nosound/silent");
		if (type <= 0)
		{
			A_FireBullets(angoffset, ptcoffset, 1, (40*random(1,8)), "HowitzerBase", FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ,32768);
		}
		if (type >= 1)
		{
			A_TakeInventory("RocketAmmo",1);
			for (int i = 0; i < 1; i++)
			{
				actor BombShotsB, BombShots;
				double origang = playera.angle;
				double randpitch = ptcoffset;
				double randangle = angoffset;
				[BombShotsB, BombShots] = A_FireProjectile("KCHowitzerTracer",frandom(-randangle,randangle),false,0,A_GetShotHeightTracer(36),FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				A_SetBulletTracerDmg(BombShotsB, BombShots, (40 * random(1,8)), 'Explosive', 0.0);
			}
		}
	}
	
	action void A_FireMissileAng(int type = 0)
	{
		if (type == 0)
		{
			if (CountInv("RLMode") == 3)
			{
				A_SetTics(8);
				
				actor playera = players[0].mo;
				if (A_CheckTracerConditions())
				{
					A_Howitizer(1);
				}
				else
				{
					A_Howitizer(0);
				}
			}
			else
			{
				double angoffset = 0.0;
				double ptcoffset = 0.0;
				double ofsxyset = 0.0;
				double heightoffset = 0.0;
				string firetype = "RocketPlayer";
				if (CountInv("RLMode") == 1) 
				{
					firetype = "STGrenade";
					if (random(1,4) <= 3) invoker.A_KCAlertMonsters();
				}
				if (CountInv("RLMode") == 2) firetype = "RocketPlayerSeeking";
				A_FireProjectile(firetype,angoffset,true,ofsxyset,heightoffset,FPF_NOAUTOAIM,ptcoffset);
			}
		}
		else
		{
			if (CountInv("RLMode") == 3)
			{
				A_SetTics(4);
				double angoffset = frandom(-15,15);
				double ptcoffset = frandom(-15,15);
				double baserecoil = frandom(7.5,8.5);
				A_StartSound("howitzer/shot",CHAN_7);
				invoker.A_KCAlertMonsters();
				A_Recoil(baserecoil);
				A_Quake((2.0 - (CountInv("PlayerATK") / 24)), 8, 0, 1024, "nosound/silent");
				A_Quake((4.0 - (CountInv("PlayerATK") / 36)), 8, 0, 512, "nosound/silent");
				A_Quake((6.0 - (CountInv("PlayerATK") / 48)), 8, 0, 256, "nosound/silent");
				
				actor playera = players[0].mo;
				if (playera.CountInv("KCTimeFreezer") ||
						playera.CountInv("KCTimeFreezer1") ||
						playera.CountInv("KCTimeFreezer2") ||
						playera.CountInv("KCTimeFreezer3"))
				{
					A_TakeInventory("RocketAmmo",1);
					for (int i = 0; i < 1; i++)
					{
						actor BombShotsB, BombShots;
						KCPlayerPawn KCP;
						KCP = KCPlayerPawn(playera);
						double origang = playera.angle;
						double randpitch = ptcoffset;
						double randangle = angoffset;
						[BombShotsB, BombShots] = A_FireProjectile("KCHowitzerTracer",frandom(-randangle,randangle),false,0,A_GetShotHeightTracer(36),FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
						A_SetBulletTracerDmg(BombShotsB, BombShots, (40 * random(1,8)), 'Explosive', 0.0);
					}
				}
				else
				{
					A_FireBullets(angoffset, ptcoffset, 1, (40*random(1,8)), "HowitzerBase", FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ,32768);
				}
			}
			else
			{
				double angoffset = frandom(-3.75,3.75);
				double ptcoffset = frandom(-3.75,3.75);
				double ofsxyset = 0.0;
				double heightoffset = 0.0;
				string firetype = "RocketPlayer";
				if (CountInv("RLMode") == 1) 
				{
					firetype = "STGrenade";
					if (random(1,4) <= 3) invoker.A_KCAlertMonsters();
				}
				if (CountInv("RLMode") == 2) firetype = "RocketPlayerDrunk";
				A_FireProjectile(firetype,angoffset,true,ofsxyset,heightoffset,FPF_NOAUTOAIM,ptcoffset);
			}
		}
	}
	
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			MISG A 1 A_Lower(12);
			Loop;
		Select:
			MISG A 1 A_Raise(12);
			Loop;
		Fire:
			/*
			MISG B 4 
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
				A_GunFlash();
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 4 
			{
				A_FireMissileAng(0);
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3) A_SetTics(8);
			}
			MISG B 0 A_ReFire;
			*/
			MISG A 2 BRIGHT
			{
				if (CountInv("RLMode") == 3) A_SetTics(4);
			}
			MISG B 1 BRIGHT
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG C 1 BRIGHT
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG D 1
			{
				A_FireMissileAng(0);
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG E 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG F 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG F 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG G 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG H 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG A 1 
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG A 9
			{
				if (CountInv("RLMode") == 3) A_SetTics(18);
			}
			MISG A 0 A_Refire();
			Goto Ready;
		AltFire:
			/*
			MISG B 3 
			{
				if (CountInv("RLMode") == 3) A_SetTics(6);
				A_GunFlash("AltFlash");
			}
			MISG B 2 
			{
				A_FireMissileAng(1);
			}
			MISG B 1
			{
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG B 0 A_ReFire;
			*/
			MISG A 2 BRIGHT
			{
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(2);
			}
			MISG B 1 BRIGHT
			{
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG C 1 BRIGHT
			{
				A_SetTics(0);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG D 1
			{
				A_FireMissileAng(1);
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG E 1
			{
				A_SetTics(0);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG F 1
			{
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG G 1
			{
				A_SetTics(0);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG H 1
			{
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG A 1
			{
				A_SetTics(0);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG A 1
			{
				A_SetTics(1);
				if (CountInv("RLMode") == 3) A_SetTics(1);
			}
			MISG A 0 A_Refire();
			Goto Ready;

		// Fire Mode
		User4:
			MISG A 0
			{
				if (CountInv("RLMode") == 0)
				{
					A_SetInventory("RLMode",1);
					A_Print("Using Grenades");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 1)
				{
					A_SetInventory("RLMode",2);
					A_Print("Using Homing Rockets");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 2)
				{
					A_SetInventory("RLMode",3);
					A_Print("Using Howitzer");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 3)
				{
					A_SetInventory("RLMode",0);
					A_Print("Using Rockets");
					A_StartSound("GetRockets",0);
				}
			}
			MISG A 8;
			goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		AltFlash:
			MISF A 1 Bright A_Light1();
			MISF B 2 Bright;
			MISF CD 2 Bright A_Light2();
			Goto LightDone;
		Spawn:
		Idle:
			LAUN A -1;
			Stop;
	}
}

class PlasmaRifleSpawner : WeaponSpawner replaces PlasmaRifle
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "PlasmaRifleMarine";
		string droptypebase = "PlasmaRifleMarine";
		string droptypespecial = "PlasmaRifleMarine";
		string droptypeammo = "CellNew";
		string droptypeammobig = "CellPackNew";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 4;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 4;
		}
		if (A_CheckForHeiwa())
		{
			if (bDROPPED)
			{
				dropchancemax = 40;
				dropchance = random(3,5);
			}
			else
			{
				dropchancemax = 10;
				dropchance = random(3,5);
			}
			droptypespecial = "TeslaCannon";
			droptypeammo = "Bolts";
			droptypeammobig = "BoltsLarge";
		}
		else
		{
			if (bDROPPED)
			{
				dropchancemax = 80;
				dropchance = 1;
			}
			else
			{
				dropchancemax = 16;
				dropchance = 1;
			}
			droptypespecial = "TeslaCannon";
			droptypeammo = "Bolts";
			droptypeammobig = "BoltsLarge";
		}
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				tempdroptype = "DualTeslaCannons";
				if (playera.CountInv(tempdroptype))
				{
					if (random(1,5) <= 1) dropammo = true;
													 else dropweap = true;
				}
				else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			PLAS A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class PlasmaRifleMarine : MarineWeapon //replaces PlasmaRifle
{
	int cooldownmeter;
	int burstamt;
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Tag "$TAG_PLASMARIFLE";
		Inventory.PickupMessage "Picked up a \cvplasma rifle\c-! \cx[Slot 6]\c-";
		Inventory.RestrictedTo "KCPlayer";
	}
	States
	{
		Ready:
			PLSG A 1
			{
				A_WeaponReady();
				invoker.cooldownmeter = 0;
			}
			Loop;
		Deselect:
			PLSG A 1 
			{
				A_Lower(12);
				invoker.cooldownmeter = 0;
			}
			Loop;
		Select:
			PLSG A 1 
			{
				A_Raise(12);
				invoker.cooldownmeter = 0;
			}
			Loop;
		Fire:
			PLSG B 1 BRIGHT 
			{
				A_FireProjectile("PlasmaBallNew",0.0,true,0,0,FPF_NOAUTOAIM,0.0);
				if (random(1,256) <= randompick(236,240,244)) invoker.cooldownmeter++;
			}
			PLSG CA 1;
			PLSG A 1 
			{
				if (invoker.cooldownmeter >= kc_plasmacooldownlimit) return resolvestate("Cooldown");
																		 else A_ReFire();
				return resolvestate(null);
			}
			goto CoolDown;
		AltFire:
			PLSG B 0
			{
				if (CountInv("Cell") >= 2 || 
						A_CheckInfiniteAmmo())
				{
					invoker.burstamt = 3 * randompick(1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,5);
					int shotcost = (invoker.burstamt * 2 / 3);
					if (!A_CheckInfiniteAmmo())
					{
						if (CountInv("Cell") < shotcost) 
						{
							if (CountInv("Cell") < 2)
							{
								if (invoker.cooldownmeter >= 0) return resolvestate("Cooldown");
								return resolvestate("Ready");
							}
							else A_TakeInventory("Cell",shotcost);
							return resolvestate(null);
						}
						else A_TakeInventory("Cell",shotcost);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				else 
				{
					if (invoker.cooldownmeter >= 0) return resolvestate("Cooldown");
					return resolvestate("Ready");
				}
				
				return resolvestate(null);
			}
			PLSG B 1 BRIGHT 
			{
				double spread = (1.5 * (invoker.burstamt / 3));
				for (int i; i < invoker.burstamt; i++)
				{
					A_FireProjectile("AltPlasmaBall",frandom(-spread,spread),false,0,0,FPF_NOAUTOAIM,frandom(-spread,spread));
				}
				if (random(1,256) <= randompick(236,240,244)) invoker.cooldownmeter += invoker.burstamt;
			}
			PLSG CA 1;
			PLSG A 1 
			{
				if (invoker.cooldownmeter >= kc_plasmacooldownlimit) return resolvestate("Cooldown");
																		else A_ReFire();
				return resolvestate(null);
			}
			goto CoolDown;
		Cooldown:
			PLSG D 0
			{
				if (invoker.cooldownmeter < (kc_plasmacooldownlimit * 0.015625)) return resolvestate("Ready");
				return resolvestate(null);
			}
			PLSG D 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
			}
			PLSG E 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG F 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
			}
			PLSG G 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG H 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
			}
			PLSG I 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG IIII 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.015625)) A_SetTics(randompick(0,0,0,1));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.03125)) A_SetTics(randompick(0,1));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(random(1,2));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(random(2,3));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(random(3,4));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(random(4,5));
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1.0)) A_SetTics(5);
			}
			PLSG I 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG H 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
			}
			PLSG G 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG F 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
			}
			PLSG E 1
			{
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.25)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.5)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.75)) A_SetTics(4);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 1)) A_SetTics(5);
			}
			PLSG D 1
			{
				A_SetTics(0);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.125)) A_SetTics(1);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.375)) A_SetTics(2);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.625)) A_SetTics(3);
				if (invoker.cooldownmeter >= (kc_plasmacooldownlimit * 0.875)) A_SetTics(4);
				invoker.cooldownmeter = 0;
			}
			Goto Ready;
		Spawn:
		Idle:
			PLAS A -1;
			Stop;
	}
}

class BFG9000Spawner : WeaponSpawner replaces BFG9000
{
	void A_SpawnOtherWeapon(int type)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool spawned;
		actor mo;
		string droptype = "BFG9000Marine";
		string droptypebase = "BFG9000Marine";
		string droptypespecial = "BFG9000Marine";
		string droptypeammo = "CellNew";
		string droptypeammobig = "CellPackNew";
		int dropchancemax = 7;
		int dropchance = 2;
		if (bDROPPED)
		{
			dropchancemax = 35;
			dropchance = 4;
		}
		else
		{
			dropchancemax = 7;
			dropchance = 4;
		}
		if (A_CheckForHeiwa())
		{
			droptypespecial = "BHGen";
			droptypeammo = "CellNew";
			droptypeammobig = "CellPackNew";
			if (bDROPPED)
			{
				dropchancemax = 40;
				dropchance = random(3,5);
			}
			else
			{
				dropchancemax = 10;
				dropchance = random(3,5);
			}
		}
		else
		{
			droptypespecial = "BHGen";
			droptypeammo = "CellNew";
			droptypeammobig = "CellPackNew";
			if (bDROPPED)
			{
				dropchancemax = 80;
				dropchance = 1;
			}
			else
			{
				dropchancemax = 16;
				dropchance = 1;
			}
		}
		
		
		bool dropammo = false;
		bool dropweap = false;
		if (random(1,dropchancemax) <= dropchance)
		{
			string tempdroptype = droptypespecial;
			if (playera.CountInv(tempdroptype))
			{
				if (random(1,5) <= 1) dropammo = true;
												 else dropweap = true;
			}
			else dropweap = true;
		}
		else
		{
			if (random(1,5) <= 1) dropammo = true;
		}
				 if (dropweap) A_WeaponSpawn(droptypespecial);
		else if (dropammo) A_AmmoSpawn(droptype, droptypeammo, droptypeammobig);
									else A_WeaponSpawn(droptypebase);
		Destroy();
	}
	
	States
	{
		Spawn:
			BFUG A 0 NoDelay
			{
				invoker.A_SpawnOtherWeapon(0);
			}
			stop;
	}
}

class BFG9000Marine : MarineWeapon //replaces BFG9000
{
	Default
	{
		Height 20;
		Weapon.SelectionOrder 2800;
		Weapon.AmmoUse1 40;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		+WEAPON.NOAUTOFIRE;
		Inventory.PickupMessage "Picked up a \cvBFG9000\c-! \cx[Slot 7]\c-";
		Tag "$TAG_BFG9000";
		Inventory.RestrictedTo "KCPlayer";
	}
	
	States
	{
		Ready:
			BFGG A 1 A_WeaponReady;
			Loop;
		Deselect:
			BFGG A 1 A_Lower(12);
			Loop;
		Select:
			BFGG A 1 A_Raise(12);
			Loop;
		Fire:
			BFGG A 20 A_BFGsound;
			BFGG B 10 A_GunFlash;
			BFGG B 10 A_FireBFG;
			BFGG B 20 A_ReFire;
			Goto Ready;
		Flash:
			BFGF A 11 Bright A_Light1;
			BFGF B 6 Bright A_Light2;
			Goto LightDone;
		AltFire:
			BFGG A 10 A_BFGsound;
			BFGG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
			BFGG B 0 A_Light0;
			BFGG B 20 A_ReFire;
			Goto Ready;
		Spawn:
		Idle:
			BFUG A -1;
			Stop;
	}
}

// Glock
class Glock21 : MarineWeapon
{
	int ammomode;
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \cuGlock 21\c-! \cx[Slot 2]\c-";
		
		Obituary "%o was capped by %k's Glock.";
		Weapon.AmmoType1 "Clip";
		Weapon.AmmoType2 "Clip";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.SlotNumber 2;
		Weapon.Kickback 75;
		Weapon.UpSound "weapons/glockup";
		KCWeaponBase.DamageIgnoreFactor1 0.334;
		KCWeaponBase.DamageIgnoreFactor2 0.667;
		KCWeaponBase.DamageIgnoreFactor3 0.667;
		KCWeaponBase.DamageIgnoreFactor4 1.000;
		//AttackSound "weapons/glockfire";
		Scale 0.5;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_GlockAtk(int type = 0)
	{
		int randdmg = ((randompick(3,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,7) - 1) * random(1,3)); // Penetration Rounds
		actor playera = players[0].mo;
		string shottype = "KCGlockTracer";
		double origang = playera.angle;
		double randpitch = !player.refire ? 0.0 : (3.0 * 0.5);
		double randangle = !player.refire ? 0.0 : (2.0 * 0.5);
		if (type >= 1)
		{
			randpitch = !player.refire ? (3.0 * 0.5) : (6.75 * 0.5);
			randangle = !player.refire ? (2.0 * 0.5) : (4.5 * 0.5);
		}
		double defignore1 = invoker.DmgIgnoreFctr1;
		double defignore2 = invoker.DmgIgnoreFctr2;
		if (invoker.ammomode == 1) 
		{
			randdmg = (randompick(4,5,5,5,5,5,6) * (random(1,3) + randompick(0,0,0,1,1,1,1,1,1,2,2,2))); // Non-Penetration Rounds
			shottype = "KCBulletTracer";
			defignore1 = invoker.DmgIgnoreFctr3;
			defignore2 = invoker.DmgIgnoreFctr4;
			randpitch = !player.refire ? 0.0 : (1.2 * 0.5);
			randangle = !player.refire ? 0.0 : (0.4 * 0.5);
			if (type >= 1)
			{
				randpitch = !player.refire ? (1.2 * 0.5) : (2.7 * 0.5);
				randangle = !player.refire ? (0.4 * 0.5) : (1.0 * 0.5);
			}
		}
		if (kcdebug_attackfuncinfo) Console.Printf("ammomode: %d, shottype: %s, randdmg: %d, randpitch: %.4f, randangle: %.4f, defignore1: %.4f, defignore2: %.4f", invoker.ammomode, shottype, randdmg, randpitch, randangle, defignore1, defignore2);
		A_StartSound ("weapons/glockfire", CHAN_WEAPON);
		
		if (A_CheckTracerConditions())
		{
			A_TakeInventory("Clip",1);
			for (int i = 0; i < 1; i++)
			{
				actor BombShotsB, BombShots;
				KCPlayerPawn KCP;
				KCP = KCPlayerPawn(playera);
				[BombShotsB, BombShots] = A_FireProjectile(shottype,frandom(-randangle,randangle),false,0,A_GetShotHeightTracer(36),FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
				if (BombShots)
				{
					KCGlockTracer GLK;
					GLK = KCGlockTracer(BombShots);
					if (GLK && invoker.ammomode == 0)
					{
						//GLK.bNOCLIP = true;
						//GLK.fuse = random(-5,5);
					}
				}
				A_SetBulletTracerRipperDmg(BombShotsB, BombShots, (randdmg), 'Bullet', frandom(defignore1,defignore2));
			}
		}
		else
		{
			A_FireBullets(2,3,1,(randdmg),"KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM, defenseignorefactor: frandom(defignore1,defignore2));
		}
	}
	
	States
	{
		// Fire Mode
		User4:
			LIBG A 0
			{
				A_StartSound("weapons/glockdry");
				if (invoker.ammomode == 0)
				{
					A_Print("Non-Penetration Rounds [>Base Damage & Def. Ignorance]");
					invoker.ammomode = 1;
				}
				else
				if (invoker.ammomode == 1)
				{
					A_Print("Penetration Rounds [<Base Damage & Def. Ignorance, Pierces Multiple Targets]");
					invoker.ammomode = 0;
				}
			}
			LIBG A 8;
			goto Ready;

		Ready:
			LIBG A 1 A_WeaponReady(WRF_ALLOWUSER4|WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			LIBG A 1 A_Lower(12);
			Loop;
		Select:
			LIBG A 1 A_Raise(12);
			Loop;
		Fire:
			LIBF A 0 A_GunFlash;
			LIBF A 0 A_GlockAtk(0);
			LIBF A 1 BRIGHT;
			LIBG DCBA 1;
			LIBG A 4;
			LIBF A 0 A_CheckforReload(12,"Ready");
			Goto DryFire;
		AltFire:
			LIBF A 0 A_GunFlash;
			LIBF A 0 A_GlockAtk(1);
			LIBF A 1 BRIGHT;
			LIBG D 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG C 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG B 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG A 1
			{
				A_SetTics(randompick(0,0,1,1,1));
			}
			LIBG A 4
			{
				A_SetTics(randompick(1,1,1,2,2));
			}
			LIBF A 0 A_CheckforReload(12,"Ready");
			Goto DryFire;
		DryFire:
			LIBG A 12 
			{
				A_StartSound("weapons/glockdry");
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 5) A_SetTics(9);
					if (TruePlayerLevel >= 10) A_SetTics(8);
					if (TruePlayerLevel >= 20) A_SetTics(7);
					if (TruePlayerLevel >= 25) A_SetTics(6);
					if (TruePlayerLevel >= 35) A_SetTics(5);
					if (TruePlayerLevel >= 40) A_SetTics(4);
					if (TruePlayerLevel >= 50) A_SetTics(3);
					if (TruePlayerLevel >= 55) A_SetTics(2);
					if (TruePlayerLevel >= 65) A_SetTics(1);
				}
				else
				{
					if (TruePlayerLevel >= 10) A_SetTics(9);
					if (TruePlayerLevel >= 30) A_SetTics(8);
					if (TruePlayerLevel >= 40) A_SetTics(7);
					if (TruePlayerLevel >= 50) A_SetTics(6);
					if (TruePlayerLevel >= 70) A_SetTics(5);
					if (TruePlayerLevel >= 80) A_SetTics(4);
					if (TruePlayerLevel >= 100) A_SetTics(3);
					if (TruePlayerLevel >= 110) A_SetTics(2);
					if (TruePlayerLevel >= 130) A_SetTics(1);
				}
			}
			Goto Reload+1;
		Reload:
			TNT1 A 0 A_CheckforReload(1,"Ready",true);
			LIBG A 1 
			{
				A_StartSound("weapons/glockout");
			}
			LIBM A 1
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 25) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 50) A_SetTics(0);
				}
			}
			LIBM B 1
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 35) A_SetTics(1);
				}
				else
				{
					if (TruePlayerLevel >= 70) A_SetTics(1);
				}
			}
			LIBR A 2
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 10) A_SetTics(1);
					if (TruePlayerLevel >= 35) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 20) A_SetTics(1);
					if (TruePlayerLevel >= 70) A_SetTics(0);
				}
			}
			LIBR B 2
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 5) A_SetTics(1);
					if (TruePlayerLevel >= 45) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 10) A_SetTics(1);
					if (TruePlayerLevel >= 90) A_SetTics(0);
				}
			}
			LIBR C 2
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 15) A_SetTics(1);
					if (TruePlayerLevel >= 50) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 30) A_SetTics(1);
					if (TruePlayerLevel >= 100) A_SetTics(0);
				}
			}
			LIBR D 2 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 20) A_SetTics(1);
				}
				else
				{
					if (TruePlayerLevel >= 40) A_SetTics(1);
				}
				A_StartSound("weapons/glockin");
				A_ResetReloadCounter();
			}
			LIBR E 1
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 45) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 90) A_SetTics(0);
				}
			}
			LIBR F 1
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 30) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 60) A_SetTics(0);
				}
			}
			LIBG A 3
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = A_GetMeleeSPDLvl(1);
				if (A_CheckForHeiwa())
				{
					if (TruePlayerLevel >= 10) A_SetTics(2);
					if (TruePlayerLevel >= 25) A_SetTics(1);
					if (TruePlayerLevel >= 40) A_SetTics(0);
				}
				else
				{
					if (TruePlayerLevel >= 20) A_SetTics(2);
					if (TruePlayerLevel >= 50) A_SetTics(1);
					if (TruePlayerLevel >= 80) A_SetTics(0);
				}
			}
			Goto Ready;
		Flash:
			TNT1 A 2 A_Light2;
			TNT1 A 1 A_Light1;
			TNT1 A 0 A_Light0;
			Stop;
		Spawn:
		Idle:
			LIBG X -1;
			Stop;
	}
}

class DualTommyGunPickup : CustomInventoryExt
{
	default
	{
		CustomInventoryExt.PickUpVoiceHeiwa2 true;
		CustomInventoryExt.PickupSoundHeiwa2 "Heiwa/GrabWeapon3";
		CustomInventoryExt.PickUpVoice false;
		Inventory.PickupSound "TOMPKP";
		Inventory.PickupMessage "Picked up an Extra \cuThompson Machine Gun\c-! \c[gold]Can Now Dual Wield!\c- \cx[Slot 4]\c-";
		+DONTGIB
		-COUNTITEM;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Scale 0.6;
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
		Idle:
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTommyGuns"))
				{
					A_SpawnItemEx("TommyGun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Destroy();
				}
			}
			Loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera) 
				{
					playera.A_GiveInventory("DualTommyGuns",1);
					playera.A_GiveInventory("TommAmmo",50);
				}
			}
			stop;
	}
}

// Tommy Gun
class TommyGun : MarineWeapon
{
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon3";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \cuThompson Machine Gun\c-! \cx[Slot 4]\c-";
		Weapon.AmmoType1 "TommAmmo";
		Weapon.AmmoType2 "TommAmmo";
		Weapon.AmmoGive 50;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.BobSpeed 0.334;
		Weapon.BobStyle "Smooth";
		Weapon.UpSound "weapons/tomup";
		Decal "Bulletchip";
		//Attacksound "DSTOMFR";
		Scale 0.6;
		Weapon.Kickback 150;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action bool A_DualTMGCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (CountInv("DualTommyGuns") && !CountInv("DualTommyGunsDisabled")) check = true;
		return check;
	}
	
	action void A_TommyTracer(actor playera, int type, double shotpitch, double shotangle, double shotheight, int randdmg)
	{
		int shotamt = 1;
		if (A_DualTMGCheck()) shotamt = 2;
		A_TakeInventory("TommAmmo",shotamt);
		A_StartSound ("DSTOMFR", CHAN_WEAPON);
		for (int i = 0; i < shotamt; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = shotpitch;
			double randangle = shotangle;
			[BombShotsB, BombShots] = A_FireProjectile("KCBulletTracer",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (randdmg), 'Bullet', frandom(0.05,0.1));
		}
	}
	
	action void A_TommyShot(int type, int handedness)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		
		int temp1 = randompick(3,3,3,3,3,3,4,4,4,4,5,5) * random(randompick(1,1,1,2,2,3),randompick(3,3,3,4,4,5));
		double barrageangoffset = 0.0;
		double offsetmulti = 1.0;
		double shotangle = 1.0;
		double shotpitch = 1.0;
		barrageangoffset = 0.0;
		if (type == 0)
		{
			shotangle = frandom(0.5,1.0);
			shotpitch = frandom(0.5,1.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = -0.5;
			if (invoker.tommybarrageno == 2) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 0.0;
			if (invoker.tommybarrageno >= 4) barrageangoffset = 0.5;
		}
		else
		{
			shotangle = frandom(3.0,6.0);
			shotpitch = frandom(3.0,6.0);
			if (invoker.tommybarrageno <= 1) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 2) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 3) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 4) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 5) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 6) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 7) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 8) barrageangoffset = 16.0;
			if (invoker.tommybarrageno == 9) barrageangoffset = 14.0;
			if (invoker.tommybarrageno == 10) barrageangoffset = 12.0;
			if (invoker.tommybarrageno == 11) barrageangoffset = 10.0;
			if (invoker.tommybarrageno == 12) barrageangoffset = 8.0;
			if (invoker.tommybarrageno == 13) barrageangoffset = 6.0;
			if (invoker.tommybarrageno == 14) barrageangoffset = 4.0;
			if (invoker.tommybarrageno == 15) barrageangoffset = 2.0;
			if (invoker.tommybarrageno == 16) barrageangoffset = 0.0;
			if (invoker.tommybarrageno == 17) barrageangoffset = -2.0;
			if (invoker.tommybarrageno == 18) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 19) barrageangoffset = -6.0;
			if (invoker.tommybarrageno == 20) barrageangoffset = -4.0;
			if (invoker.tommybarrageno == 21) barrageangoffset = -2.0;
			if (invoker.tommybarrageno >= 22) barrageangoffset = 0.0;
			if (handedness == 1) barrageangoffset *= -1;
			barrageangoffset *= offsetmulti;
			if (kcdebug_weaponstatdisplays) Console.Printf("invoker.tommybarrageno: %d, barrageangoffset: %.4f [tic: %d]", invoker.tommybarrageno, barrageangoffset, gametic);
		}
		if (A_DualTMGCheck())
		{
			double genaccu = frandompick(1.75,1.875,2.0,2.125,2.25,2.375,2.5);
			shotangle *= genaccu;
			shotpitch *= genaccu;
		}
		if (kcdebug_weaponstatdisplays) Console.Printf("dmg: %d, shotangle: %.4f, shotpitch: %.4f [tic: %d]", temp1, shotangle, shotpitch, gametic);
		
		double currang = angle;
		A_SetAngle(angle+barrageangoffset);
		
		int randdmg = temp1;
		if (A_CheckTracerConditions())
		{
			A_TommyTracer(playera, type, shotpitch, shotangle, A_GetShotHeightTracer(36), randdmg);
		}
		else
		{
			A_StartSound ("DSTOMFR", CHAN_WEAPON);
			A_FireBullets(shotangle,shotpitch,-1,(temp1),"KCBulletPuff2",FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, defenseignorefactor: frandom(0.05,0.1));
		}
		A_SetAngle(currang);
	}
	
	states
	{
		Spawn:
			TOMM A 0 NoDelay;
		Idle:
			TOMM A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("TommyGun")) 
				{
					if (!playera.CountInv("DualTommyGuns"))
					{
						A_SpawnItemEx("DualTommyGunPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}
				}
			}
			Loop;
		
		Select:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Raise(12);
			Loop;
		Deselect:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 A_Lower(12);
			Loop;
		Ready:
			TOMG A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (A_DualTMGCheck()) A_Overlay(3,"LeftReady",false);
			}
			TOMG A 1 
			{
				if (CountInv("DualTommyGuns")) A_WeaponReady(WRF_ALLOWUSER4);
																	else A_WeaponReady();
			}
			Loop;
			
		LeftReady:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 1
			{
			}
			Stop;
			
		LeftPrep:
			TOM2 A 0
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOM2 A 12
			{
			}
			Stop;
		
		Fire:
			TOMF A 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftFire",false);
			}
			TOMF ABCD 2 bright 
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_IncGunKiaiCounter((randompick(0,1,1,1,1,2) + randompick(0,1,1,1,1,2)) * random(3,5));
					A_TommyShot(0,0);
					A_TommyShot(0,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_IncGunKiaiCounter((randompick(0,1,1,1,1,2) * random(3,5)));
					A_TommyShot(0,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;
		
		LeftFire:
			TOF3 A 0 bright 
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF3 ABCD 2 bright 
			{
				if (CountInv("TommAmmo") <= 1) return resolvestate("LeftFireEnd");
				return resolvestate(null);
			}
		LeftFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;

		AltFire:
			TOF2 E 0 Bright
			{
				invoker.tommybarrageno = 0;
				if (A_DualTMGCheck()) A_Overlay(3,"LeftAltFire",false);
			}
			TOF2 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				invoker.tommybarrageno++;
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					A_IncGunKiaiCounter((randompick(1,2,2,2,2,3) + randompick(1,2,2,2,2,3)) * random(3,5));
					A_TommyShot(1,0);
					A_TommyShot(1,1);
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					A_IncGunKiaiCounter((randompick(1,2,2,2,2,3) * random(3,5)));
					A_TommyShot(1,0);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;

		LeftAltFire:
			TOF4 E 0 Bright
			{
				A_OverlayFlags(3,PSPF_POWDOUBLE|PSPF_CVARFAST,true);
			}
			TOF4 EFGHIJKLKJIHGFEDBCABCD 2 Bright
			{
				if (A_DualTMGCheck())
				{
					if (CountInv("TommAmmo") <= 1) return resolvestate("Ready");
					return resolvestate(null);
				}
				else
				{
					if (CountInv("TommAmmo") <= 0) return resolvestate("Ready");
					return resolvestate(null);
				}
			}
		LeftAltFireEnd:
			TOM2 A 0
			{
				A_Overlay(3,"LeftReady",false);
			}
			Stop;
			
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTommyGuns"))
				{
					A_StopSound(10);
					A_StartSound("TOMPKP",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (playera.CountInv("DualTommyGunsDisabled"))
					{
						playera.A_SetInventory("DualTommyGunsDisabled",0);
						A_Overlay(3,"LeftPrep",false);
					}
					else 
					{
						playera.A_SetInventory("DualTommyGunsDisabled",1);
						A_Overlay(3,null,false);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class TommAmmo : Ammo
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 50;
		Inventory.MaxAmount 500;
		Ammo.BackpackAmount 50;
		Ammo.BackpackMaxAmount 1000;
		Inventory.PickupMessage "Picked up some \cuammo for the tommygun\c-.";
		Inventory.Icon "TOMAA0";
		Inventory.PickupSound "gettgunclip";
	}
	
	States
	{
		Spawn:
			TOMA A 1;
			Loop;
	}
}

class TommAmmoBig : TommAmmo
{
	default
	{
		Inventory.Amount 250;
		Inventory.PickupMessage "Picked up a ton of \cuammo for the tommygun\c-.";
		Inventory.PickupSound "gettgunset";
	}
	
	States
	{
		Spawn:
			TOMA B 1;
			Loop;
	}
}

// *******************
// ** DEVASTATOR[S] **
// *******************
class Devastator : MarineWeapon
{
	int speedtype, speedtype2;
	int shotsfired, shotsfiredthreshold;
	int readytimer;
	int altammocost;
	default
	{
		Scale 0.75;
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.Pickupsound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \caDevastator Weapon\c-! \cx[Slot 5]\c-";
		Weapon.UpSound "weapons/devup";
		Weapon.AmmoType1 "MiniRockets";
		Weapon.AmmoType2 "MiniRockets";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action bool A_DualDevCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		if (CountInv("DualDevastators") && !CountInv("DualDevastatorsDisabled")) check = true;
		return check;
	}
	
	action void A_FireDevastator(int type)
	{
		double mult = 1.0;
		if (type == 1 || type == 3) mult = -1.0;
		double pangle = 2.0;
		double pangle2 = -2.0;
		double ppitch = 2.0;
		double ppitch2 = -2.0;
		double pspwnoff = (2.0*mult);
		double pspwnhgt = 4.0;
		double pspwnhgt2 = 6.0;
		int shotsfired;
		string firetype;

		A_StartSound("weapons/devshot",101,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		A_StartSound("weapons/devburt",102,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.95,1.05));
		if (type == -2)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 1.1875;
			pangle2 = -1.1875;
			ppitch = -1.1875;
			ppitch2 = 1.1875;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.75;
			pspwnhgt2 = 3.25;
			A_IncGunKiaiCounter((4 * random(8,12)));
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		if (type == -1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 0.625;
			pangle2 = -0.625;
			ppitch = -0.625;
			ppitch2 = 0.625;
			pspwnoff = (2.0*mult);
			pspwnhgt = 2.25;
			pspwnhgt2 = 2.75;
			A_IncGunKiaiCounter((randompick(0,0,1) * random(8,12)));
		}
		if (type >= 0 && type <= 1)
		{
			shotsfired = 1;
			firetype = "DevastatorShot";
			pangle = 1.5;
			pangle2 = -1.5;
			ppitch = -1.5;
			ppitch2 = 1.5;
			pspwnoff = (2.0*mult);
			pspwnhgt = 4.5;
			pspwnhgt2 = 5.5;
			A_IncGunKiaiCounter((randompick(0,0,1) * random(8,12)));
		}
		if (type >= 2 && type <= 3)
		{
			shotsfired = invoker.altammocost;
			firetype = "DevastatorShot2";
			pangle = 3.125;
			pangle2 = -3.125;
			ppitch = -3.125;
			ppitch2 = 3.125;
			pspwnoff = (2.0*mult);
			pspwnhgt = 3.0;
			pspwnhgt2 = 7.0;
			A_IncGunKiaiCounter((4 * random(8,12)));
			A_StartSound("weapons/devshot",103,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devshot",104,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devshot",105,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
			A_StartSound("weapons/devburt",106,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.85,1.15));
			A_StartSound("weapons/devburt",107,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
			A_StartSound("weapons/devburt",108,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.65,1.35));
		}
		for (int i = 0; i < shotsfired; i++)
		{
			A_FireProjectile(firetype,frandom(pangle,pangle2),false,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
			A_FireProjectile(firetype,frandom(pangle,pangle2),true,pspwnoff,frandom(pspwnhgt,pspwnhgt2),FPF_NOAUTOAIM,frandom(ppitch,ppitch2));
		}
		invoker.shotsfired++;
		invoker.readytimer = 0;
		if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfired: %d / %d, invoker.readytimer: %d", invoker.shotsfired, invoker.shotsfiredthreshold, invoker.readytimer);
	}
	
	action void A_DevPreReady()
	{
		invoker.altammocost = 5; // Set to affect the alt-fire cost and number of total shots [x2 the value of missiles] V:
		invoker.readytimer++;
		if (invoker.readytimer >= random(3,4))
		{
			invoker.shotsfired = 0;
			invoker.shotsfiredthreshold = randompick(10,random(12,13),random(12,13),15,15,15,15,15,15,15,random(17,18),random(17,18),20);
			if (kcdebug_weaponstatdisplays2) Console.Printf("invoker.shotsfiredthreshold [set]: %d", invoker.shotsfiredthreshold);
		}
	}
	
	States
	{
		Spawn:
			DVGG A 4
			{
				A_SpawnItemEx("DevastatorGenerator",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy();
			}
			Loop;
		
		Ready:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			DEV1 A 1 
			{
				if (CountInv("DualDevastators")) A_WeaponReady(WRF_ALLOWUSER4);
																		else A_WeaponReady();
			}
			Loop;

		ReadyDual:
			DEVG A 1 
			{
				if (CountInv("DualDevastators")) A_WeaponReady(WRF_ALLOWUSER4);
																		else A_WeaponReady();
			}
			goto Ready;

		Deselect:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("DeselectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Lower(12);
			Loop;
		DeselectDual:
			DEVG A 1 A_Lower(12);
			goto Deselect;
		Select:
			DEVG A 0
			{
				A_DevPreReady();
				if (A_DualDevCheck()) return resolvestate("SelectDual");
				return resolvestate(null);
			}
			DEV1 A 1 A_Raise(12);
			Loop;
		SelectDual:
			DEVG A 1 A_Raise(12);
			goto Select;
		
		Fire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(0,0,1,1,1) + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype = randompick(0,0,0,0,1) + 1;
				invoker.speedtype2 = 1 + 1;
				if (invoker.shotsfired > invoker.shotsfiredthreshold) invoker.speedtype2 = randompick(0,0,1,1,1) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					return resolvestate("FireDual");
				}
				return resolvestate(null);
			}
			DEV1 B 1 
			{
				A_Light2();
				A_FireDevastator(-1);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;

		FireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "FireLeft");
		FireRight:
			DEVG B 1 
			{
				A_Light2();
				A_FireDevastator(0);
				A_SetTics(invoker.speedtype2);
			}
			DEVG C 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 1 
			{
				A_Light2();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		FireLeft:
			DEVG J 1 
			{
				A_Light2();
				A_FireDevastator(1);
				A_SetTics(invoker.speedtype2);
			}
			DEVG L 1 
			{
				A_Light0();
				A_Light2();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 1 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				invoker.readytimer = 0;
				invoker.speedtype = randompick(1,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype = randompick(1,1,1,2) + 1;
				invoker.speedtype2 = randompick(1,2,2,2,2) + 1;
				if (invoker.shotsfired > (invoker.shotsfiredthreshold*0.334)) invoker.speedtype2 = randompick(0,1,1,1,1,2) + 1;
				if (A_DualDevCheck()) 
				{
					invoker.speedtype -= 1;
					invoker.speedtype2 -= 1;
					if (CountInv("MiniRockets") >= invoker.altammocost) return resolvestate("AltFireDual");
					return resolvestate("Ready");
				}
				else
				{
					if (CountInv("MiniRockets") < invoker.altammocost) return resolvestate("Ready");
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DEV1 B 2 
			{
				A_Light2();
				A_FireDevastator(-2);
				A_SetTics(invoker.speedtype2);
			}
			DEV1 C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 G 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEV1 I 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEV1 A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			Goto Ready;
		
		AltFireDual:
			TNT1 A 0 A_JumpIfInventory("Devcheck", 1, "AltFireLeft");
		AltFireRight:
			DEVG B 2 
			{
				A_Light2();
				A_FireDevastator(2);
			}
			DEVG C 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG E 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG G 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG H 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG I 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_GiveInventory("Devcheck",1);
			Goto Ready;
		AltFireLeft:
			DEVG J 2 
			{
				A_Light2();
				A_FireDevastator(3);
			}
			DEVG L 2 
			{
				A_Light2();
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG N 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG P 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG Q 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			DEVG R 2
			{
				A_Light0();
				A_SetTics(invoker.speedtype);
			}
			DEVG A 2 
			{
				A_Light0();
				A_SetTics(invoker.speedtype2);
			}
			TNT1 A 0 A_TakeInventory("Devcheck",1);
			Goto Ready;
		
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualDevastators"))
				{
					A_StopSound(10);
					A_StartSound("weapons/devswap",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (playera.CountInv("DualDevastatorsDisabled"))
					{
						playera.A_SetInventory("DualDevastatorsDisabled",0);
					}
					else 
					{
						playera.A_SetInventory("DualDevastatorsDisabled",1);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class Devcheck : Ammo
{
	default
	{
		Inventory.MaxAmount 1;
	}
}
class MiniRockets : Ammo
{
	default
	{
		Inventory.Amount 10;
		Inventory.MaxAmount 200;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 400;
		Inventory.PickupMessage "Picked up some \caDevastator rockets\c-.";
		Inventory.Icon "MNRAA0";
		Inventory.PickupSound "getdevsmall";
	}
	
	States
	{
		Spawn:
			MNRA A -1;
			Loop;
	}
}

class MiniRocketBox : MiniRockets
{
	default
	{
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 50;
		Inventory.PickupMessage "Picked up a box of \caDevastator rockets\c-.";
		Inventory.PickupSound "getdevbox";
	}
	
	States
	{
		Spawn:
			MNRB A -1;
			Loop;
	}
}

class DevastatorGenerator : CustomInventoryExt
{
	default
	{
		+FLOORCLIP;
		+INVENTORY.AUTOACTIVATE;
		Scale 0.75;
		Inventory.MaxAmount 2;
		CustomInventoryExt.PickUpVoiceHeiwa2 true;
		CustomInventoryExt.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		CustomInventoryExt.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \caDevastator Weapon\c-! \cx[Slot 5]\c-";
	}
	
	States
	{ 
		Spawn: 
			DVGG A -1;
			Loop;
		Pickup: 
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (!playera.CountInv("Devastator")) 
				{
					playera.A_GiveInventory("Devastator", 1);
				}
				else
				{
					if (!playera.CountInv("DualDevastators")) playera.A_GiveInventory("DualDevastators", 1);
					playera.A_GiveInventory("MiniRockets", 20);
				}
				playera.A_GiveInventory("MiniRockets", 20);
				playera.A_TakeInventory("DevastatorGenerator", 1);
			}
			Stop;
	} 
}

// ***************
// * SAW THROWER *
// ***************
class SawThrower : MarineWeapon
{
	int revtimes;
	int sawrange;
	int inputmode;
	double meleerecoil;
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		
		Weapon.SelectionOrder 120;
		Inventory.PickupMessage "Picked up a \cfSaw Thrower\c-! \cx[Slot 0]\c-";
		Obituary "%o was gutted by %k's saw.";
		//AttackSound "weapons/throwsawcut";
		Weapon.AmmoType1 "Saws";
		Weapon.AmmoType2 "Saws";
		Weapon.AmmoGive 6;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.KickBack 20;
		+WEAPON.NOALERT;
		Scale 0.9;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	States
	{
		Spawn:
			THRS A -1;
			Stop;
		Ready:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1 
			{
				A_WeaponReady();
				invoker.revtimes = 0;
			}
			Goto Ready+1;
			TSWG A 1
			{
				A_WeaponReady();
				invoker.revtimes = 0;
			}
			Goto Ready+2;
		Deselect:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1
			{
				A_Lower(12);
				invoker.revtimes = 0;
			}
			Goto Deselect+1;
			TSWG A 1
			{
				A_Lower(12);
				invoker.revtimes = 0;
			}
			Goto Deselect+2;
		Select:
			TSWG G 0 A_JumpIfInventory("Saws",1,2);
			TSWG G 1
			{
				A_Raise(12);
				invoker.revtimes = 0;
			}
			Goto Select+1;
			TSWG A 1
			{
				A_Raise(12);
				invoker.revtimes = 0;
			}
			Goto Select+2;
		Fire:
			TSWG D 0 
			{
				A_StartSound("weapons/throwsawlaunch",CHAN_WEAPON);
				invoker.A_KCAlertMonsters(256);
			}
			TSWG D 0 A_Recoil(1.5);
			TSWG D 4 { A_FireProjectile("SawShot",0.0,true,0.0,0.0,FPF_NOAUTOAIM,0.0); }
			TSWG D 5 A_Recoil(-1.5);
			TSWG D 0 A_JumpIfNoAmmo(5);
			TSWG E 4;
			TSWG F 3;
			TSWG A 3;
			TSWG A 0 A_ReFire;
			Goto Ready;
			TSWG G 7;
			TSWG G 0 A_CheckReload();
			Goto Ready+2;
		AltFire:
			TSWG A 0 
			{
				A_JumpIfNoAmmo(7);
				invoker.sawrange = 56;
			}
			TSWG A 8;
		AltRevUp:
			TSWG A 0 
			{
				A_StartSound("weapons/throwsawup",CHAN_WEAPON);
				invoker.A_KCAlertMonsters(256);
			}
			TSWG BBC 3
			{
				A_CustomPunch((1*random(1,4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.A_KCAlertMonsters(256);
			}
		AltRevUp2:
			TSWG BB 1 
			{
				A_CustomPunch((1*random(random(1,2),4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.A_KCAlertMonsters(288);
			}
			TSWG C 0 A_ReFire;
			Goto AltHold+6;
			TSWG G 7;
			TSWG G 0 A_CheckReload();
			Goto Ready+2;
		AltHold:
			TSWG B 0 
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				double recoilfactor = 1.00;
				if (A_CheckForHeiwa()) 
				{
					recoilfactor = (1.00 - (TruePlayerLevel * (1.00 / 40)));
					if (invoker.revtimes >= 20) invoker.meleerecoil = 2.5625;
																 else invoker.meleerecoil = 1.5;
				}
				else
				{
					recoilfactor = (1.00 - (TruePlayerLevel * (1.00 / 16)));
					if (invoker.revtimes >= 20) invoker.meleerecoil = 0.625;
																 else invoker.meleerecoil = 0.125;
				}
				if (recoilfactor <= 0.00) recoilfactor = 0.00;
				invoker.meleerecoil *= recoilfactor;

				A_StartSound("weapons/throwsawready",CHAN_WEAPON);
				if (invoker.revtimes >= 20)
				{
					if (invoker.revtimes % 2) A_StartSound("weapons/throwsawready",11,CHANF_DEFAULT,0.5);
				}
				else
				{
					A_StartSound("weapons/throwsawready",CHAN_WEAPON);
				}
			}
			TSWG B 1 
			{
				invoker.A_KCAlertMonsters(320);
				A_Recoil(-invoker.meleerecoil);

				if (invoker.revtimes >= 20) A_CustomPunch((random(2,3)*random(2,4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG B 1 
			{
				if (invoker.revtimes >= 20) A_SetTics(0);
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG C 1 
			{
				invoker.A_KCAlertMonsters(320);
				A_Recoil(invoker.meleerecoil);

				if (invoker.revtimes >= 20) A_CustomPunch((random(2,3)*random(2,4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
															 else A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
			}
			TSWG C 1 
			{
				if (invoker.revtimes >= 20) 
				{
					A_SetTics(0);
				}
				else 
				{
					A_CustomPunch((2*random(random(1,2),4)),0,CPF_PULLIN,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				}
			}
			TSWG C 0 
			{
				invoker.revtimes++;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				if (buttons & BT_ATTACK)
				{
					if (invoker.revtimes >= 20)
					{
						return resolvestate("RevFire");
					}
					else
					{
						A_ReFire();
						return resolvestate(null);
					}
				}
				else
				{
					A_ReFire();
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			TSWG B 0
			{
				A_StartSound("weapons/throwsawready",CHAN_WEAPON);
				if (invoker.revtimes >= 20)
				{
					if (invoker.revtimes % 2) 
					{
						A_StartSound("weapons/throwsawready",11,CHANF_DEFAULT,0.5);
						invoker.A_KCAlertMonsters(384);
					}
					else
					{
						invoker.A_KCAlertMonsters(320);
					}
				}
				else
				{
					invoker.A_KCAlertMonsters(320);
				}
			}
		AltEnd:
			TSWG CCBBCC 1 
			{
				invoker.A_KCAlertMonsters(288);
				A_CustomPunch((2*random(random(1,2),4)),0,0,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.9;
				A_Refire("AltRevUp2");
			}
			TSWG BBBCCCBBB 1 
			{
				invoker.A_KCAlertMonsters(288);
				A_CustomPunch((random(1,2)*random(random(1,2),4)),0,0,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.8;
				A_Refire("AltRevUp2");
			}
			TSWG CCCCBBBB 1 
			{
				invoker.A_KCAlertMonsters(288);
				A_CustomPunch((1*random(random(1,2),4)),0,0,"SawPlayerPuff",invoker.sawrange,meleesound:"weapons/throwsawcut");
				invoker.revtimes *= 0.6; 
				A_Refire("AltRevUp");
			}
			TSWG C 6 
			{
				invoker.revtimes *= 0.4; 
				A_Refire("AltRevUp");
				invoker.A_KCAlertMonsters(256);
			}
			TSWG A 9 
			{
				invoker.revtimes *= 0.2; 
				A_Refire("AltRevUp");
				invoker.A_KCAlertMonsters(128);
			}
			Goto Ready;

		RevFire:
			TSWG D 0
			{
				A_StartSound("weapons/throwsawlaunch",CHAN_WEAPON,CHANF_DEFAULT,1.0,ATTN_NORM,1.0);
				A_StartSound("weapons/throwsawlaunch",101,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.875,1.125));
				A_StartSound("weapons/throwsawlaunch",102,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.75,1.25));
				invoker.A_KCAlertMonsters(640);
			}
			TSWG D 0 A_Recoil(2.25);
			TSWG D 4 { A_FireProjectile("SSawShot",0.0,true,0.0,0.0,FPF_NOAUTOAIM,0.0); }
			TSWG D 5 A_Recoil(-2.25);
			TSWG D 0 A_JumpIfNoAmmo(5);
			TSWG E 4
			{
				if (random(1,4) <= 1) A_SetTics(2);
				else A_SetTics(3);
			}
			TSWG F 3
			{
				if (random(1,4) <= 1) A_SetTics(1);
				else A_SetTics(2);
			}
			TSWG A 3
			{
				if (random(1,4) <= 1) A_SetTics(1);
				else A_SetTics(2);
			}
			TSWG G 0 
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				if (buttons & BT_ALTATTACK)
				{
					if (invoker.revtimes >= 20)
					{
						invoker.revtimes = randompick(0,5,5,5,5,5,10,10,10,10,10,10,10,10,10,10,15,15,15,15,20);
						return resolvestate("AltHold");
					}
					else
					{
						if (invoker.revtimes < 5) invoker.revtimes = 5;
						return resolvestate("AltFire");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			Goto Ready;
			TSWG G 7;
			TSWG G 0 A_CheckReload();
			Goto Ready+2;


		// Fire Mode
		User4:
			TSWG G 0
			{
				if (invoker.inputmode == 0)
				{
					invoker.inputmode = 1;
					A_Print("Fire = Melee, AltFire = Ranged");
					A_StartSound("weapons/throwsawcut",0);
				}
				else
				if (invoker.inputmode == 1)
				{
					invoker.inputmode = 0;
					A_Print("Fire = Melee, AltFire = Ranged");
					A_StartSound("weapons/throwsawcut",0);
				}
			}
			TSWG G 8;
			goto Ready;
	}
}

class Saws : Ammo
{
	default
	{
		Inventory.Amount 3;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 3;
		Ammo.BackpackMaxAmount 100;
		Inventory.PickupMessage "Picked up some \cfRipper Saws\c-.";
		//Inventory.PickupSound "weapons/ammo13";
		Inventory.Icon "SAWAA0";
		Inventory.PickupSound "getsawsmall";
	}
	
	States
	{
		Spawn:
			SAWA A -1;
			Stop;
	}
}

class SawBox : Saws
{
	default
	{
		Inventory.Amount 15;
		Inventory.PickupMessage "Picked up a box of \cfRipper Saws\c-.";
		Inventory.PickupSound "getsawbox";
	}
	
	States
	{
		Spawn:
			SAWB A -1;
			Stop;
	}
}

class ImpalerBowZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ImpalerBowFakeReady : PlaceholderItem { }
class ImpalerBowRealReady : PlaceholderItem { }
class ImpalerXBow : MarineWeapon
{
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \cfImpaler Crossbow\c-! \cx[Slot 0]\c-";
		
		Weapon.AmmoGive 15;
		Weapon.AmmoType1 "ImpalerBolts";
		Weapon.AmmoType2 "ImpalerBolts";
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 0;
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.KickBack 20;
		+WEAPON.NOALERT;
		+WEAPON.ALT_AMMO_OPTIONAL;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action int A_BowBerserkCheck(int tic)
	{
		if (A_CheckBerserk()) tic *= frandompick(0.25,0.25,0.5,0.5,0.5,0.5,0.75,0.75);
		return tic;
	}
	
	action double A_GetXBowSpd()
	{
		double output = 10;
		double oldoutput = output;
		if (output <= 1.0) output = 1.0;
		if (kcdebug_meleeinformation) Console.Printf("output: %.8f [%.8f]", output, oldoutput);
		return output;
	}
	
	action void A_SetSonicNailStats(actor BombShots, int type)
	{
		int TruePlayerLevel = invoker.ActualLevel;
		double dmgfactor = 1.0;
		double dmgfactor2 = 1.0;
		int basedmg = (75 + (random(-25,25)));
		if (type == 1) basedmg = (50 + (random(randompick(-16,-17,-17),randompick(16,17,17))));
		if (type >= 2) basedmg = (25 + (random(randompick(-8,-8,-9),randompick(8,8,9))));
		//Console.Printf("basedmg: %d", basedmg);
		if (BombShots)
		{
			if (CountInv("ImpalerBowZoom") <= 0)
			{
				dmgfactor = (1.0 + (TruePlayerLevel * 0.015625));
				if (dmgfactor >= 2.0) dmgfactor = 2.0;
				dmgfactor2 = 1.0;
			}
			else
			if (CountInv("ImpalerBowZoom") == 1)
			{
				BombShots.speed *= 1.25;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.0234375));
				if (dmgfactor >= 3.0) dmgfactor = 3.0;
				dmgfactor2 = 1.1875;
			}
			else
			if (CountInv("ImpalerBowZoom") == 2) 
			{
				BombShots.speed *= 1.5;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.03125));
				if (dmgfactor >= 4.0) dmgfactor = 4.0;
				dmgfactor2 = 1.375;
			}
			else
			if (CountInv("ImpalerBowZoom") == 3)
			{
				BombShots.speed *= 2.0;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.0625));
				if (dmgfactor >= 8.0) dmgfactor = 8.0;
				dmgfactor2 = 1.75;
			}
			else
			if (CountInv("ImpalerBowZoom") >= 4)
			{
				BombShots.speed *= 4.0;
				dmgfactor = (1.0 + (TruePlayerLevel * 0.125));
				if (dmgfactor >= 16.0) dmgfactor = 16.0;
				dmgfactor2 = 2.5;
			}
			
			basedmg *= dmgfactor;
			basedmg *= dmgfactor2;
			//Console.Printf("basedmg: %d [dmgfactor: %.8f, dmgfactor2: %.8f]", basedmg, dmgfactor, dmgfactor2);
			
			KCBaseZSC BShot;
			BShot = KCBaseZSC(BombShots);
			if (BShot) BShot.finaldamagedealt = basedmg;
		}
	}
	
	action void A_XBowRecoil(double base)
	{
		double newbase = base;
		if (CountInv("ImpalerBowZoom") <= 0) newbase *= 1.0;
		if (CountInv("ImpalerBowZoom") == 1) newbase *= frandom(0.75,0.875);
		if (CountInv("ImpalerBowZoom") == 2) newbase *= frandom(0.50,0.75);
		if (CountInv("ImpalerBowZoom") == 3) newbase *= frandom(0.25,0.625);
		if (CountInv("ImpalerBowZoom") >= 4) newbase *= frandom(0.00,0.50);
		int TruePlayerLevel = invoker.ActualLevel;
		newbase *= (1.0 - (TruePlayerLevel * (frandompick(0.0375,0.05,0.05,0.05,0.0625) * frandompick(0.5,1,1,1,1,1,1,2))));
		if ((newbase > 0.00 && base <= 0.00) || 
				(newbase < 0.00 && base >= 0.00)) newbase = 0.00; 
		A_Recoil(newbase);
	}
	
	action void A_BowSetZoom()
	{
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		A_StartSound("Weapon/XBowLoad", 21, CHANF_DEFAULT, 0.75, ATTN_NORM, 1.25);
		A_StartSound("Weapon/XBowLoad", 22, CHANF_DEFAULT, 0.875, ATTN_NORM, 1.125);

		if (buttons & BT_USER3)
		{
			if (CountInv("ImpalerBowZoom") == 0) 
			{
				A_ZoomFactor(4.0); A_SetInventory("ImpalerBowZoom",4); A_Print("4x Zoom"); 
			}
			else
			{
				A_TakeInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.25); A_Print("1.25x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 0) { A_ZoomFactor(1.0); A_Print("No Zoom"); }
			}
		}
		else
		{
			A_GiveInventory("ImpalerBowZoom",1);
			if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.25); A_Print("1.25x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
			else if (CountInv("ImpalerBowZoom") == 5) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
		}
	}
	
	States
	{
		Spawn:
			CBOW Z -1;
			Stop;
		Select:
			CBOW E 1 A_Raise(12);
			Loop;
		Deselect:
			CBOW E 1 A_Lower(12);
			Loop;
		Ready:
			CBOW E 0 A_JumpIfNoAmmo("FakeReady");
			CBOW EF 5;
		RealReady:
			CBOW A 1 
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			CBOW E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			CBOW B 6 
			{
				actor BombShots;
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				BombShots = A_FireProjectile("ImpalerMissile",0,1);
				A_SetSonicNailStats(BombShots,0);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 6;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.50)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW C 8 
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 8;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.75)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
				A_XBowRecoil(1.75);
				
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 7)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW E 5 
			{
				A_CheckReload();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW F 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW A 12
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 12;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.375)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			Goto RealReady;
		
		AltFire:
			CBOW B 0
			{
				if (CountInv("ImpalerBolts") <= 2) 
				{
					if (CountInv("ImpalerBolts") <= 0) return resolvestate("FakeReady");
																				else return resolvestate("RealReady");
				}
				return resolvestate(null);
			}
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				double xspread = frandompick(1.25,2.5,2.5,2.5,3.75);
				actor BombShots;
				BombShots = A_FireProjectile("ImpalerMissile",0,1);
				A_SetSonicNailStats(BombShots,0);
				BombShots = A_FireProjectile("ImpalerMissile2",xspread,0);
				A_SetSonicNailStats(BombShots,1);
				BombShots = A_FireProjectile("ImpalerMissile2",-xspread,0);
				A_SetSonicNailStats(BombShots,1);
				BombShots = A_FireProjectile("ImpalerMissile3",(xspread*2),0);
				A_SetSonicNailStats(BombShots,2);
				BombShots = A_FireProjectile("ImpalerMissile3",(-xspread*2),0);
				A_SetSonicNailStats(BombShots,2);
				
				A_XBowRecoil(2.1875);
				A_TakeInventory("ImpalerBolts",3,TIF_NOTAKEINFINITE);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 9;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 12;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.9375)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.8125)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.6875)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5.625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6.5625)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 7.5)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW D 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 7.334)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW E 5 
			{
				A_CheckReload();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4.667)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW F 5
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = random(7,8);
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.334)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.667)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 5.334)) tic -= 1;
				if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 6.667)) tic -= 1;
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			CBOW A 12
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 18;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 0.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.0)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 1.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.25)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 2.75)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 3.0)) tic -= 1;
				if (random(1,2) <= 1)
				{
					if (TruePlayerLevel >= (A_GetXBowSpd() * 3.25)) tic -= 1;
					if (random(1,2) <= 1 && TruePlayerLevel >= (A_GetXBowSpd() * 3.5)) tic -= 1;
				}
				tic = A_BowBerserkCheck(tic);
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			Goto RealReady;
		
		// Zoom :V
		User4:
			CBOW A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			CBOW E 17
			{
				A_SetTics(random(17,18));
				A_BowSetZoom();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 14)) tic -= 1;
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			goto FakeReady;
		User4Real:
			CBOW A 17
			{
				A_SetTics(random(17,18));
				A_BowSetZoom();
				
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 5;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 6)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetXBowSpd() * 14)) tic -= 1;
				if (tic < 1) tic = 1;
				A_SetTics(tic);
			}
			goto RealReady;
	}	
}

class ImpalerBolts : Ammo
{
	default
	{
		Inventory.PickupMessage "Picked up a pack of \cfSteel bolts\c-";
		Inventory.Amount 5;
		Inventory.MaxAmount 40;
		Inventory.Icon "CBWAA0";
		Ammo.BackpackAmount 5;
		Ammo.BackpackMaxAmount 80;
		Inventory.PickupSound "getxbowpouch";
	}
	
	States
	{
		Spawn:
			CBWA A -1;
			Stop;
	}
}

class ImpalerBoltsBig : ImpalerBolts
{
	default
	{
		Inventory.PickupMessage "Picked up a huge pack of \cfSteel bolts\c-";
		Inventory.Amount 20;
		Inventory.PickupSound "getxbowpouch";
		Scale 0.875;
	}
	
	States
	{
		Spawn:
			CBWA B -1;
			Stop;
	}
}

class TeslaCannon : MarineWeapon
{
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Weapon.SlotNumber 6;
		inventory.pickupmessage "Picked up a \cvTesla Cannon\c-! \cx[Slot 6]\c-";
		radius 20;
		height 16;
		weapon.selectionorder 700;
		weapon.kickback 100;
		weapon.ammotype1 "Bolts";
		weapon.ammotype2 "Bolts";
		weapon.ammouse1 1;
		weapon.ammouse2 1;
		weapon.ammogive 100;
		Weapon.Kickback 50;
		//attacksound "Tesla/Fire1";
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action bool A_DualTeslaCheck()
	{
		bool check = false;
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (CountInv("DualTeslaCannons") && !CountInv("DualTeslaCannonsDisabled")) check = true;
		return check;
	}
	
	action state A_ButtonCheck()
	{
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		if (buttons & BT_ATTACK) { } else { return resolvestate("Finish"); }
		return resolvestate(null);
	}
	
	action void A_Tesla1(int type, string proj = "TeslaProjectile", bool use1 = true)
	{
		if (type >= 1)
		{
			A_IncGunKiaiCounter((randompick(0,1,1,1,1,2) + randompick(0,1,1,1,1,2)) * random(3,5));
			double spread = (randompick(30,35,40,45,50) * 0.125);
			A_StartSound("Tesla/Fire1",CHAN_WEAPON);
			A_StartSound("Tesla/Fire1",CHAN_BODY);
			A_FireProjectile(proj,0,use1,spread);
			A_FireProjectile(proj,0,use1,-spread);
		}
		else
		{
			A_IncGunKiaiCounter((randompick(0,1,1,1,1,2) * random(3,5)));
			double spread = (randompick(32,36,40,44,48) * 0.0625);
			A_StartSound("Tesla/Fire1",CHAN_WEAPON);
			A_FireProjectile(proj,0,use1,spread);
		}
	}
	
	action void A_Tesla2(int type)
	{
		if (type >= 1)
		{
			A_IncGunKiaiCounter((randompick(6,7,7,7,7,8) * random(12,20)));
			double spread = (randompick(32,36,40,44,48) * 0.015625);
			A_StartSound("Tesla/AltFire2",CHAN_WEAPON);
			A_StartSound("Tesla/AltFire2",CHAN_BODY);
			A_FireProjectile("TeslaShot2",0,1,spread,0);
			A_FireProjectile("TeslaShot2",0,1,-spread,0);
		}
		else
		{
			A_IncGunKiaiCounter((randompick(4,5,5,5,5,6) * random(6,10)));
			A_StartSound("Tesla/AltFire2",CHAN_WEAPON);
			A_FireProjectile("TeslaShot2",0,1,0,0);
		}
	}
	
	states
	{
		Spawn:
			TSLC A 0 NoDelay;
		Idle:
			TSLC A 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("TeslaCannon")) 
				{
					if (!playera.CountInv("DualTeslaCannons"))
					{
						A_SpawnItemEx("DualTeslaCannonPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}
				}
			}
			Loop;

		Ready:
			TESR AABBCCDDEEFF 1 
			{
				if (CountInv("DualTeslaCannons")) A_WeaponReady(WRF_ALLOWUSER4);
																		 else A_WeaponReady();
				if (A_DualTeslaCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			loop;
		ReadyDual:
			TAKR ABCDEF 2 
			{
				if (CountInv("DualTeslaCannons")) A_WeaponReady(WRF_ALLOWUSER4);
																		 else A_WeaponReady();
				if (!A_DualTeslaCheck()) return resolvestate("Ready");
				return resolvestate(null);
			}
			Loop;

		Select:
			TESR ABCDEF 1 
			{
				A_Raise(12);
				if (A_DualTeslaCheck()) return resolvestate("SelectDual");
				return resolvestate(null);
			}
			TNT1 AA 0 A_Raise(12);
			loop;
		SelectDual:
			TAKR ABCDEF 1
			{
				A_Raise(12);
				if (!A_DualTeslaCheck()) return resolvestate("Select");
				return resolvestate(null);
			}
			TNT1 AA 0 A_Raise(12);
			Loop;
		Deselect:
			TESR FEDCBA 1 
			{
				A_Lower(12);
				if (A_DualTeslaCheck()) return resolvestate("DeselectDual");
				return resolvestate(null);
			}
			TNT1 AA 0 A_Lower(12);
			Loop;
		DeselectDual:
			TAKR FEDCBA 1 
			{
				A_Lower(12);
				if (!A_DualTeslaCheck()) return resolvestate("Deselect");
				return resolvestate(null);
			} 
			TNT1 AA 0 A_Lower(12);
			Loop;
		
		Fire:
			TNT1 A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("FireDual");
				return resolvestate(null);
			}
			TEXX AB 2 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL B 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESL BC 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL C 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESL D 2 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL E 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESL EF 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL F 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TNT1 A 0 BRIGHT A_Refire();
			TESL G 2 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TNT1 A 0 A_FireProjectile("TeslaSmoke",frandom(-8,8),0,1,8+frandom(-0.1,0.1),0);
			TEXX BA 3 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_GunFlash();
			TESF A 0 
			{
				A_ClearRefire();
				if (A_DualTeslaCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			Goto Ready;
		Hold: // The Tesla Coil will Stop if the player is not firing at this point
			TNT1 A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("HoldDual");
				return resolvestate(null);
			}
			TESL G 2 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL B 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESF A 0 BRIGHT A_ButtonCheck();
			TESL BC 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL C 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESF A 0 BRIGHT A_ButtonCheck();
			TESL D 2 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL E 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESF A 0 BRIGHT A_ButtonCheck();
			TESL EF 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_Tesla1(0,"TeslaProjectile",true);
			TESL F 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TNT1 A 0 A_JumpIfNoAmmo("Finish");
			TESF A 0 BRIGHT A_ButtonCheck();
			TESF E 0 BRIGHT A_Refire();
			Goto Finish;
		Finish:
			TNT1 A 0 A_GunFlash();
			TNT1 A 0 A_FireProjectile("TeslaSmoke",frandom(-8,8),0,1,8+frandom(-0.1,0.1),0);
			TEXX BA 3 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TESF A 0 A_GunFlash();
			TESF A 0 
			{
				A_ClearRefire();
				if (A_DualTeslaCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			Goto Ready;
		Flash:
			TNT1 A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("FlashDual");
				return resolvestate(null);
			}
			TSMK ABC 2;
			Stop;
		AltFire:
			TNT1 A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("AltFireDual");
				return resolvestate(null);
			}
			TNT1 A 0 A_JumpIfInventory("Bolts", 35, 1); // TeslaCharge
			Goto Fire;
			TESL A 0 A_StartSound("Tesla/AltCharge1",CHAN_WEAPON); // 1.2 seconds (38 Tics)
			TES2 KL 3 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH); // 6 Tics
			TES2 MNABCDEFGHIJ 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH); // 30 Tics
			TES2 EFGHIJEFGHIJ 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH); // 36 Tics
			TE2F A 0 BRIGHT A_StartSound("Tesla/AltFire1",CHAN_WEAPON);
			TE2F A 0 BRIGHT A_GunFlash();
			TNT1 A 0 A_FireProjectile("TeslaBallBig",0,1,5);
			TNT1 A 0 A_TakeInventory("Bolts", 34); // TeslaCharge
			TE2F A 2 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TE2F BC 1 BRIGHT A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TE2F D 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TESR ABCD 3 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH|WRF_DISABLESWITCH);
			TESR D 0
			{
				if (A_DualTeslaCheck()) return resolvestate("ReadyDual");
				return resolvestate(null);
			}
			Goto Ready;
		AltFlash:
			TNT1 A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("AltFlashDual");
				return resolvestate(null);
			}
			TNT1 A 2 A_Light(5);
			TNT1 A 2 A_Light(3);
			TNT1 A 1 A_Light1();
			TNT1 A 1 A_Light0();
			Stop;
			
		AltFireDual:
			TNT1 A 0;
		AltHoldDual:
			TNT1 A 0;
		FireDual:
			TNT1 A 0;
		HoldDual:
			TNT1 A 0 A_GunFlash("FlashDual");
			TNT1 A 2
			{
				if (CountInv("TeslaCounterX") % 2 == 0) A_SetTics(1);
			}
			TNT1 A 0 
			{
				A_GiveInventory("TeslaCounterX", 1);
				A_Tesla1(1,"TeslaProjectile",true);
			}
			TNT1 A 0 A_GunFlash("FlashDual");
			TNT1 A 2
			{
				if (CountInv("TeslaCounterX") % 2 == 1) A_SetTics(1);
			}
			TNT1 A 0 A_Refire("HoldDual");
			TNT1 A 0 A_GiveInventory("StopFiring", 1);
			TNT1 A 0 A_FireProjectile("TeslaSmoke",frandom(-8,8),0,1,8+frandom(-0.1,0.1),0);
			TAKM CB 2;
			TAKM A 0
			{
				if (A_DualTeslaCheck()) return resolvestate("ReadyDual");
				else return resolvestate("Ready");
			}
			Goto ReadyDual;
		
		AltFlashDual:
		FlashDual:
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 7, 28);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 6, 24);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 5, 20);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 4, 16);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 3, 12);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 2, 8);
			TNT1 A 0 A_JumpIfInventory("TeslaCounterX", 1, 4);
		FlashPick:
			TAKM D 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(24);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 23);
			TAKM E 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(21);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 20);
			TAKM F 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(18);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 17);
			TAKM G 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(15);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 14);
			TAKM H 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(12);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 11);
			TAKM D 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(9);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 8);
			TAKM E 1 BRIGHT;
			TNT1 A 0 A_JumpIfNoAmmo(6);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 5);
			TAKM F 1 BRIGHT;
			TNT1 A 0 A_TakeInventory("TeslaCounterX", 24);
			TNT1 A 0 A_JumpIfNoAmmo(2);
			TNT1 A 0 A_JumpIfInventory("StopFiring", 1, 1);
			Goto FlashPick;
			TNT1 A 0 A_TakeInventory("StopFiring", 1);
			Stop;
			
		User4:
			"####" # 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTeslaCannons"))
				{
					A_StopSound(10);
					A_StartSound("TESLFX",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
					if (playera.CountInv("DualTeslaCannonsDisabled"))
					{
						playera.A_SetInventory("DualTeslaCannonsDisabled",0);
					}
					else 
					{
						playera.A_SetInventory("DualTeslaCannonsDisabled",1);
					}
				}
				else
				{
					A_StopSound(10);
					A_StartSound("inv_fail",10,CHANF_DEFAULT,1.0,ATTN_NONE,frandom(0.8,1.2));
				}
			}
			"####" # 8
			{
				A_SetTics(random(8,12));
			}
			goto Ready;
	}
}

class DualTeslaCannonPickup : CustomInventoryExt
{
	default
	{
		Inventory.PickupMessage "Picked up an Extra \cvTesla Cannon\c-! \c[gold]Can Now Dual Wield!\c- \cx[Slot 6]\c-";
		//Inventory.PickupSound "TOMPKP";
		+DONTGIB
		-COUNTITEM;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Scale 1;
	}
	
	states
	{
		Spawn:
			TSLC B 0 NoDelay;
		Idle:
			TSLC B 4
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera.CountInv("DualTeslaCannons"))
				{
					A_SpawnItemEx("TeslaCannon",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Destroy();
				}
			}
			Loop;
		Pickup:
			TNT1 A 0
			{
				let globalvars = KCGlobalVariables.Get();
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (playera) 
				{
					playera.A_GiveInventory("DualTeslaCannons",1);
					playera.A_GiveInventory("Bolts",100);
				}
			}
			stop;
	}
}

class TeslaCounterX : Inventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 24;
		+INVENTORY.IGNORESKILL;
	}
}

class StopFiring : Inventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}

class TeslaSmoke : KCBaseZSC
{
	default
	{
		Height 1;
		Radius 1;
		Damage 0;
		Speed 1;
		Scale 0.75;
		Alpha 0.9;
		RenderStyle "Add";
		PROJECTILE;
		+BLOODLESSIMPACT;
		+NOINTERACTION
		+CLIENTSIDEONLY
		+RIPPER;
	}
	States
	{
		Spawn:
			TSMK AABBCC 3 A_Fadeout(0.15);
			Stop;
		Death.Sky:
			TSMK A 1;
			Stop;
	}
}

class TeslaFX : KCBaseZSC
{
	default
	{
		Height 1;
		Radius 1;
		RenderStyle "Add";
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOTELEPORT;
		-TELESTOMP;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128, "Spawn2");
		SpawnNormal:
			TNT1 A 0 A_StartSound("TeslFX", CHAN_BODY);
			TSFX AABBCCDDEEFF 1 BRIGHT A_FadeOut(0.07);
			Loop;
		Spawn2:
			TNT1 A 0 A_StartSound("TeslFX", CHAN_BODY);
			TSFX GGHHIIJJKKLL 1 BRIGHT A_FadeOut(0.07);
			Loop;
	}
}

class BlueFlare : BaseLensflare
{
	default
	{
		Scale 0.4;
	}
	
	States
	{
		Spawn:
			LEFL B 0;
			LEFL BBBB 1 BRIGHT A_FadeOut(.25);
			Stop;
	}
}

class BlueFlareSmall : BlueFlare 
{
	default { Scale 0.2; }
}

class TeslaBallBig : KCFastProjectile
{
	default
	{
		Health 1000;
		Radius 8;
		Height 16;
		Speed 125; // 38;
		Mass 200;
		Scale 0.4;
		XScale 1.55;
		DamageFunction (80 * random(1,8)); // DamageFunction (random(84,188));
		DamageType "Lightning";
		RenderStyle "Add";
		Alpha 1;
		PROJECTILE;
		+DONTSPLASH;
		+NOEXTREMEDEATH;
		+THRUGHOST;
		+FORCERADIUSDMG;
		ActiveSound "weap/tsla/see";
		SeeSound "Shoot/Tesla";
		DeathSound "";
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		ProjectileKickback 50;
	}
	
	override void Tick()
	{
		if (!bFORCERADIUSDMG) bFORCERADIUSDMG = true;
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSLP A 0;
			TSLP A 0 A_LoopActiveSound;
			NULL A 1 A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-4,4),frandom(-4,4),frandom(-1,1));
			TSLP A 0 A_SpawnItemEx("BlueFlareSmall",8);
			NULL B 1 A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			TSLP A 0 A_SpawnItemEx("BlueFlareSmall",8);
			NULL C 1 A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-3,3),frandom(-3,3),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			TSLP A 0 A_SpawnItemEx("BlueFlareSmall",8);
			NULL D 1 A_SpawnItemEx("TeslaDebris",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			TSLP A 0 A_SpawnItemEx("BlueFlareSmall",8);
			Goto Spawn+2;
		Death:
			NULL BBBBBBBBBBB 0 A_SpawnItemEx("TeslaDebris",frandom(-15,15),frandom(-15,15),frandom(-15,15),frandom(-1,1),frandom(-3,3),frandom(0,1));
			TNT1 A 0 A_SpawnItemEx("TeslaExplosion", 0, 64);
			TNT1 A 0 A_SpawnItemEx("TeslaExplosion", 0, -64);
			//BFIR BBBBBBBB 0 A_Explode(frandom(27,32),192);
			NULL AAAAAAAA 0 A_Explode(frandom(27,32),256,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning"); //great painchance
			Stop;
		Death.Sky:
			NULL B 1;
			Stop;
	}
}

class TeslaBallBigDual : TeslaBallBig
{
	default
	{
		DamageFunction (180 * random(1,8)); // DamageFunction (random(84,188));
	}
	
	override void Tick()
	{
		if (!bFORCERADIUSDMG) bFORCERADIUSDMG = true;
		super.Tick();
	}
	
	States
	{
		Spawn:
			TSLP A 0;
			TSLP A 0 A_LoopActiveSound;
			NULL A 1 
			{
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-4,4),frandom(-4,4),frandom(-1,1));
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-4,4),frandom(-4,4),frandom(-1,1));
				if (random(1,3) <= 2) A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-4,4),frandom(-4,4),frandom(-1,1));
			}
			TSLP A 0 
			{
				A_SpawnItemEx("BlueFlareSmall",8);
				A_SpawnItemEx("BlueFlareSmall",16);
			}
			NULL B 1 
			{
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				if (random(1,3) <= 2) A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-5,5),frandom(-5,5),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
			TSLP A 0 
			{
				A_SpawnItemEx("BlueFlareSmall",8);
				A_SpawnItemEx("BlueFlareSmall",16);
			}
			NULL C 1 
			{
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-3,3),frandom(-3,3),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-3,3),frandom(-3,3),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				if (random(1,3) <= 2) A_SpawnItemEx("TeslaDebris",frandom(-5,5),frandom(-3,3),frandom(-3,3),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
			TSLP A 0 
			{
				A_SpawnItemEx("BlueFlareSmall",8);
				A_SpawnItemEx("BlueFlareSmall",16);
			}
			NULL D 1 
			{
				A_SpawnItemEx("TeslaDebris",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_SpawnItemEx("TeslaDebris",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-1,1),frandom(-1,1),frandom(-1,1));
				if (random(1,3) <= 2) A_SpawnItemEx("TeslaDebris",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
			TSLP A 0 
			{
				A_SpawnItemEx("BlueFlareSmall",8);
				A_SpawnItemEx("BlueFlareSmall",16);
			}
			Goto Spawn+2;
		Death:
			NULL BBBBBBBBBBB 0 A_SpawnItemEx("TeslaDebris",frandom(-15,15),frandom(-15,15),frandom(-15,15),frandom(-1,1),frandom(-3,3),frandom(0,1));
			NULL BBBBBBBBBBB 0 A_SpawnItemEx("TeslaDebris",frandom(-15,15),frandom(-15,15),frandom(-15,15),frandom(-1,1),frandom(-3,3),frandom(0,1));
			TNT1 A 0 A_SpawnItemEx("TeslaExplosionDual", 0, 64);
			TNT1 A 0 A_SpawnItemEx("TeslaExplosionDual", 0, -64);
			NULL AAAAAAAA 0 A_Explode(frandom(81,108),384,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning"); //great painchance
			Stop;
		Death.Sky:
			NULL B 1;
			Stop;
	}
}

class TeslaExplosion : KCProjectile
{
	default
	{
		Speed 0;
		Damage 0;
		DamageType "Lightning";
		PROJECTILE;
		+BLOODLESSIMPACT;
		+RIPPER;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 A_Explode(frandom(27,36),84,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning");
			Stop;
	}
}

class TeslaExplosionDual : KCProjectile
{
	default
	{
		Speed 0;
		Damage 0;
		DamageType "Lightning";
		PROJECTILE;
		+BLOODLESSIMPACT;
		+RIPPER;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 A_Explode(frandom(81,108),126,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning");
			Stop;
	}
}

class TeslaDebris : KCProjectile
{
	default
	{
		Health 10;
		Radius 1;
		Height 1;
		Scale 0.35;
		Speed 2;
		VSpeed 1;
		FloatSpeed 1;
		Renderstyle "Translucent";
		Alpha 0.75;
		Projectile;
		+CANNOTPUSH;
		+CLIENTSIDEONLY;
		+FLOATBOB;
		+NOGRAVITY;
		+NOINTERACTION;
		+DONTSPLASH;
		+NOBLOCKMAP;
		+RANDOMIZE;
		+WINDTHRUST;
		-NOGRAVITY;
		-SOLID;
		
		//Health 5;
		//Speed 10;
		//Scale 0.2;
	}
	
	States
	{
		Spawn:
			ZAPR A 0;
			ZAPR A 0 A_Jump(128,"ZapB");
		Zap:
			ZAPR A 0 A_Jump(128,1,2,3,4,5,6);
			TSFX AABBCCCDDEEFFAAABBBCCCCDDDDEEEFFF 1 BRIGHT A_FadeOut(0.025);
			Loop;
		ZapB:
			ZAPR A 0 A_Jump(128,1,2,3,4,5,6);
			TSFX GGGHHHIIIIJJJKKKKLLLGGHHIIIJJKKLL 1 BRIGHT A_FadeOut(0.025);
			Loop;
		Death:
			FSPK A 1;
			Stop;
		Death.Sky:
			TNT1 A 1;
			Stop;
	}
}

class BoltShrink1 : KCBaseZSC
{
	default
	{
		Scale 0.9;
		Alpha 0.5;
		RenderStyle "Add";
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink2");
			Stop;
	}
}

class BoltShrink2 : BoltShrink1
{
	default
	{
		Scale 0.8;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink3");
			Stop;
	}
}

class BoltShrink3 : BoltShrink1
{
	default
	{
		Scale 0.7;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink4");
			Stop;
	}
}

class BoltShrink4 : BoltShrink1
{
	default
	{
		Scale 0.6;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink5");
			Stop;
	}
}

class BoltShrink5 : BoltShrink1
{
	default
	{
		Scale 0.5;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink6");
			Stop;
	}
}

class BoltShrink6 : BoltShrink1
{
	default
	{
		Scale 0.4;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink7");
			Stop;
	}
}

class BoltShrink7 : BoltShrink1
{
	default
	{
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink8");
			Stop;
	}
}

class BoltShrink8 : BoltShrink1
{
	default
	{
		Scale 0.2;
	}
	States
	{
		Spawn:
			TESP B 3;
			TNT1 A 0 A_SpawnItem("BoltShrink9");
			Stop;
	}
}

class BoltShrink9 : BoltShrink1
{
	default
	{
		Scale 0.1;
	}
	
	States
	{
		Spawn:
			TESP B 3;
			Stop;
	}
}

class TeslaProjectile : KCFastProjectile
{
	default
	{
		Speed 75; // 72;
		Radius 4;
		Height 8;
		RenderStyle "Add";
		DamageFunction (10 * random(1,8)); //DamageFunction (random(24,32));
		DamageType "Lightning";
		PROJECTILE;
		+FORCERADIUSDMG;
		+BLOODLESSIMPACT; //No more insane blood on wall
		+FOILINVUL;
		+THRUGHOST;
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			TESP AAAAAAA 1 BRIGHT A_Fadeout(0.16);
			TESP A 0 A_StartSound("weap/tsla/see",0);
			TESP AAAAAAA 1 BRIGHT A_FadeIn(0.16);
			TESP A 0 A_StartSound("weap/tsla/see",0);
			Loop;
		Death:
			TNT1 A 0 A_Explode(random(3,6), 24, 0, false, 0, 0, 10, "KCBulletPuff", "Lightning");
			TNT1 A 0 A_SpawnItem("BoltShrink1");
			TNT1 A 0 A_StartSound("Tesla/Fire1",0);
			TNT1 AAAAA 0 A_SpawnItemEx("TeslaFX", random(-8,8), random(-8,8), random(0,3), random(-12,12), random(-12,12), random(0,3));
			Stop;
	}
}

class TeslaProjectile2 : TeslaProjectile
{
	default
	{
		Speed 75; // 72;
		Radius 4;
		Height 8;
		Scale 0.5;
		RenderStyle "Add";
		DamageFunction (5 * random(1,8)); //DamageFunction (random(24,32));
		DamageType "Lightning";
		PROJECTILE;
		+FORCERADIUSDMG;
		+BLOODLESSIMPACT; //No more insane blood on wall
		+FOILINVUL;
		+THRUGHOST;
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn:
			TESP AAAAAAA 1 BRIGHT A_Fadeout(0.16);
			TESP A 0 A_StartSound("weap/tsla/see",0);
			TESP AAAAAAA 1 BRIGHT A_FadeIn(0.16);
			TESP A 0 A_StartSound("weap/tsla/see",0);
			Loop;
		Death:
			TNT1 A 0 A_Explode(random(1,2), 12, 0, false, 0, 0, 10, "KCBulletPuff", "Lightning");
			TNT1 A 0 A_SpawnItem("BoltShrink1");
			TNT1 A 0 A_StartSound("Tesla/Fire1",0);
			TNT1 AAAAA 0 A_SpawnItemEx("TeslaFX", random(-4,4), random(-4,4), random(0,random(1,2)), random(-6,6), random(-6,6), random(0,random(1,2)));
			Stop;
	}
}

class TeslaShot : KCFastProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 75;
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		DamageType "Lightning";
		DamageFunction (10 * random(1,8));
		SeeSound "";
		RenderStyle "Add";
		alpha 0.5;
		scale 0.3;
		Decal "none";
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		-EXTREMEDEATH;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		ProjectileKickback 50;
		DeathSound "weapons/plasmax";
	}
	
	States
	{
		Spawn: 
			MRS2 A 1 bright A_SpawnItemEx("TeslaExtra1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL A 0 A_SpawnItem("TeslaTail");
			MRS2 B 1 bright A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL A 0 A_SpawnItem("TeslaExtra1");
			Loop;
		Death:
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 CDEFG 2 bright;
			Stop;
	}
}
class TeslaShot2 : KCFastProjectile
{
	default
	{
		radius 5;
		height 10;
		Speed 75;
		SeeSound "";
		DamageType "Lightning";
		DamageFunction (80 * random(1,8));
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		DeathSound "TSLPRJC2";
		RenderStyle "Add";
		alpha 0.5;
		Decal "none";
		ExplosionRadius 192;
		ExplosionDamage 128;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		-EXTREMEDEATH;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+FORCERADIUSDMG;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn: 
			MRS2 A 1 bright A_SpawnItem("TeslaTail1");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 B 1 bright A_SpawnItem("TeslaExtra3");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			Loop;
		Death:
			NULL A 0 A_Explode(135,256,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning");
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 CDEFG 2 bright;
			Stop;
	}
}
class TeslaShot2Dual : KCFastProjectile
{
	default
	{
		radius 5;
		height 10;
		Speed 75;
		SeeSound "";
		DamageType "Lightning";
		DamageFunction (180 * random(1,8));
		Obituary "%o was fried to charred cinders by %k's Tesla Cannon.";
		DeathSound "TSLPRJC2";
		RenderStyle "Add";
		alpha 0.5;
		Decal "none";
		ExplosionRadius 288;
		ExplosionDamage 288;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		-EXTREMEDEATH;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+FORCERADIUSDMG;
		ProjectileKickback 50;
	}
	
	States
	{
		Spawn: 
			MRS2 A 0 bright A_SpawnItem("TeslaTail1");
			MRS2 A 1 bright A_SpawnItem("TeslaTail1");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 B 0 bright A_SpawnItem("TeslaExtra3");
			MRS2 B 1 bright A_SpawnItem("TeslaExtra3");
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail1",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			Loop;
		Death:
			NULL A 0 
			{
				A_StartSound("TSLPRJC2",CHAN_BODY);
				A_StartSound("TSLPRJC2",CHAN_WEAPON);
				A_Explode(405,384,XF_HURTSOURCE,false,0,0,10,"KCBulletPuff","Lightning");
			}
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaExtra3",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			NULL AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("TeslaTail",0,0,0,random(-4,4),random(-4,4),random(-4,4),random(1,360));
			MRS2 CDEFG 2 bright;
			Stop;
	}
}
class TeslaExtra : KCBaseZSC
{
	default
	{
		DamageType "Lightning";
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.2;
		RenderStyle "Add";
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}

	States
	{
		Spawn:
			ZAPR ABC 1 Bright;
			NULL A 0 A_Jump(160,1);
			Loop;
			ZAPR ABC 1 Bright;
			ZAPR DE 1 Bright A_FadeOut();
			Wait;
		Death:
			NULL A 1;
			Stop;
	}
}

class Teslatail : KCBaseZSC
{
	default
	{
		Projectile;
		Damage 0;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NOGRAVITY;
		Speed 0;
		Radius 1;
		Height 1;
		Scale 0.05;
		RenderStyle "Add";
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
	}

	States
	{
		Spawn:
			MRS2 AB 1 bright A_FadeOut();
			wait;
	}
}
class TeslaExtra1 : TeslaExtra
{
	default
	{
		Scale 0.1;
	}
}
class TeslaExtra3 : TeslaExtra
{
	default
	{
		Scale 0.6;
	}
}
class Teslatail1 : Teslatail
{
	default
	{
		Scale 0.3;
	}
}

class Bolts : Ammo
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 50;
		Inventory.MaxAmount 450;
		Ammo.BackpackAmount 100;
		scale 0.3;
		RenderStyle "Translucent";
		Alpha 0.9;
		Ammo.BackpackMaxAmount 900;
		Inventory.PickupMessage "Picked up a \cvTesla Charge\c-.";
		Inventory.PickupSound "getteslasmall";
		Inventory.Icon "TESCC0";
	}
	States
	{
		Spawn:
			TESC A 1;
			Loop;
	}
}

class BoltsLarge : Bolts
{
	default
	{
		+INVENTORY.IGNORESKILL;
		Radius 10;
		Inventory.Amount 200;
		scale 0.75;
		RenderStyle "Translucent";
		Alpha 0.9;
		Inventory.PickupMessage "Picked up a \cvBox of Tesla Charges\c-.";
		Inventory.PickupSound "getteslabox";
	}
	States
	{
		Spawn:
			TESC B 1;
			Loop;
	}
}

class BHGen : MarineWeapon
{
	int altshottype;
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";

		Weapon.SelectionOrder 2900;
		Weapon.AmmoUse1 50;
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive 50;
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.SlotNumber 7;
		Inventory.PickupMessage "You got the \cvBlack Hole Generator\c-! \cx[Slot 7]\c-";
		Tag "Black Hole Generator";
		+WEAPON.NOAUTOAIM;
		//Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	States
	{
		Spawn:
			BHGG A -1;
			Stop;
		Select:
			BHGN A 1 A_Raise(12);
			Loop;
		Deselect:
			BHGN A 1 A_Lower(12);
			Loop;
		Ready:
			BHGN A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Fire:
			BHGN A 8 Bright A_StartSound("DMC/Charge",CHAN_WEAPON);
			BHGN BCDE 10 Bright;
			BHGN F 0 A_StartSound("DMC/Fire",7);
			BHGN F 0 A_GunFlash();
			BHGN F 3 Bright A_FireProjectile("DMBall",0,1,0,0);
			BHGN FGG 3 Bright;
			BHGN CB 4;
			BHGN A 14;
			BHGN A 2 A_Refire();
			Goto Ready;
		AltFire:
			BHGN A 0
			{
				if (invoker.altshottype >= 1)
				{
					if (CountInv("Cell") >= 25) return resolvestate("AltFire2");
																 else return resolvestate("Ready");
				}
				else
				{
					if (CountInv("Cell") >= 125) return resolvestate("AltFire1");
																	else return resolvestate("Ready");
				}
				return resolvestate(null);
			}
			goto Ready;
		AltFire1:
			BHGN A 12 Bright 
			{
				A_StartSound("DMC/Charge",CHAN_WEAPON);
				A_StartSound("DMC/Charge",CHAN_BODY);
				A_StartSound("DMC/Charge",CHAN_VOICE);
			}
			BHGN BCDE 15 Bright;
			BHGN F 0 
			{
				A_StartSound("DMC/Fire",7);
				A_StartSound("DMC/Fire",8);
				A_StartSound("DMC/Fire",9);
			}
			BHGN F 0 A_GunFlash();
			BHGN F 3 Bright 
			{
				A_TakeInventory("Cell",125,TIF_NOTAKEINFINITE);
				A_FireProjectile("DMBall2",0,1,0,0);
				A_SetTics(random(4,5));
			}
			BHGN FGG 4 Bright
			{
				A_SetTics(random(4,5));
			}
			BHGN CB 6;
			BHGN A 21;
			BHGN A 3 A_Refire();
			Goto Ready;
		AltFire2:
			BHGN A 4 Bright A_StartSound("DMC/Charge",CHAN_WEAPON,CHANF_DEFAULT,0.75,ATTN_NORM,frandom(1.25,1.5));
			BHGN B 5 Bright;
			BHGN C 5 Bright;
			BHGN D 5 Bright;
			BHGN E 5 Bright;
			BHGN F 1 Bright
			{
				A_TakeInventory("Cell",25,TIF_NOTAKEINFINITE);
				A_StartSound("DMC/Fire",CHAN_7,CHANF_DEFAULT,0.75,ATTN_NORM,frandom(1.25,1.5));
				A_GunFlash();
				A_FireProjectile("DMBallMini",0,1,0,0);
			}
			BHGN F 2 Bright;
			BHGN G 1 Bright;
			BHGN G 2 Bright;
			BHGN C 2;
			BHGN B 2;
			BHGN A 7;
			BHGN A 1 A_Refire();
			Goto Ready;
		Flash:
			BHGF A 3 Bright A_Light2();
			BHGF B 3 Bright A_Light1();
			BHGF C 3 Bright A_Light0();
			BHGF D 3 Bright;
			Goto LightDone;
			
		User4:
			BHGN A 0
			{
				A_StopSound(CHAN_6);
				A_StartSound("weapons/blstrpst3",CHAN_6);
				if (invoker.altshottype == 0)
				{
					invoker.altshottype = 1;
					A_Print("Alt-Fire: Mini Black Holes [25 cells, faster firing, weaker]");
				}
				else
				if (invoker.altshottype == 1)
				{
					invoker.altshottype = 0;
					A_Print("Alt-Fire: Mega Black Hole [125 cells, slower firing, absurdly stronger]");
				}
			}
			BHGN A 8;
			Goto Ready;
	}
}

class DMBall : KCProjectile
{
	default
	{
		Projectile;
		Radius 13;
		Height 8;
		Speed 22; // 22
		DamageFunction (10 * random(1,8));
		Renderstyle "Translucent";
		Alpha 0.75;
		DeathSound "DMBall/Impact";
		Decal "BHoleDecal";
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+PAINLESS;
		+RIPPER;
		+FORCEXYBILLBOARD;
		+NODAMAGETHRUST;
		+FORCERADIUSDMG;
	}
	
	void A_BlackHoleSuck()
	{
		int baseforce = -240;
		int basedist = 200;
		int flags1 = 0;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				baseforce = -480;
				basedist = 400;
			}
		}
		A_RadiusThrust(baseforce,basedist,flags1);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
	}
	
	void A_BlackHoleAOE()
	{
		int basedmg = 10;
		int basedist = 90;
		int basefdist = 15;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = 20;
				basedist = 180;
				basefdist = 30;
			}
		}
		A_Explode(basedmg,basedist,0,false,basefdist);
	}
	
	States
	{
		Spawn:
			VOIP AA 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP BB 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP CC 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP DD 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP EE 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP FF 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("BlackHole",0,0,0);
			TNT1 A 0 A_SetScale(1.2);
			VORX ABCDEFGH 2 Bright;
			Stop;
	}
}

class DMBallMini : DMBall
{
	default
	{
		Projectile;
		Radius 6.5;
		Height 4;
		Speed 22; // 22
		DamageFunction (5 * random(1,8));
		Renderstyle "Translucent";
		Alpha 0.5;
		Scale 0.5;
		DeathSound "DMBall/Impact";
		Decal "BHoleDecal";
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+PAINLESS;
		+RIPPER;
		+FORCEXYBILLBOARD;
		+NODAMAGETHRUST;
		+FORCERADIUSDMG;
	}
	
	void A_BlackHoleSuck()
	{
		int baseforce = -120;
		int basedist = 100;
		int flags1 = 0;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				baseforce = -240;
				basedist = 200;
			}
		}
		A_RadiusThrust(baseforce,basedist,flags1);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
	}
	
	void A_BlackHoleAOE()
	{
		int basedmg = 5;
		int basedist = 45;
		int basefdist = random(7,8);
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = 10;
				basedist = 90;
				basefdist = 15;
			}
		}
		A_Explode(basedmg,basedist,0,false,basefdist);
	}
	
	States
	{
		Spawn:
			VOIP AA 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			VOIP BB 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			VOIP CC 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			VOIP DD 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			VOIP EE 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			VOIP FF 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
			}
			TNT1 A 0 
			{
				A_BlackHoleAOE();
				A_SpawnItemEx("DMBTrailMini",0,0,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("BlackHoleMini",0,0,0);
			TNT1 A 0 A_SetScale(0.6);
			VORX ABCDEFGH 2 Bright;
			Stop;
	}
}

class DMBall2 : DMBall
{
	default
	{
		Projectile;
		Radius 26;
		Height 16;
		Speed 22; // 22
		DamageFunction (20 * random(1,8));
		Renderstyle "Translucent";
		Alpha 0.75;
		DeathSound "DMBall/Impact";
		Decal "BHoleDecal";
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+PAINLESS;
		+RIPPER;
		+FORCEXYBILLBOARD;
		+NODAMAGETHRUST;
		+FORCERADIUSDMG;
	}
	
	void A_BlackHoleSuck()
	{
		int baseforce = -480;
		int basedist = 400;
		int flags1 = 0;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				baseforce = -960;
				basedist = 800;
			}
		}
		A_RadiusThrust(baseforce,basedist,0);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
	}
	
	void A_BlackHoleAOE()
	{
		int basedmg = 20;
		int basedist = 180;
		int basefdist = 30;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = 40;
				basedist = 360;
				basefdist = 60;
			}
		}
		A_Explode(basedmg,basedist,0,false,basefdist);
	}
	
	States
	{
		Spawn:
			VOIP AA 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail2",0,0,0);
			}
			VOIP BB 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail2",0,0,0);
			}
			VOIP CC 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP DD 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail2",0,0,0);
			}
			VOIP EE 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail",0,0,0);
			}
			VOIP FF 1 Bright
			{
				A_BlackHoleAOE();
				A_BlackHoleSuck();
				A_SpawnItemEx("DMBTrail2",0,0,0);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("BlackHole2",0,0,0);
			TNT1 A 0 A_SetScale(1.2);
			VORX ABCDEFGH 2 Bright;
			Stop;
	}
}

class DMBTrail : KCProjectile
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		RenderStyle "Translucent";
		Alpha 0.70;
		Scale 0.7;
	}
	
	States
	{
		Spawn:
			VORX ABCDEFGH 2 Bright A_FadeOut(0.1);
			Stop;
	}
}

class DMBTrailMini : DMBTrail
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		RenderStyle "Translucent";
		Alpha 0.35;
		Scale 0.35;
	}
	
	States
	{
		Spawn:
			VORX ABCDEFGH 2 Bright A_FadeOut(0.05);
			Stop;
	}
}

class DMBTrail2 : DMBTrail
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
		RenderStyle "Translucent";
		Alpha 0.70;
		Scale 1.05;
	}
	
	States
	{
		Spawn:
			VORX ABCDEFGH 2 Bright A_FadeOut(0.1);
			Stop;
	}
}

class BlackHole : KCProjectile
{
	default
	{
		Projectile;
		Radius 6;
		Height 40;
		Speed 0;
		RenderStyle "Translucent";
		Alpha 0.85;
		Scale 1.8;
		ReactionTime 30;
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+NOCLIP;
		+NODAMAGETHRUST;
		+FORCEXYBILLBOARD;
		+FORCERADIUSDMG;
		+EXTREMEDEATH;
	}
	
	void A_BHoleAOE()
	{
		int basedmg = random(7,9);
		int basedamrad = 180;
		int baseforce = -360;
		int basedist = 340;
		int basefdist = 10;
		int flags1 = RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
		int flags2 = XF_HURTSOURCE;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = random(17,23);
				basedamrad = 360;
				baseforce = -720;
				basedist = 680;
				basefdist = 20;
				flags1 = RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
				flags2 = 0;
			}
		}
		A_RadiusThrust(baseforce,basedist,flags1);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
		A_Explode(basedmg,basedamrad,flags2,false,basefdist);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_CountDown();
			TNT1 A 0 A_StartSound("BHole/Suck",CHAN_VOICE,CHANF_LOOP);
			BHOL A 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL B 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL C 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL D 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL E 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL F 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL G 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL H 1 Bright Light("BHOLE_1") A_BHoleAOE();
			BHOL I 1 Bright Light("BHOLE_1") A_BHoleAOE();
			Loop;
		Death:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			TNT1 A 0 A_SpawnItemEx("BHSmoke",0,0,0);
			TNT1 A 0 A_SpawnItemEx("BHExplosion",0,0,0);
			TNT1 A 0 A_StartSound("BHole/Explosion");
			BHOL A 1 Bright Light("BHOLE_2") A_FadeOut(0.08);
			BHOL B 1 Bright Light("BHOLE_3") A_FadeOut(0.08);
			BHOL C 1 Bright Light("BHOLE_4") A_FadeOut(0.08);
			BHOL D 1 Bright Light("BHOLE_5") A_FadeOut(0.08);
			BHOL E 1 Bright Light("BHOLE_6") A_FadeOut(0.08);
			BHOL F 1 Bright Light("BHOLE_7") A_FadeOut(0.08);
			BHOL G 1 Bright Light("BHOLE_8") A_FadeOut(0.08);
			BHOL H 1 Bright Light("BHOLE_9") A_FadeOut(0.08);
			BHOL I 1 Bright Light("BHOLE_10") A_FadeOut(0.08);
			Stop;
	}
}

class BlackHoleMini : BlackHole
{
	default
	{
		Projectile;
		Radius 3;
		Height 20;
		Speed 0;
		RenderStyle "Translucent";
		Alpha 0.425;
		Scale 0.9;
		ReactionTime 30;
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+NOCLIP;
		+NODAMAGETHRUST;
		+FORCEXYBILLBOARD;
		+FORCERADIUSDMG;
		+EXTREMEDEATH;
	}
	
	void A_BHoleAOE()
	{
		int basedmg = randompick(3,4,4,4,5);
		int basedamrad = 90;
		int baseforce = -180;
		int basedist = 170;
		int basefdist = 5;
		int flags1 = RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
		int flags2 = XF_HURTSOURCE;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = random(8,11);
				basedamrad = 180;
				baseforce = -360;
				basedist = 340;
				basefdist = 10;
				flags1 = RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
				flags2 = 0;
			}
		}
		A_RadiusThrust(baseforce,basedist,flags1);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
		A_Explode(basedmg,basedamrad,flags2,false,basefdist);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_CountDown();
			TNT1 A 0 A_StartSound("BHole/Suck",CHAN_VOICE,CHANF_LOOP,0.75,ATTN_NORM,frandom(1.25,1.5));
			BHOL A 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL B 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL C 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL D 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL E 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL F 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			TNT1 A 0 A_CountDown();
			BHOL G 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL H 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL I 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL A 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL B 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL C 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			TNT1 A 0 A_CountDown();
			BHOL D 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL E 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL F 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL G 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL H 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			BHOL I 1 Bright Light("MINIBHOLE_1") A_BHoleAOE();
			Loop;
		Death:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			TNT1 A 0 A_SpawnItemEx("BHSmokeMini",0,0,0);
			TNT1 A 0 A_SpawnItemEx("BHExplosionMini",0,0,0);
			TNT1 A 0 A_StartSound("BHole/Explosion",CHAN_7,CHANF_DEFAULT,0.75,ATTN_NORM,frandom(1.25,1.5));
			BHOL A 1 Bright Light("MINIBHOLE_2") A_FadeOut(0.04);
			BHOL B 1 Bright Light("MINIBHOLE_3") A_FadeOut(0.04);
			BHOL C 1 Bright Light("MINIBHOLE_4") A_FadeOut(0.04);
			BHOL D 1 Bright Light("MINIBHOLE_5") A_FadeOut(0.04);
			BHOL E 1 Bright Light("MINIBHOLE_6") A_FadeOut(0.04);
			BHOL F 1 Bright Light("MINIBHOLE_7") A_FadeOut(0.04);
			BHOL G 1 Bright Light("MINIBHOLE_8") A_FadeOut(0.04);
			BHOL H 1 Bright Light("MINIBHOLE_9") A_FadeOut(0.04);
			BHOL I 1 Bright Light("MINIBHOLE_10") A_FadeOut(0.04);
			Stop;
	}
}

class BlackHole2 : BlackHole
{
	default
	{
		Projectile;
		Radius 12;
		Height 80;
		Speed 0;
		RenderStyle "Translucent";
		Alpha 0.85;
		Scale 3.6;
		ReactionTime 75;
		Obituary "%o got spaghettified by %k's Black Hole Generator.";
		DamageType "BlackHole";
		+NOCLIP;
		+NODAMAGETHRUST;
		+FORCEXYBILLBOARD;
		+FORCERADIUSDMG;
		+EXTREMEDEATH;
	}
	
	void A_BHoleAOE()
	{
		int basedmg = random(15,17);
		int basedamrad = 360;
		int baseforce = -720;
		int basedist = 680;
		int basefdist = 20;
		int flags1 = RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
		int flags2 = XF_HURTSOURCE;
		if (target)
		{
			//Console.Printf("%s", target.GetClassName());
			if (HeiwaPlayer(target))
			{
				basedmg = random(35,45);
				basedamrad = 720;
				baseforce = -1440;
				basedist = 1360;
				basefdist = 40;
				flags1 = RTF_NOIMPACTDAMAGE|RTF_THRUSTZ;
				flags2 = 0;
			}
		}
		A_RadiusThrust(baseforce,basedist,flags1);
		A_RadiusThrust((baseforce*0.875),(basedist*0.75),flags1);
		A_RadiusThrust((baseforce*0.75),(basedist*0.5),flags1);
		A_RadiusThrust((baseforce*0.625),(basedist*0.25),flags1);
		A_RadiusThrust((baseforce*0.5),(basedist*0.125),flags1);
		A_RadiusThrust((baseforce*0.375),(basedist*0.0625),flags1);
		A_RadiusThrust((baseforce*0.25),(basedist*0.03125),flags1);
		A_RadiusThrust((baseforce*0.125),(basedist*0.0156125),flags1);
		A_Explode(basedmg,basedamrad,flags2,false,basefdist);
	}
	
	States
	{
		Spawn:
			TNT1 A 0 A_CountDown();
			TNT1 A 0 A_StartSound("BHole/Suck",CHAN_VOICE,CHANF_LOOP);
			BHOL A 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL B 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL C 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL D 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL E 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL F 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL G 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL H 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			BHOL I 1 Bright Light("HUGEBHOLE_1") A_BHoleAOE();
			Loop;
		Death:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			TNT1 A 0 A_SpawnItemEx("BHSmoke2",0,0,0);
			TNT1 A 0 A_SpawnItemEx("BHExplosion2",0,0,0);
			TNT1 A 0 
			{
				A_StartSound("BHole/Explosion",10);
				A_StartSound("BHole/Explosion",11);
				A_StartSound("BHole/Explosion",12);
				A_StartSound("BHole/Explosion",13);
			}
			BHOL A 1 Bright Light("HUGEBHOLE_2") A_FadeOut(0.08);
			BHOL B 1 Bright Light("HUGEBHOLE_3") A_FadeOut(0.08);
			BHOL C 1 Bright Light("HUGEBHOLE_4") A_FadeOut(0.08);
			BHOL D 1 Bright Light("HUGEBHOLE_5") A_FadeOut(0.08);
			BHOL E 1 Bright Light("HUGEBHOLE_6") A_FadeOut(0.08);
			BHOL F 1 Bright Light("HUGEBHOLE_7") A_FadeOut(0.08);
			BHOL G 1 Bright Light("HUGEBHOLE_8") A_FadeOut(0.08);
			BHOL H 1 Bright Light("HUGEBHOLE_9") A_FadeOut(0.08);
			BHOL I 1 Bright Light("HUGEBHOLE_10") A_FadeOut(0.08);
			Stop;
	}
}

class BHSmoke : KCBaseZSC
{
	default
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Translucent";
		Alpha 0.70;
		Scale 2.2;
	}
	
	States
	{
		Spawn:
			BHXP ABCDEFGHIJKLMNO 2 A_FadeOut(0.03,FTF_REMOVE);
			Stop;
	}
}

class BHSmokeMini : BHSmoke
{
	default
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Translucent";
		Alpha 0.35;
		Scale 1.1;
	}
	
	States
	{
		Spawn:
			BHXP ABCDEFGHIJKLMNO 2 A_FadeOut(0.03,FTF_REMOVE);
			Stop;
	}
}

class BHSmoke2 : BHSmoke
{
	default
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Translucent";
		Alpha 0.70;
		Scale 3.3;
	}
	
	States
	{
		Spawn:
			BHXP ABCDEFGHIJKLMNO 2 A_FadeOut(0.03,FTF_REMOVE);
			Stop;
	}
}

class BHExplosion : KCProjectile
{
	double alphafade;
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				alphafade = 0.09;
			}
			DBX3 A 1 Light("BHEXP_1") Bright A_SetScale(1.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_2") Bright A_SetScale(1.50);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_3") Bright A_SetScale(1.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_4") Bright A_SetScale(2.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_5") Bright A_SetScale(2.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_6") Bright A_SetScale(2.50);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("BHEXP_7") Bright A_SetScale(2.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.50);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(4.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(4.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			Stop;
	}
}

class BHExplosionMini : BHExplosion
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				alphafade = 0.135;
			}
			DBX3 A 1 Light("MINIBHEXP_1") Bright A_SetScale(0.625);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_2") Bright A_SetScale(0.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_3") Bright A_SetScale(0.875);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_4") Bright A_SetScale(1.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_5") Bright A_SetScale(1.125);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_6") Bright A_SetScale(1.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Light("MINIBHEXP_7") Bright A_SetScale(1.375);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(1.5);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(1.625);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(1.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(1.875);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(2.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(2.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(2.5);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(2.75);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.0);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.25);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			DBX3 A 1 Bright A_SetScale(3.50);
			TNT1 A 0 A_FadeOut(alphafade,FTF_REMOVE);
			Stop;
	}
}

class BHExplosion2 : BHExplosion
{
	default
	{
		+NOINTERACTION;
		+FORCEXYBILLBOARD;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				alphafade = 0.09;
			}
			DBX3 A 1 Light("HUGEBHEXP_1") Bright A_SetScale(1.25);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_2") Bright A_SetScale(1.50);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_3") Bright A_SetScale(1.75);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_4") Bright A_SetScale(2.0);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_5") Bright A_SetScale(2.25);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_6") Bright A_SetScale(2.50);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Light("HUGEBHEXP_7") Bright A_SetScale(2.75);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(3.0);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(3.25);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(3.50);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(3.75);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(4.0);
			TNT1 A 0 A_FadeOut(alphafade);
			DBX3 A 1 Bright A_SetScale(4.25);
			TNT1 A 0 A_FadeOut(alphafade);
			Stop;
	}
}

class Deviation : MarineWeapon // replaces RocketLauncher
{
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got the \ca''Deviation'' Dumb Missile Launcher\c-! \cx[Slot 5]\c-";
		Weapon.UpSound "weapons/gemiup";
		Weapon.AmmoType "RocketAmmo";
		Weapon.AmmoType1 "RocketAmmo";
		Weapon.AmmoType2 "RocketAmmo";
		Weapon.AmmoGive 6;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.SlotNumber 5;
		Scale 0.85;
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	States
	{
		Spawn:
			RNPR A -1;
			LOOP;
		Ready: 
			RPRL A 1 A_WeaponReady();
			LOOP;
		Deselect: 
			RPRL A 1 A_Lower(12);
			Loop;
		Select: 
			RPRL A 1 A_Raise(12);
			Loop;
		AltFire:
			RPRL A 0 A_StartSound("weapons/gemifire",CHAN_WEAPON);
			RPRL A 0 A_GunFlash();
			RPRL BC 1 Bright;
			RPRL C 0 
			{
				A_Recoil(frandom(2.25,4.5));
				A_FireProjectile("DumbRocket",frandom(4.5,-4.5),1,0,0);
			}
			RPRL DEF 1 Bright;
			RPRL A 3;
			Goto Ready;
		AltFlash:
			TNT1 A 5 A_Light2();
			TNT1 A 3 A_Light1();
			TNT1 A 0 A_Light0();
			Stop;
		Fire:
			RPRL A 0 A_StartSound("weapons/gemifire",CHAN_WEAPON);
			RPRL A 0 A_GunFlash();
			RPRL BC 2 Bright;
			RPRL C 0 
			{
				A_Recoil(frandom(0.225,0.45));
				A_FireProjectile("DeviationRocket",frandom(0.45,-0.45),1,0,0);
			}
			RPRL DEF 2 Bright;
			RPRL A 6;
			Goto Ready;
		Flash:
			TNT1 A 10 A_Light2();
			TNT1 A 6 A_Light1();
			TNT1 A 0 A_Light0();
			Stop;
	}
}

class DeviationRocketBase : RocketBase
{
	default
	{
		Speed 20;
		-RANDOMIZE;
		-ROCKETTRAIL;
		+FORCERADIUSDMG;
		SeeSound "";
		DamageType "Explosive";
		DamageFunction (20*random(1,8));
		Tag "Deviation Rocket";
	}
}

class DumbRocket : DeviationRocketBase
{
	default
	{
		Speed 30;
		-RANDOMIZE;
		-ROCKETTRAIL;
		+FORCERADIUSDMG;
		SeeSound "";
		DamageType "Explosive";
		DamageFunction (30*random(1,8));
		Tag "Deviation 'Dumb' Rocket";
	}
	
	States
	{
		Spawn:
			MISD A 1 Bright 
			{
				A_SetScale(1.25);
				A_SeekerMissile(2,2,SMF_LOOK,128,10);
				A_ChangeVelocity (1, frandom(-3, 3), frandom(-2, 2), 1);
				A_SpawnItemEx("DumbTrail", 0, random(2,-2), random(2,-2), 0, 0, 0, 0, 128, 0);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_SetScale(1.5);
				A_Quake(1.5, 4, 0, 768, "nosound/silent");
				A_Quake(6, 4, 0, 384, "nosound/silent");
			}
			TNT1 A 0 A_Explode(192,192,XF_HURTSOURCE,false,(randompick(32,64,64,64,64,64,96) * 1.5));
			TNT1 AAAAAAAAAA 0 bright A_SpawnItemEx("Smoke", 0, 0, 0, random(2,-2), random(2,-2), 1+random(1,-3), 0, 128, 0);
			TNT1 AAAA 0 bright A_SpawnItemEx("LargeBoomy", 0, random(2,-2), random(2,-2), 0, 0, 1, 0, 128, 0);
			TNT1 A 70;
			Stop;
	}
}

class DumbRocketShotgun : DeviationRocketBase
{
	default
	{
		Speed 30;
		-RANDOMIZE;
		-ROCKETTRAIL;
		+FORCERADIUSDMG;
		SeeSound "";
		DamageType "Explosive";
		DamageFunction (15*random(1,8));
		Tag "Deviation 'Dumb' Mini Rocket";
	}
	
	States
	{
		Spawn:
			MISD A 1 Bright 
			{
				A_SetScale(0.625);
				A_SeekerMissile(4,4,SMF_LOOK,64,5);
				A_ChangeVelocity (2, frandom(-6, 6), frandom(-4, 4), 1);
				A_SpawnItemEx("DumbTrail", 0, random(2,-2), random(2,-2), 0, 0, 0, 0, 128, 0);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_SetScale(0.75);
				A_Quake(0.75, 4, 0, 384, "nosound/silent");
				A_Quake(3, 4, 0, 192, "nosound/silent");
			}
			TNT1 A 0 A_Explode(96,96,XF_HURTSOURCE,false,(randompick(32,64,64,64,64,64,96) * 0.75));
			TNT1 AAAAAAAAAA 0 bright A_SpawnItemEx("Smoke", 0, 0, 0, random(2,-2), random(2,-2), 1+random(1,-3), 0, 128, 0);
			TNT1 AAAA 0 bright A_SpawnItemEx("Boomy", 0, random(2,-2), random(2,-2), 0, 0, 1, 0, 128, 0);
			TNT1 A 70;
			Stop;
	}
}

class DeviationRocket : DeviationRocketBase
{
	default
	{
		Speed 60;
		-RANDOMIZE;
		-ROCKETTRAIL;
		+FORCERADIUSDMG;
		SeeSound "";
		DamageType "Explosive";
		DamageFunction (30*random(1,8));
		Tag "Deviation 'Smart' Rocket";
	}
	
	States
	{
		Spawn:
			MISD A 1 Bright 
			{
				A_SetScale(1.25);
				A_ChangeVelocity (0.01, frandom(-0.03, 0.03), frandom(-0.02, 0.02), 1);
				A_SeekerMissile(20,20,SMF_LOOK,randompick(1,1,1,1,1,1,2),10);
				A_SpawnItemEx("DumbTrail", 0, random(2,-2), random(2,-2), 0, 0, 0, 0, 128, 0);
			}
			MISD A 1 Bright 
			{
				A_SetScale(1.25);
				A_ChangeVelocity (0.01, frandom(-0.03, 0.03), frandom(-0.02, 0.02), 1);
			}
			MISD A 1 Bright 
			{
				A_SetScale(1.25);
				A_ChangeVelocity (0.01, frandom(-0.03, 0.03), frandom(-0.02, 0.02), 1);
				if (random(1,2) <= 1)
				{
					A_SeekerMissile(20,20,SMF_LOOK,randompick(1,1,1,1,1,1,2),10);
					A_SpawnItemEx("DumbTrail", 0, random(2,-2), random(2,-2), 0, 0, 0, 0, 128, 0);
				}
			}
			MISD A 1 Bright 
			{
				A_SetScale(1.25);
				A_ChangeVelocity (0.01, frandom(-0.03, 0.03), frandom(-0.02, 0.02), 1);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_SetScale(1.5);
				A_Quake(1.5, 4, 0, 768, "nosound/silent");
				A_Quake(6, 4, 0, 384, "nosound/silent");
			}
			TNT1 A 0 A_Explode(192,192,XF_HURTSOURCE,false,(randompick(32,64,64,64,64,64,96) * 1.5));
			TNT1 AAAAAAAAAA 0 bright A_SpawnItemEx("Smoke", 0, 0, 0, random(2,-2), random(2,-2), 1+random(1,-3), 0, 128, 0);
			TNT1 AAAA 0 bright A_SpawnItemEx("LargeBoomy", 0, random(2,-2), random(2,-2), 0, 0, 1, 0, 128, 0);
			TNT1 A 140;
			Stop;
	}
}

class Smoke : KCBaseZSC
{
	default
	{
		Scale 0.5;
		Alpha 0.55;
		RenderStyle "Add";
		+NOCLIP;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			SMOK ABCDEFGHIJKLMNOPQ 1 BRIGHT;
			Stop;
	}
}

class Boomy : KCBaseZSC
{ 
	default
	{
		Scale 1;
		Alpha 0.75;
		RenderStyle "Add";
		+NOCLIP;
		+NOGRAVITY;
	}
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(255,"Spawn1","Spawn2");
		Spawn1:    
			EXP1 ABCDEFGHIJKLMNOP 1 BRIGHT;
			Stop;
		Spawn2:
			EXP2 ABCDEFGHIJKLMNOP 1 BRIGHT;
			Stop;
	}
}

class LargeBoomy : Boomy
{ 
	default
	{
		Scale 1.5;
		Alpha 0.75;
		RenderStyle "Add";
		+NOCLIP;
		+NOGRAVITY;
	}
}

class DumbTrail : Smoke
{
	default
	{
		Scale 0.175;
		Alpha 0.3;
	}
}

//
Class Translocator : MarineWeapon
{
	actor bacon, beacon;
	actor dummy;
	bool tfenabled;
	int tfradius;
	bool tfdynamicdamage;
	int tfdamage;
	Override Void PostBeginPlay()
	{
		actor playera = players[0].mo;
		tfradius = 16;			// telefrag radius (player radius is 16)
		if (playera) tfradius = playera.radius;

		tfenabled = true;		// enable/disable telefrag
		tfdynamicdamage = true;	// use the player's current health+armor values as telefrag damage
		tfdamage = 400;			// fixed telefrag damage (only used if tfdynamicdamage = false)
		Super.PostBeginPlay();
	}
	Default
	{
		//$Category Weapons
		//$Sprite VTLPA0
		//$Title "Translocator"

		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/ThatsSus";
		KCWeaponBase.PickUpVoice false;
		KCWeaponBase.PickUpVoice2 false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got the \c[fire]Translocator Telebeacon System\c-! \cx[Slot 8]\c-";

		Weapon.AmmoGive 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoType1 "TLBeaconAmmo";
		Weapon.BobSpeed 0.0;
		Weapon.SlotNumber 8;
		Weapon.SlotPriority 0;
		Weapon.SelectionOrder 4000;
		Obituary "%o was telefragged by %k!";
		+FLOORCLIP;	
		+WEAPON.NO_AUTO_SWITCH;
		+WEAPON.NOAUTOSWITCHTO;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOAUTOFIRE;
		+WEAPON.NOALERT;
		+WEAPON.AMMO_OPTIONAL;
	}
	
	vector3 CheckSpace(actor testobj)
	{
		vector3 oldpos = testobj.pos;
		vector3 testpos;
		vector3 newpos;
		int cmc;
		int ang = 20;
		int rad = testobj.radius;
		vector3 dir = (rad,0,0);
		double c = cos(ang);
		double s = sin(ang);

		for (double i = 0; abs(i) < 360; i += ang)
		{
			dir = (dir.x*c - dir.y*s, dir.x*s + dir.y*c,0);
			testpos = level.Vec3Offset(oldpos,dir,0);
			vector2 cmpos = (testpos.x,testpos.y);
			bool cm = testobj.Checkmove(cmpos);
			if (cm)
			{	
				cmc += 1;
				if (cmc == 360/ang) return oldpos;
				newpos = testpos;
				continue;
			}
		}
		return newpos;
	}	
	
	States
	{
		Spawn:
			VTLP A -1;
			Stop;
		Ready:
			VTLW D 1 A_WeaponReady();
			Loop;
		ReadyLaunched:
			VTLW A 1 A_WeaponReady();
			Loop;
		Deselect:
			TNT1 A 0
			{
				if (invoker.beacon) Player.SetPSprite(PSP_WEAPON,invoker.FindState("DeselectLaunched"));
			}
			VTLW D 1 A_Lower(12);
			Loop;
		DeselectLaunched:
			VTLW A 1 A_Lower(12);
			Loop;
		Select:
			TNT1 A 0
			{
				if (invoker.beacon) Player.SetPSprite(PSP_WEAPON,invoker.FindState("SelectLaunched"));
			}
			VTLW D 1 A_Raise(12);
			Loop;
		SelectLaunched:
			VTLW CCCCCC 1 A_Raise(12);
			Goto ReadyLaunched;
		//----------------------------------Launch Beacon-------------------------------
		Fire:
			TNT1 A 0
			{	
				if (!invoker.beacon) 
				{
					[invoker.bacon, invoker.beacon] = A_FireProjectile("TLBeacon",spawnheight:-5,pitch:-5);
					if (invoker.beacon)
					{
						A_Startsound("Translocator/shoot");
						Player.SetPSprite(PSP_WEAPON,invoker.FindState("Launched"));
					}
					else
					{
						Player.SetPSprite(PSP_WEAPON,invoker.FindState("Warning2"));
					}
				}
				else
				{
					//------------------------------------Spawn Dummy-------------------------------	
					if (invoker.dummy = Spawn("TLBeaconDummy",invoker.beacon.pos + (0,0,invoker.beacon.height)))
					{
						invoker.dummy.target = invoker.beacon.target;
						vector3 newpos;
						newpos = invoker.CheckSpace(invoker.dummy);
						invoker.dummy.angle = invoker.beacon.angle;
						invoker.dummy.SetXYZ(newpos);
						if (newpos == (0,0,0))
						{
							invoker.dummy.Destroy();
							Player.SetPSprite(PSP_WEAPON,invoker.FindState("Warning"));
						}
						else
						{
						//------------------------------------Teleport----------------------------------						
							A_SpawnItemex("TLBeaconFog");
							if (invoker.tfenabled)
							{
								if (invoker.tfdynamicdamage)
								{
									invoker.tfdamage = invoker.owner.health + invoker.owner.FindInventory("BasicArmor").amount;
								}
								invoker.dummy.A_Explode(invoker.tfdamage,invoker.tfradius,XF_NOSPLASH|XF_THRUSTLESS,false,invoker.tfradius);
							}
							self.target = invoker.dummy;
							A_Warp(AAPTR_TARGET, zofs: -invoker.beacon.height, flags: WARPF_USECALLERANGLE);
							invoker.dummy.A_SpawnItemex("TLBeaconFog2",xofs:-8);
							invoker.beacon.Destroy();
							invoker.dummy.Destroy();
							A_GiveInventory("TLBeaconAmmo");
							Player.SetPSprite(PSP_WEAPON,invoker.FindState("Reload"));
						}
					}
					else
					{
						Player.SetPSprite(PSP_WEAPON,invoker.FindState("Warning"));
					}
				}
			}
			VTLW C 7;
			Goto Ready;
		//----------------------------------Recall Beacon-------------------------------
		AltFire:
			TNT1 A 0 
			{
				if (invoker.beacon) 
				{
					invoker.beacon.A_SpawnItemEx("TLBeaconFog");
					invoker.beacon.Destroy();
					A_GiveInventory("TLBeaconAmmo");
					Player.SetPSprite(PSP_WEAPON,invoker.FindState("Reload"));
				}
			}
			Goto Ready;
		//------------------------------------Misc States-------------------------------
		Launched:
			VTLW A 1 
			{
				A_WeaponReady();
				if (!invoker.beacon)
				{
					A_GiveInventory("TLBeaconAmmo");
					Player.SetPSprite(PSP_WEAPON,invoker.FindState("Reload"));
				}
			}
			Loop;
		Warning:
			VTLW E 7
			{
				A_Startsound("Translocator/warning");
				A_WeaponReady();
				if (!invoker.beacon)
				{
					A_GiveInventory("TLBeaconAmmo");
					Player.SetPSprite(PSP_WEAPON,invoker.FindState("Reload"));
				}
				else
				{
					invoker.beacon.Setstatelabel("Red");
				}
			}
			Goto Launched;
		Warning2:
			VTLW F 7
			{
				A_Startsound("Translocator/warning");
				A_WeaponReady();
			}
			Goto Ready;
		Reload:
			TNT1 A 0 A_GunFlash;
			VTLW D 4 A_Startsound("Translocator/teleport",volume:0.5,pitch:1.5);
			Goto Ready;
		Flash:
			VTLF KABCDEFGHIJ 2;
			Stop;
	}
}

//
class FistHeiwa : MarineWeapon // replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_HeiwaPrePunch()
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		int basechance = 31;
		if (A_CheckBerserk()) basechance *= frandompick(2.25,2.25,2.25,2.4375,2.4375,2.625);
		if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
		{
			double maskpitch = 1.00;
			if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
			string voicenm;
			double voicevol = frandom(0.90,1.45);
			if (A_CheckBerserk()) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
			int randvoice = random(1,20);
			if (randvoice >= 1 && randvoice <= 4) voicenm = "HeiwaKiai1";
			if (randvoice >= 5 && randvoice <= 8) voicenm = "HeiwaKiai2";
			if (randvoice >= 9 && randvoice <= 12) voicenm = "HeiwaKiai3";
			if (randvoice >= 13 && randvoice <= 16) voicenm = "HeiwaKiai4";
			if (randvoice >= 17 && randvoice <= 20) voicenm = "HeiwaKiai5";
			if (kc_heiwaextravoices && 
					MiscItem.OneLinerTimerCool <= 0 &&
					randvoice > 0)
			{
				A_StopSound(CHAN_VOICE);
				A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
			}
		}
	}
	action void A_HeiwaPunch(int type = 0)
	{
		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = invoker.ActualLevel;
		
		int frange = 64;
		if (type == 1)
		{
			frange = 64 + (random(0,4) * 4);
			int basechance = 124;
			if ((TruePlayerLevel >= (A_GetHandToHandSpd(0) * 11))) basechance = 124;
			if ((TruePlayerLevel >= (A_GetHandToHandSpd(0) * 14))) basechance = random(161,162);
			if ((TruePlayerLevel >= (A_GetHandToHandSpd(0) * 17))) basechance = 217;

			//Console.Printf("@#S#");
			if (A_CheckBerserk()) basechance *= frandompick(2.25,2.25,2.25,2.4375,2.4375,2.625);
			if (random(1,256) <= basechance && (MiscItem && MiscItem.CanTalkUnderwater))
			{
				double maskpitch = 1.00;
				if (waterlevel >= 3 && MiscItem.CanTalkUnderwater >= 2) maskpitch *= 1.259921885;
				string voicenm;
				double voicevol = frandom(0.975,1.525);
				if (A_CheckBerserk()) voicevol *= frandompick(1.125,1.125,1.125,1.25,1.25,1.5);
				int randvoice = random(1,20);
				if (randvoice >= 1 && randvoice <= 4) voicenm = "HeiwaKiai1";
				if (randvoice >= 5 && randvoice <= 8) voicenm = "HeiwaKiai2";
				if (randvoice >= 9 && randvoice <= 12) voicenm = "HeiwaKiai3";
				if (randvoice >= 13 && randvoice <= 16) voicenm = "HeiwaKiai4";
				if (randvoice >= 17 && randvoice <= 20) voicenm = "HeiwaKiai5";
				if (kc_heiwaextravoices && 
						MiscItem.OneLinerTimerCool <= 0 &&
						randvoice > 0)
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound(voicenm,CHAN_VOICE,CHANF_DEFAULT,voicevol,ATTN_NORM,maskpitch); 
				}
			}
		}
	}
	
	action void A_PunchKiais(int basechance = 75)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		if (MiscItem && MiscItem.OneLinerTimerCool <= 0)
		{
			if (random(1,256) >= basechance) 
			{
				if (A_CheckForHeiwa()) A_StartSound("HeiwaKiais",CHAN_VOICE,CHANF_DEFAULT,10.0);
													else A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
			}
		}
	}
	
	States
	{
		Ready:
			PUND A 1
			{
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PUND A 1 
			{
				A_Lower(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Select: 
			PUND A 1 
			{
				A_Raise(18);
				A_SetInventory("IsPunching",0);
				A_SetInventory("IsUppercutting",0);
			}
			loop;
		Fire: // 22 Tics
			TNT1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
			}
		PunchSuccess:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_SetInventory("IsUppercutting",0);
				A_HeiwaPrePunch();
			}
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			PUND B 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 9)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 15)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 21)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsPunching",1);
			}
			PUND C 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 3;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 16)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 22)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 2 [shields/hit]: %d", tic);
				A_SetTics(tic);
				
				A_HeiwaPunch(0);
				
				A_SetInventory("IsPunching",1);
				
				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(1024); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUND D 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 8)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 14)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 20)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 26)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 1) tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND C 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 3;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 7)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 13)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 19)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 4: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND B 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 11)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 17)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 23)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 29)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 5: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				A_Refire();
			}
			PUND B 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",0);
			}
			goto Ready;

		RightPunch:
			PUND F 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 3)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 9)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 15)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 21)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("RightPunch 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsPunching",1);
			}
			PUND G 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 3;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 4)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 10)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 16)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 22)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("RPunch 2 [shields/hit]: %d", tic);
				A_SetTics(tic);
				
				A_HeiwaPunch(0);
				
				A_SetInventory("IsPunching",1);
				
				double frange = 64;
				if (random(1,256) <= 4) 
				{
					actor playera = players[0].mo;
					let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
					if (!(playera.CountInv("KCTimeFreezer1") ||
								playera.CountInv("KCTimeFreezer2") ||
								playera.CountInv("KCTimeFreezer3")))
					{
						invoker.A_KCAlertMonsters(1024); 
					} // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				A_StartSound("fistswingheavy",1);
				A_GetPunchSwingRecoil(0);
				A_CustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUND H 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 2)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 8)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 14)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 20)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 26)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 1) tic = 1;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND G 4
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 3;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 1)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 7)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 13)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 19)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 4: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
			}
			PUND F 5
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 4;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 5)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 11)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 17)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 23)) tic -= 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(0) * 29)) tic -= 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				if (tic < 0) tic = 0;
				if (kcdebug_weaponstatdisplays) Console.Printf("LeftPunch 5: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsPunching",1);
				A_Refire();
			}
			PUND F 0 
			{
				A_SetInventory("UsingMeleeAttack",0);
				A_SetInventory("IsPunching",1);
			}
			goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		// 23 Tics
		UppercutStart:
			MPU0 A 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) tic -= 1; // 50 [10]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 1: %d", tic);
				A_SetTics(tic);
			}
			MPU0 B 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 4)) tic -= 1; // 25 [5]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 2: %d", tic);
				A_SetTics(tic);
			}
			MPU0 C 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) tic -= 1; // 65 [13]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 3: %d", tic);
				A_SetTics(tic);
			}
			MPU0 D 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) tic -= 1; // 35 [7]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 4: %d", tic);
				A_SetTics(tic);
			}
			MPU0 E 1 
			{
				A_SetInventory("IsUppercutting",0); 
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 10)) tic -= 1; // 55 [11]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutStart 5: %d", tic);
				A_SetTics(tic);
			}
		Uppercut:
			MPU1 A 1
			{
				A_SetInventory("IsUppercutting",1);
				
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 3)) tic -= 1; // 20 [4]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 1: %d", tic);
				A_SetTics(tic);
				
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else 
					{
						actor playera = players[0].mo;
						let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
						if (!(playera.CountInv("KCTimeFreezer1") ||
									playera.CountInv("KCTimeFreezer2") ||
									playera.CountInv("KCTimeFreezer3")))
						{
							invoker.A_KCAlertMonsters(1024); 
						} // Sometimes a swing will be enough to wake up all monsters in the area.
					}
				}
				A_PunchKiais(100);
				A_StartSound("fistswingheavy",1); // D [Left] or B [Right] 
			}
			MPU1 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) tic -= 1; // 60 [12]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 2: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 7)) tic -= 1; // 40 [8]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 3: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 13)) tic -= 1; // 70 [14]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 4: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 1)) tic -= 1; // 10 [2]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 F 1
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 1)) tic -= 1; // 10 [2]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1);
				double frange = 58.0;
				A_GetPunchSwingRecoil(1);
				A_CustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",frange,0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
					}
				}
			}
			MPU1 G 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				A_SetTics(1);

				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 F 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) tic -= 1; // 15 [3]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 7: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) tic -= 1; // 60 [12]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 8: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) tic -= 1; // 30 [6]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 9: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 13)) tic -= 1; // 70 [14]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 10: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 6)) tic -= 1; // 35 [7]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 11: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 A 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 10)) tic -= 1; // 55 [11]
				if (kcdebug_weaponstatdisplays) Console.Printf("Uppercut 12: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",1); 
			}
			MPU1 A 0 
			{
				A_SetInventory("IsUppercutting",0);
				return resolvestate("UppercutEnd"); 
			}
		UppercutEnd:
			TNT1 A 0
			{
				A_SetInventory("IsUppercutting",0);
				A_SetInventory("UsingMeleeAttack",0); 
			}
			MPU0 E 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) tic -= 1; // 45 [9]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 1: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 D 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 12)) tic -= 1; // 65 [13]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 2: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 C 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 0)) tic -= 1; // 5 [1]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 3: %d", tic);
				A_SetTics(tic);

				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 B 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (A_CheckBerserk()) tic *= frandom(0.34,0.67);
				else if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 9)) tic -= 1; // 50 [10]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 4: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			MPU0 A 1 
			{
				let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
				int TruePlayerLevel = invoker.ActualLevel;
				
				int tic = 1;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) tic -= 1; // 15 [3]
				if (kcdebug_weaponstatdisplays) Console.Printf("UppercutEnd 5: %d", tic);
				A_SetTics(tic);
				
				A_SetInventory("IsUppercutting",0); 
			}
			TNT1 A 0
			{
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;
			
		// Guard
		User4:
			DPDF A 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF B 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF C 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) { A_SetTics(0); }
				}
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn();
			}
			DPDF D 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF E 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF F 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF G 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
			DPDF H 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) { A_SetTics(0); }
				A_PFistBlockOn();
			}
			DPDF I 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
			}
		User4Hold:
			DPDF J 1 // BRIGHT
			{
				int TruePlayerLevel = invoker.ActualLevel;
				A_PFistBlockOn();

				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			DPDF I 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF H 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF G 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF F 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF E 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF D 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 11)) { A_SetTics(0); }
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF C 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 5)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF B 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				A_PFistBlockOn();
				if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 8)) { A_SetTics(0); }
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 1
			{
				int TruePlayerLevel = invoker.ActualLevel;
				if (A_CheckBerserk()) { A_SetTics(0); }
				else
				{
					if (TruePlayerLevel >= (A_GetHandToHandSpd(1) * 2)) { A_SetTics(0); }
				}
				A_PFistBlockOn();
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

//-----------------------------------Beacon-------------------------------------
Class TLBeacon : KCBaseZSC
{
	Default
	{
		Radius 9;
		Height 5;
		Deathheight 5;
		Speed 30;
		Scale 0.4;
		Gravity 0.3;
		Projectile;
		Damage 0;
	
		BounceFactor 0.2;
		WallBounceFactor 0.2;
		+NOTIMEFREEZE;
		+THRUACTORS;
		-NOGRAVITY;
		-NOTELEPORT;
		-NOBLOCKMAP;
		+BOUNCEONWALLS;
		+BOUNCEONCEILINGS;
		+DONTBOUNCEONSKY;
		SeeSound "";
		BounceSound "Translocator/bounce";
		DeathSound "";
	}
	
	void TLParticleG()
	{
		if (pos.z != floorz)
		{
			A_SpawnParticle("green",SPF_FULLBRIGHT,lifetime:25,size:10,zoff:5,startalphaf:1.0,fadestepf:-1);
		}
	}
	void TLParticleR()
	{
		if (pos.z != floorz)
		{
			A_SpawnParticle("red",SPF_FULLBRIGHT,lifetime:25,size:10,zoff:5,startalphaf:1.0,fadestepf:-1);
		}
	}
	
	States
	{
		Spawn:
		Death:
			TNT1 A 0
			{
				if (!TestMobjLocation())
				{
					Destroy();
				}
			}
			VTLB BBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 TLParticleG();
			Loop;
		Red:
			VTLB CCCCCAAAAACCCCCAAAAACCCCCAAAAACCCCC 1 TLParticleR();
			Goto Death;
	}
}

//--------------------------------Misc Actors-----------------------------------
Class TLBeaconFog : KCBaseZSC
{
	Default
	{
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+NOGRAVITY;
		+ZDOOMTRANS;
		RenderStyle "Add";
		scale 0.5;
		 
	}
	States
	{
		Spawn:
			VTBF A 4 Bright Nodelay A_Startsound("Translocator/teleport",volume:0.5,pitch:1.5);
			VTBF BCDEFGHIJ 4 Bright;
			Stop;
	}
}

Class TLBeaconFog2 : KCBaseZSC
{
	Default
	{
		scale 1.0;
	}
	States
	{
		Spawn:
			VTBF A 4 Bright;
			VTBF BCDEFGHIJ 4 Bright;
			Stop;
	}
}

Class TLBeaconAmmo : Ammo  //not used as an item to pick up
{
	Default
	{
		//$Category Ammunition
		//$Sprite VTLBB0
		//$Title "Translocator Beacon"
		Inventory.Amount 1;
		Ammo.BackpackAmount 1;
		Inventory.MaxAmount 1;
		Ammo.BackpackMaxAmount 1;
		Inventory.PickupMessage "Picked up a Translocator Beacon.";
		Inventory.Icon "VTLBB0";
	}
	States
	{
		Spawn:
			VTLB A -1;
			Loop;
	}
}

Class TLBeaconDummy : Actor
{
	Default
	{
		Radius 16;// player radius 16
		Height 51;// player height 56 - beacon height 5
		+NOGRAVITY;
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		Renderstyle "add";
	}
	
	Override Void PostBeginPlay()
	{
		actor playera = players[0].mo;
		if (playera)  A_SetSize(playera.Radius, (playera.height - 5));
	}
	
	States
	{
		Spawn:
			PLAY A 10
			{
				Alpha -= 0.1;
			}
			Loop;
	}
}

//Weapon: Blaster Pistol
//Original By: Inuyasha_989
//Remake By: Captain Toenail
// This item contains the logic to replace a single blaster with double 
// blasters. Use this instead of directly placing the single blaster in the map.
Class BlasterPickup : CustomInventoryExt
{
	//$Category Weapons
	//$Title "Blaster Pistol x1"

	Default
	{
		CustomInventoryExt.PickUpVoiceHeiwa2 true;
		CustomInventoryExt.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		CustomInventoryExt.PickUpVoice false;
		Inventory.Pickupsound "misc/w_pkup";
		Inventory.PickupMessage "You got a \cuBlaster Pistol\c-! \cx[Slot 2]\c-";
		Tag "Blaster Pistol";
		Scale 0.5;
		+INVENTORY.AUTOACTIVATE;
	}

	States
	{
		Spawn:
			BLAP A -1;
			Stop;
		Use:
			TNT1 A 0 A_JumpIfInventory ("BlasterPistols", 1, "DoubleGuns");
			TNT1 A 0 A_JumpIfInventory ("BlasterPistol", 1, "DoubleGuns");
		SingleGun:
			TNT1 A 0 A_GiveInventory ("BlasterPistol", 1);
			Stop;
		DoubleGuns:
			//TNT1 A 0 A_TakeInventory ("BlasterPistol", 1);
			TNT1 A 0 A_GiveInventory ("BlasterPistol", 1);
			TNT1 A 0 A_GiveInventory ("BlasterPistols", 1);
			Stop;
	}
}



Class BlasterPistol : MarineWeapon
{
	//$Category Weapons
	//$Title "Blaster Pistol"
	int shottype;
	int altshottype;
	
	Default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.Pickupsound "misc/w_pkup";
		Inventory.PickupMessage "You got a \cuBlaster Pistol\c-! \cx[Slot 2]\c-";
		Weapon.AmmoGive 50;
		Weapon.AmmoType "Cell";
		Weapon.AmmoUse 0;
		Weapon.Ammotype2 "Cell";
		Weapon.AmmoUse2 0;
		Weapon.SlotNumber 2;
		Obituary "%o was blasted by %k.";
		Tag "Blaster Pistol";
		Scale 0.5;
		Weapon.WeaponScaleX 0.8;
		Weapon.WeaponScaleY 1.0;
		+WEAPON.AMMO_OPTIONAL;
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_BlasterPistolShot()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string shotname = "PistolBlast";
		double shotangle = 0.0;
		double shotpitch = 0.0;
		double shotheight = 3;
		if (invoker.altshottype == 1 || CountInv("Cell") <= 0)
		{
			shotname = "PistolBlastWeak";
			A_StartSound("weapons/blstrpst2", CHAN_BODY, CHANF_DEFAULT, 0.334, ATTN_NORM, frandom(1.35,1.65));
		}
		else
		{
			shotname = "PistolBlast";
			A_TakeInventory("Cell",1,TIF_NOTAKEINFINITE);
			A_StartSound("weapons/blstrpst2", CHAN_BODY, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(0.9,1.1));
		}
		
		if (invoker.shottype >= 1)
		{
			double spreadfactor = 1.0;
			if (A_CheckForHeiwa() && MiscItem)
			{
				spreadfactor = (1.0 - (MiscItem.TruePlayerLevel * 0.0125));
				if (spreadfactor < 0.334) spreadfactor = 0.334;
			}
			A_SetTics(1);
			shotangle = (3.0 * spreadfactor);
			shotpitch = (3.0 * spreadfactor);
			shotheight = (frandom(-2.25,2.25) * spreadfactor);
			if (A_CheckForHeiwa() && MiscItem)
			{
				spreadfactor = (1.0 - (MiscItem.TruePlayerLevel * 0.025));
				if (spreadfactor < 0.1667) spreadfactor = 0.1667;
			}
			A_Recoil((frandompick(0.125,0.25,0.25,0.25,0.375) * spreadfactor));
		}
		else
		{
			shotangle = 0.0;
			shotpitch = 0.0;
			shotheight = 0;
		}
		//Console.Printf("invoker.shottype: %d", invoker.shottype);
		A_FireProjectile(shotname, frandom(-shotangle,shotangle), 0, 0, (3.0+shotheight), 0, frandom(-shotangle,shotangle));
	}
	
	States
	{
		Spawn:
			BLAP A -1;
			Stop;
		Select:
			BLPS A 1 A_Raise(12);
			Loop;
		Ready:
			BLPS A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			BLPS A 1 A_Lower(12);
			Loop;
		Fire:
			BLPS A 0 
			{
				invoker.shottype = 0;
			}
			Goto FireRight2; //DryRight;
		AltFire:
			BLPS A 0 
			{
				invoker.shottype = 1;
			}
			Goto FireRight2; //DryRight;
		FireRight2:
			BLPS E 2 Bright
			{
				A_GunFlash();
				A_BlasterPistolShot();
			}
			BLPS B 1;
			BLPS C 1
			{
				if (invoker.shottype >= 1) A_SetTics(0);
			}
			BLPS D 1;
			BLPS CB 2
			{
				if (invoker.shottype >= 1) A_SetTics(1);
			}
			BLPS A 4
			{
				if (invoker.shottype >= 1) A_SetTics(2);
			}
			Goto Ready;
		DryRight:
			BLPS A 15 A_CheckReload();
			Goto Ready;
		Flash:
			TNT1 A 2 Bright A_Light1;
			TNT1 A 2 Bright A_Light2;
			Goto LightDone;
		
		// Fire Mode
		User4:
			BLPS A 0
			{
				A_StopSound(CHAN_6);
				A_StartSound("weapons/blstrpst3",CHAN_6);
				if (invoker.altshottype == 0)
				{
					invoker.altshottype = 1;
					A_Print("Never Consume Cells [all shots are weakened by default]");
				}
				else
				if (invoker.altshottype == 1)
				{
					invoker.altshottype = 0;
					A_Print("Default to using Cells first");
				}
			}
			BLPS A 8;
			goto Ready;
	}
}


Class BlasterPistols : MarineWeapon
{
	int shottype;
	int altshottype;
	//$Title "Blaster Pistol x2"

	Default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.Pickupsound "misc/w_pkup";
		Inventory.PickupMessage "You got a \cupair of Blaster Pistols\c-!";
		Weapon.AmmoGive 50;
		Weapon.AmmoType "Cell";
		Weapon.AmmoUse 0;
		Weapon.Ammotype2 "Cell";
		Weapon.AmmoUse2 0;
		Weapon.SlotNumber 2;
		Obituary "%o was blasted by %k.";
		Tag "Blaster Pistols";
		Scale 0.5;
		Weapon.WeaponScaleX 0.8;
		Weapon.WeaponScaleY 1.0;
		+WEAPON.AMMO_OPTIONAL;
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_BlasterPistolShot()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		string shotname = "PistolBlast";
		double shotangle = 0.0;
		double shotpitch = 0.0;
		double shotheight = 3;
		if (invoker.altshottype == 1 || CountInv("Cell") <= 0)
		{
			shotname = "PistolBlastWeak";
			A_StartSound("weapons/blstrpst2", CHAN_BODY, CHANF_DEFAULT, 0.334, ATTN_NORM, frandom(1.35,1.65));
		}
		else
		{
			shotname = "PistolBlast";
			A_TakeInventory("Cell",1,TIF_NOTAKEINFINITE);
			A_StartSound("weapons/blstrpst2", CHAN_BODY, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(0.9,1.1));
		}
		
		if (invoker.shottype >= 1)
		{
			double spreadfactor = 1.0;
			if (A_CheckForHeiwa() && MiscItem)
			{
				spreadfactor = (1.0 - (MiscItem.TruePlayerLevel * 0.0125));
				if (spreadfactor < 0.334) spreadfactor = 0.334;
			}
			A_SetTics(1);
			shotangle = (3.0 * spreadfactor);
			shotpitch = (3.0 * spreadfactor);
			shotheight = (frandom(-2.25,2.25) * spreadfactor);
			if (A_CheckForHeiwa() && MiscItem)
			{
				spreadfactor = (1.0 - (MiscItem.TruePlayerLevel * 0.025));
				if (spreadfactor < 0.1667) spreadfactor = 0.1667;
			}
			A_Recoil((frandompick(0.125,0.25,0.25,0.25,0.375) * spreadfactor));
		}
		else
		{
			shotangle = 0.0;
			shotpitch = 0.0;
			shotheight = 0;
		}
		//Console.Printf("invoker.shottype: %d", invoker.shottype);
		A_FireProjectile(shotname, frandom(-shotangle,shotangle), 0, 0, (3.0+shotheight), 0, frandom(-shotangle,shotangle));
	}
	
	States
	{
		Spawn:
			BLAP B -1;
			Stop;
		Select:
			TNT1 A 0 
			{
				A_Overlay(3, "IdleRight"); 
				A_Overlay(-3, "IdleLeft");
			}
		Raise:
			BLPS A 1 A_Raise(12);
			Loop;
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
						
		Deselect:
			LOWB A 0 A_ClearOverlays (-3, 3);
		Deselect2:
			LOWB A 1 A_Lower(12);
			Loop;
		
		Fire:
			Goto Ready;	
		IdleRight:
			BLPS A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "FireRight");
			Loop;
		FireRight:
			BLPS A 0 
			{
				invoker.shottype = 0;
			}
			Goto FireRight2;
		FireRight2:
			BLPS E 2 Bright
			{
				A_GunFlash();
				A_BlasterPistolShot();
			}
			BLPS BCD 1;
			BLPS CB 2;
			BLPS A 4;
			Goto IdleRight;
		DryRight:
			BLPS A 15 A_CheckReload();
			Goto IdleRight;
		IdleLeft:
			LLPS A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "FireLeft");
			Loop;	
		FireLeft:
			LLPS A 0 
			{
				invoker.shottype = 0;
			}
			Goto FireLeft2;
		FireLeft2:
			LLPS E 2 Bright
			{
				A_GunFlash();
				A_BlasterPistolShot();
			}
			LLPS BCD 1;
			LLPS CB 2;
			LLPS A 4;
			Goto IdleLeft;
		DryLeft:
			LLPS A 15 A_CheckReload();
			Goto IdleLeft;
		Flash:
			TNT1 A 2 Bright A_Light1;
			TNT1 A 2 Bright A_Light2;
			Goto LightDone;
		
		// Fire Mode
		User4:
			BLPS A 0
			{
				A_StopSound(CHAN_6);
				A_StartSound("weapons/blstrpst3",CHAN_6);
				if (invoker.altshottype == 0)
				{
					invoker.altshottype = 1;
					A_Print("Never Consume Cells [all shots are weakened by default]");
				}
				else
				if (invoker.altshottype == 1)
				{
					invoker.altshottype = 0;
					A_Print("Default to using Cells first");
				}
			}
			BLPS A 8;
			goto Ready;
	}
}


Class BlastTrail : KCBaseZSC
{
	Default
	{
		+NOINTERACTION;
		RenderStyle "Add";
	}
   
	States
	{
		Spawn:
			PLSS AAABBB 1 Bright A_ShrinkBlasterTrail;
			Loop;
	}
	
	Action void A_ShrinkBlasterTrail()
	{
		A_SetScale(Scale.X-0.1, Scale.Y-0.1);
		A_FadeOut(0.1);
	}
}


Class BlastTrailWeak : BlastTrail
{
	Default
	{
		Scale 0.667;
	}
   
	States
	{
		Spawn:
			PLSS AAABBB 1 Bright A_ShrinkBlasterTrail;
			Loop;
	}
	
	Action void A_ShrinkBlasterTrail()
	{
		A_SetScale(Scale.X-0.067, Scale.Y-0.067);
		A_FadeOut(0.10);
	}
}

Class PistolBlast : PlasmaBallNew
{
	Default
	{
		Radius 3;
		Height 3;
		Speed 60;
		DamageFunction (4 * random(2,8)); // (5 * random(1,8));
		SeeSound "weapons/blstrpst";
		DeathSound "weapons/blstrhit";
		RenderStyle "Add";
		Translation "192:207=168:183", "240:247=184:191";
		Decal "BlasterScorch";
		Scale 0.8;
		DamageType "Plasma";
		+SPAWNSOUNDSOURCE;
	}
	
	States
	{
		Spawn:
			PLSS AABB 1 NoDelay Bright 
			{
				user_fuse++;
				A_SpawnItemEx ("BlastTrail", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_TRANSFERTRANSLATION);
			}
			Loop;
		Death:
			PLSE ABCDE 3 Bright;
			Stop;
	}
}

Class PistolBlastWeak : PistolBlast
{
	Default
	{
		Radius 2; // 3
		Height 2; // 3
		Speed 20; // 30
		DamageFunction (randompick(1,1,1,1,2,2,2) * random(2,random(4,8))); // 5
		SeeSound "weapons/blstrpst";
		DeathSound "weapons/blstrhit";
		RenderStyle "Add";
		Translation "192:207=168:183", "240:247=184:191";
		Decal "BlasterScorch";
		Scale 0.5667; // 0.8
		
		+SPAWNSOUNDSOURCE;
	}
	
	Override Void PostBeginPlay()
	{
		if (random(1,4) <= 1) user_fusemax = 35;
										 else user_fusemax = random(31,39);
		Super.PostBeginPlay();
	}
	
	States
	{
		Spawn:
			PLSS AABB 1 NoDelay Bright 
			{
				if (user_fuse % 2) A_SpawnItemEx ("BlastTrailWeak", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_TRANSFERTRANSLATION);
				user_fuse++;
				if (user_fuse >= user_fusemax) return resolvestate("DeathFizzle");
				return resolvestate(null);
			}
			Loop;
		Death:
			PLSE ABCDE 2 Bright;
			Stop;
		DeathFizzle:
			PLSS AABB 1 Bright 
			{
				A_ScaleVelocity(0.8);
				A_FadeOut(0.1);
			}
			Stop;
	}
}

class RiotGunCooldown : PowerProtectionTimeCheck { default { damagefactor "normal", 1.0; powerup.duration 17; } }

class SWPuffSmoke : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		VSpeed 1;
		Mass 5;
		scale 0.4;
		renderstyle "translucent";
		alpha 0.5;
	}
	
	states
	{
		Spawn:
			WMI2 ABCDE 5;
			stop;
	}
}

class SWPuff : KCPuff
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		+ALLOWPARTICLES;
		scale 0.35;
	}
	
	states
	{
		Spawn:
			WMI1 A 0;
			WMI1 A 0 A_SpawnItemEx("SWPuffSmoke",0,0,0,0,0,random(1,2) * 0.4,0,SXF_CLIENTSIDE);
			WMI1 ABC 3 bright;
			stop;
	}
}

class BulletPuffSW : SWPuff
{
	default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+RANDOMIZE;
		+ALLOWPARTICLES;
		scale 0.35;
		VSpeed 0;
		DamageType "SWBullet";
		Decal "ShadowWarriorBulletChip";
		Renderstyle "Translucent";
		Alpha 0.75;
	}
	
	States
	{
		Spawn:
		Crash:
			TNT1 A 0 A_StartSound("SWBullet/Ricochet");
			WMI1 A 0 A_SpawnItemEx("SWPuffSmoke",0,0,0,0,0,random(1,2) * 0.4,0,SXF_CLIENTSIDE);
			WMI1 ABC 3 bright;
			Stop;
		Melee:
			TNT1 A 1;
			Stop;
	}
}

class BulletPuffPlayerSW : BulletPuffSW
{
	default
	{
		Species "Players";
		+MTHRUSPECIES;
		+THRUSPECIES;
	}
	
	States
	{
		Spawn:
		Crash:
			TNT1 A 0 A_StartSound("SWBullet/Ricochet");
			WMI1 A 0 A_SpawnItemEx("SWPuffSmoke",0,0,0,0,0,random(1,2) * 0.4,0,SXF_CLIENTSIDE);
			WMI1 ABC 3 bright;
			Stop;
		Melee:
			TNT1 A 1;
			Stop;
	}
}

class SWRiotBullet : KCBulletTracer // KCFastProjectile
{
	default
	{
		//+BLOODSPLATTER;
		//+NOTIMEFREEZE;
		//+NOEXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("KCBulletTracerTrail",random(3,4),-2.5);
			loop;
		Death:
		Crash:  
			TNT1 A 0 A_StartSound("SWBullet/Ricochet");
			TNT1 A 1 A_SpawnItemEx("BulletPuffPlayerSW",0,0,0,0,0,0,0,0,0); //SXF_CLIENTSIDE) ;-;          
			stop;
		XDeath:
			TNT1 A 1;
			stop;
	}
}
class BulletPuffSWCoop : BulletPuffSW 
{
	default 
	{
		+MTHRUSPECIES;
		+THRUSPECIES;
		Species "Players";
	}
}

class Riotgun : MarineWeapon
{ 
	int RiotClipCounter;
	int SWRiotMode;
	int WeapFlagsTemp;
	
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		inventory.pickupmessage "Picked up a \cuRiot Gun\c-! \cx[Slot 3]\c-";
		
		weapon.selectionorder 300;
		weapon.slotnumber 3;
		Weapon.BobRangeX 0.75;
		Weapon.BobRangeY 0.95;
		Weapon.BobSpeed 1.1;
		//+WEAPON.NOALERT;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 24;
		Weapon.AmmoType1 "Shell";
		Obituary "%o was blown new holes by %k's Riot Gun.";
		//attacksound "Weapons/RiotgunFire";
		Decal "ShadowWarriorBulletChip";
		Tag "Riot Gun";
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_RiotGunTracer(actor playera, int type, double shotpitch, double shotangle, double shotheight)
	{
		for (int i = 0; i < 12; i++)
		{
			actor BombShotsB, BombShots;
			double origang = playera.angle;
			double randpitch = (shotpitch * 0.5);
			double randangle = (shotangle * 0.5);
			[BombShotsB, BombShots] = A_FireProjectile("SWRiotBullet",frandom(-randangle,randangle),false,0,shotheight,FPF_NOAUTOAIM,frandom(-randpitch,randpitch));
			A_SetBulletTracerDmg(BombShotsB, BombShots, (randompick(4,4,4,4,4,5) * random(1,3)), 'Bullet', 0.0);
		}
	}

	action void A_RiotShooter(int type = 0)
	{
		actor playera = players[0].mo;
		KCPlayerPawn KCP;
		KCP = KCPlayerPawn(playera);
		double shotpitch = 2.8;
		double shotangle = 4.5;

		A_StartSound("Weapons/RiotgunFire");
		A_TakeInventory("Shell", 1, TIF_NOTAKEINFINITE);
		invoker.A_KCAlertMonsters();
		int dmg = randompick(4,4,4,4,4,5) * random(1,3);

		if (type >= 1) 
		{
			shotangle = 6.2;
			shotpitch = 4.2;
		}
		if (A_CheckTracerConditions())
		{
			A_RiotGunTracer(playera, 0, shotpitch, shotangle, A_GetShotHeightTracer(36));
		}
		else
		{
			A_FireBullets(shotangle, shotpitch, 12, dmg, "BulletPuffPlayerSW", FBF_NORANDOM|FBF_NOFLASH);
		}
	}
	
	States
	{
		Ready:
			TNT1 A 0 
			{
				if (invoker.SWRiotMode >= 1) return resolvestate("ModeReady");
				return resolvestate(null);
			}
			RIOT C 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		ModeReady:
			RITO A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			TNT1 A 0 
			{
				invoker.RiotClipCounter -= 4;
				if (invoker.RiotClipCounter < 0) invoker.RiotClipCounter = 0;
			}
			TNT1 A 0 
			{
				if (invoker.SWRiotMode >= 1) return resolvestate("ModeDeselect");
				return resolvestate(null);
			}
		DeselectLoop:
			RIOT A 1 A_Lower(12);
			Loop;
		ModeDeselect:
			RITO A 1 A_Lower(12);
			Loop;
		Select:
			TNT1 A 0 
			{
				A_StartSound("Weapons/RiotgunLoad",CHAN_6);
				if (invoker.SWRiotMode >= 1) return resolvestate("ModeSelect");
				return resolvestate(null);
			}
		SelectLoop:
			RIOT A 1 A_Raise(12);
			Loop;
		ModeSelect:
			RITO A 1 A_Raise(12);
			Loop;
		Fire:
			TNT1 A 0 
			{
				invoker.WeapFlagsTemp = (WRF_NOFIRE|WRF_NOSWITCH);
				if (invoker.SWRiotMode >= 1) return resolvestate("Fire2");
				return resolvestate(null);
			}
			TNT1 A 0 
			{
				A_CheckReload();
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
			TNT1 A 0 A_RiotShooter(0);
			RIOT D 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_IncGunKiaiCounter((5 * random(8,12)));
				A_SetPitch(pitch - 4.0);
			}
			RIOT G 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 A_WeaponReady(invoker.WeapFlagsTemp);
			//A_SpawnItemEx("SWShellCasingSpawner",cos(-pitch)*30-8,11,25+sin(-pitch)*30);
			TNT1 A 0 { invoker.RiotClipCounter += 1; }
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 offset(7, 39) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 offset(15,47) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 offset(7, 39) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT E 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT F 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_SetPitch(pitch + 0.5);
			}
			RIOT F 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT F 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT F 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
		
			RIOT A 3 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT B 3 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 5 offset(0, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT A 0 A_CheckReload();
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload");
				return resolvestate(null);
			}
			Goto Ready;
		
		Fire2:
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
			TNT1 A 0 A_CheckReload();
			TNT1 A 0 A_RiotShooter(1);
			RITO DE 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0
			{
				A_IncGunKiaiCounter((1 * random(8,12)));
				invoker.RiotClipCounter += 1;
			}
			//A_SpawnItemEx("SWShellCasingSpawner",cos(-pitch)*30-8,11,25+sin(-pitch)*30);
			TNT1 A 0
			{
				A_SetPitch(pitch - 1.5);
			}
			RITO F 1 offset(6, 39) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch - 2.0);
			}
			RITO B 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch + 3.5);
			}
			RITO C 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0 A_CheckReload();
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
		
			TNT1 A 0 A_RiotShooter(1);
			RITO DE 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				A_IncGunKiaiCounter((2 * random(8,12)));
				invoker.RiotClipCounter += 1;
			}
			//A_SpawnItemEx("SWShellCasingSpawner",cos(-pitch)*30-8,11,25+sin(-pitch)*30);
			TNT1 A 0
			{
				A_SetPitch(pitch - 1.5);
			}
			RITO F 1 offset(6, 39) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch - 2.0);
			}
			RITO B 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch + 3.5);
			}
			RITO C 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0 A_CheckReload();
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
		
			TNT1 A 0 A_RiotShooter(1);
			RITO DE 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0
			{
				A_IncGunKiaiCounter((1 * random(8,12)));
				invoker.RiotClipCounter += 1;
			}
			//A_SpawnItemEx("SWShellCasingSpawner",cos(-pitch)*30-8,11,25+sin(-pitch)*30);
			TNT1 A 0
			{
				A_SetPitch(pitch - 1.5);
			}
			RITO F 1 offset(6, 39) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch - 2.0);
			}
			RITO B 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0
			{
				A_SetPitch(pitch + 3.5);
			}
			RITO C 1 offset(0, 32) A_WeaponReady(WRF_NOBOB | WRF_NOPRIMARY);
			TNT1 A 0 A_CheckReload();
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
		
			TNT1 A 0 A_RiotShooter(1);
			RITO DE 1 Bright A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0
			{
				A_IncGunKiaiCounter((2 * random(8,12)));
				invoker.RiotClipCounter += 1;
			}
			//A_SpawnItemEx("SWShellCasingSpawner",cos(-pitch)*30-8,11,25+sin(-pitch)*30);
			TNT1 A 0
			{
				A_SetPitch(pitch - 1.5);
			}
			RITO F 1 offset(6, 39) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0
			{
				A_SetPitch(pitch - 2.0);
			}
			RITO B 1 offset(0, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0
			{
				A_SetPitch(pitch + 3.5);
			}
			RITO C 1 offset(0, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT A 0 A_CheckForReload(4, "Reload2");
			TNT1 A 0 
			{
				if (invoker.RiotClipCounter >= 4) return resolvestate("Reload2");
				return resolvestate(null);
			}
		
			Goto Ready;
		Reload:
			TNT1 A 0 A_JumpIfNoAmmo("Ready");
			TNT1 A 0 A_StartSound("Weapons/RiotGunUp",CHAN_WEAPON);
			RIOT C 1 offset(0, 50) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 1 offset(0, 59) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 1 offset(0, 68) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 18 offset (0, 71) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 1 offset(0, 62) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 1 offset(0, 44) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 A_StartSound("Weapons/RiotGunLoad",CHAN_WEAPON);
			RIOT C 1 offset(0, 35) A_WeaponReady(invoker.WeapFlagsTemp);
			RIOT C 1 offset(0, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				invoker.RiotClipCounter -= 4;
				if (invoker.RiotClipCounter < 0) invoker.RiotClipCounter = 0;
			}
			Goto Ready;
		Reload2:
			TNT1 A 0 A_JumpIfNoAmmo("Ready");
			TNT1 A 0 A_StartSound("Weapons/RiotGunUp",CHAN_WEAPON);
			RITO A 1 offset(-1, 50) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 1 offset(-1, 59) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 1 offset(-1, 68) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 17 offset(-1, 71) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 1 offset(-1, 62) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 1 offset(-1, 44) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 A_StartSound("Weapons/RiotGunLoad",CHAN_WEAPON);
			RITO A 1 offset(-1, 35) A_WeaponReady(invoker.WeapFlagsTemp);
			RITO A 1 offset(-1, 32) A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 
			{
				invoker.RiotClipCounter -= 4;
				if (invoker.RiotClipCounter < 0) invoker.RiotClipCounter = 0;
			}
			Goto Ready;
		AltFire:
		User4:
			TNT1 A 0 A_JumpIfInventory("RiotGunCooldown", 1, "Ready");
			RIOT A 0 
			{
				A_StartSound("Weapons/RiotgunLoad");
				invoker.WeapFlagsTemp = (WRF_NOFIRE|WRF_NOSWITCH);
			}
			RITO A 1 A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 A_GiveInventory("RiotGunCooldown", 1);
			TNT1 A 0 
			{
				if (invoker.SWRiotMode >= 1) return resolvestate("RiotOff");
				return resolvestate(null);
			}
			RITO A 1 A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 { invoker.SWRiotMode = 1; }
			RITO A 3 A_WeaponReady(invoker.WeapFlagsTemp);
			Goto Ready;
		RiotOff:
			RIOT C 1 A_WeaponReady(invoker.WeapFlagsTemp);
			TNT1 A 0 { invoker.SWRiotMode = 0; }
			RIOT C 4 A_WeaponReady(invoker.WeapFlagsTemp);
			Goto Ready;
		Spawn:
			SW30 Z -1;
			Stop;
	}
}

//
class KnifeHeiwa : MarineWeapon
{
	default
	{
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \cfKnife\c-! Better than nothing... \cx[Slot 1]\c-";
		
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		+WEAPON.MELEEWEAPON;
		+WEAPON.NOALERT;
		+NOEXTREMEDEATH;
		Tag "Heiwa's Knife";
		Obituary "%o was cut apart by %k's trusty knife.";
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	action void A_KnifeThrow()
	{
	}
	
	action void A_KnifeHit(int shockwave = 0, bool puffsound = false)
	{
		int shockwaveroll = 0;
		if (shockwave > 0) shockwaveroll = 1;
		else if (shockwave < 0) shockwaveroll = 0;
		else
		{
			if (A_CheckBerserk()) shockwaveroll = randompick(0,0,1);
											 else shockwaveroll = randompick(0,0,0,0,0,0,0,0,1);
		}
		
		int dmg = A_GetKnifeDamage(0,shockwaveroll,false);
		if (CountInv("PlayerDashing")) dmg *= frandom(2,3);
		//Console.Printf("dmg: %d", dmg);
		int rangef = random(78,82);
		if (puffsound) A_CustomPunch((dmg),true,CPF_NOTURN,"KnifePuff",range:random(78,82));
							else A_CustomPunch((dmg),true,CPF_NOTURN,"KnifePuffNoSound",range:random(78,82));
		if (A_CheckMeleeDestroyProj(3) > 0)
		{
			double output = 1.0;
			int mkheight = random(28,30);
			int mkdist1 = (rangef - 56);
			int mkdist2 = (rangef - 24);
			int mkdist3 = (rangef + 8);
			string mk = "ShieldPartMeleeNoReflect";
			int TruePlayerLevel = invoker.ActualLevel;
			if (random(1,8) <= (1 + (TruePlayerLevel * (0.06 * output)))) mk = "ShieldPartMeleeReflect";
			
			A_MeleeShieldPiece(mk,mkheight,mkdist3);
			if (random(1,6) <= 1)
			{
				A_MeleeShieldPiece(mk,mkheight,mkdist2);
				if (random(1,6) <= 1) A_MeleeShieldPiece(mk,mkheight,mkdist1);
			}
		}
	}
	
	action void A_KnifeKiais(int basechance = 240)
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(Playera.FindInventory("PlayerStatItem"));
		if (MiscItem && MiscItem.OneLinerTimerCool <= 0)
		{
			if (A_CheckBerserk()) basechance *= frandom(0.7,0.8);
			if (random(1,256) >= basechance) 
			{
				if (A_CheckForHeiwa()) A_StartSound("HeiwaKiais",CHAN_VOICE,CHANF_DEFAULT,10.0);
													else A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
			}
		}
	}
	
	action double A_GetKnifeSpd()
	{
		double output = 10;
		double oldoutput = output;
		if (output <= 1.0) output = 1.0;
		if (kcdebug_meleeinformation) Console.Printf("output: %.8f [%.8f]", output, oldoutput);
		return output;
	}
	
	States
	{
		Spawn:
			KNFE G -1;
			loop;
		Ready:
			KNFG G 1 A_WeaponReady();
			loop;
		Deselect:
			KNFG G 0 A_StartSound("KnifeAway",CHAN_7);
		Deselect2:
			KNFG G 1 A_Lower(12);
			loop;
		Select:
			KNFG G 0 A_StartSound("KnifeOut",CHAN_7);
		Select2: 
			KNFG G 1 A_Raise(12);
			loop;
		Fire:
			KNFG H 2
			{
				if (A_CheckBerserk()) A_SetTics(1);
			}
			KNFG I 2 
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.5)) tic -= 1;
				}
				A_SetTics(tic);
				A_KnifeHit(0,0);
			}
			KNFG J 2
			{
				A_KnifeKiais(240);

				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_KnifeHit(0,1);
			}
			KNFG K 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 3.0)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_KnifeHit(0,0);
			}
			KNFG L 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.5)) tic -= 1;
				}
				A_SetTics(tic);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			KNFG K 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 3.0)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_ReFire("FireBackSlash");
			}
			KNFG J 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 4.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.0)) tic -= 1;
				}
				A_SetTics(tic);
			}
			KNFG G 2 
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 4.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_ReFire();
			}
			goto Ready;
		FireBackSlash:
			KNFG L 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.5)) tic -= 1;
				}
				A_SetTics(tic);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			KNFG K 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 3.0)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_KnifeHit(0,0);
			}
			KNFG J 2
			{
				A_KnifeKiais(240);

				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.0)) tic -= 1;
				}
				A_SetTics(tic);
				A_KnifeHit(0,1);
			}
			KNFG I 2 
			{
				A_KnifeHit(0,0);
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 2.5)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.5)) tic -= 1;
				}
				A_SetTics(tic);
			}
			KNFG H 2
			{
				int TruePlayerLevel = invoker.ActualLevel;
				int tic = 2;
				if (A_CheckBerserk()) 
				{
					tic -= 1;
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 3.0)) tic -= 1;
				}
				else
				{
					if (TruePlayerLevel >= (A_GetKnifeSpd() * 1.0)) tic -= 1;
				}
				A_SetTics(tic);
				if (A_CheckBerserk()) A_SetTics(1);
			}
			goto Ready;
	}
}

class KnifePuff : KCPuff
{
	default
	{
		Tag "Knife Slash";
		Species "Players";
		+MTHRUSPECIES;
		+THRUSPECIES;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOEXTREMEDEATH;
		+PUFFONACTORS;
		RenderStyle "Translucent";
		Alpha 0.6;
		SeeSound "KnifeHitThing";
		AttackSound "KnifeHitWall";
		ActiveSound "KnifeMiss";
		DamageType "Knife";
		ProjectileKickBack 0;
		VSpeed 1;
	}
	
	void A_SetPainForcedPain(int basechance = 16, double playerlvlfactor = 0.16)
	{
		int TruePlayerLevel = A_GetPlayerLvlProj();
		user_randompain = basechance;
		if (target)
		{
			let MiscItem = PlayerStatItem(target.FindInventory("PlayerStatItem"));
			if (MiscItem) user_randompain += (TruePlayerLevel * playerlvlfactor);
		}
		if (kcdebug_attackstuff) Console.Printf("ForcePain chance: %d / 100", user_randompain);
		if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetPainForcedPain(16,0.24);
			}
		SpawnSparks:
			PUFF ABCD 4;
			Stop;
	}
}  
class KnifePuffNoSound : KnifePuff
{
	default
	{
		SeeSound "KnifeHitThing";
		AttackSound "";
		ActiveSound "";
	}
}

class BlasterRifle : MarineWeapon // DoomWeapon 2001
{
	int shotcount;
	default
	{
		//SpawnID 27;
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon2";
		KCWeaponBase.PickUpVoice false;
		Inventory.PickupSound "misc/w_pkup";
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.SlotNumber 4;
		Inventory.PickupMessage "You got the \cxE-11 Blaster Rifle\c-! \cx[Slot 4]\c-";
		Inventory.RestrictedTo "HeiwaPlayer";
	}
	
	States
	{
		Ready:
			E11G ABCDCB 6 A_WeaponReady();
			Loop;
		Deselect:
			E11G A 1 A_Lower(12);
			Loop;
		Select:
			E11G A 1 A_Raise(12);
			Loop;
		Fire:
			E11G A 3;
			E11F A 4 
			{
				A_GunFlash("Flash");
				A_FireProjectile("Blaster_RifleShot");
				A_Recoil(frandom(0.05,0.075));
				A_IncGunKiaiCounter((randompick(0,1,1,1,1,2) * random(3,5)));
				A_StartSound("weapons/blasterrifle",CHAN_WEAPON);
			}
			E11G A 3 A_ReFire();
			Goto Ready;
		AltFire:
			E11G A 0
			{
				invoker.shotcount = randompick(1,2,2,2,2,2,2,2,2,2,2,3);
				if (CountInv("Cell") >= invoker.shotcount || 
						A_CheckInfiniteAmmo()) return resolvestate("AltFire2");
				
				return resolvestate(null);
			}
			goto Ready;
		AltFire2:
			E11G A 2;
			E11F A 3
			{
				A_GunFlash("AltFlash");
				for (int i = 0; i < invoker.shotcount; i++)
				{
					double ang = (random(-20,20) * 0.2);
					double pch = (random(-20,20) * 0.2);
					double ofs = -ang;
					double zof = -pch;
					A_FireProjectile("Blaster_RifleShot",ang,1,ofs,zof,FPF_NOAUTOAIM,pch);
					A_IncGunKiaiCounter((randompick(0,1,1,1,1,1,1,1,1,2) * random(4,6)));
				}
				A_Recoil((frandom(0.075,0.1125)*invoker.shotcount));
				A_StartSound("weapons/blasterrifle",CHAN_WEAPON);
				A_TakeInventory("Cell",invoker.shotcount,TIF_NOTAKEINFINITE);
			}
			E11G A 0 A_ReFire("AltFire");
			Goto Ready;
		Flash:
			E11F A 4 Bright A_Light2();
			Goto LightDone;
		AltFlash:
			E11F A 3 Bright A_Light2();
			Goto LightDone;
		Spawn:
			E11B A -1;
			Stop;
	}
}

class Blaster_RifleShot : KCFastProjectile
{
	default
	{
		PROJECTILE;
		ProjectileKickback 25;
		Radius 2;
		Height 4;
		Scale 1;
		Speed 104; // 26;
		DamageFunction (randompick(3,4,4,4,5,5,5,5,5,5,5,5,6,6,6,7) * random(randompick(1,1,1,2,2,3),randompick(6,7,7,8,8,8)));
		Obituary "%o got blasted by %k, like the rebel scum %g is!";
		SeeSound "";
		Scale 1.0;
		Decal "BulletChip";
		DamageType "Plasma";
		MissileType "Blaster_RifleShot_Trail";
		MissileHeight 8;
		//SeeSound "weapons/blstrpst";
		DeathSound "weapons/blstrhit";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			BLAS AA 1 BRIGHT; //A_SpawnProjectile("Blaster_RifleShot_Trail", 0, 0, 0, -2, 0);
			loop;
		Death:
			TNT1 AAA 0 A_SpawnItemEx("Blaster_RifleShot_Hit");
			TNT1 A 35;
			Stop;
	}
}

class Blaster_RifleShot_Hit : RedParticleFountain
{
	States
	{
		Spawn:
			TNT1 A 16;
			Stop;
	}
}

class Blaster_RifleShot_Trail : KCBaseZSC
{
	default
	{
		+NOGRAVITY;
		+NOCLIP;
		Speed 1;
		Translation "112:127=171:191";
		Scale 1.0;
	}
	States
	{
		Spawn:
			TNT1 A 1;
			BLAS A 2;
			Stop;
	}
}

// EVIL WARRIOR'S SHIELD
class PikeAmmo : Ammo
{
	default
	{
		//$Category EE Ammo
		Inventory.Amount 1; // 2
		Inventory.MaxAmount 12; // 10
		Ammo.BackpackAmount 1; // 2
		Ammo.BackpackMaxAmount 18;
		Scale 1;
		Inventory.Icon "SCPAI0";
		Inventory.PickupMessage "A strange pint of Devil's Food";
		Inventory.PickupSound "pickup/pikeammo";
		+FLOATBOB
		+DONTGIB
	}
	
	States
	{
		Spawn:
			SCPA ABC 6 Bright;
			Loop;
	}
}

class EvilWarriorShield : MarineWeapon
{
	int shieldenergy;
	int shieldenergybits;
	int shieldenergycost;
	int shieldrefire;
	default
	{
		//$Category KC KDIZD Weapons
		//$Sprite "EWSHF0"
		Radius 16;
		Height 16;
		Speed 6;
		KCWeaponBase.PickUpVoiceHeiwa2 true;
		KCWeaponBase.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		KCWeaponBase.PickUpVoice false;
		KCWeaponBase.PickupSound2 "misc/w_pkup";
		KCWeaponBase.PickupVoice2 false;
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 3;
		Weapon.AmmoUse 0;
		Weapon.SlotNumber 9;
		Weapon.SlotPriority 6.0;
		Weapon.BobSpeed 1.5;
		Weapon.BobStyle "Smooth";
		Weapon.KickBack 0;
		Tag "Hell Warrior's Shield";
		Inventory.PickupMessage "Picked up a Hell Warrior's Shield \cx[Slot 9]\c-";
		Obituary "%o was ripped apart by %k's Hell Warrior's Shield.";
		BounceType "Doom";
		+WEAPON.NOALERT;
		+DROPOFF;
		+DONTGIB;
	}
	
	// Hell Warrior Shield
	action void A_PHellWarShieldOff()
	{
		A_SetInventory("EWShieldDefendMode",0);
		A_SetInventory("EWShieldDefendModeExtra",0);
		bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}
	
	action void A_PHellWarShieldOn()
	{
		A_SetInventory("EWShieldDefendMode",1);
		A_SetInventory("EWShieldDefendModeExtra",0);
		if (random(1,4) == 1) { A_SetInventory("EWShieldDefendModeExtra",1); }
		bREFLECTIVE = 1;
		//bSHIELDREFLECT = 1;
	}
	
	action void A_PHellWarShot()
	{
		actor player = players[0].mo;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();
		
		if (A_CheckBerserk()) A_SetTics(1);
		A_PHellWarShieldOn();
		if (!A_CheckInfiniteAmmo()) invoker.shieldenergy -= invoker.shieldenergycost;

		if (invoker.shieldenergy < invoker.shieldenergycost)
		{
			if (CountInv("PikeAmmo") > 0)
			{
				A_TakeInventory("PikeAmmo",1);
				if (MiscItem) invoker.shieldenergy += MiscItem.HellWarriorMaxCharge;
								 else invoker.shieldenergy += 1000;
			}
		}

		double shotangle = 0;
		double shotangleend = 0;
		double shotangleinc = 0;
		double origangle = angle;
		int maxshots = 1;
		int bounces = (randompick(2,2,2,2,2,2,2,3) + randompick(0,1,1,2) + randompick(0,0,0,0,1));
		string shottype = "EvilWarriorShieldBall";
		actor BombShotsB, BombShots;
		KCProjectile IPCompat;
		for (int i = 0; i < maxshots; i++)
		{
			[BombShotsB, BombShots] = A_FireProjectile(shottype, 0, 0, 0, 3); 
		}
		if (random(1,8) <= 1) { invoker.A_KCAlertMonsters(); }

		double baserecoil = 0.875;
		if (waterlevel >= 3) baserecoil *= 0.25;
		A_Recoil(baserecoil);
	}
	
	action void A_CheckShieldRefire()
	{
		actor player = players[0].mo;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();
		int tic;
		if (invoker.shieldrefire)
		{
			if (random(1,4) <= randompick(1,1,1,2))
			{
				tic = random(2,4);
				if (A_CheckBerserk()) tic = random(1,2);
			}
			else
			{
				tic = random(3,5);
				if (A_CheckBerserk()) tic = random(2,3);
			}
		}
		else
		{
			if (random(1,4) <= randompick(1,1,1,2))
			{
				tic = random(3,5);
				if (A_CheckBerserk()) tic = random(2,3);
			}
			else
			{
				tic = random(4,6);
				if (A_CheckBerserk()) tic = random(3,4);
			}
		}
		if (tic < 1) tic = 1;
		A_SetTics(tic);
	}
	
	action void A_GetBobSpeed()
	{
		actor player = players[0].mo;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		let globalvars = KCGlobalVariables.Get();
		double temp = invoker.default.BobSpeed;
		if (MiscItem)
		{
			int HellWarriorShieldLevel = MiscItem.HellWarriorShieldLevel;
			temp = (invoker.default.BobSpeed + (HellWarriorShieldLevel * (invoker.default.BobSpeed * 0.10)));
		}
		if (A_CheckBerserk()) temp *= 0.25;
		if (CountInv("EWShieldDefendMode") > 0) temp *= 0.25;
		invoker.BobSpeed = temp;
		//Console.Printf("invoker.BobSpeed: %.8f", invoker.BobSpeed);
	}
	
	States
	{
		Pickup:
			TNT1 A 0 
			{ 
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				if (player.CountInv("EvilWarriorShield"))
				{
					if (player.CountInv("HellWarriorShieldLevel") < 10)
					{
						player.A_GiveInventory("HellWarriorShieldLevel",1);
						A_FadeOut(1,1);
					}
				}
			}
			Fail;

		Ready:
			EWS0 D 1
			{
				A_WeaponReady(WRF_ALLOWUSER4);
				A_GetBobSpeed();
			}
			loop;

		Select:
			EWS0 D 1
			{
				A_SetInventory("EWShieldIdleMode",1);
				A_Raise(12);
				A_GetBobSpeed();
			}
			goto Select;

		Deselect:
			EWS0 D 1
			{
				A_SetInventory("EWShieldIdleMode",0);
				A_Lower(12);
				A_GetBobSpeed();
			}
			goto Deselect;

		Fire:
			EWS0 A 0
			{
				A_GetBobSpeed();

				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();

				//HellWarriorMaxCharge
				if (!A_CheckInfiniteAmmo())
				{
					invoker.shieldenergycost = (10 + (player.CountInv("HellWarriorShieldLevel") * 0.75));
					//if (player.CountInv("SpellDiaryEE")) invoker.shieldenergycost *= 0.667;
					if (invoker.shieldenergy < invoker.shieldenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.shieldenergy += MiscItem.HellWarriorMaxCharge;
											 else invoker.shieldenergy += 1000;
						}
						else
						{
							return resolvestate("Ready");
						}
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			EWS0 D 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard");
			}
			EWS0 C 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard");
			}
			EWS0 B 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard");
			}
		FireShot:
			EWS0 A 6 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				A_CheckShieldRefire();
				A_SetPitch(pitch + 0.875);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard2");
			}
			EWS0 A 2 Bright
			{
				A_PHellWarShot();
				//A_ForcePlayState4("ShieldFire");
			}
			EWS0 A 6 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				A_CheckShieldRefire();
				A_SetPitch(pitch - 0.875);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard2");
			}
			EWS0 A 0 Bright
			{
				actor player = players[0].mo;
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
				if (buttons & BT_ATTACK)
				{
					invoker.shieldrefire = 1;
					
					//HellWarriorMaxCharge
					if (!A_CheckInfiniteAmmo())
					{
						invoker.shieldenergycost = (10 + (player.CountInv("HellWarriorShieldLevel") * 0.75));
						//if (player.CountInv("SpellDiaryEE")) invoker.shieldenergycost *= 0.667;
						if (invoker.shieldenergy < invoker.shieldenergycost)
						{
							if (CountInv("PikeAmmo") > 0)
							{
								A_TakeInventory("PikeAmmo",1);
								if (MiscItem) invoker.shieldenergy += MiscItem.HellWarriorMaxCharge;
												 else invoker.shieldenergy += 1000;
							}
							else
							{
								return resolvestate("Ready");
							}
							return resolvestate(null);
						}
						return resolvestate("FireShot");
					}
					return resolvestate(null);
				}
				invoker.shieldrefire = 0;
				return resolvestate(null);
			}
		FireEnd:
			EWS0 B 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
			}
			EWS0 C 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
			}
			EWS0 D 2 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOff();
				A_GetBobSpeed();
			}
			Goto Ready;

		AltFire:
			EWS0 DEF 2
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				//A_ForcePlayState4("ShieldGuard");
				A_PHellWarShieldOn();
				A_GetBobSpeed();
			}
		AltHold:
			EWS0 G 2 BRIGHT
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				//A_ForcePlayState4("ShieldGuard");
				A_SetInventory("HWShieldBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
			}
			EWS0 G 0 
			{
				A_GetBobSpeed();
				//A_ForcePlayState4("ShieldGuard");
				if (kc_hwshieldaltfirekeytype == 0)
				{
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltEnd"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltHold"); }
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd"); }
					return resolvestate(null);
				}
				else
				{
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltEnd"); }
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltHold"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto AltEnd;
		AltEnd:
			EWS0 FE 2
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				//A_ForcePlayState4("ShieldGuard");
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
				A_GetBobSpeed();
			}
			EWS0 D 2
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = KCGlobalVariables.Get();
				
				if (A_CheckBerserk()) A_SetTics(1);
				A_PHellWarShieldOff();
				A_GetBobSpeed();
			}
			Goto Ready;

		Spawn:
			EWSH ABCDEFGH 3
			{
				actor player = players[0].mo;
				if (player.CountInv("EvilWarriorShield"))
				{
					A_SpawnItemEx("EvilWarriorShieldExtraPickup",0,0,0, vel.x,vel.y,vel.z, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY,0,tid);
					A_FadeOut(1,1);
				}
			}
			Goto Spawn2;
		Spawn2:
			EWSH I 5
			{
				actor player = players[0].mo;
				if (player.CountInv("EvilWarriorShield"))
				{
					A_SpawnItemEx("EvilWarriorShieldExtraPickupGround",0,0,0, vel.x,vel.y,vel.z, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop;
	}
}

class EvilWarriorShieldExtraPickup : CustomInventoryExt
{
	default
	{
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		CustomInventoryExt.PickUpVoiceHeiwa2 true;
		CustomInventoryExt.PickupSoundHeiwa2 "Heiwa/GrabWeapon1";
		CustomInventoryExt.PickUpVoice false;
		CustomInventoryExt.PickupSound2 "misc/w_pkup";
		CustomInventoryExt.PickupVoice2 false;
		Inventory.PickupMessage "Grabbed a damaged Hell Warrior's shield! (\cy+20% damage\c-) \cx[Slot 9]\c-";
	}
	
	States
	{
		Spawn:
			EWSH ABCDEFGH 3
			{
				actor player = players[0].mo;
				if (player.CountInv("HellWarriorShieldLevel") >= 10)
				{
					string spawntype = "PikeAmmo";
					if (random(1,8) <= 1) spawntype = "PikeAmmoBig";

					A_SpawnItemEx(spawntype,0,0,0, vel.x,vel.y,vel.z, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY,0,tid);
					A_FadeOut(1,1);
				}
			}
			Goto Spawn2;
		Spawn2:
			EWSH I 5
			{
				actor player = players[0].mo;
				if (player.CountInv("HellWarriorShieldLevel") >= 10)
				{
					string spawntype = "PikeAmmo";
					if (random(1,8) <= 1) spawntype = "PikeAmmoBig";

					A_SpawnItemEx(spawntype,0,0,0, vel.x,vel.y,vel.z, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop;
			
		Pickup:
			TNT1 A 0 { A_GiveInventory("HellWarriorShieldLevel",1); }
			Stop;
	}
}

class EvilWarriorShieldExtraPickupGround : EvilWarriorShieldExtraPickup
{
	States
	{
		Spawn:
			EWSH I 5
			{
				actor player = players[0].mo;
				if (player.CountInv("HellWarriorShieldLevel") >= 10)
				{
					string spawntype = "PikeAmmo";
					if (random(1,8) <= 1) spawntype = "PikeAmmoBig";

					A_SpawnItemEx(spawntype,0,0,0, vel.x,vel.y,vel.z, 0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop;
			
		Pickup:
			TNT1 A 0 { A_GiveInventory("HellWarriorShieldLevel",1); }
			Stop;
	}
}
class EvilWarriorShieldBall : KCProjectile
{
	default
	{
		Tag "Shield Ball Shredder";
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		DamageType "Zap";
		Alpha 0.8;
		Scale 0.4;
		ProjectileKickBack 0;
		SeeSound "hellwarrior/shotfire";
		DeathSound "hellwarrior/shothit";
	}
	
	void A_CalcDmg()
	{
		int TruePlayerLevel = A_GetPlayerLvlProj();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));

		finaldamagedealt = 1;
		if (target && PlayerPawn(target))
		{
			finaldamagedealt += floor(TruePlayerLevel * 0.015625);
			finaldamagedealt *= (random(1,4) + floor(TruePlayerLevel * 0.05));
			finaldamagedealt *= (1.0 + (player.CountInv("HellWarriorShieldLevel") * 0.2));
		}
		else
		{
			finaldamagedealt *= random(1,4);
		}
		double rollval;
		int rngroll = random(1,16);
		if (MiscItem) 
		{
			if (rngroll <= 12) rollval = (MiscItem.EWShieldKills * frandompick(0.0005,0.00075,0.00075,0.00075,0.00075,0.00075,0.001));
			else if (rngroll >= 13 && rngroll <= 15) rollval = (MiscItem.EWShieldKills * frandompick(0.01,0.015,0.015,0.015,0.015,0.015,0.02));
			else if (rngroll >= 16) rollval = (MiscItem.EWShieldKills * frandompick(0.002,0.003,0.003,0.003,0.003,0.003,0.004));
			finaldamagedealt *= (1.0 + rollval);
			if (kcdebug_attackstuff) Console.Printf("finaldamagedealt [HWShieldBall] (kills: %d): %d, rollval: %.8f, rngroll: %d", MiscItem.EWShieldKills, finaldamagedealt, rollval, rngroll);
		}
	}
	
	override void PostBeginPlay()
	{
		A_CalcDmg();
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		A_CalcDmg();
		super.Tick();
	}
	
	override bool CanCollideWith(Actor other, bool passive) // EvilWarriorShieldBall
	{
		if (kcdebug_shieldcollision & 64) Console.Printf("\cyEvilWarriorShieldBall [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 64) Console.Printf("\cyEvilWarriorShieldBall (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 64) Console.Printf("\cyEvilWarriorShieldBall (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA A 0 NoDelay Bright
			{
				if (A_CheckUOHYM()) return resolvestate("IdleHOU");
				return resolvestate("Idle");
			}
		Idle:
			GRBA ABCDEFGH 2 Bright;
			goto Spawn;
		IdleHOU:
			GRBA A 2 Bright Light("HELLWARRIORRIPPER1UOH");
			GRBA B 2 Bright Light("HELLWARRIORRIPPER2UOH");
			GRBA C 2 Bright Light("HELLWARRIORRIPPER1UOH");
			GRBA D 2 Bright Light("HELLWARRIORRIPPER2UOH");
			GRBA E 2 Bright Light("HELLWARRIORRIPPER1UOH");
			GRBA F 2 Bright Light("HELLWARRIORRIPPER2UOH");
			GRBA G 2 Bright Light("HELLWARRIORRIPPER1UOH");
			GRBA H 2 Bright Light("HELLWARRIORRIPPER2UOH");
			Loop;
		Death:
			GRBA A 0 Bright
			{
				if (A_CheckUOHYM()) return resolvestate("DeathHOU");
				return resolvestate(null);
			}
			GRBA AIJKLMN 3 Bright;
			Stop;
		DeathHOU:
			GRBA A 3 Bright Light("HELLWARRIORRIPPER_X1UOH");
			GRBA I 3 Bright Light("HELLWARRIORRIPPER_X2UOH");
			GRBA J 3 Bright Light("HELLWARRIORRIPPER_X3UOH");
			GRBA K 3 Bright Light("HELLWARRIORRIPPER_X4UOH");
			GRBA L 3 Bright Light("HELLWARRIORRIPPER_X5UOH");
			GRBA M 3 Bright Light("HELLWARRIORRIPPER_X6UOH");
			GRBA N 3 Bright Light("HELLWARRIORRIPPER_X7UOH");
			Stop;
	}
}
