//*************************************************************************************************
//* A special inventory item intended for any NON-"EECreatre" class across other possible games,  *
//* mapsets or mods [i.e. BlooM, etc] that will give them varied resistances and weaknesses based *
//* on things like hybrids, etc.
//*************************************************************************************************
class CompatVulnItem : PlaceholderItem 
{
	string ownername;
	string nl, nm, nn, no, np, nq, nr, ns, nt, nu, nv, nw, nx, ny, nz, na, nb, nc, nd, ne, nf, ng, nh, ni, nj, nk;
	bool found;
	double lastTOTALFactor;
	
	//*************************************
	actor prevtarget;
	actor prevmaster;
	actor prevtracer;
	state prevstate;
	override void Tick()
	{
		super.Tick();
		prevtarget = null;
		if (owner) 
		{
			if (owner.target) prevtarget = owner.target;
			if (owner.tracer) prevtracer = owner.tracer;
			if (owner.master) prevmaster = owner.master;
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

		bool surprisehit;
		if (owner)
		{
			if (!(owner.bISMONSTER || owner.bSHOOTABLE)) Destroy();
			
			ownername = owner.GetClassName();
			if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
			{
				KCPlayerPawn FoundPlayer;
				FoundPlayer = KCPlayerPawn(source);

				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("\c[sapphire]CompatVulnItem\c-: pre-damage: %d, damagetype: %s", damage, damageType);
				double TOTALFactor = 1.00;
				// Time Stop
				if (FoundPlayer && MiscItem && MiscItem.timestopactivetics > 0) 
				{
					double factor1 = frandompick(0.2,0.25);
					double factor2 = frandompick(0.6,0.75);
					if (MiscItem.timestoptype == 1) // Defensive
					{
						TOTALFactor *= factor1;
						if (damageType == 'Bullet' || 
								damageType == 'Pellet' ||
								damageType == 'Ripsaw' ||
								damageType == 'SawShot' ||
								damageType == 'Chainsaw') TOTALFactor *= factor2;
						owner.A_StopSound(14);
						owner.A_StartSound("misc/hitreducedtime",203,CHANF_DEFAULT,1.0,ATTN_NONE,frandompick(0.5,0.625,0.78125));
					}
					if (MiscItem.timestoptype == 2) // Offensive
					{
						TOTALFactor /= factor1;
						if (damageType == 'Bullet' || 
								damageType == 'Pellet' ||
								damageType == 'Ripsaw' ||
								damageType == 'SawShot' ||
								damageType == 'Chainsaw') TOTALFactor /= factor2;
						owner.A_StopSound(14);
						owner.A_StartSound("misc/hitboostedtime",203,CHANF_DEFAULT,1.0,ATTN_NONE,frandompick(0.5,0.625,0.78125));
					}
				}
				newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
				lastTOTALFactor = TOTALFactor;
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("\c[sapphire]CompatVulnItem\c- (%s): post-damage: %d, damagetype: %s, TOTALFactor: %.8f", ownername, newdamage, damageType, TOTALFactor);
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && source) Console.Printf("(source: \c[green]%p\c-) %s", source, source.GetClassName());
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && inflictor) Console.Printf("(inflictor: \c[green]%p\c-) %s", inflictor, inflictor.GetClassName());
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && prevtarget) Console.Printf("(owner.target: \c[green]%p\c-) %s", prevtarget, prevtarget.GetClassName());
				
				if (source && 
						prevtarget != source && 
						(PlayerPawn(source) || source.bFRIENDLY) && 
						!owner.bFRIENDLY && 
						!owner.bDORMANT)
				{
					int initdmg = newdamage;
					surprisehit = true;
					A_StopSound(32);
					if (owner.InStateSequence(owner.curstate,owner.ResolveState("Spawn")))
					{
						owner.A_SetInventory("JustSurprised",1);
						if (kc_hitweaksounds) owner.A_StartSound("Misc/WeaknessHitMid", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
						nm = "SonicNail";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == "ImpalerMissile"))
						{
							damage *= frandompick(2.0000,2.50);
						}
						else damage *= frandompick(1.3334,1.50);
					}
					else
					{
						if (kc_hitweaksounds) owner.A_StartSound("Misc/WeaknessHit", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
						nm = "SonicNail";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == "ImpalerMissile"))
						{
							damage *= frandompick(2.0000,2.50);
						}
						else damage *= frandompick(1.1667,1.25);
					}
					if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("(\c[green]%s\c-) surprisehit: damage: %d (initdmg: %d)", GetClassName(), newdamage, initdmg);
				}
				//
				bool criticalhit = false;
				int CritRoll;
				int TruePlayerLevel;
				if (MiscItem)
				{
					if (kc_expgains) TruePlayerLevel = MiscItem.PlayerLevel;
				}
				if (FoundPlayer) 
				{
					if (FoundPlayer.CountInv("DealCriticalHit")) 
					{
						criticalhit = true;
						if (owner.bBOSS && random(1,4) >= 2) 
						{
							criticalhit = false;
							if (source == FoundPlayer || inflictor == FoundPlayer)
							{
								If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
								{
									if (!criticalhit && random(1,16) <= 15) criticalhit = true;
								}
							}
						}
					}
					else
					{
						If (MiscItem)
						{
							CritRoll = MiscItem.CritRoll;
							if (MiscItem.CritRoll <= 1) 
							{
								criticalhit = true;
								if (owner.bBOSS && random(1,4) >= 2) 
								{
									criticalhit = false;
									if (source == FoundPlayer || inflictor == FoundPlayer)
									{
										If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
										{
											if (!criticalhit && random(1,16) <= 15) criticalhit = true;
										}
									}
								}
							}
						}
					}
					if (kcdebug_actordmgdisplays && MiscItem) Console.Printf("DamageMobj [SpecVuln] (\c[green]%s\c-): Critbase: %d / %d", GetClassName(), MiscItem.CritChance, CritRoll);
					if (FoundPlayer.CountInv("CheatCrit") || FoundPlayer.CountInv("CheatCritUltimate")) criticalhit = true;
				}
				
				int initdmg = newdamage;
				if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [SpecVuln] (\c[green]%s\c-): initdmg vs Damage: %d vs %d (damagefactor: %.8f)", GetClassName(), initdmg, newdamage, damageType);
				double critdmgmulti = 4.0 + (0.02 * random(-10,10));
				if (criticalhit && !owner.bINVULNERABLE)
				{
					int crittype = 1;
					if (!(ExplosiveBarrel(owner) ||
								ExplosiveBarrel2(owner) ||
								//ExplosiveBarrelNew(owner) ||
								Pod(self)))
					{
						owner.A_SetInventory("TookCriticalHit",1);
						if (source == FoundPlayer || inflictor == FoundPlayer)
						{
							bool supercrit = false;
							If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 1)
							{
								MiscItem.MortalBlowCritBoostTimer = randompick(0,1,1,1,1,1,1,1,1,2);
								supercrit = true;
							}
							else
							if (FoundPlayer.CountInv("CheatCritUltimate")) supercrit = true;
							
							if (supercrit)
							{
								critdmgmulti *= (7.5 + (0.0375 * random(-10,10)));
								owner.A_StartSound("misc/critsnd2", 216, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.625,0.9375));
								owner.A_StartSound("misc/critsnd2", 217, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.9375,1.0625));
								crittype = 2;
							}
						}
						newdamage *= critdmgmulti;
						if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [Mixin] (\c[green]%s\c-): Critical Hit Dealth: %d vs %d (damagefactor: %.8f)", GetClassName(), initdmg, newdamage, damagefactor);
						owner.A_StartSound("misc/critsnd2", 218, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, 1.0);
		
						double heightmult = frandompick(0.9375,1.0,1.0625,1.125,1.125,1.25,1.25,1.25,1.25,1.25);
						actor SMASH;
						bool success;
						[success, SMASH] = owner.A_SpawnItemEx("SMAAAASH",0.0,0.0,(owner.height * heightmult),0.0,0.0,0.0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0,0);
						if (success && SMASH)
						{
							SMAAAASH SMASH2;
							SMASH2 = SMAAAASH(SMASH);
							if (SMASH2)
							{
								double scalebase = frandom(0.875,1.125);
								if (crittype >= 2) scalebase = frandom(1.25,1.50);
								SMASH2.scale.x = (scalebase * owner.scale.x);
								SMASH2.scale.y = (scalebase * owner.scale.y);
								if (SMASH2.target != owner) SMASH2.target = owner;
								if (SMASH2.height < (owner.height * heightmult)) SMASH2.height = (owner.height * heightmult);
								SMASH2.initheight = (owner.height * heightmult);
							}
						}
					}
				}
				//
				if (inflictor)
				{
					if ((KickPuff(inflictor) || KickPuffNoThrust(inflictor) || damageType == 'Kick') && newdamage > 0) owner.A_SetInventory("JustKicked",1);
					if ((UppercutPuff(inflictor) && damageType == 'Fist') && newdamage > 0) owner.A_SetInventory("JustUppercutted",1);
					if ((FistPuff(inflictor) && damageType == 'Fist') && newdamage > 0) owner.A_SetInventory("JustPunched",1);
					if (damageType == 'DashingSD' && newdamage > 0) owner.A_SetInventory("JustShieldDashed",1);
				}
				//
				bool wasblastedimpact = false;
				if (inflictor == null && source == null && damageType == 'Melee') 
				{
					wasblastedimpact = true;
					if (owner.bBLASTED && random(1,20) <= 19) 
					{
						newdamage *= 0.0625;
						owner.bBLASTED = false;
					}
					else
					{
						newdamage *= 0.25;
					}
					if (owner.vel.x != 0.0) owner.vel.x *= 0.1;
					if (owner.vel.y != 0.0) owner.vel.y *= 0.1;
					if (kcdebug_actordmgdisplays && wasblastedimpact) Console.Printf("(\c[green]%s\c-) (\czwasblastedimpact?: %d", owner.GetClassName(), wasblastedimpact);
				}
			}
		}
	}
}
