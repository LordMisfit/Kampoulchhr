//*************************************************************************************************
//* A special inventory item intended for any NON-"EECreatre" class across other possible games,  *
//* mapsets or mods [i.e. BlooM, etc] that will give them varied resistances and weaknesses based *
//* on things like hybrids, etc.
//*************************************************************************************************
class CompatVulnItem : PlaceholderItem 
{
	string ownername;
	string nl, nm, nn, no, np, nq, nr, ns, nt, nu, nv, nw, nx, ny, nz, na, nb, nc, nd, ne, nf, ng, nh, ni, nj, nk;
	bool found;
	double lastTOTALFactor;
	
	//*************************************
	actor prevtarget;
	actor prevmaster;
	actor prevtracer;
	state prevstate;
	override void Tick()
	{
		super.Tick();
		prevtarget = null;
		if (owner) 
		{
			if (owner.target) prevtarget = owner.target;
			if (owner.tracer) prevtracer = owner.tracer;
			if (owner.master) prevmaster = owner.master;
		}
	}
	
	int A_GetPlayerLvl2(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (kc_expgains) 
			{
				if (type == 0) Level = MiscItem.PlayerLevel;
				if (type >= 1) Level = MiscItem.TruePlayerLevel;
			}
		}
		if (kcdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLvl2 - MonsterCollider mixin)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}
	
	// Damage Tracking
	int initdmg;
	double, double, double A_DefenseIgnoreFactor(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle, bool wasblastedimpact, bool surprisehit, int angvstype)
	{
		string nm, nn, no, np, nq, nr, ns;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = A_GetPlayerLvl2(1);
		int predmginr = damage;
		// (Partial) Defense Ignoring Attacks
		double prevDamageFactor;
		double basedmgfactor = owner.DamageFactor;
		double ActorDefenseIgnoreFactor = 0.00;
		string infl, sour;
		if (inflictor) infl = inflictor.GetClassName();
		if (source) sour = source.GetClassName();
		if (inflictor == null && source == null)
		{
			// BLASTED Impact Damage
			if (wasblastedimpact) ActorDefenseIgnoreFactor += (frandom(0.45,0.55) * (1.00 - ActorDefenseIgnoreFactor));
		}
		else
		{
			double ProjFactor;
			KCProjectile KCProj;
			if (inflictor)
			{
				KCProj = KCProjectile(inflictor);
			}
			else
			{
				if (source)
				{
					KCProj = KCProjectile(source);
				}
			}
			if (KCProj)
			{
				ProjFactor = KCProj.defenseignorefactor;
				ActorDefenseIgnoreFactor += (ProjFactor * (1.00 - ActorDefenseIgnoreFactor));
				//Console.Printf("ProjFactor: %.8f", ProjFactor);
			}

			KCPlayerPawn FoundPlayer;
			FoundPlayer = KCPlayerPawn(source);
			if (FoundPlayer)
			{
				FoundPlayer = KCPlayerPawn(inflictor);
				if (FoundPlayer)
				{
					double TimeSeraphBangleFactor = 1.0;
					if (FoundPlayer.CountInv("TimeSeraphVisor")) 
					{
						if (FoundPlayer.CountInv("TSArmorTier2"))
						{
							TimeSeraphBangleFactor = frandompick(0.25,0.325,0.325,0.334,0.334,0.334,0.334,0.334,0.334,0.375,0.375,0.4167);
						}
						else
						if (FoundPlayer.CountInv("TSArmorTier1"))
						{
							TimeSeraphBangleFactor = frandompick(0.334,0.375,0.375,0.4167,0.4167,0.4167,0.4167,0.4167,0.4167,0.4445,0.4445,0.5);
						}
						else
						{
							TimeSeraphBangleFactor = frandompick(0.4167,0.4445,0.4445,0.5,0.5,0.5,0.5,0.5,0.5,0.5556,0.5556,0.625);
						}
						ActorDefenseIgnoreFactor += (TimeSeraphBangleFactor * (1.00 - ActorDefenseIgnoreFactor));
					}
				}
				else
				{
					KCCreature OtherA;
					OtherA = KCCreature(source);
					if (!OtherA) OtherA = KCCreature(inflictor);
					if (OtherA)
					{
						//
						//
						//
					}
				}
			}
			
			double PlushFactor = 1.00;
			nm = "CCards_Actor_ThrownPlushEx";
			nn = "CCards_Actor_ThrownPlushExB";
			no = "CCards_Actor_ThrownPlush";
			if (infl == nm ||
					infl == nn ||
					infl == no )
			{
				ActorDefenseIgnoreFactor += (PlushFactor * (1.00 - ActorDefenseIgnoreFactor));
			}
			
			double ExplosivesFactor = frandompick(0.625,0.6667,0.75);
			// Suicide Bombers/Kamikaze Enemy Attacks/RockBomb Shards
			nm = "SuicideBomber";
			nn = "SuicideBomb";
			no = "SuicideBombStrong";
			np = "SuicideBombUltra";
			nq = "HSBoom";
			nr = "HadesSphere";
			ns = "HSOverlord";
			if (infl == nm || 
					infl == nm || 
					infl == no || 
					infl == np || 
					infl == nq || 
					infl == nr || 
					infl == ns || 
					mod == 'Explosive' || 
					mod == 'ExplosiveImpact' ||
					mod == 'CC_Firecracker' || 
					flags & DMG_EXPLOSION) 
			{
				ActorDefenseIgnoreFactor += (ExplosivesFactor * (1.00 - ActorDefenseIgnoreFactor));
			}
			double RSawFactor = frandom(0.225,0.275);
			if (mod == 'Ripsaw' || mod == 'SawShot')
			{
				if (mod == 'Ripsaw') RSawFactor *= 1.5;
				ActorDefenseIgnoreFactor += (RSawFactor * (1.00 - ActorDefenseIgnoreFactor));
			}

			double BFGFactor = frandom(0.45,0.55);
			// BFG Ignores roughly half of "normal" damagefactor
			if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') 
			{ 
				ActorDefenseIgnoreFactor += (BFGFactor * (1.00 - ActorDefenseIgnoreFactor));
			}
			double PlasmaFactor = frandom(0.225,0.275);
			// Plasma Ignores 1/4th of "normal" damagefactor
			if (mod == 'Plasma') 
			{ 
				ActorDefenseIgnoreFactor += (PlasmaFactor * (1.00 - ActorDefenseIgnoreFactor));
			}
			double BulletFactor = frandom(0.1125,0.1375);
			// Bullet/Pellet
			if (mod == 'Bullet') 
			{ 
				ActorDefenseIgnoreFactor += (BulletFactor * (1.00 - ActorDefenseIgnoreFactor));
			}

			double BarrelFactor = 0.50;
			if (skill <= 0) BarrelFactor = 1.0;
			if (skill == 1) BarrelFactor = 0.75;
			if (skill == 2) BarrelFactor = 0.5;
			if (skill == 3) BarrelFactor = 0.25;
			if (skill >= 4) BarrelFactor = 0.0;
			if ((ExplosiveBarrel(inflictor) || 
					 ExplosiveBarrel(source) || 
					 ExplosiveBarrel2(inflictor) || 
					 ExplosiveBarrel2(source) || 
					 Pod(inflictor) || 
					 Pod(source)) && 
					 flags & DMG_EXPLOSION) ActorDefenseIgnoreFactor += (BarrelFactor * (1.00 - ActorDefenseIgnoreFactor));
			
			double BHoleFactor = frandom(0.334,0.4167);
			if ((mod == 'BlackHole') ||
					(infl == "DMBall" || infl == "DMBall2")) 
			{
				int bhlvl1chance = randompick(1,1,1,2);
				int bhlvl2chance = 5;
				int bhlvl3chance = 25;
				if (infl == "DMBall2")
				{
					int bhlvl1chance = 1;
					int bhlvl2chance = random(2,3);
					int bhlvl3chance = randompick(6,6,6,7);
				}
				if (random(1,bhlvl1chance) <= 1)
				{
					if (!owner.CountInv("BlackHoleSpeedPenalty1")) owner.A_SetInventory("BlackHoleSpeedPenalty1",1);
					else
					{
						if (!owner.CountInv("BlackHoleSpeedPenalty1b")) owner.A_SetInventory("BlackHoleSpeedPenalty1b",1);
					}
					if (random(1,bhlvl2chance) <= 1) 
					{
						if (!owner.CountInv("BlackHoleSpeedPenalty2")) owner.A_SetInventory("BlackHoleSpeedPenalty2",1);
						else
						{
							if (!owner.CountInv("BlackHoleSpeedPenalty2b")) owner.A_SetInventory("BlackHoleSpeedPenalty2b",1);
						}
						if (random(1,bhlvl3chance) <= 1) 
						{
							if (!owner.CountInv("BlackHoleSpeedPenalty3")) owner.A_SetInventory("BlackHoleSpeedPenalty3",1);
							else
							{
								if (!owner.CountInv("BlackHoleSpeedPenalty3b")) owner.A_SetInventory("BlackHoleSpeedPenalty3b",1);
							}
						}
					}
				}

				ActorDefenseIgnoreFactor += (BHoleFactor * (1.00 - ActorDefenseIgnoreFactor));
			}
			
			double RailFactor = frandom(0.3,0.334);
			if (mod == 'Railgun') ActorDefenseIgnoreFactor += (RailFactor * (1.00 - ActorDefenseIgnoreFactor));
			/*
			if (inflictor && 
					(inflictor.GetClassName() == "SoulScepterPuff" ||
					 inflictor.GetClassName() == "DualSoulScepterPuff" ||
					 inflictor.GetClassName() == "SoulScepterPuff2" ||
					 inflictor.GetClassName() == "SoulScepterPowerPuff" ||
					 inflictor.GetClassName() == "DualSoulScepterPowerPuff"))
			{
				ActorDefenseIgnoreFactor += (0.50 * (1.00 - ActorDefenseIgnoreFactor));
			}
			
			double HWShieldFactor = 0.125;
			if (EvilWarriorShieldBall(inflictor) || EvilWarriorShieldBall(source) ||
					HellWarriorBall2(inflictor) || HellWarriorBall2(source)) ActorDefenseIgnoreFactor += (HWShieldFactor * (1.00 - ActorDefenseIgnoreFactor));
			*/
			
			if (source) FoundPlayer = KCPlayerPawn(source);
			if (!FoundPlayer && inflictor) FoundPlayer = KCPlayerPawn(inflictor);
			if (FoundPlayer)
			{
				if (mod == 'Fist' || mod == 'Kick')
				{
					ActorDefenseIgnoreFactor += (frandom(0.001,0.100) * (1.00 - ActorDefenseIgnoreFactor));
				}
				if (mod == 'Chainsaw')
				{
					ActorDefenseIgnoreFactor += ((random(10,25) * 0.01) * (1.00 - ActorDefenseIgnoreFactor));
				}
				if (mod == 'Dashing') 
				{
					ActorDefenseIgnoreFactor += (0.2 * (1.00 - ActorDefenseIgnoreFactor));
				}
				if (mod == 'DashingBG')
				{
					ActorDefenseIgnoreFactor += (0.375 * (1.00 - ActorDefenseIgnoreFactor));
				}
				if (mod == 'DashingSD') 
				{
					ActorDefenseIgnoreFactor += (0.375 * (1.00 - ActorDefenseIgnoreFactor));
				}
			}
			
			if (mod == 'Massacre') ActorDefenseIgnoreFactor += (1.00 * (1.00 - ActorDefenseIgnoreFactor));
			
			if (surprisehit) 
			{
				nm = "SonicNail";
				if (inflictor && 
						(inflictor.GetClassName() == nm ||
						 inflictor.GetClassName() == "ImpalerMissile" ||
						 inflictor.GetClassName() == "ImpalerMissile2" ||
						 inflictor.GetClassName() == "ImpalerMissile3"))
				{
					ActorDefenseIgnoreFactor += ((random(30,32) * 0.03125) * (1.00 - ActorDefenseIgnoreFactor));
				}
				else
				{
					ActorDefenseIgnoreFactor += ((random(6,8) * 0.125) * (1.00 - ActorDefenseIgnoreFactor));
				}
			}
			
			//if (CountInv("PWDefenseBuff") > 0) ActorDefenseIgnoreFactor *= 0.25;
		}
		
		double temp1;
		if (playera.CountInv("KCTimeFreezer1"))
		{
			temp1 = (ActorDefenseIgnoreFactor * 0.75);
			ActorDefenseIgnoreFactor -= temp1;
		}
		if (playera.CountInv("KCTimeFreezer2"))
		{
			temp1 = ((1.0 - ActorDefenseIgnoreFactor) * 0.75);
			ActorDefenseIgnoreFactor += temp1;
		}

		return prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		let globalvars = KCGlobalVariables.Get();
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));

		if (owner)
		{
			if (!(owner.bISMONSTER || 
						owner.bSHOOTABLE) ||
						ShieldPartBase(owner) ||
						PlayerPawn(owner)) Destroy();
			
			ownername = owner.GetClassName();
			if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
			{
				int angvstype;
				bool surprisehit;
				bool wasblastedimpact;

				KCPlayerPawn FoundPlayer;
				FoundPlayer = KCPlayerPawn(source);

				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("\c[sapphire]CompatVulnItem\c-: pre-damage: %d, damagetype: %s", damage, damageType);
				double TOTALFactor = 1.00;
				// Time Stop
				if (FoundPlayer) 
				{
					if (owner.CountInv("LDLegendaryMonsterTransformed"))
					{
						nm = "SonicNail";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == "ImpalerMissile" ||
								inflictor.GetClassName() == "ImpalerMissile2" ||
								inflictor.GetClassName() == "ImpalerMissile3"))
						{
							TOTALFactor *= 5.0;
						}
						nm = "DeviationRocket";
						nn = "DumbRocket";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == nn))
						{
							TOTALFactor *= 2.0;
						}
					}
					
					if (owner.bNORADIUSDMG)
					{
						nm = "DeviationRocket";
						nn = "DumbRocket";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == nn) && 
								inflictor.bFORCERADIUSDMG &&
								flags & DMG_EXPLOSION)
						{
							TOTALFactor *= 0.5;
						}
					}
					
					if (LostSoul(owner) || 
							owner.GetClassName() == "LostSoul")
					{
						if (owner.InStateSequence(owner.curstate,owner.ResolveState("Missile"))) TOTALFactor *= 2.0;
					}
					
					bool isaghost;
					nm = "CCards_Actor_Ghost"; 
					nn = "CCards_Actor_AchillesCurse"; 
					if (!(owner.CountInv(nm) || 
								owner.CountInv(nn)))
					{
						if (MiscItem && MiscItem.timestopactivetics > 0)
						{
							double factor1 = frandompick(0.2,0.25);
							double factor2 = frandompick(0.6,0.75);
							if (MiscItem.timestoptype == 1) // Defensive
							{
								TOTALFactor *= factor1;
								if (damageType == 'Bullet' || 
										damageType == 'Pellet' ||
										damageType == 'Ripsaw' ||
										damageType == 'SawShot' ||
										damageType == 'Chainsaw') TOTALFactor *= factor2;
								owner.A_StopSound(14);
								owner.A_StartSound("misc/hitreducedtime",203,CHANF_DEFAULT,1.0,ATTN_NONE,frandompick(0.5,0.625,0.78125));
							}
							if (MiscItem.timestoptype == 2) // Offensive
							{
								TOTALFactor /= factor1;
								if (damageType == 'Bullet' || 
										damageType == 'Pellet' ||
										damageType == 'Ripsaw' ||
										damageType == 'SawShot' ||
										damageType == 'Chainsaw') TOTALFactor /= factor2;
								owner.A_StopSound(14);
								owner.A_StartSound("misc/hitboostedtime",203,CHANF_DEFAULT,1.0,ATTN_NONE,frandompick(0.5,0.625,0.78125));
							}
						}
					}
					
					if (FoundPlayer.CountInv("TimeSeraphVisor"))
					{
						if (FoundPlayer.CountInv("TSArmorTier2")) TOTALFactor *= 1.45;
						else if (FoundPlayer.CountInv("TSArmorTier1")) TOTALFactor *= 1.2625;
						else TOTALFactor *= 1.125;
					}
				}
				newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
				lastTOTALFactor = TOTALFactor;
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("\c[sapphire]CompatVulnItem\c- (%s): post-damage: %d, damagetype: %s, TOTALFactor: %.8f", ownername, newdamage, damageType, TOTALFactor);
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && source) Console.Printf("(source: \c[green]%p\c-) %s", source, source.GetClassName());
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && inflictor) Console.Printf("(inflictor: \c[green]%p\c-) %s", inflictor, inflictor.GetClassName());
				if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs) && prevtarget) Console.Printf("(owner.target: \c[green]%p\c-) %s", prevtarget, prevtarget.GetClassName());
				
				string nm = "CCards_Actor_StoneDeath";
				string nn = "CCards_Actor_MysteryEgg";
				if (source && 
						prevtarget != source && 
						(PlayerPawn(source) || source.bFRIENDLY) && 
						!owner.bFRIENDLY && 
						owner.GetClassName() != nm &&
						owner.GetClassName() != nn &&
						!owner.bDORMANT)
				{
					int initdmg = newdamage;
					surprisehit = true;
					A_StopSound(32);
					if (owner.InStateSequence(owner.curstate,owner.ResolveState("Spawn")))
					{
						owner.A_SetInventory("JustSurprised",1);
						if (kc_hitweaksounds) owner.A_StartSound("Misc/WeaknessHitMid", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
						nm = "SonicNail";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == "ImpalerMissile" ||
								inflictor.GetClassName() == "ImpalerMissile2" ||
								inflictor.GetClassName() == "ImpalerMissile3"))
						{
							damage *= frandompick(2.0000,2.50);
						}
						else damage *= frandompick(1.3334,1.50);
					}
					else
					{
						if (kc_hitweaksounds) owner.A_StartSound("Misc/WeaknessHit", 32, CHANF_DEFAULT, (kc_hitweaksoundvol * frandom(0.75,1.25)), ATTN_NONE, 0.67);
						nm = "SonicNail";
						if (inflictor && 
								(inflictor.GetClassName() == nm ||
								inflictor.GetClassName() == "ImpalerMissile" ||
								inflictor.GetClassName() == "ImpalerMissile2" ||
								inflictor.GetClassName() == "ImpalerMissile3"))
						{
							damage *= frandompick(1.5000,1.75);
						}
						else damage *= frandompick(1.1667,1.25);
					}
					if ((kcdebug_actordmgdisplays || kcdebug_defensebuffs)) Console.Printf("(\c[green]%s\c-) surprisehit: damage: %d (initdmg: %d)", GetClassName(), newdamage, initdmg);
				}
				//
				bool criticalhit = false;
				int CritRoll;
				int TruePlayerLevel;
				if (MiscItem && kc_expgains) TruePlayerLevel = MiscItem.PlayerLevel;
				if (FoundPlayer) 
				{
					int bosscritres = 75;
					if (FoundPlayer.CountInv("TimeSeraphVisor")) 
					{
						if (FoundPlayer.CountInv("TSArmorTier2")) bosscritres *= 0.1;
						else if (FoundPlayer.CountInv("TSArmorTier1")) bosscritres *= 0.25;
						else bosscritres *= 0.625;
					}
					
					if (FoundPlayer.CountInv("DealCriticalHit"))
					{
						criticalhit = true;
						if (owner.bBOSS && random(1,100) <= bosscritres) 
						{
							criticalhit = false;
							if (source == FoundPlayer || inflictor == FoundPlayer)
							{
								If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
								{
									if (!criticalhit && random(1,16) <= 15) criticalhit = true;
								}
							}
						}
					}
					else
					{
						If (MiscItem)
						{
							CritRoll = MiscItem.CritRoll;
							if (MiscItem.CritRoll <= 1) 
							{
								criticalhit = true;
								if (owner.bBOSS && random(1,100) <= bosscritres) 
								{
									criticalhit = false;
									if (source == FoundPlayer || inflictor == FoundPlayer)
									{
										If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 0)
										{
											if (!criticalhit && random(1,16) <= 15) criticalhit = true;
										}
									}
								}
							}
						}
					}
					if (kcdebug_actordmgdisplays && MiscItem) Console.Printf("DamageMobj [SpecVuln] (\c[green]%s\c-): Critbase: %d / %d", GetClassName(), MiscItem.CritChance, CritRoll);
					if (FoundPlayer.CountInv("CheatCrit") || FoundPlayer.CountInv("CheatCritUltimate")) criticalhit = true;
				}
				if (criticalhit && (damageType == 'BlackHole' && random(1,8) <= 7)) criticalhit = false;
				
				int initdmg = newdamage;
				if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [SpecVuln] (\c[green]%s\c-): initdmg vs Damage: %d vs %d (damageType: %s, damagefactor: %.8f)", GetClassName(), initdmg, newdamage, damageType, owner.DamageFactor);
				double critdmgmulti = 4.0 + (0.02 * random(-10,10));
				if (criticalhit && !owner.bINVULNERABLE)
				{
					int crittype = 1;
					if (!(ExplosiveBarrel(owner) ||
								ExplosiveBarrel2(owner) ||
								//ExplosiveBarrelNew(owner) ||
								Pod(self)))
					{
						owner.A_SetInventory("TookCriticalHit",1);
						if (source == FoundPlayer || inflictor == FoundPlayer)
						{
							bool supercrit = false;
							If (MiscItem && MiscItem.MortalBlowCritBoostTimer > 1)
							{
								MiscItem.MortalBlowCritBoostTimer = randompick(0,1,1,1,1,1,1,1,1,2);
								supercrit = true;
							}
							else
							if (FoundPlayer.CountInv("CheatCritUltimate")) supercrit = true;
							
							if (supercrit)
							{
								critdmgmulti *= (7.5 + (0.0375 * random(-10,10)));
								owner.A_StartSound("misc/critsnd2", 216, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.625,0.9375));
								owner.A_StartSound("misc/critsnd2", 217, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, frandom(0.9375,1.0625));
								crittype = 2;
							}
							nm = "CCards_Actor_FirebluTotemDefBuff";
							if (owner.CountInv(nm))
							{
								if (FoundPlayer.CountInv("TimeSeraphVisor"))
								{
									if (supercrit) critdmgmulti *= 100;
														else critdmgmulti *= 25;
								}
								else
								{
									if (supercrit) critdmgmulti *= 20;
														else critdmgmulti *= 5;
								}
							}
						}
						newdamage *= critdmgmulti;
						if (kcdebug_actordmgdisplays) Console.Printf("DamageMobj [Mixin] (\c[green]%s\c-): Critical Hit Dealth: %d vs %d (damagefactor: %.8f)", GetClassName(), initdmg, newdamage, damagefactor);
						owner.A_StartSound("misc/critsnd2", 218, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NONE, 1.0);
		
						double heightmult = frandompick(0.9375,1.0,1.0625,1.125,1.125,1.25,1.25,1.25,1.25,1.25);
						actor SMASH;
						bool success;
						[success, SMASH] = owner.A_SpawnItemEx("SMAAAASH",0.0,0.0,(owner.height * heightmult),0.0,0.0,0.0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0,0);
						if (success && SMASH)
						{
							SMAAAASH SMASH2;
							SMASH2 = SMAAAASH(SMASH);
							if (SMASH2)
							{
								double scalebase = frandom(0.875,1.125);
								if (crittype >= 2) scalebase = frandom(1.25,1.50);
								SMASH2.scale.x = (scalebase * owner.scale.x);
								SMASH2.scale.y = (scalebase * owner.scale.y);
								if (SMASH2.target != owner) SMASH2.target = owner;
								if (SMASH2.height < (owner.height * heightmult)) SMASH2.height = (owner.height * heightmult);
								SMASH2.initheight = (owner.height * heightmult);
							}
						}
					}
				}
				//
				if (inflictor)
				{
					if ((KickPuff(inflictor) || KickPuffNoThrust(inflictor) || damageType == 'Kick') && newdamage > 0) owner.A_SetInventory("JustKicked",1);
					if ((UppercutPuff(inflictor) && damageType == 'Fist') && newdamage > 0) owner.A_SetInventory("JustUppercutted",1);
					if ((FistPuff(inflictor) && damageType == 'Fist') && newdamage > 0) owner.A_SetInventory("JustPunched",1);
					if (damageType == 'DashingSD' && newdamage > 0) owner.A_SetInventory("JustShieldDashed",1);
				}
				//
				wasblastedimpact = false;
				if (inflictor == null && source == null && damageType == 'Melee') 
				{
					wasblastedimpact = true;
					if (owner.bBLASTED && random(1,20) <= 19) 
					{
						newdamage *= 0.0625;
						owner.bBLASTED = false;
					}
					else
					{
						newdamage *= 0.25;
					}
					if (owner.vel.x != 0.0) owner.vel.x *= 0.1;
					if (owner.vel.y != 0.0) owner.vel.y *= 0.1;
					if (kcdebug_actordmgdisplays && wasblastedimpact) Console.Printf("(\c[green]%s\c-) (\czwasblastedimpact?: %d", owner.GetClassName(), wasblastedimpact);
				}
				
				int predmginr = newdamage;
				// (Partial) Defense Ignoring Attacks
				double prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor;
				[prevDamageFactor, basedmgfactor, ActorDefenseIgnoreFactor] = A_DefenseIgnoreFactor(inflictor, source, damage, damagetype, flags, angle, wasblastedimpact, surprisehit, angvstype);
				if (kcdebug_actordmgdisplays) Console.Printf("ActorDefenseIgnoreFactor: %.8f", ActorDefenseIgnoreFactor);

				// Defense Checks

				//******************************
				//*This ignores damage factors *
				//******************************
				if (ActorDefenseIgnoreFactor > 1.00) ActorDefenseIgnoreFactor = 1.00;
				prevDamageFactor = owner.DamageFactor;
				if (owner.DamageFactor < 1.00) 
				{
					if (criticalhit) 
					{
						ActorDefenseIgnoreFactor = 1.00;
						double temp1;
						if (playera.CountInv("KCTimeFreezer1"))
						{
							temp1 = (ActorDefenseIgnoreFactor * 0.75);
							ActorDefenseIgnoreFactor -= temp1;
						}
					}

					if (ActorDefenseIgnoreFactor > 0.00)
					{
						int predmg = newdamage;
						double newdmgfct = (prevDamageFactor + ((1.00 - prevDamageFactor) * ActorDefenseIgnoreFactor));
						double dmgmul = double(newdmgfct / prevDamageFactor);
						newdamage *= dmgmul;
						//owner.DamageFactor += ((1.00 - owner.DamageFactor) * ActorDefenseIgnoreFactor); 
						if (kcdebug_actordmgdisplays && damage > 0)
						{
							Console.Printf("newdmgfct: %.8f, prevDamageFactor: %.8f, dmgmul: %.8f (predmg: %d vs damage: %d)", newdmgfct, prevDamageFactor, dmgmul, predmg, newdamage);
							if (ActorDefenseIgnoreFactor > 0.00) Console.Printf("    (\czActor Defensive Input [Def Ignoring]\c-: \caDefenseIgnoreFactor = %.8f\c-, \cadmgfactor = %.8f\c-, \caprevdmgfactor = %.8f\c-, \cypredmg = %d\c-, \cydmg = %d\c- (Monster Actor))", ActorDefenseIgnoreFactor, owner.DamageFactor, prevDamageFactor, predmg, damage);
																							else Console.Printf("    (\czActor Defensive Input [Def Ignoring]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", predmg);
						}
					}
				}
			}
		}
	}
}
