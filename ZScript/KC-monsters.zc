// Corpses
class KCDeadMarine : DeadMarine replaces DeadMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY N 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY N 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY N 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY N 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY N 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY N 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY N 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY N 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY N 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY N 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY N 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY N 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY N 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY N 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY N 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY N 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY N 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY N 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY N 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop2:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop3:
			PLAY N 0 A_SpawnItemEx("BlueArmor");
			goto Idle;
		ItemDrop4:
			PLAY N 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Idle;
		ItemDrop5:
			PLAY N 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Idle;
		ItemDrop6:
			PLAY N 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY N 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY N 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY N 0;
			goto Idle;
		Spawn:
			PLAY N 0;
			PLAY N 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,65536) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY N 0 A_Jump(32, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY N -1;
			Stop;
	}
}
class KCGibbedMarine : GibbedMarine replaces GibbedMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY W 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY W 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY W 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY W 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY W 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY W 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY W 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY W 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY W 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY W 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY W 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY W 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY W 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY W 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY W 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY W 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY W 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY W 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY W 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop2:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop3:
			PLAY W 0 A_SpawnItemEx("BlueArmor");
			goto Spawn+3;
		ItemDrop4:
			PLAY W 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Spawn+3;
		ItemDrop5:
			PLAY W 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Spawn+3;
		ItemDrop6:
			PLAY W 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY W 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY W 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY W 0;
			goto Spawn+3;
		Spawn:
			PLAY W 0;
			PLAY W 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,262144) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY W 0 A_Jump(8, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY W -1;
			Stop;
	}
}
class KCHelperDog : KCCreature // replaces MBFHelperDog
{
	default
	{
		Tag "Attack Dog";
		Health 375; // 500
		Speed 15; // 10
		Radius 12;
		Height 28;
		Mass 100; // 100
		PainChance 120; // 180
		Painchance "Fist", 180; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+JUMPDOWN;
		ActiveSound "dog/active";
		AttackSound "dog/attack";
		DeathSound "dog/death";
		PainSound "dog/pain";
		SeeSound "dog/sight";
		Obituary "$OB_DOG"; // "%o was mauled by a dog."
	}

	States
	{
		Spawn:
			DOGS A 0 NoDelay;
			DOGS AABB 5 A_Look();
			goto Spawn+1;
		See:
			DOGS A 0;
			DOGS AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DOGS A 0;
			DOGS EF 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(7); }
				A_FaceTarget();
			}
			DOGS G 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack((random(1,10)*randompick(4,4,4,4,6,6,8)),"none","none","Melee",true); // A_SargAttack
			}
			Goto See;

		Pain:
			DOGS H 2;
			DOGS H 2 A_KCPain();
			Goto See;
		Pain.Fist:
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HH 2;
			Goto See;
		Pain.Kick: 
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HHHH 2; 
			Goto See; 

		Death:
			DOGS I 8;
			DOGS J 8 A_Scream();
			DOGS K 4;
			DOGS L 4 A_Fall();
			DOGS M 4;
			DOGS N -1;
			stop;
		Ice:
			DOGS H 5 A_GenericFreezeDeath();
			DOGS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DOGS N 5;
			DOGS MLKJI 5;
			Goto See;
	}
}

// Doom
class ZombiemanNew : KCCreature
{
	default
	{
		Tag "Zombieman";
		Health 20;
		Radius 20;
		Height 56;
		Speed 8;
		Painchance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "$OB_ZOMBIE";
		DropItem "Clip";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}
	
	void A_PosAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			ang += Random2[PosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			A_StartSound(AttackSound, CHAN_WEAPON);
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			POSS AB 10 A_Look();
			Loop;
		See:
			POSS A 0
			{
				user_shotsfired = 0;
			}
			POSS AABBCCDD 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			POSS E 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}

				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		Missile1:
			POSS F 8 bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_PosAttack();
			}
			goto Missile1Post;
		Missile1Post:
			POSS E 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				user_shotsfired += 1;
				A_FaceTarget();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}
	
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			POSS G 3;
			POSS G 3 A_KCPain();
			Goto See;
		Death:
			POSS H 5;
			POSS I 5 A_Scream();
			POSS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS K 5;
			POSS L -1;
			Stop;
		XDeath:
			POSS M 5;
			POSS N 5 A_XScream();
			POSS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS PQRST 5;
			POSS U -1;
			Stop;
		Raise:
			POSS K 5;
			POSS JIH 5;
			Goto See;
	}
}
class PlasmaGuy : KCCreature { } // Filler for later implementation
class RepeaterZombie : KCCreature { } // Filler for later implementation
class KarasawaGuy : KCCreature { } // Filler for later implementation
class RocketLauncherGuy : KCCreature { } // Filler for later implementation
class ShotgunGuyNew : KCCreature
{
	default
	{
		Tag "Shotgun Guy";
		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "shotguy/sight";
		AttackSound "shotguy/attack";
		PainSound "shotguy/pain";
		DeathSound "shotguy/death";
		ActiveSound "shotguy/active";
		Obituary "$OB_SHOTGUY";
	}

	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}
	
	States
	{
		Spawn:
			SPOS AB 10 A_Look();
			Loop;
		See:
			SPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			SPOS E 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			SPOS F 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_SposAttackUseAtkSound();
			}
			SPOS E 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			SPOS G 3;
			SPOS G 3 A_KCPain();
			Goto See;
		Death:
			SPOS H 5;
			SPOS I 5 A_Scream();
			SPOS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS K 5;
			SPOS L -1;
			Stop;
		XDeath:
			SPOS M 5;
			SPOS N 5 A_XScream();
			SPOS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS PQRST 5;
			SPOS U -1;
			Stop;
		Raise:
			SPOS L 5;
			SPOS KJIH 5;
			Goto See;
	}
}
class SuperShotgunGuy : KCCreature { } // Filler for later implementation
class FemaleRailZombie : KCCreature { } // Filler for later implementation
class ChaingunGuyNew : KCCreature
{
	default
	{
		Tag "Chaingun Guy";
		Health 70;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "chainguy/attack";
		Obituary "$OB_CHAINGUY";
		//Dropitem "Chaingun";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}

	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_FaceTarget();
			A_StartSound(AttackSound, CHAN_WEAPON);
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	void A_CPosRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	States
	{
		Spawn:
			CPOS AB 10 A_Look();
			Loop;
		See:
			CPOS A 0
			{
				user_shotsfired = 0;
			}
			CPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((25 + (CountInv("MonsterLevel") / 8)),(50 + (CountInv("MonsterLevel") / 4))); }
					else { user_shotsfiredmax = random(25,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			#### # 0 A_DynamicMusic();
			CPOS E 10 
			{
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			CPOS FE 4 BRIGHT 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_CPosAttack();
				A_DynamicMusic();
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 1 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(0); }
			}
			CPOS F 0 A_MonsterRefire(40,"See"); // A_CPosRefire();
			loop;
			
		MissileEnd:
			TNT1 A 0 
			{
				user_shotsfired = 0;
			}
			CPOS F 0 A_FaceTarget();
			Goto See;

		Pain:
			CPOS G 3;
			CPOS G 3 A_KCPain();
			Goto See;
		Death:
			CPOS H 5;
			CPOS I 5 A_Scream();
			CPOS J 5
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS KLM 5;
			CPOS N -1;
			Stop;
		XDeath:
			CPOS O 5;
			CPOS P 5 A_XScream();
			CPOS Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS RS 5;
			CPOS T -1;
			Stop;
		Raise:
			CPOS N 5;
			CPOS MLKJIH 5;
			Goto See;
	}
}
// Mingunner Corporal
class Minigunner : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ChaingunGuy Type";
		Tag "Minigun Zombie";
		
		Health 105; // 70
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 189;
		DamageFactor "CherryBomb", 1.1667;
		Painchance "CherryBomb", 198;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;

		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		AttackSound "weapons/minigunfire";
		Obituary "%o was shredded by a minigun zombie.";
		
		DropItem "Clip";
		DropItem "Clip", 64;
		DropItem "Clip", 16;
		DropItem "Clip", 4;
		DropItem "Clip", 1;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		bool check1 = true;
		
		if (check1)
		{
		}
	}
	
	States
	{
		Spawn:
			MINZ A 0 NoDelay;
			MINZ AB 10 A_Look();
			goto Spawn+1;
		See:
			MINZ A 0
			{
				user_shotsfired = 0;
			}
			MINZ AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					bAVOIDMELEE = true; 
				}
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("MinigunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((20 + (CountInv("MonsterLevel") / 10)),(50 + (CountInv("MonsterLevel") / 4))); }
					else { user_shotsfiredmax = random(20,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			MINZ E 10
			{
				user_shotaccuracy = 35.5; // 30.0;
				user_shotzaccuracy = 14.2; // 2.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			MINZ FE 2
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(1); }
				A_FaceTarget();
				A_DynamicMusic();
				
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(2,4)*random(6,7), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_SpawnProjectile("ZombieBulletTracer", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0 A_MonsterRefire(40,"See"); // A_CPosRefire
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			MINZ F 0 A_FaceTarget();
			Goto See;

		Pain:
			MINZ G 3;
			MINZ G 3 A_KCPain();
			Goto See;

		Death:
			MINZ H 6;
			MINZ I 6 A_Scream();
			MINZ J 6 
			{
				A_Fall();
				A_Drop();
			}
			MINZ KLM 6;
			MINZ N -1;
			Stop;
		XDeath:
			MINZ O 4;
			MINZ P 4 A_XScream();
			MINZ Q 4
			{
				A_Fall();
				A_Drop();
			}
			MINZ RSTUV 4;
			MINZ W -1;
			Stop;
		Raise:
			MINZ N 5;
			MINZ MLKJIH 5;
			Goto See;
	}
}
class BFGGuy : KCCreature { } // Filler for later implementation
class WolfensteinSSNew : KCCreature replaces WolfensteinSS
{
	default
	{
		Tag "Schutzstaffel";
		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "wolfss/sight";
		PainSound "nazi/pain";
		DeathSound "wolfss/death";
		ActiveSound "wolfss/active";
		AttackSound "wolfss/attack";
		Obituary "$OB_WOLFSS";
		//Dropitem "Clip";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}
	
	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_FaceTarget();
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (22.5/256);

			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			SSWV AB 10 A_Look;
			Loop;
		See:
			SSWV AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			SSWV E 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			SSWV F 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
		MissileLoop:
			SSWV G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				
				A_FaceTarget();
			}
			SSWV G 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				
				A_CPosAttack();
				A_DynamicMusic();
			}
			SSWV F 1 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(0); }
				A_CPosRefire();
			}
			Goto Missile+2;
		Pain:
			SSWV H 3;
			SSWV H 3 A_KCPain();
			Goto See;
		Death:
			SSWV I 5;
			SSWV J 5 A_Scream();
			SSWV K 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV L 5;
			SSWV M -1;
			Stop;
		XDeath:
			SSWV N 5 ;
			SSWV O 5 A_XScream();
			SSWV P 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SSWV QRSTU 5;
			SSWV V -1;
			Stop;
		Raise:
			SSWV M 5;
			SSWV LKJI 5;
			Goto See;
	}
}
class DoomImpBallNew : KCProjectile
{
	Default
	{
		Tag "Imp Fireball";
		Radius 6;
		Height 8;
		Speed 10;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 1;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL1 AB 4 BRIGHT;
			Loop;
		Death:
			BAL1 CDE 6 BRIGHT;
			Stop;
	}
}
class DoomImpNew : KCCreature
{
	default
	{
		Tag "Imp";
		Health 60;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 200;
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 80;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.6;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		MeleeSound "imp/melee";
		HitObituary "$OB_IMPHIT";
		Obituary "$OB_IMP";
		Species "Imp";
		+DONTHARMSPECIES;
	}
	
	void A_TroopAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					damage = A_CalcDamageFormula(random(9,12),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					damage = A_CalcDamageFormula(random(6,9),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					damage = A_CalcDamageFormula(random(3,6),random(1,8),0.005,0.3334,0.1667,0.005); 
				}
				else
				{
					damage = A_CalcDamageFormula(3,random(1,8),0.005,0.3334,0.1667,0.005); 
				}

				A_StartSound(MeleeSound, CHAN_WEAPON);
				int newdam = targ.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					A_SpawnProjectile("BelphegorBall",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					A_SpawnProjectile("BaronBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					A_SpawnProjectile("KnightBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
				else
				{
					A_SpawnProjectile("DoomImpBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (targ, "DoomImpBallNew");
				}
			}
		}
	}
	
	States
	{
		Spawn:
			TROO AB 10 A_Look();
			Loop;
		See:
			TROO AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { return resolvestate("Missile2"); }
				return resolvestate("Missile1");
			}
		Missile1:
			TROO EF 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		Missile2:
			IMP3 AB 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		MissileEnd:
			TROO G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();

				A_TroopAttack();
			}
			Goto See;
		Pain:
			TROO H 2;
			TROO H 2 A_KCPain();
			Goto See;
		Death:
			TROO I 8;
			TROO J 8 A_Scream();
			TROO K 6;
			TROO L 6 A_NoBlocking();
			TROO M -1;
			Stop;
		XDeath:
			TROO N 5;
			TROO O 5 A_XScream();
			TROO P 5;
			TROO Q 5 A_NoBlocking();
			TROO RST 5;
			TROO U -1;
			Stop;
		Raise:
			TROO ML 8;
			TROO KJI 6;
			Goto See;
	}
}
// Dark Imp Fireballs [also Hell Cleric seekers]
class DarkSeeker : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Seeker";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (5 * random(1,8));
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		decal "DoomImpScorch";
	}

	States
	{
		Spawn:
			DKB1 A 0;
			"####" A 2 Bright A_SeekerMissile (5,10);
			"####" ABB 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
			}
		Death2:
			DKB1 A 0;
			"####" CDE 4 Bright;
			Stop;
	}
}
class DarkFast : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Fastshot";
		Radius 8;
		Height 6;
		Speed 36;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		MISSILEHEIGHT 0;
		Decal "DoomImpScorch";
		DamageType "Dark";
	}
	
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
class DarkNormal : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
// Strong Dark Imp Ball Trail
class DarkStrong_Tail : KCBaseZSC
{
	default
	{
		PROJECTILE;
		RenderStyle "Add";
		+NOCLIP;
		ALPHA 0.5;
	}
	
	States
	{
		Spawn:
			DKBT ABCDEF 2 Bright;
			Stop;
	}
}
class DarkStrong : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (6 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			DKB2 A 0 Bright;
			#### AB 4 Bright A_SpawnItemEx("DarkStrong_Tail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(2);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB2 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}
class DarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		MissileType "DarkSeeker";
		MeleeDamage 3;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.8; // 6.4

		Species "Imp";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "darkimp/sight";
		PainSound "darkimp/pain";
		DeathSound "darkimp/death";
		ActiveSound "darkimp/active";
		MeleeSound "darkimp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}
	
	States
	{
		Spawn:
			DRKI AB 10 A_Look();
			loop;
		See:
			DRKI AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			DRKI E 0 A_DynamicMusic();
			DRKI EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKI G 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("DarkSeeker", 32, (3*random(1,8)), "imp/melee");
			}
			goto See;

		Pain:
			DRKI H 2;
			DRKI H 2 A_KCPain();
			Goto See;

		Death:
			DRKI I 8;
			DRKI J 8 A_Scream();
			DRKI K 6;
			DRKI L 6 A_NoBlocking();
			DRKI M -1;
			Stop;
		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_NoBlocking();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKI M 8;
			DRKI L 8;
			DRKI KJI 6;
			Goto See;
	}
}
class STDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Weak]";
		
		Health 110;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		MissileType "DarkFast";
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Explosive", 1;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		
		MeleeDamage 3;
		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp2/sight";
		PainSound "darkimp2/pain";
		DeathSound "darkimp2/death";
		ActiveSound "darkimp2/active";
		MeleeSound "darkimp2/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKS AB 10 A_Look();
			loop;
		See:
			DRKS AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			DRKS E 0 A_DynamicMusic();
			DRKS EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKS G 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomComboAttack("DarkFast", 32, (3*random(1,8)), "imp/melee");
			}
			Goto See;

		Pain:
			DRKS H 2;
			DRKS H 2 A_KCPain();
			Goto See;

		Death:
			DRKS I 8;
			DRKS J 8 A_Scream();
			DRKS K 6;
			DRKS L 6 A_Fall();
			DRKS M -1;
			Stop;

		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKS M 8;
			DRKS L 8;
			DRKS KJI 6;
			Goto See;
	}
}
class VoidDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Strong]";

		Health 130;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 7;
		MissileType "DarkNormal";
		MeleeDamage 3;

		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.825;
		RadiusDamageFactor 0.825;
		DamageFactor "Explosive", 0.825;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp3/sight";
		PainSound "darkimp3/pain";
		DeathSound "darkimp3/death";
		ActiveSound "darkimp3/active";
		MeleeSound "darkimp3/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKV AB 10 A_Look();
			loop;
		See:
			DRKV AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0  
			{
				user_shotsfired = 0;
				A_DynamicMusic();
			}
		MissileStart:
			TNT1 A 0 A_Jump(256,"MissileNormal","MissileStrong");
		MissileNormal:
			DRKV EF 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKV G 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkNormal", 32, (3*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;
		MissileStrong:
			DRKV IJ 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKV K 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkStrong", 32, (random(4,5)*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;

		Pain:
			DRKV H 2;
			DRKV H 2 A_KCPain();
			Goto See;

		Death:
			DRKV L 8;
			DRKV M 8 A_Scream();
			DRKV N 5;
			DRKV O 5 A_Fall();
			DRKV P -1;
			Stop;

		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKV P 8;
			DRKV O 8;
			DRKV NML 6;
			Goto See;
	}
}
class NetherDarkImp : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/DoomImp Type";
		Tag "Nether Dark Imp";

		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		Mass 250;
		Scale 1.2;
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
		PainChance 100;
		DamageFactor "Crush", 0.8;
		DamageFactor "Fire", 0.2;
		Painchance "Fire", 20;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 250;
		DamageFactor "CherryBomb", 0.4;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 75;
		DamageFactor "Spinner", 0.6;
		Painchance "Spinner", 60;
		DamageFactor "Popper", 1.75;
		Painchance "Popper", 175;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 250;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;

		MONSTER;
		Species "Imp";
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp4/sight";
		PainSound "darkimp4/pain";
		DeathSound "darkimp4/death";
		ActiveSound "darkimp4/active";
		MeleeSound "darkimp4/melee";
		Obituary "%o was cursed by a nether dark imp.";
		HitObituary "%o was touched by a nether dark imp.";
	}
	States
	{
		Spawn:
			DRKF A 0 NoDelay;
			DRKF AB 10 A_Look();
			goto Spawn+1;
		See:
			DRKF AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0 A_DynamicMusic();
			DRKF E 0 A_Jump (256, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8
			{
				A_FaceTarget();
			}
			DRKF G 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("NetherLightning", 32, (mldmg), "imp/melee");
			}
			Goto See;
		Missile2:
			DRKF IJ 8
			{
				A_FaceTarget();
			}
			DRKF K 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("InfernoBall", 32, (mldmg), "imp/melee");
			}
			Goto See;

		Pain:
			DRKF H 2;
			DRKF H 2 A_KCPain();
			Goto See;

		Death:
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;

		XDeath:
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Ice:
			DRKF H 5 A_GenericFreezeDeath();
			DRKF H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKF P 8;
			DRKF O 8;
			DRKF NML 6;
			Goto See;
	}
}
// Dark Imp InfernoBall Trail
class InfernoBallTrail : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			ITRL ABCDEFGHIJKLMN 1 Bright A_FadeOut(0.08);
			stop;
	}
}
// Dark Imp Nether Lightning
class NetherLightningTrail : KCProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 1;
		Damage 0;
		PROJECTILE;
		+RIPPER;
		RENDERSTYLE "ADD";
		ALPHA 0.75;
		Scale 0.75;
	}

	States
	{
		Spawn:
			NLIT A 1 A_FadeOut (0.025);
			NLIT A 0 A_Jump (32, "Spark");
			loop;
		Spark:
			NLIT A 0 A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			goto Spawn;
	}
}
class NetherLightningSpark : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			NLIT BCDEFG 1 Bright;
			stop;
	}
}
class InfernoBall : KCProjectile
{
	default
	{
		Tag "Inferno Ball";
		Radius 8;
		Height 6;
		Speed 40;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}

	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			IBAL AAAABBBB 1 Bright A_SpawnItemEx ("InfernoBallTrail", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			Loop;
		Death:
			IBAL CDE 4 Bright;
			Stop;
	}
}
class NetherLightning : KCProjectile
{
	default
	{
		Tag "Nether Lightning";
		Radius 8;
		Height 6;
		Speed 48;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+RIPPER;
		Scale 0.75;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Thunder";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			NLIT A 0 Bright;
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			loop;
		Death:
			NLIT ABCDEFG 1 Bright;
			Stop;
	}
}
// Pinky FireBreath
class DemonFire : SingleDamageRipper
{
	default
	{
		Tag "Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(2,3),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class BloodDemonFire : SingleDamageRipper
{
	default
	{
		Tag "Blood Pinky-Breath";
		ProjectileKickback 0;
		+NODAMAGETHRUST;
		//+DONTREFLECT;
		Radius 6;
		Height 8;
		Speed 8;
		FastSpeed 16;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Scale 0.334;
		Alpha 0.667;
		SeeSound "vile/firecrkl"; // "imp/attack"
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		finaldamagedealt = A_CalcDamageFormula(random(3,4),random(2,4),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	States
	{
		Spawn:
			FIRE ABABCBCBCDCDCDEDEDEFEFEFGHGHGH 1 NoDelay Bright
			{
				A_Weave(0, 1, 0.32, 0.32);
			}
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}
class NightmareSpectreFire : DemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(2,4),random(2,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}
class NightmareBloodSpectreFire : BloodDemonFire
{
	default
	{
		Speed 9;
		FastSpeed 18;
		DamageFunction (finaldamagedealt);
		RenderStyle "Subtract";
	}
	
	override void PostBeginPlay()
	{
		SingleDamageRipper.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}
	
	override void Tick()
	{
		SingleDamageRipper.Tick();
		A_NightmarePhase();
		finaldamagedealt = A_CalcDamageFormula(random(3,5),random(3,5),0.005,0.3334,0.1667,frandom(0.00375,0.00625));
	}

	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
}
class DemonNew : KCCreature
{
	default
	{
		Tag "Pinky Demon";
		Health 150;
		Speed 10;
		Radius 30;
		Height 56;
		Mass 400;
		PainChance 180;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 135;
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		SeeSound "demon/sight";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "$OB_DEMONHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(4,random(1,10),0.005,0.3334,0.1667,0.005);

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}
	
	States
	{
		Spawn:
			SARG AB 10 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast
			{
				if (target && Distance3D(target) <= 264)
				{
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
				else
				{
					A_KCChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;
		
		Missile:
			SARG AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
						
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
						else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
						
						A_FaceTarget();
						A_SpawnProjectile("DemonFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_DynamicMusic();
			SARG EEFF 4 Fast 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 4 Fast 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 4 Fast 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(3); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.125))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_KCPain();
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 5;
			SARG MLKJI 5;
			Goto See;
	}
}
class SpectreNew : DemonNew
{
	default
	{
		Tag "Pinky Spectre";
		RenderStyle "OptFuzzy";
		+SHADOW
		Alpha 0.5;
		SeeSound "spectre/sight";
		AttackSound "spectre/melee";
		PainSound "spectre/pain";
		DeathSound "spectre/death";
		ActiveSound "spectre/active";
		Obituary "$OB_SPECTREHIT";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
}
class NightmareSpectre : DemonNew
{
	default
	{
		Tag "Pinky Spectre (Nightmare)";
		Health 300;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was devoured by a nightmare spectre.";
		Meleedamage 5;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	
	void A_SargAttack()
	{
		let targ = target;
		if (targ && CheckMeleeRange())
		{
			int damage = A_CalcDamageFormula(random(4,5),random(1,10),0.005,0.3334,0.1667,frandom(0.005,0.0625));

			int newdam = targ.DamageMobj (self, self, damage, "Melee");
			targ.TraceBleed (newdam > 0 ? newdam : damage, self);
		}
	}

	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SARG AABB 5 A_Look();
			Loop;
		See:
			SARG AABBCCDD 2 Fast 
			{
				int tics = randompick(1,2,2,2,2,3);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target && Distance3D(target) <= 264)
				{
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
				else
				{
					A_KCChase("Melee",null,0,1,3,1,1);
				}
			}
			Loop;

		Missile:
			SARG AEF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);

				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						A_DynamicMusic();
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);

				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						A_FaceTarget();
						A_SpawnProjectile("NightmareSpectreFire");
						A_DynamicMusic();
					}
					else
					{
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SARG F 0 A_MonsterRefire(32,"See");
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;
		Melee:
			#### # 0 A_DynamicMusic();
			SARG EEFF 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SARG G 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_SargAttack();
			}
			SARG G 3 Fast 
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.1667))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_KCPain();
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 4;
			SARG MLKJI 4;
			Goto See;
		}
}
class BloodDemon : DemonNew
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky";
		Health 300; 
		Speed 15;
		Height 56;
		Radius 30;
		Mass 600;
		Meleedamage 10;
		ReactionTime 8;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Painchance 135;
		DamageFactor "Fire", 0.666; // Pinkies = -33% Fire Damage
		Painchance "Fire", 90; // Pinkies = -33% Pain Chance
		DamageFactor "Ice", 1.625;
		Painchance "Ice", 256;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 135;
		DamageFactor "CherryBomb", 0.875;
		Painchance "CherryBomb", 157;
		DamageFactor "Chop", 0.625;
		Painchance "Chop", 113;
		DamageFactor "Breakfast", 2.5;
		Painchance "Breakfast", 256;
		DamageFactor "Bonk", 1.125;
		Painchance "Bonk", 202;
		DamageFactor "Cricket", 1.5;
		Painchance "Cricket", 240;
		DamageFactor "Dust", 1.5;
		Painchance "Dust", 240;
		MONSTER;
		+FLOORCLIP;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		//MeleeSound "blooddemon/melee";
		Obituary "%o Was chewed up and spat out by a Blood demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (target && Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 300) 
						{ 
							if (random(1,1) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 225) 
						{ 
							if (random(1,2) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
						{ 
							if (random(1,3) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
						{ 
							if (random(1,4) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (target && Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 300) 
						{ 
							if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 225) 
						{ 
							if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
						{ 
							if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
						{
							if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
						}
						else { A_KCChase("Melee",null,0,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
				}
			}
			loop;

		Missile:
			SRG2 AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(2); }
						else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
						
						A_FaceTarget(); 
						A_DynamicMusic();
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
						else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
						A_FaceTarget();
						A_SpawnProjectile("BloodDemonFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			SRG2 E 0 
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack(random(1,10)*10,"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.2))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain: 
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_KCPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class BloodSpectre : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre";
		
		+SHADOW
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o Was chewed up and spat out by a Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	States
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, 128);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
	}
}
class NightmareBloodSpectre : BloodDemon
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre (Nightmare)";
		Health 600;
		Speed 20;
		Meleedamage 14;
		RenderStyle "Subtract";
		Alpha 0.7;
		Obituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		HitObituary "%o was chewed up and spat out by a Nightmare Blood Spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			if (health > 0)
			{
				alphavarbase = frandom(0.0375,0.0425);
			}
			else
			{
				alphavarbase = frandom(0.00375,0.00425);
			}
			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States 
	{
		Spawn:
			SRG2 AB 10 A_Look();
			goto Spawn;
		See:
			SRG2 AABBCCDD 2
			{
				int tics = randompick(1,2,2,2,2,3);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				user_fastchasetimermax = 4;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) 
					{ 
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					} 
					else { A_KCChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				}
				else 
				{ 
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) 
					{ 
						if (random(1,1) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) 
					{ 
						if (random(1,2) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) 
					{ 
						if (random(1,3) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					} 
					else
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) 
					{
						if (random(1,4) <= 1) { A_KCChase("Melee","Missile",0,1,3,1,1); } else { A_KCChase("Melee",null,0,1,3,1,1); }
					}
					else { A_KCChase("Melee",null,0,1,3,1,1); }
				}
			}
			loop;

		Missile:
			SRG2 AEF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						A_FaceTarget(); 
						A_DynamicMusic();
						return resolvestate(null);
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						A_FaceTarget();
						A_SpawnProjectile("NightmareBloodSpectreFire");
						A_DynamicMusic();
					}
					else
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				else
				{
					return resolvestate("See"); 
				}
				return resolvestate(null);
			}
			SRG2 F 0 A_MonsterRefire(32,"See");
			SRG2 F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			SRG2 E 0
			{
				A_StartSound("blooddemon/melee");
				A_DynamicMusic();
			}
			SRG2 EEFF 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			SRG2 G 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
				A_CustomMeleeAttack((random(3,10)*random(13,14)),"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			SRG2 G 3
			{
				int tics = randompick(2,3,3,3,3,4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { tics -= 2; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { tics -= 1; }
				if (tics < 1) tics = 1;
				A_SetTics(tics);
				
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && random(1,16) <= (1 + (CountInv("MonsterLevel") * 0.25))) { ThrustThing(angle*256/360, Speed, 1, 0); }
			}
			Goto See;

		Pain: 
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_KCPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 
			{
				A_SpawnItemEx("NBloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			}
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class ChaingunDemon : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Pinky [Chaingun]";

		Speed 14;
		Mass 650;
		AttackSound "";
		Obituary "%o was mowed down by a chaingun-wielding Blood Demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		DropItem "StimPack", 64;
		DropItem "StimPack", 4;
	}
	
	States 
	{
		Spawn: 
			CRG2 AB 10 A_Look();
			goto Spawn;
		See: 
			CRG2 AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				user_fastchasetimermax = 8;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { user_fastchasetimermax = 5; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { user_fastchasetimermax = 6; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					if (A_CheckWalkSnd()) A_StartSound("blooddemon/walk", 0, CHAN_BODY, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				if (user_fastchasetimer >= user_fastchasetimermax) { A_KCChase(null,"Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); user_fastchasetimer = 0; } else { A_KCChase(null,"Missile",0,1,3,1,1); }
			}
			loop;

		Melee: 
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((30 + (CountInv("MonsterLevel") / 10)),(90 + (CountInv("MonsterLevel") / 3.34))); }
					else { user_shotsfiredmax = random(30,90); }
					A_DynamicMusic();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			CRG2 H 9
			{
				A_FaceTarget();
				user_shotaccuracy = 11.25; // 22.5;
				user_shotzaccuracy = 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { user_shotaccuracy = user_shotaccuracy * 5 / 8; user_shotzaccuracy = user_shotzaccuracy * 3 / 8; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 4 / 8; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 5 / 8; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 6 / 8; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { user_shotaccuracy = user_shotaccuracy * 7 / 8; user_shotzaccuracy = user_shotzaccuracy * 7 / 8; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		StartMissile:
			TNT1 E 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 E 3 bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();

				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 F 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 F 3 bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				int dmg = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, (dmg), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-user_shotzaccuracy1,user_shotzaccuracy2));
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
				user_shotsfired += 1;
				A_DynamicMusic();
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"MissileEnd");
			goto StartMissile;
		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CRG2 H 9
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_FaceTarget();
			}
			Goto See;

		Pain: 
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_KCPain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}

class ChaingunSpectre : ChaingunDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/PinkyDemon Type"
		Tag "Blood Spectre [Chaingun]";

		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o was mowed down by a chaingun-wielding Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
	}

	States 
	{
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			TNT1 A 0;
			SRG2 N -1;
			Stop;
	}
}

class BloodDemonArm : KCCustomGib
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class BloodSpectreArm : KCCustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class NBloodSpectreArm : KCCustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "Subtract";
		Alpha 0.7;
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	void A_NightmarePhase()
	{
		if (GetRenderStyle() == STYLE_Subtract)
		{
			NightmareBloodSpectre ownerz;
			if (target) ownerz = NightmareBloodSpectre(target);
			double alphavar = 0.00;
			double alphavarbase = frandom(0.0375,0.0425);
			alphavarbase = frandom(0.00375,0.00425);

			nightmarephasetimer = ((level.time + random(-nightmarephaserand,nightmarephaserand)) % 35);
			if (ownerz) nightmarephasetimer = ownerz.nightmarephasetimer;
			if (nightmarephasetimer == 0) alphavar = (alphavarbase * 0);
			if (nightmarephasetimer == 1 || nightmarephasetimer == 34) alphavar = (alphavarbase * 1);
			if (nightmarephasetimer == 2 || nightmarephasetimer == 33) alphavar = (alphavarbase * 2);
			if (nightmarephasetimer == 3 || nightmarephasetimer == 32) alphavar = (alphavarbase * 3);
			if (nightmarephasetimer == 4 || nightmarephasetimer == 31) alphavar = (alphavarbase * 4);
			if (nightmarephasetimer == 5 || nightmarephasetimer == 30) alphavar = (alphavarbase * 5);
			if (nightmarephasetimer == 6 || nightmarephasetimer == 29) alphavar = (alphavarbase * 6);
			if (nightmarephasetimer == 7 || nightmarephasetimer == 28) alphavar = (alphavarbase * 7);
			if (nightmarephasetimer == 8 || nightmarephasetimer == 27) alphavar = (alphavarbase * 8);
			if (nightmarephasetimer == 9 || nightmarephasetimer == 26) alphavar = (alphavarbase * 9);
			if (nightmarephasetimer == 10 || nightmarephasetimer == 25) alphavar = (alphavarbase * 10);
			if (nightmarephasetimer == 11 || nightmarephasetimer == 24) alphavar = (alphavarbase * 11);
			if (nightmarephasetimer == 12 || nightmarephasetimer == 23) alphavar = (alphavarbase * 12);
			if (nightmarephasetimer == 13 || nightmarephasetimer == 22) alphavar = (alphavarbase * 13);
			if (nightmarephasetimer == 14 || nightmarephasetimer == 21) alphavar = (alphavarbase * 14);
			if (nightmarephasetimer == 15 || nightmarephasetimer == 20) alphavar = (alphavarbase * 15);
			if (nightmarephasetimer == 16 || nightmarephasetimer == 19) alphavar = (alphavarbase * 16);
			if (nightmarephasetimer == 17 || nightmarephasetimer == 18) alphavar = (alphavarbase * 17);
			A_SetRenderStyle((0.7-alphavar),STYLE_Subtract);
			if (dydudebug_nightmarevisuals) Console.Printf("[%s] alphavar: %.2f (%.2f), nightmarephasetimer: %d", GetClassName(), alpha, alphavar, nightmarephasetimer);
		} 
	}
	
	override void Tick()
	{
		A_NightmarePhase();
		super.Tick();
	}
	
	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}
class CacodemonNew : KCCreature { } // Filler for later implementation
class Cacolantern : KCCreature { } // Filler for later implementation
class Abaddon : KCCreature { } // Filler for later implementation
class PainElementalNew : KCCreature { } // Filler for later implementation
class LostSoulNew : KCCreature { } // Filler for later implementation
class LostSoulAnnoying : KCCreature { } // Filler for later implementation
class BetaLostSoul : KCCreature { } // Filler for later implementation
class RevenantNew : KCCreature { } // Filler for later implementation
class DeathIncarnate : KCCreature { } // Filler for later implementation
class HellWarrior : KCCreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 175;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 38;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		//DropItem "PikeAmmo", 8;
		//DropItem "PikeAmmoBig", 1;
	}

	States 
	{ 
		Spawn: 
			HWAR AB 10 A_Look();
			Loop;
		See: 
			HWAR AABBCCDD 3
			{
				A_HellWarShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();

				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 16
			{
				A_HellWarShieldOn();
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR H 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Melee: 
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			HWAR J 6 A_KCPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }	
			Goto PainShield;
		PainShield:
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death: 
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60); // HellWarriorShield
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Raise: 
			HWAR QPONMLK 5;
			Goto See;
	} 
}
class HellWarriorBall : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 14;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.7;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HWFB AB 5 Bright;
			Loop;
		Death:
			HWFB CDE 5 Bright;
			Stop;
	}
}
class HellWarriorBall2 : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		ALPHA 0.8;
		SCALE 0.4;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Zap";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override bool CanCollideWith(Actor other, bool passive) // HellWarriorBall2
	{
		if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright;
			Loop;
		Death:
			GRBA AIJKLMN 3 Bright;
			Stop;
	}
}
class HellWarriorShield : KCBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Speed 6;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	States
	{
		Spawn:
			HWSH ABCDEFGH 3;
			Loop;
		Death:
			HWSH I -1;
			Loop;
	}
}
class FlyingBalrog : KCCreature
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 30;
		Mass 400;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		Monster;
		SeeSound "keen/pain";
		PainSound "keen/death";
		DeathSound "brain/spit";
		ActiveSound "keen/death";
		Obituary "%o fell to the might of a Balrog.";
	}
	
	States
	{
		Spawn:
			KEEN A 10 Bright A_Look();
			goto Spawn;
		See:
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			KEEN H 8 Bright;
			KEEN A 3 Bright A_Pain();
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			KEEN EF 6 Bright A_FaceTarget();
			KEEN G 1 Bright A_FatAttack1();
			KEEN G 1 Bright A_FatAttack2();
			KEEN G 1 Bright A_FatAttack3();
			KEEN G 1 Bright A_FaceTarget();
			KEEN GG 1 Bright A_SkelMissile();
			KEEN G 8 Bright A_SkelMissile();
			KEEN ABCD 3 Bright A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			KEEN I 5 Bright;
			KEEN J 5 Bright A_Scream();
			KEEN K 5 Bright;
			KEEN L 5 Bright A_Fall();
			KEEN MNOPQ 5 Bright;
			KEEN R 5 Bright A_BossDeath();
			KEEN R 1 Bright;
			stop;
	}
}
class FlyingBalrogShot1 : KCProjectile // FatShotNew
{
	default
	{
		Tag "Flamer Shot";
		scale 1.25;
		Radius 6;
		Height 8;
		Speed 30; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "fatso/attack";
		DeathSound "fatso/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MANF AABB 2 Bright;
			Loop;
		Death:
			MISL B 8 Bright;
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}
class FlyingBalrogShot2 : KCProjectile // RevenantTracerNew
{
	double user_tracetightness;
	int LevelOfShooter;
	default
	{
		Tag "Tracer Missile";
		scale 1.25;
		Radius 11;
		Height 8;
		Speed 15; // 50% faster
		DamageFunction (finaldamagedealt); // 50% stronger
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE;
		+RANDOMIZE;
		SeeSound "Imp/Attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(15,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	
	void A_Tracer(double tang = 12.65625)
	{
		// killough 1/18/98: this is why some missiles do not have smoke
		// and some do. Also, internal demos start at random gametics, thus
		// the bug in which revenants cause internal demos to go out of sync.

		if (level.maptime & 3)	return;
	
		// spawn a puff of smoke behind the rocket
		SpawnPuff ("BulletPuff", pos, angle, angle, 3);
		Actor smoke = Spawn ("RevenantTracerSmoke", Vec3Offset(-Vel.X, -Vel.Y, 0.), ALLOW_REPLACE);
	
		if (smoke != null)
		{
			smoke.Vel.Z = 1.;
			smoke.tics -= random[Tracer](0, 3);
			if (smoke.tics < 1)
				smoke.tics = 1;
		}

		// The rest of this function was identical with Strife's version, except for the angle being used.
		A_Tracer2(tang);
	}
	
	States
	{
		Spawn:
			FATB AB 2 Bright 
			{
				double s1 = 12.65625;
				double s2 = 12.65625;
				if (target && kc_monsterlevelenabledflags)
				{
					s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.001875);
					s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.001875);
					if (target.CountInv("MonsterLevel") > 30)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0009375);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.0009375);
					}
					if (target.CountInv("MonsterLevel") > 60)
					{
						s1 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00046875);
						s2 *= 1.0 + (target.CountInv("MonsterLevel") * 0.00046875);
					}
				}
				A_Tracer(s1);
			}
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("skeleton/tracex",CHAN_7);
				A_Quake(1, 8, 0, 192, "nosound/silent");
				A_Quake(3, 8, 0, 96, "nosound/silent");
			}
			FBXP A 8 Bright;
			FBXP B 6 Bright;
			FBXP C 4 Bright;
			Stop;
	}
}
class FlyingBalrogDVDS : KCCreature
{
	default
	{
		Tag "Flying Balrog";;
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;
		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMCLASS;
		+BOSSDEATH;
		+E1M8BOSS;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_Look();
			Loop;
		See:
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE == true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
					A_FloatSetFChaseT(randompick(0,3,6));
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;
			
		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
				A_DynamicMusic();
			}
			FRIT EF 6 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(2,3,3,3,4,4,4,4,4,4,4,5,5,5,6); // Angle
				user_tempvar3 = (user_tempvar2 * 1.25); // Offset
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*1.5), (user_tempvar3*1.5)); // Partially Left
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, 0, 0); // Center
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-1.5), (user_tempvar3*-1.5)); // Partially Right
				A_SpawnProjectile("FlyingBalrogShot1", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = frandompick(3,4.5,4.5,4.5,6,6,6,6,6,6,6,7.5,7.5,7.5,9); // Angle
				user_tempvar3 = (user_tempvar2 * 1.5); // Offset
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, 0, 0);
				A_SpawnProjectile("FlyingBalrogShot2", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
			}
			FRIT G 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(112,113)) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,20);
				user_painfastchase = 5 * random(1,8);
			}
			Goto See;
		Pain.Kick:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,15);
				user_painfastchase = 7 * random(1,8);
			}
			Goto See;
		Pain.Ice:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;

		Death:
			FRIT I 0 Bright 
			{
				bDONTTHRUST = true;
				A_Stop();
				A_NoGravity();
			}
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",CHAN_VOICE);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_BossDeath();
			TNT1 A 0 CCCardDeathCheck();
			Stop;
		Ice:
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}
class KnightBallNew : KCProjectile
{
	Default
	{
		Tag "Knight Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}
class HellKnightNew : KCCreature
{
	default
	{
		Tag "Hell Knight";
		Health 500;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 100;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 50;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 200;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP
		-BOSSDEATH
		+E1M8BOSS
		BloodColor "00 64 00";
		SeeSound "knight/sight";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "knight/death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";
		Species "HellNoble";
		+DONTHARMSPECIES
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(random(5,10),random(1,8),0.005,0.3334,0.1667,0.005);

				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("KnightBallNew",32,ptr:AAPTR_TARGET); // SpawnMissile (target, "KnightBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOS2 AB 10 A_Look();
			Loop;
		See:
			BOS2 AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			BOS2 EF 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS2 G 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_BruisAttack();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("KnightBallNew",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Pain:
			BOS2 H 2;
			BOS2 H 2 A_KCPain();
			Goto See;
		Death:
			BOS2 I 8;
			BOS2 J 8 A_Scream();
			BOS2 K 8;
			BOS2 L 8 A_NoBlocking();
			BOS2 MN 8;
			BOS2 O -1;
			Stop;
		Ice:
			BOS2 H 5 A_GenericFreezeDeath();
			BOS2 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS2 O 8;
			BOS2 NMLKJI 8;
			Goto See;
	}
}
class BaronBallNew : KCProjectile // replaces BaronBall
{
	Default
	{
		Tag "Baron Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}
class BaronOfHellNew : KCCreature
{
	default
	{
		Tag "Baron of Hell";
		Health 1000;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 187;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 37;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		BloodColor "00 64 00";
		Monster;
		Species "HellNoble";
		+DONTHARMSPECIES
		+FLOORCLIP
		+BOSSDEATH
		+E1M8BOSS
		SeeSound "baron/sight";
		PainSound "baron/pain";
		DeathSound "baron/death";
		ActiveSound "baron/active";
		Obituary "$OB_BARON";
		HitObituary "$OB_BARONHIT";
	}
	
	void A_BruisAttack()
	{
		let targ = target;
		if (targ)
		{
			if (CheckMeleeRange())
			{
				int damage = A_CalcDamageFormula(10,random(1,8),0.01,0.5,0.25,frandom(0.005,0.0075));
				
				A_StartSound ("baron/melee", CHAN_WEAPON);
				int newdam = target.DamageMobj (self, self, damage, "Melee");
				targ.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
			else
			{
				// launch a missile
				A_SpawnProjectile("BaronBallNew",32,ptr:AAPTR_TARGET); //SpawnMissile (target, "BaronBallNew");
			}
		}
	}
	
	States
	{
		Spawn:
			BOSS AB 10 A_Look();
			Loop;
		See:
			BOSS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }

				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
			
		Melee:
		Missile:
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113)) { return resolvestate("Missile2"); }
				return resolvestate(null);
			}
			BOSS EF 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS G 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_BruisAttack();
			}
			Goto See;
			
		Melee2:
		Missile2:
			TNT1 A 0;
			BOSS PQ 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS R 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_BruisAttack();
				A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*-1));
				A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*1));
				if (CountInv("MonsterLevel") >= 225)
				{
					A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*-2));
					A_SpawnProjectile("BaronBallNew",user_tempvar1,0,(user_tempvar2*2));
				}
			}
			goto See;

		Pain:
			BOSS H 2;
			BOSS H 2 A_KCPain();
			Goto See;
		Death:
			BOSS I 8;
			BOSS J 8 A_Scream();
			BOSS K 8;
			BOSS L 8 A_NoBlocking();
			BOSS MN 8;
			BOSS O -1 A_BossDeath();
			Stop;
		Ice:
			BOSS H 5 A_GenericFreezeDeath();
			BOSS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOSS O 8;
			BOSS NMLKJI 8;
			Goto See;
	}
}
class BelphegorBall : BaronBallNew
{
	default
	{
		Tag "Belphegor Plasma";
		decal "BaronScorch";
		Speed 20;
		DamageFunction (finaldamagedealt);
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(9,12),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 Bright;
			Loop;
		Death:
			BAL7 CDE 6 Bright;
			Stop;
	}
}
class Belphegor : HellKnightNew
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/Hell Nobles"
		Tag "Belphegor";

		Health 1500;
		Painchance 25;
		DamageFactor "Crush", 0.55;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 12;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 50;
		BloodColor "00 64 00";
		Species "HellNoble";
		+DONTHARMSPECIES;
		SeeSound "belphegor/sight";
		PainSound "belphegor/pain";
		DeathSound "belphegor/death";
		ActiveSound "baron/active";
		Obituary "%o was slain by a Belphegor.";
		HitObituary "%o was slain by a Belphegor.";
	}
	
	States
	{
		Spawn:
			BOS3 A 0 NoDelay;
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 A_DynamicMusic();
			TNT1 A 0 A_Jump(32,2); // 12.5% chance of skipping the shotsfired check and possibly shooting an extra shot/nova
			TNT1 A 0 A_JumpIf(user_shotsfired > 2, "See");
			BOS3 EF 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();
			}
			BOS3 G 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 135) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(random(12,13),random(1,8),0.005,0.3334,0.1667,frandom(0.005,0.00625));
				A_CustomComboAttack("BelphegorBall", user_tempvar1, (dmg), "imp/melee");
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("BelphegorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			goto Missile;

		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_KCPain();
			Goto See;
		Death:
			BOS3 I 8;
			BOS3 J 8 A_Scream();
			BOS3 K 8;
			BOS3 L 8 A_NoBlocking();
			BOS3 MN 8;
			BOS3 O -1 A_BossDeath();
			Stop;
		Ice:
			BOS3 H 5 A_GenericFreezeDeath;
			BOS3 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS3 O 8;
			BOS3 NMLKJI 8;
			Goto See;
	}
}
class Cybruiser : KCCreature { } // Filler for later implementation
class ArachnotronNew : KCCreature { } // Filler for later implementation
class RailArachnotron : KCCreature { } // Filler for later implementation
class FusionArachnotron : KCCreature { } // Filler for later implementation
class ArachnotronMK2 : KCCreature { } // Filler for later implementation
class MancubusNew : KCCreature { } // Filler for later implementation
class Hectebus : KCCreature { } // Filler for later implementation
class Daedabus : KCCreature { } // Filler for later implementation
class ArchvileFlame : SingleDamageRipper
{
	default
	{
		Tag "Flame Jet";
		Radius 2;
		Height 2;
		Speed 20;
		DamageFunction (randompick(7,8));
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.75;
		PROJECTILE;
		+FLOORHUGGER;
		+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		Damagetype "Fire";
	}
	
	States
	{
		Spawn:
		Idle:
			FIRE A 1 bright
			{
			}
			FIRE A 1 bright
			{
				A_SpawnProjectile("ArchvileFlameTrail",0,0,0);
				A_Explode(randompick(26,26,26,27),randompick(52,53),0,0,random(7,8));
			}
			Loop; 
		Death:
			FIRE BCBCDEFGH 1 bright
			{
				A_Explode(randompick(13,13,13,13,13,13,14,14),randompick(78,79),0,0,random(21,24));
			}
			Stop;
	}
}
class ArchvileFlameTrail : KCBaseZSC
{
	default
	{
		Radius 2;
		Height 2;
		RenderStyle "Add";
		Alpha 0.7;
		Scale 0.925;
		+NOCLIP;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			FIRE BCBCDEFGH 2 bright
			{
				A_FadeOut(frandom(0.06,0.10));
				A_SetScale(scale.x-frandom(0.06,0.10),scale.y-frandom(0.06,0.10));
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
	}
}
class ArchvileNew : KCCreature
{
	default
	{
		Tag "Archvile";
		Health 700;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 15;
		PainChance 10;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 5.0;
		Painchance "Ice", 100;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MaxTargetRange 896;
		+QUICKTORETALIATE 
		+FLOORCLIP 
		+NOTARGET
		SeeSound "vile/sight";
		PainSound "vile/pain";
		DeathSound "vile/death";
		ActiveSound "vile/active";
		MeleeSound "vile/stop";
		Obituary "$OB_VILE";
	}
	
	void A_SetVileRange()
	{
		if (kc_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * 17.92));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}
	
	States
	{
		Spawn:
			VILE AB 10 
			{
				A_SetVileRange();
				A_Look();
			}
			Loop;
		See:
			VILE AABBCCDDEEFF 2 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 8)
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				A_KCChase("Melee","Missile",flag2,1,3,1,1);
				A_SetVileRange();
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				if (kc_monsterlevelenabledflags)
				{
					temp1 = (24 * temp2) + ((CountInv("MonsterLevel") * 0.586666666) * temp2);
					if (temp1 > 104) { temp1 = 104; }
					//A_LogInt(temp1);
					if (random(1,256) <= temp1) { return resolvestate("Missile2"); }
					temp2 = 1;
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			VILE G 0 BRIGHT
			{
				A_SetVileRange();
				A_VileStart();
				A_DynamicMusic();
			}
			VILE G 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				A_FaceTarget();
			}
			VILE H 8 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				A_VileTarget();
			}
			VILE IJKLMN 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_FaceTarget();
			}
			VILE O 8 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(20,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(70,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			VILE P 20 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }
			}
			Goto See;
		Missile2:
			VILE J 0 BRIGHT
			{
				A_StartSound("vile/firestrt");
			}
			VILE JKLMNO 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(3); }
				A_FaceTarget();
			}
			VILE A 0
			{
				A_StartSound("archvile/firewall");
				A_SpawnProjectile("ArchvileFlame",0,0,0);
			}
			VILF A 24 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(82,83)) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(52,53)) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(19); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(20); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(21); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(22); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(7,8)) { A_SetTics(23); }
			}
			Goto See;
			
		Heal:
			#### # 0 
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetVileRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			VILE [ 10 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
			}
			VILE \ 10 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				A_VileHealProj();
			}
			VILE ] 10 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(1,2); }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Melee:
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(2,3); }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Fist:
			VILE Q 5
			{
				if (random(1,3) <= 1) { temp2 = 2; }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Kick:
			VILE Q 5
			{
				if (random(1,5) <= 2) { temp2 = 3; }
			}
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			Goto See;
		Pain.Ice:
			VILE Q 5;
			VILE Q 5 
			{
				A_KCPain();
				A_SetVileRange();
			}
			VILE Q 10;
			VILE Q 0 A_Jump(128, 4);
			VILE Q 5;
			VILE Q 0 A_Jump(128, 2);
			VILE Q 5;
			VILE Q 0;
			Goto See;
		Death:
			VILE Q 7;
			VILE R 7 A_Scream();
			VILE S 7 A_NoBlocking();
			VILE TUVWXY 7;
			VILE Z -1;
			Stop;
		
		Raise:
			VILE Y 7;
			VILE XWVVUTSRQ 7;
			Goto See;
	}
}
// Diabloist Flare
class MFlareFX : KCBaseZSC
{
	default
	{
		Radius 0;
		Height 1;
		Speed 0;
		PROJECTILE;
		RenderStyle "Add";
		Alpha 0.67;
	}
	
	States
	{
		Spawn:
			FDFX ABCDEF 4 Bright;
			Stop;
	}
}
class DFlare : KCProjectile
{
	default
	{
		Tag "Diabloist Flare";
		Radius 5;
		Height 5;
		Speed 25;
		DamageFunction (finaldamagedealt);
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.85;
		PROJECTILE;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/firmfi";
		DeathSound "weapons/firex4";
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			VBAL A 0;
			"####" A 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" AA 1 Bright;
			"####" B 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			"####" BB 1 Bright;
			loop;
		Death:
			CBAL CDEFG 3 Bright;
			stop;
	}
}
class DMissile : CFlameMissileNew
{
	default
	{
		Tag "Diabloist Fireblast";
		DamageType "Fire";
		DamageFunction (finaldamagedealt);
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			CFFX A 0;
			"####" AAAA 1 Bright;
			"####" A 1 A_CFlamePuff();
			Goto Death+1;
		Death:
			"####" A 1 Bright A_CFlameMissile("DMissileCircle");
			"####" ABC 3 Bright;
			"####" D 4 Bright;
			"####" E 3 Bright;
			"####" F 4 Bright;
			"####" G 3 Bright;
			"####" H 4 Bright;
			"####" I 3 Bright;
			"####" J 4 Bright;
			"####" K 3 Bright;
			"####" L 4 Bright;
			"####" M 3 Bright;
			Stop;
	}
}
class DTracer : KCProjectile
{
	default
	{
		Tag "Diabloist Tracer";
		Radius 5;
		Height 5;
		Speed 15;
		ReactionTime 175;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		RenderStyle "Add";
		Alpha 0.67;
		PROJECTILE;
		+SEEKERMISSILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		Obituary "%o got was set ablaze by a Diabloist.";
		Seesound "weapons/diasht";
		DeathSound "weapons/firex3";   
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			TNT1 A 1 Bright A_SeekerMissile(10,15);
			TNT1 A 0 Bright A_Countdown();
			TNT1 A 0 Bright A_SpawnProjectile("DTracerPuff",0,0,0,0);
			loop;
		Death:
			FTRA K 4 Bright;
			FTRA L 4 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(64,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,64,0);
			}
			FTRA MNO 3 Bright;
			stop;
	}
}
class DTracerPuff : KCProjectile
{
	int etimer;
	default
	{
		Tag "Diabloist Tracer";
		Radius 1;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.67;
		PROJECTILE;
		+FLOORHUGGER;
		-NOGRAVITY;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	void A_TracerExp(int basedmg = 4, int basemult = 1, int baserad = 16, int basefullrad = 8)
	{
		int dmg = A_CalcDamageFormula(basedmg,basemult,0.005,0.3334,0.1667,0.005);
		A_Explode(dmg,baserad,0,0,basefullrad);
	}

	States
	{
		Spawn:
			FTRA A 0;
			"####" AAABBBCCCDDDEEEFFFGGGHHHIIIJJJ 1 Bright 
			{
				int base = 3;
				if (target)
				{
					if (target.CountInv("MonsterLevel") > 30) base = 2;
					if (target.CountInv("MonsterLevel") > 60) base = 1;
				}
				if (etimer <= 0) 
				{
					A_TracerExp(4,1,16,8);
					etimer += base;
				}
				etimer--;
			}
			stop;
	}
}
class DMissileCircle : CircleFlameNew 
{ 
	default
	{
		Tag "Diabloist Fireblast";
		+THRUSPECIES;
		Species "Diabloist";
	}
}
class DFire : KCProjectile
{
	default
	{
		Tag "Diabloic FireHex";
		Obituary "%o got was set ablaze by a Diabloist.";
		Radius 0;
		Height 1;
		Speed 0;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 1.00;
		+NOGRAVITY;
		+SEEKERMISSILE;
		+NOTARGET;
		+NODAMAGETHRUST;
		+THRUSPECIES;
		Species "Diabloist";
	}
	
	States
	{
		Spawn:
			HLFR A 2 Bright
			{
				A_StartFire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR BABCB 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR CBCDCDCDEDED 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(5,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR E 2 Bright
			{
				A_FireCrackle();
				int dmg = A_CalcDamageFormulaEx(4,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR FEF 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(3,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR EFG 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(2,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			HLFR HGHGH 2 Bright
			{
				A_Fire();
				int dmg = A_CalcDamageFormulaEx(1,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,32,0);
			}
			stop;
	}
}
class DiabloistGravityHPTargeter : KCProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT AB 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistHPGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer = 0; 
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}
class DiabloistGravityHPTargeter2 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}
class DiabloistGravityHPTargeter3 : DiabloistGravityHPTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}
class DiabloistGravityManaTargeter : KCProjectile
{
	int user_timer;
	int user_timer_times;
	int user_timer_timesmax;
	
	default
	{
		Tag "Diabloist Gravity Spell";
		RenderStyle "None";
		Alpha 0.00;
		PROJECTILE;
		+SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			TGLT F 0 NoDelay { user_timer_timesmax = 36; }
			goto Idle;
		Idle:
			TGLT FG 1
			{
				A_Fire(0);
				
				user_timer += 1;
				if (user_timer >= 2) 
				{
					A_SpawnItemEx("DiabloistManaGlitter", random(-32,32),random(-32,32),random(-16,16), 0,0,0, 0,SXF_NOCHECKPOSITION,0);
					user_timer_times += 1; 
				}
				if (user_timer_times >= user_timer_timesmax) 
				{
					A_FadeOut(1.0,1);
				}
			}
			loop;
	}
}
class DiabloistGravityManaTargeter2 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 24; }
			goto Idle;
	}
}
class DiabloistGravityManaTargeter3 : DiabloistGravityManaTargeter
{
	States
	{
		Spawn:
			TGLT A 0 NoDelay { user_timer_timesmax = 12; }
			goto Idle;
	}
}
class ReviveProj : KCProjectile
{
	default
	{
		//+FLOAT;
		//+NOBLOCKMONST;
		//+NOGRAVITY;
		+FRIENDLY;
		+NOCLIP;
		Radius 50;
		Height 5;
		PROJECTILE;
		RenderStyle "None";
		Speed 7;
	}
	
	States
	{
		Spawn:
			TNT1 AAAAA 6 
			{
				A_Chase(null,null,CHF_RESURRECT);
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
		Heal:
			TNT1 A 1;
			Stop;
	}
}
// Revive Projectiles [used by monsters]
class ReviveProj2 : ReviveProj
{
	default
	{
		-FRIENDLY
	}
}
// Diabloist Gravity Glitter
class DiabloistHPGlitter : TeleGlitterGenerator1
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter1", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}
class DiabloistManaGlitter : TeleGlitterGenerator2
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			TNT1 A 0 A_SpawnItemEx("TeleGlitter2", random[TeleGlitter](0,31)-16,random[TeleGlitter](0,31)-16,0, 0,0,0.25, SXF_NOCHECKPOSITION,0);
			Stop;
	}
}
// Diabloist Missile Trail
class DMissileTrail : CFlameFloor { }
class Diabloist : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		Tag "Diabloist";
		Health 1400;
		Radius 20;
		Height 56;
		Mass 750;
		Speed 22.5;
		BloodColor "08 08 08";
		Painchance 10;
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Fist", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are hyper suspectible to Kick attack [50x pain chance]
		Painchance "Chainsaw", 100; // Archvile are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 100; // Archvile are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 0;
		PainChance "Ice", 35;
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Damagefactor "Stomp", 5;
		Damagefactor "Trample", 5;
		DamageFactor "Fist", 5;
		DamageFactor "Kick", 5;
		DamageFactor "PoisonNeedle", 5;
		DamageFactor "Sceptre", 5;
		DamageFactor "Chainsaw", 5;
		DamageFactor "Melee", 5;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.02;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.48;
		PainChance "Magic", 4;
		Species "Diabloist";
		MONSTER;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+NODROPOFF;
		+NORADIUSDMG;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+DONTHARMCLASS;
		+AVOIDMELEE;
		MaxTargetRange 896;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
		Obituary "%o got was set ablaze by a Diabloist.";
	}
	
	void A_SetDiabloistRange()
	{
		if (kc_monsterlevelenabledflags)
		{
			MaxTargetRange = (896 + (CountInv("MonsterLevel") * 17.92));
		}
		else MaxTargetRange = default.MaxTargetRange;
	}

	States 
	{
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(random(85,86), "GravityAttackCheck");
		// Archvile-Type Fire Spell
		Missile1:
			DIAB G 0 BRIGHT 
			{
				if (random(1,2) <= 1)
				{
					if (random(1,3) <= 1) { return resolvestate("Missile2"); }
					else if (random(1,2) <= 1) { return resolvestate("Missile3"); }
					else { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DIAB G 0 BRIGHT A_FaceTarget();
			DIAB GH 3 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
			}
			DIAB I 3 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_VileTarget("DFire");
				A_DynamicMusic();
			}
			DIAB HGHIHGHIHGHIGH 3 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAB I 3 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				
				A_FaceTarget();
				int basedmg = A_CalcDamageFormula(40,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				int aoedmg = A_CalcDamageFormulaEx(140,1,0.0075,0.3334,0.1667,frandom(0.0075,0.0125));
				A_VileAttack("vile/stop",basedmg,aoedmg,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile1");
			DIAB G 0 BRIGHT A_Jump(64,"Missile3");
			Goto See;

		// Rapid Fire Shots
		Missile2:
			DIAB NOPNOPNOPNOPNOP 5 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				
				A_FaceTarget();
				A_SpawnProjectile("DFlare",40,0,random(-4,4));
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile2");
			DIAB P 0 BRIGHT A_Jump(32,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Firestorm-Equse Attack
		Missile3:
			DIAB GHIJKLMN 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				
				A_FaceTarget();
			}
			DIAB O 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				
				A_StartSound("weapons/firbfi");
				A_FaceTarget();
				A_SpawnProjectile("DMissile",32,0,0);
				A_DynamicMusic();
			}
			DIAB P 5 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile3");
			DIAB P 0 BRIGHT A_Jump(64,"Missile4");
			Goto See;

		// Twin Flame Snakes
		Missile4:
			DIAB [\ 8 BRIGHT // "[\"
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				A_FaceTarget();
			}
			DIAB ] 8 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				A_FaceTarget();
				A_SpawnProjectile("DTracer",0,-40,0);
				A_SpawnProjectile("DTracer",0,40,0);
				A_DynamicMusic();
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(48,"Missile4");
			DIAB G 0 BRIGHT A_Jump(4,"Missile1");
			Goto See;

		GravityAttackCheck:
			DIAB G 0 BRIGHT A_DiabloistGravityCheck();
		Missile5:
			DIAG A 0 BRIGHT A_FaceTarget();
			DIAG A 3 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }

				A_DiabloistSpawnGravityNodes();
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }

				A_DiabloistGravityPulse(3.0);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }

				A_DiabloistGravityPulse(5.25);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(3); }

				A_DiabloistGravityPulse(9.75);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(3); }

				A_DiabloistGravityPulse(12.00);
				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG DEF 4 Bright // 9/6/3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(3); }

				A_FaceTarget();
				A_DynamicMusic();
			}
			DIAG G 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(3); }

				A_DiabloistGravity(user_gravitytype);
				A_DynamicMusic();
			}
			DIAG FE 3 Bright // 9/6/3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }

				A_FaceTarget();
			}
			DIAG A 0 BRIGHT A_Jump(1,"Missile");
			Goto See;

		Spawn:
			DIAB AB 10 
			{
				A_Look();
				A_SetDiabloistRange();
			}
			Loop;
		See:
			DIAB A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * 0.375)) 
				{
					if (health <= ((SpawnHealth() + Stamina) * 0.125)) 
					{
						A_SetInventory("Speed18PercentBonus",1);
						A_SetInventory("Speed12PercentBonus",0);
					}
					else
					{
						A_SetInventory("Speed12PercentBonus",1);
						A_SetInventory("Speed18PercentBonus",0);
					}
				}
				else
				{
					A_SetInventory("Speed18PercentBonus",0);
					A_SetInventory("Speed12PercentBonus",0);
				}
			}
			DIAB AABBCCDDEEFF 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				int flag2 = CHF_RESURRECT;
				if (random (1,256) <= 40) // 160 
				{
					if (flag2 & !CHF_FASTCHASE) flag2 |= CHF_FASTCHASE;
				}
				if (A_CheckIfCCIllusion() == true && flag2 & CHF_RESURRECT) flag2 &= ~CHF_RESURRECT;
				
				A_KCChase(null,"Missile",flag2,1,3,1,1);
				A_SetDiabloistRange();
			}
			loop;

		Heal:
			DIAB [ 0 BRIGHT
			{
				if (A_CheckIfCCIllusion() == false)
				{
					A_DynamicMusic(forcedplay:true,checkres:true);
					A_SetDiabloistRange();
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			DIAB [ 10 BRIGHT // "["
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				A_DiabHealProj(-24.0,-40.0);
			}
			DIAB \ 10 BRIGHT // "\"
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				A_DiabHealProj(0.0,0.0);
			}
			DIAB ] 10 BRIGHT // "]"
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				A_DiabHealProj(24.0,40.0);
			}
			Goto See;

		Pain:
			DIAB Q 5;
			DIAB Q 5 
			{
				A_KCPain();
				A_SetDiabloistRange();
			}
			DIAB G 0 A_Jump(56, "GravityAttackCheck");
			DIAB G 0 A_Jump(60, "Missile1");
			Goto See;
		Pain.Ice:
			DIAB Q 5;
			DIAB Q 5 
			{
				A_KCPain();
				A_SetDiabloistRange();
			}
			DIAB Q 10;
			DIAB Q 0 A_Jump(128, 4);
			DIAB Q 5;
			DIAB Q 0 A_Jump(128, 2);
			DIAB Q 5;
			DIAB Q 0;
			Goto See;
		Pain.Zap:
			TNT1 A 0 A_Jump(224, "GravityAttackCheck");
			DIAB G 0 A_Jump(240, "Missile1");
			Goto See;
		Death:
			DIAB Q 7;
			DIAB R 7 A_Scream();
			DIAB S 7 A_NoBlocking();
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Ice:
			DIAB Q 5 A_GenericFreezeDeath();
			DIAB Q 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			DIAB Y 5;
			DIAB X 5;
			DIAB WVUTSRQ 7;
			goto See;
	}
}
class ArchonOfHell : KCCreature { } // Filler for later implementation
class BruiserDemon : KCCreature { } // Filler for later implementation
class PyroDemon : KCCreature { } // Filler for later implementation
// Rockets (Monsters)
class RocketMonster : RocketBase
{
	default
	{
		Tag "Rocket";
		DamageFunction (finaldamagedealt);
		DamageType "Explosive";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}
class CyberdemonNew : KCCreature
{
	default
	{
		Tag "Cyberdemon";
		Health 4000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		//MeleeRange 120;
		PainChance 20;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 75;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MinMissileChance 160;
		+BOSS 
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E2M8BOSS
		+E4M6BOSS
		SeeSound "cyber/sight";
		PainSound "cyberdemon/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "$OB_CYBORG";
		Species "Cyberdemon";
	}
	
	state A_CybCheckStompDist(int basedist = 24, int minc = 1, int maxc = 5, bool domissile = false)
	{
		if (A_CheckCCInvertGrav() == false)
		{
			float basechance;
			if (A_JumpIfCloser((basedist*random(1,5)), "Stomp"))
			{
				basechance = 0 + (CountInv("MonsterLevel") * 3.3334);
				if (frandom(0.1,100.0) <= basechance) return resolvestate("Stomp");
				else 
				{
					if (domissile)
					{
						basechance = 0 + (CountInv("MonsterLevel") * 6.6667);
						if (frandom(0.1,100.0) <= basechance) return resolvestate("Missile");
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			return resolvestate(null);
		}
		return resolvestate(null);
	}
	
	States
	{
		Spawn:
			CYBR AB 10 A_Look();
			Loop;
		See:
			CYBR A 0
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CYBR A 0 { user_walksound = 0; }
			CYBR AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("cyber/hoof",CHAN_BODY); 
				}
				if (user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}

				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			Loop;

		Stomp:
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR Z 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA A 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_FaceTarget();
				A_SpawnProjectile("CyberStomp",10,0,0,0);
				A_Quake(2, 21, 0, 512, "nosound/silent");
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_DynamicMusic();
			}
			CYMA B 0 A_Jump(64,2);
			CYMA B 0 A_CybCheckStompDist(24,3,5,true);
			CYMA B 0;
			Goto See;
		
		Missile:
			#### # 0 A_DynamicMusic();
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR E 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }

				A_FaceTarget();
				A_DynamicMusic();
			}
		MissileB:
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }

				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			CYBR E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,4) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			CYBR E 0 A_JumpIfCloser(180, "Stomp");
			CYBR E 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }

				A_FaceTarget();
				A_DynamicMusic();
			}
			loop;
			
		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 10 A_KCPain();
			Goto See;
		Death:
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P -1 A_BossDeath();
			Stop;
		Ice:
			CYBR G 5 A_GenericFreezeDeath();
			CYBR G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CYBR O 10;
			CYBR NMLKJHI 10;
			goto See;
	}
}
// Cyberdemon Stomps
class CyberStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "Add";
		Alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+DONTREFLECT;
		Health 5;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp",CHAN_7);
			}
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(85,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,128,0,0,32);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
	}
}
class ExplosionSmoke : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+THRUACTORS;
		Health 99999;
		BounceFactor 0.5;
		Radius 0;
		Height 0;
		Alpha 0.1;
		RenderStyle "Translucent";
		Scale 1.1;
		Speed 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(waterlevel > 1, "Stap");
			SMK3 BBB 2 A_FadeIn(0.1);
			SMK3 B 20;
			TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
			SMK3 CDEFGHIJKLM 3;
			Goto Death;
		Death:
			TNT1 A 0;
			Stop;
		Stap:		
			TNT1 A 0;
			Stop;
	}
}
class BigSmokes : ExplosionSmoke
{
	default
	{
		Speed 1;
		Alpha 0.1;
		Scale 1.5;
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			Goto Death;
		Death:
			SMK3 B 100;
			SMK3 CDEFGHIJKLM 1;
			Stop;
	}
}
class FootStep : KCProjectile
{
	default
	{
		Radius 10;
		Height 10;
		Speed 7;
		Projectile;
		-NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+NOEXTREMEDEATH;
		DamageType "Trample";
		Damage 0;
		+NODAMAGETHRUST;
		+BLOODLESSIMPACT; 
		+THRUACTORS;
		+DONTREFLECT;
		Gravity 40;
		Mass 1000;
		Obituary "%o was trampled by %k.";
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
		Death:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
	}
}
class Footstep5 : FootStep
{
	default
	{
		Damage 0;
		-CLIENTSIDEONLY;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
}
class Footstep6 : FootStep
{
	default
	{
		DamageFunction (random(2,3));
		-CLIENTSIDEONLY;
		-DONTSPLASH;
		-EXPLODEONWATER;
		Mass 500;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 3;
			Goto Death;
		Death:
			TNT1 A 1;
			//NULL A 0 A_StartSound("floor/tile2")
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			stop;
	}
}
class WallChunk : KCBaseZSC
{
	int user_random1;
	default
	{
		Scale 0.16;
		+NOTELEPORT;
		+MISSILE;
		+BOUNCEONACTORS;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		Speed 6;
		Gravity 0.7;
		Bouncefactor 0.2;
		BounceType "Doom";
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		See:
			TNT1 A 0
			{
				user_random1 = random(1,4);
				if (user_random1 == 1) { return resolvestate("See1"); }
				if (user_random1 == 2) { return resolvestate("See2"); }
				if (user_random1 == 3) { return resolvestate("See3"); }
				if (user_random1 == 4) { return resolvestate("See4"); }
				return resolvestate(null);
			}
		See1:
			DUST A 1;
			loop;
		See2:
			DUST B 1;
			loop;
		See3:
			DUST C 1;
			loop;
		See4:
			DUST D 1;
			loop;
		Death:
			TNT1 A 0 
			{
				bMISSILE = false;
				bBOUNCEONACTORS = false;
			}
			TNT1 A 0
			{
				if (user_random1 == 1) { return resolvestate("Death1"); }
				if (user_random1 == 2) { return resolvestate("Death2"); }
				if (user_random1 == 3) { return resolvestate("Death3"); }
				if (user_random1 == 4) { return resolvestate("Death4"); }
				return resolvestate(null);
			}
		Death1:
			DUST A 100;
			Stop;
		Death2:
			DUST B 100;
			Stop;
		Death3:
			DUST C 100;
			Stop;
		Death4:
			DUST D 100;
			Stop;
	}
}
class TinyWallChunk : WallChunk
{
	default
	{
		Scale 0.12;
	}
}
class BigWallChunk : WallChunk
{
	default
	{
		Scale 0.3;
	}
}
class HugeWallChunk : WallChunk
{
	default
	{
		Scale 0.4;
	}
}
class DirtChunk1 : WallChunk
{
	default
	{
		Scale 0.6;
		Speed 16;
		BounceFactor 0.5;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
class DirtChunk2 : WallChunk
{
	default
	{
		Scale 0.4;
		Speed 12;
		BounceFactor 0.3;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
// Annihilator Rocket
class Rocket2 : KCProjectile
{
	default
	{
		Tag "Rocket";
		DamageType "Explosive";
		obituary "%o rode %k's rocket.";
		radius 11;
		height 8;
		speed 20;
		DamageFunction (finaldamagedealt);
		seesound "weapons/rocklf";
		deathsound "weapons/rocklx";
		PROJECTILE;
		+RANDOMIZE;
		+ROCKETTRAIL;
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}

	States
	{
		Spawn:
			MISL A 1 bright;
			loop;
		Death:
			MISL B 0 bright A_SetTranslucent(0.67,1);
			MISL B 8 bright 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");

				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 bright;
			MISL D 4 bright;
			stop;
	}
}
class HomRocket1 : KCProjectile
{
	default
	{
		Tag "Homing Rocket";
		DamageType "Explosive";
		Radius 8;
		Height 11;
		Speed 30;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+SeekerMissile;
		+Rockettrail;
		SeeSound "";
		DeathSound "";
		Decal "Scorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(10,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HMIS A 0 NoDelay A_StartSound("weapons/hrlfir",CHAN_7);
			HMIS A 2 Bright A_SeekerMissile(25,35);
			HMIS A 2 Bright;
			HMIS A 2 Bright A_SeekerMissile(10,25);
			HMIS A 2 Bright;
			goto Spawn+2;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1);
			BAL3 C 8 Bright
			{
				int dmg = A_CalcDamageFormulaEx(96,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BAL3 DE 5 Bright;
			stop;
	}
}
class Annihilator : CyberdemonNew 
{
	default
	{
		Tag "Cyber-Annhilator";
		Health 8000;
		Radius 40;
		Height 110;
		Mass 1500;
		Speed 16;
		MeleeRange 120;
		Painchance 10;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 100;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 1;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 38;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "Cyberdemon";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		+MISSILEEVENMORE;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/annsit";
		DeathSound "monster/anndth";
		ActiveSound "cyber/active";
		PainSound "annihilator/pain";
		Obituary "The Cyber Annihilator blew %o away with its rockets.";
	}
	
	States 
	{
		Stomp:
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI B 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			ANMA A 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			ANMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }

				A_FaceTarget();
				A_SpawnProjectile("AnnhiliatorStomp",10,0,0,0);
				A_Quake(3, 32, 0, 768, "nosound/silent");
			}
			ANMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
			}
			ANMA B 0 A_Jump(64,2);
			ANMA B 0 A_CybCheckStompDist(24,3,5,true);
			Goto See;

		AttackPhaseChange:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump(128,"Missile2");
			goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			TNT1 A 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump(128,"Missile2");

		Missile1:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			ANNI E 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }
				
				A_FaceTarget();
				A_SpawnProjectile("Rocket2",40,27,0);
				A_SpawnProjectile("Rocket2",40,-27,0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile("Rocket2",40,27,15);
					A_SpawnProjectile("Rocket2",40,27,-15);
					A_SpawnProjectile("Rocket2",40,-27,15);
					A_SpawnProjectile("Rocket2",40,-27,-15);
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile("Rocket2",40,27,30);
						A_SpawnProjectile("Rocket2",40,27,-30);
						A_SpawnProjectile("Rocket2",40,-27,30);
						A_SpawnProjectile("Rocket2",40,-27,-30);
					}
				}
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				
				A_FaceTarget();
			}
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "AttackPhaseChange");
			Goto Missile1;

		Missile2:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }
				
				A_FaceTarget();
				A_SpawnProjectile("HomRocket1",40,27,0);
				A_SpawnProjectile("HomRocket1",40,-27,0);
			}
			ANNI E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			ANNI E 0 A_CybCheckStompDist(24,3,5,false);
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "See");
			Goto Missile2;

		Spawn: 
			ANNI AB 10 A_Look();
			loop;
		See:
			ANNI A 0
			{
				user_walksound = 0; 
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			ANNI AABBCCDD 3 
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				if (user_walksound == 1 || user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound ("monster/anhoof"); 
				}
				
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			loop;

		Pain: 
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5 A_KCPain();
			Goto See;
		Death:
			ANNI H 10 Bright;
			ANNI I 10 Bright A_Scream();
			ANNI JKL 10 Bright;
			ANNI M 10 Bright A_NoBlocking();
			ANNI NO 10 Bright;
			ANNI P 30;
			ANNI P -1 A_BossDeath();
		Ice:
			ANNI G 5 A_GenericFreezeDeath();
			ANNI G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ANNI O 10 Bright;
			ANNI NMLKJIH 10 Bright;
			goto See;
	}
}
class AnnhiliatorStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "translucent";
		alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		Health 5;
		Obituary "%o was stomped on by the Cyber-Annhiliator.";
	}
	
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp");
			}
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,192,0,0,48);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
  }
}
class SpiderMastermindNew : KCCreature
{
	default
	{
		Tag "Spider Mastermind";
		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 4;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 130;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E3M8BOSS
		+E4M8BOSS
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "mastermind/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
	}
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				//Console.Printf("i: %d, angle: %.8f, slope: %.8f", i, ang, slope);

				int damage = A_CalcDamageFormula(3,random(1,5),0.015,0.3334,0.1667,0.01);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	States
	{
		Spawn:
			SPID AB 10 A_Look();
			Loop;
		See:
			SPID A 0
			{
				user_shotsfired = 0;
				user_walksound = 0;
			}
			SPID AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("SpidMastChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((50 + (CountInv("MonsterLevel") / 3)),(75 + (CountInv("MonsterLevel") / 1.5))); }
					else { user_shotsfiredmax = random(50,75); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			SPID A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 5.625; // 22.5;
				user_shotzaccuracy = 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			SPID A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID G 0 A_MonsterRefire(10,"See");
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID H 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID H 1 A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain:
			SPID I 3;
			SPID I 3 A_KCPain();
			Goto See;
		Death:
			SPID J 20 A_Scream();
			SPID K 10 A_NoBlocking();
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S -1 A_BossDeath();
			Stop;
		Ice:
			SPID I 5 A_GenericFreezeDeath();
			SPID I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SPID S 30;
			SPID QRPONMLK 10;
			SPID J 20;
			goto See;
	}
}
class Demolisher : SpiderMastermindNew
{
	default
	{
		Tag "Spider-Demolisher";
		Health 6000;
		Radius 128;
		Height 100;
		Mass 1500;
		Speed 16;
		Painchance 20;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 65;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		Species "SpiderMastermind";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+BOSS;
		+MISSILEEVENMORE;
		+NORADIUSDMG;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/demsit";
		AttackSound "spider2/attack";
		PainSound "demolisher/pain";
		DeathSound "monster/demdth";
		ActiveSound "spider/active";
		Obituary "%o felt the power of the Spider-Demolisher.";
	}
	
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double bslope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (33.75/256);
				double slope = bslope + Random2[SPosAttack]() * (6.4/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.025,0.5,0.25,0.01);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}

	States 
	{
		Spawn:
			DEMO AB 10 A_Look();
			goto Spawn;
		See:
			DEMO A 0
			{
				user_shotsfired = 0;
				user_walksound = 0;
			}
			DEMO AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			loop;

		Missile:
			TNT1 A 0 
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (random(1,256) <= 48)
				{
					if (!(CountInv("SpidMastChaingunCooldown")))
					{
						if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((50 + (CountInv("MonsterLevel") / 3)),(75 + (CountInv("MonsterLevel") / 1.5))); }
						else { user_shotsfiredmax = random(50,75); }
						return resolvestate("Missile2");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto Missile1;
		Missile1:
			DEMO A 20 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }
				A_FaceTarget();
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 1 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(0); }
				A_StartSound("weapons/bfgf");
			}
			DEMO TT 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*3));
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			DEMO T 0 BRIGHT A_Jump(88,"Missile2");
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO TT 4 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(5.625,7.6875,7.6875,7.6875,11.25,11.25,11.25,11.25,11.25,11.25,11.25,14.0625,114.0625,14.0625,16.875);
				user_tempvar2 *= 0.5;
				A_FaceTarget();
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*2));
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,0);
				A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-2));
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*3));
						A_SpawnProjectile("BFGBallMonster",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0 A_CheckIfTargetDead("See");
			DEMO T 0 BRIGHT A_Jump (8, "MissileLoop");
			DEMO T 0 BRIGHT A_Jump (192, "Missile2");
			Goto See;

		Missile2:
			DEMO A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 33.75;
				user_shotzaccuracy = 6.4;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		Missile2Loop:
			DEMO G 0 A_CheckIfTargetDead("See");
			DEMO G 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO G 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO H 0 A_CheckIfTargetDead("See");
			DEMO H 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
				
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO H 1 BRIGHT A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain: 
			DEMO I 3;
			DEMO I 3 A_KCPain(); 
			Goto See;
		Death:
			DEMO J 20 A_Scream();
			DEMO K 10 Bright A_NoBlocking();
			DEMO LMNOPQR 10 Bright;
			DEMO S 30;
			DEMO S -1 A_BossDeath();
			Stop;
		Ice:
			DEMO I 5 A_GenericFreezeDeath();
			DEMO I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DEMO S 30;
			DEMO QRPONMLK 10;
			DEMO J 20;
			goto See;
	}
}
class BFGBallMonster : BFGBallBase 
{
	default
	{
		DamageFunction (finaldamagedealt);
		Tag "BFG Ball";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(100,random(1,8),0.02,0.3334,0.1667,0.015);
	}
	
	States
	{
		Spawn:
			BFS1 AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/bfgx",CHAN_7);
				A_Quake(1, 12, 0, 768, "nosound/silent");
				A_Quake(5, 12, 0, 512, "nosound/silent");
			}
			BFE1 AB 8 Bright;
			BFE1 C 8 Bright A_BFGSpray();
			BFE1 DEF 8 Bright;
			Stop;
		
		ShotDown:
			TNT1 A 0 
			{
				A_ScaleVelocity(0);
				A_StartSound("weapons/bfgx",CHAN_7, CHANF_DEFAULT, 0.5);
				A_Quake(1, 12, 0, 384, "nosound/silent");
				A_Quake(5, 12, 0, 256, "nosound/silent");
			}
			BFE1 ABCDEF 4 Bright;
			Stop;
	}
}
class HadesSphere : KCCreature { } // Filler for later implementation
class HSOverlord : KCCreature { } // Filler for later implementation
class HadesElemental : KCCreature { } // Filler for later implementation
class HadesOverlord : KCCreature { } // Filler for later implementation

class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		+PUSHABLE
		Tag "Explosive Barrel";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
		ProjectilePassHeight 32;
		//$Sprite "BAR1A0"
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 BRIGHT;
			BEXP B 5 Bright
			{
				A_Scream();
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
				A_AlertMonsters();
			}
			BEXP C 5 BRIGHT;
			BEXP D 10 BRIGHT 
			{
				A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BEXP E 10 BRIGHT;
			TNT1 A 1050 BRIGHT A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}

// Heretic
class IceLich : KCCreature { } // Filler for later implementation
class DSparilMountedNew : KCCreature { } // Filler for later implementation
class DSparilUnmountedNew : KCCreature { } // Filler for later implementation
// Hexen
class KoraxNew : KCCreature { } // Filler for later implementation
// Strife
// Custom
class HellCleric : KCCreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}
// Hell Cleric Shot 1
class HellClericBall : KCProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}
// Hell Cleric Shot 2
class HellClericDarkBall : KCProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}
class HellClericDVDS : KCCreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			Loop;
		See:
			HELC AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_KCChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			HELC E 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				int baserand = random(6,12);
				int dmg = 7;
				dmg += (12 * baserand);
				dmg *= 0.5;
				if (kc_monsterlevelenabledflags)
				{
					dmg = (7 + (CountInv("MonsterLevel") * 0.035));
					dmg += ((12 * baserand) + (CountInv("MonsterLevel") * (0.06 * baserand)));
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
					{
						dmg += (2.334 + (CountInv("MonsterLevel") * 0.001167));
						dmg += ((4 * baserand) + (CountInv("MonsterLevel") * (0.02 * baserand)));
					}
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						dmg += (1.167 + (CountInv("MonsterLevel") * 0.000584));
						dmg += ((2 * baserand) + (CountInv("MonsterLevel") * (0.01 * baserand)));
					}
					dmg *= (1.0 + (CountInv("MonsterLevel") * 0.005));
				}
				dmg *= 0.5;
				
				A_CustomComboAttack(atktype, user_tempvar1, (dmg), "imp/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
				A_DynamicMusic();
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}
class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}
class UltraMastermind : KCCreature { } // Filler for later implementation