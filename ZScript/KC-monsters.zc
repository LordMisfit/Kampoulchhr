// Heretic
class PodNew : KCCreature { } // Filler for later implementation
class ChickenNew : KCCreature { } // Filler for later implementation
class HereticImpNew : KCCreature { } // Filler for later implementation
class HereticImpLeaderNew : KCCreature { } // Filler for later implementation
class PlagueImp : KCCreature { } // Filler for later implementation
class WatcherImp : KCCreature { } // Filler for later implementation
class MummyNew : KCCreature { } // Filler for later implementation
class MummyGhostNew : KCCreature { } // Filler for later implementation
class MummyLeaderNew : KCCreature { } // Filler for later implementation
class MummyLeaderGhostNew : KCCreature { } // Filler for later implementation
class IceGolem : KCCreature { } // Filler for later implementation
class IceGolemGhost : KCCreature { } // Filler for later implementation
class FrostGolem : KCCreature { } // Filler for later implementation
class FrostGolemGhost : KCCreature { } // Filler for later implementation
class KnightNew : KCCreature { } // Filler for later implementation
class KnightGhostNew : KCCreature { } // Filler for later implementation
class DeathKnight : KCCreature { } // Filler for later implementation
class DeathKnightGhost : KCCreature { } // Filler for later implementation
class WizardNew : KCCreature { } // Filler for later implementation
class GreaterDisciple : KCCreature { } // Filler for later implementation
class HereticApprenticeNew : KCCreature { } // Filler for later implementation
class Banshee : KCCreature { } // Filler for later implementation
class IronlichNew : KCCreature { } // Filler for later implementation
class IceLich : KCCreature { } // Filler for later implementation
class GoldLich : KCCreature { } // Filler for later implementation
class FakeGoldLich : KCCreature { } // Filler for later implementation
class BloodLich : KCCreature { } // Filler for later implementation
class ClinkNew : KCCreature { } // Filler for later implementation
class DarkClink : KCCreature { } // Filler for later implementation
class BeastNew : KCCreature { } // Filler for later implementation
class ShadowBeast : KCCreature { } // Filler for later implementation
class MaulotaurBase : KCCreature
{
 const MAULATORTICS = 25 * TICRATE;
 const MNTR_CHARGE_SPEED =13.;
 const MINOTAUR_LOOK_DIST = 16*54.;
	
	void MinotaurSlam (Actor target)
	{
		double ang = AngleTo(target);
		double thrust = 16 + random[MinotaurSlam]() / 64.;
		target.VelFromAngle(ang, thrust);
		int damage = random[MinotaurSlam](1, 8) * (bSummonedMonster? 4 : 6);
		int newdam = target.DamageMobj (null, null, damage, 'Melee');
		target.TraceBleedAngle (newdam > 0 ? newdam : damage, ang, 0.);
		if (target.player)
		{
			target.reactiontime = random[MinotaurSlam](14, 21);
		}
	}

	override void Tick ()
	{
		Super.Tick ();
		
		// The unfriendly Minotaur (Heretic's) is invulnerable while charging
		if (!bSummonedMonster)
		{
			bInvulnerable = bSkullFly;
		}
	}

	override bool Slam (Actor thing)
	{
		// Slamming minotaurs shouldn't move non-creatures
		if (!thing.bIsMonster && !thing.player)
		{
			return false;
		}
		return Super.Slam (thing);
	}

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		damage = Super.DoSpecialDamage (target, damage, damagetype);
		if (damage != -1 && bSkullFly)
		{
			// Slam only when in charge mode
			MinotaurSlam (target);
			return -1;
		}
		return damage;
	}

	void A_MinotaurAtk1(int atkdamage = 4, int squishamount = -16)
	{
		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/melee", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
	}

	void A_MinotaurDecide()
	{
		bool friendly = bSummonedMonster;

		if (!target)
		{
			return;
		}
		if (!friendly)
		{
			A_StartSound("minotaur/sight", CHAN_WEAPON);
		}
		double dist = Distance2D(target);
		if (target.pos.z + target.height > pos.z
			&& target.pos.z + target.height < pos.z + height
			&& dist < (friendly ? 16*64. : 8*64.)
			&& dist > 1*64.
			&& random[MinotaurDecide]() < 150)
		{
			// Charge attack
			// Don't call the state function right away
			SetStateLabel("Charge", true);
			bSkullFly = true;
			if (!friendly)
			{
				// Heretic's Minotaur is invulnerable during charge attack
				// bInvulnerable = true;
				A_SetInventory("MaulotaurChargeDefense",1);
				bNoPain = true;
				bNoBlood = true;
			}
			A_FaceTarget ();
			VelFromAngle(MNTR_CHARGE_SPEED);
			special1 = TICRATE/2; // Charge duration
		}
		else if (target.pos.z == target.floorz
				&& dist < 9*64.
				&& random[MinotaurDecide]() < (friendly ? 100 : 220))
		{
			// Floor fire attack
			SetStateLabel("Hammer");
			special2 = 0;
		}
		else
		{
			// Swing attack
			A_FaceTarget ();
			// Don't need to call P_SetMobjState because the current state
			// falls through to the swing attack
		}
	}
	
	void A_MinotaurCharge()
	{
		if (target == null)
		{
			return;
		}
		if (special1 > 0)
		{
			Class<Actor> type;

			if (gameinfo.gametype == GAME_Heretic)
			{
				type = "PhoenixPuff";
			}
			else
			{
				type = "PunchPuff";
			}
			Actor puff = Spawn (type, Pos, ALLOW_REPLACE);
			if (puff != null) puff.Vel.Z = 2;
			special1--;
		}
		else
		{
			bSkullFly = false;
			bInvulnerable = false;
			A_SetInventory("MaulotaurChargeDefense",0);
			bNoPain = false;
			bNoBlood = false;
			SetState (SeeState);
		}
	}

	void A_MinotaurAtk2(string missiletype = "MinotaurFX1", int meleedamage = 5, int friendlymeleedamage = 3)
	{
		bool friendly = bSummonedMonster;

		int actualmeleedmg = meleedamage;
		if (friendly == 1) actualmeleedmg = friendlymeleedamage;
		string actualmissile = missiletype;
		
		if (target == null)
		{
			return;
		}
		A_StartSound("minotaur/attack2", CHAN_WEAPON);
		if (CheckMeleeRange())
		{
			int damage = actualmeleedmg;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		double z = pos.z + 40;
		Class<Actor> fx = actualmissile;
		Actor mo = SpawnMissileZ (z, target, fx);
		if (mo != null)
		{
			//S_Sound (mo, CHAN_WEAPON, "minotaur/attack2", 1, ATTN_NORM);
			double vz = mo.Vel.Z;
			double ang = mo.angle;
			SpawnMissileAngleZ (z, fx, ang-(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./8), vz);
			SpawnMissileAngleZ (z, fx, ang-(45./16), vz);
			SpawnMissileAngleZ (z, fx, ang+(45./16), vz);
		}
	}

	void A_MinotaurAtk3(int atkdamage = 4, int squishamount = -16, string missiletype = "MinotaurFX2New")
	{
		string attacktype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound("minotaur/attack3", CHAN_VOICE);
		if (CheckMeleeRange())
		{
			int damage = atkdamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			PlayerInfo player = target.player;
			if (player != null && player.mo == target)
			{
				// Squish the player
				player.deltaviewheight = squishamount;
			}
		}
		else
		{
			if (Floorclip > 0 && compat_minotaur)
			{
				// only play the sound. 
				A_StartSound("minotaur/fx2hit", CHAN_WEAPON);
			}
			else
			{
				Actor mo = SpawnMissile (target, attacktype);
				if (mo != null)
				{
					mo.A_StartSound("minotaur/attack1", CHAN_WEAPON);
				}
			}
		}
		if (random[MinotaurAtk3]() < 192 && special2 == 0)
		{
			SetStateLabel ("HammerLoop");
			special2 = 1;
		}
	}

	void A_MinotaurDeath()
	{
		if (Wads.CheckNumForName ("MNTRF1", Wads.ns_sprites) < 0 &&
			Wads.CheckNumForName ("MNTRF0", Wads.ns_sprites) < 0)
			SetStateLabel("FadeOut");
	}

	void A_MinotaurRoam()
	{
		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		let mf = MinotaurFriend(self);
		if (mf)
		{
			if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
			{
				DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
				return;
			}
		}

		if (random[MinotaurRoam]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (random[MinotaurRoam]() < 6)
		{
			//Choose new direction
			movedir = random[MinotaurRoam]() % 8;
			FaceMovementDirection ();
		}
		if (!MonsterMove())
		{
			// Turn
			if (random[MinotaurRoam]() & 1)
				movedir = (movedir + 1) % 8;
			else
				movedir = (movedir + 7) % 8;
			FaceMovementDirection ();
		}
	}

	void A_MinotaurLook()
	{
		if (!(self is "MinotaurFriend"))
		{
			A_Look();
			return;
		}

		Actor mo = null;
		PlayerInfo player;
		double dist;
		Actor master = tracer;

		target = null;
		if (deathmatch)					// Quick search for players
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i]) continue;
				player = players[i];
				mo = player.mo;
				if (mo == master) continue;
				if (mo.health <= 0) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				target = mo;
				break;
			}
		}

		if (!target)				// Near player monster search
		{
			if (master && (master.health > 0) && (master.player))
				mo = master.RoughMonsterSearch(20);
			else
				mo = RoughMonsterSearch(20);
			target = mo;
		}

		if (!target)				// Normal monster search
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");

			while ((mo = Actor(it.Next())) != null)
			{
				if (!mo.bIsMonster) continue;
				if (mo.health <= 0) continue;
				if (!mo.bShootable) continue;
				dist = Distance2D(mo);
				if (dist > MINOTAUR_LOOK_DIST) continue;
				if (mo == master || mo == self) continue;
				if (mo.bSummonedMonster && mo.tracer == master) continue;
				target = mo;
				break;			// Found actor to attack
			}
		}

		if (target)
		{
			SetState (SeeState, true);
		}
		else
		{
			SetStateLabel ("Roam", true);
		}
	}

	void A_MinotaurChase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0, int value6 = 0)
	{
		let mf = MinotaurFriend(self);
		if (!mf)
		{
			A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5,value6);
			return;
		}

		// In case pain caused him to skip his fade in.
		A_SetRenderStyle(1, STYLE_Normal);

		if (mf.StartTime >= 0 && (level.maptime - mf.StartTime) >= MAULATORTICS)
		{
			DamageMobj (null, null, TELEFRAG_DAMAGE, 'None', 0, 0.0);
			return;
		}

		if (random[MinotaurChase]() < 30)
			A_MinotaurLook();		// adjust to closest target

		if (!target || (target.health <= 0) || !target.bShootable)
		{
			// look for a new target
			SetIdle();
			return;
		}

		FaceMovementDirection ();
		reactiontime = 0;

		// Melee attack
		if (MeleeState && CheckMeleeRange ())
		{
			if (AttackSound)
			{
				A_StartSound(AttackSound, CHAN_WEAPON);
			}
			SetState (MeleeState);
			return;
		}

		// Missile attack
		if (MissileState && CheckMissileRange())
		{
			SetState (MissileState);
			return;
		}

		// chase towards target
		if (!MonsterMove ())
		{
			NewChaseDir ();
			FaceMovementDirection ();
		}

		// Active sound
		if (random[MinotaurChase]() < 6)
		{
			PlayActiveSound ();
		}
	}
}
class MaulotaurNew : MaulotaurBase // replaces Minotaur
{
	default
	{
		Tag "Maulotaur";
		Health 3000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+NOTARGET;
		+BOSSDEATH;
		+AVOIDMELEE;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "ArtiSuperHealth", 51;
		DropItem "PhoenixRodAmmo", 168, 2;
		DropItem "PhoenixRodHefty", 17, 10;
		DropItem "PhoenixRodAmmo", 84, 2;
		DropItem "PhoenixRodHefty", 8, 10;
		DropItem "PhoenixRodAmmo", 42, 2;
		DropItem "PhoenixRodHefty", 4, 10;
		DropItem "PhoenixRodAmmo", 21, 2;
		DropItem "PhoenixRodHefty", 2, 10;
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
			MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR ABCD 5 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / 22.5));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			MNTR F 6 A_MinotaurDeath();
			MNTR G 5;
			MNTR H 6 A_Scream();
			MNTR I 5;
			MNTR J 6;
			MNTR K 5;
			MNTR L 6;
			MNTR M 5 A_NoBlocking();
			MNTR N 6;
			MNTR O 5;
			MNTR P 6;
			MNTR Q 5;
			MNTR R 6;
			MNTR S 5;
			MNTR T -1 A_BossDeath();
			Stop;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			MNTR E 5 A_GenericFreezeDeath();
			MNTR E 1 A_FreezeDeathChunks();
			wait;
		Raise:
			MNTR S 5;
			MNTR R 6;
			MNTR Q 5;
			MNTR P 6;
			MNTR O 5;
			MNTR N 6;
			MNTR M 5;
			MNTR L 6;
			MNTR K 5;
			MNTR J 6;
			MNTR I 5;
			MNTR H 6;
			MNTR G 5;
			MNTR F 6;
			goto See;
	}
}
class MinotaurFX1New : KCEffectProjectile replaces MinotaurFX1 
{
	default
	{
		Tag "'taur Fire";
		DamageFunction (3 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 26;
		DamageType "Fire";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX12 AAABBB 2 Bright;
			Loop;
		Death:
			FX12 CDEFGH 5 Bright;
			Stop;
	}
}
class MinotaurFX2New : MinotaurFX1New replaces MinotaurFX2 
{
	default
	{
		Tag "'taur Firesnake";
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Radius 5;
		Height 12;
		Speed 14;
		FastSpeed 20;
		+FLOORHUGGER;
		ExplosionDamage 24;
		DeathSound "minotaur/fx2hit";
	}

	States
	{
		Spawn:
			FX13 A 2 Bright 
			{
				A_MntrFloorFire("MinotaurFX3New");
			}
			Loop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(24,64);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class MinotaurFX3New : MinotaurFX2New replaces MinotaurFX3 
{
	default
	{
		Tag "'taur Firesnake";
		DamageType "Fire";
		Radius 8;
		Height 16;
		Speed 0;
		DeathSound "minotaur/fx3hit";
		ExplosionDamage 128;
	}
	
	States
	{
		Spawn:
			FX13 DDCC 2 Bright;
			FX13 BB 2 Bright;
			FX13 B 1 Bright;
			FX13 CC 2 Bright;
			FX13 C 1 Bright;
			FX13 DD 2 Bright;
			FX13 D 1 Bright;
			FX13 EE 2 Bright;
			FX13 E 1 Bright;
			FX13 FFGGHH 2 Bright;
			Stop;
		Death:
			FX13 I 4 Bright 
			{
				A_Explode(128,128);
			}
			FX13 JKLM 4 Bright;
			Stop;
	}
}
class SnakeNew : KCCreature { } // Filler for later implementation
class HellGuard : KCCreature { } // Filler for later implementation
class Serpathor : KCCreature { } // Filler for later implementation
class DSparilBase : KCUniqueBoss
{
	//**********
	//*D'Sparil*
	//**********
	// w/ Chaos Serpent
	void A_Sor1Pain()
	{
		int extrasteps;
		if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 8;
		special1 = random(18,22) + extrasteps; // Number of steps to walk fast
		A_Pain();
	}

	void A_Sor1Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special1)
		{
			special1--;
			tics -= 3;
			if (tics < 1) tics = 1;
		}
		A_Chase(melee,missile,flags);
	}

	void A_Srcr1Attack(int meleedamage = 8, string missiletype = "SorcererFX1New")
	{
		string projtype = missiletype;

		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY);
		if (CheckMeleeRange ())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}

		int fireballhealth1;
		if (User_MaxHP <= 0) fireballhealth1 = SpawnHealth()/3*2; else fireballhealth1 = User_MaxHP/3*2;
		int fireballhealth2;
		if (User_MaxHP <= 0) fireballhealth2 = SpawnHealth()/3; else fireballhealth2 = User_MaxHP/3;
		if (health > fireballhealth1)
		{
			// Spit one fireball
			SpawnMissileZ (pos.z + 48, target, projtype);
		}
		else
		{
			// Spit three fireballs
			Actor mo = SpawnMissileZ (pos.z + 48, target, projtype);
			if (mo != null)
			{
				double ang = mo.angle;
				SpawnMissileAngleZ(pos.z + 48, projtype, ang - 3, mo.Vel.Z);
				SpawnMissileAngleZ(pos.z + 48, projtype, ang + 3, mo.Vel.Z);
			}
			if (health < fireballhealth2)
			{
				// Maybe attack again
				if (special1)
				{
					// Just attacked, so don't attack again
					special1 = 0;
				}
				else
				{
					// Set state to attack again
					special1 = 1;
					SetStateLabel("Missile2");
				}
			}
		}
	}

	void A_SorcererRise ()
	{
		bSolid = false;
		Actor mo = Spawn("Sorcerer2", Pos, ALLOW_REPLACE);
		if (mo != null)
		{
			mo.Translation = Translation;
			mo.SetStateLabel("Rise");
			mo.angle = angle;
			mo.CopyFriendliness (self, true);
		}
	}

	void A_Sor2Chase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (special2)
		{
			special2--;
			tics -= 2;
			if (tics < 1) tics = 1;
			if (dydudebug_showactormoveinfo) Console.Printf("\cx(%s) (gametic: %d) [A_Sor2Chase]\c- \cytics: %d\c-", GetClassName(), gametic, tics);
		}
		A_Chase(melee,missile,flags);
	}

	void A_Sor2Pain()
	{
		if (random[Sorc2Pain](1,4) <= 3)
		{
			int extrasteps;
			if (kc_monsterlevelenabledflags) extrasteps = CountInv("MonsterLevel") / 3;
			special2 = random(16,24) + extrasteps; // Number of steps to walk fast
			A_Pain();
		}
	}

	// without Chaos Serpent
	void DSparilTeleport()
	{
		SpotState state = Level.GetSpotState();
		if (state == null) return;

		Actor spot = state.GetSpotWithMinMaxDistance("BossSpot", pos.x, pos.y, 128, 0);
		if (spot == null) return;

		Vector3 prev = Pos;
		if (TeleportMove (spot.Pos, false))
		{
			Actor mo = Spawn("Sorcerer2Telefade", prev, ALLOW_REPLACE);
			if (mo) 
			{
				mo.Translation = Translation;
				mo.A_StartSound("misc/teleport", CHAN_BODY);
			}
			SetStateLabel("Teleport");
			A_StartSound("misc/teleport", CHAN_BODY);
			SetZ(floorz);
			angle = spot.angle;
			vel = (0,0,0); 
		}
	}

	void A_Srcr2Decide ()
	{
		static const int chance[] =
		{
			192, 120, 120, 120, 64, 64, 32, 16, 0
		};

		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = SpawnHealth(); else teleporthealth = User_MaxHP;

		int health8 = max(1, teleporthealth / 8);
		int chanceindex = min(8, health / health8);

		if (random[Srcr2Decide]() < chance[chanceindex])
		{
			int ExtraChance;
			if (CountInv("LDLegendaryMonsterTransformed"))
			{
				ExtraChance = 1 + (CountInv("MonsterLevel") / 90);
				if (random(1,16) <= ExtraChance) DSparilTeleport ();
			}
			else
			{
				ExtraChance = 2 + (CountInv("MonsterLevel") / 90);
				if (random(1,4) <= ExtraChance) DSparilTeleport ();
			}
		}
	}

	void A_Srcr2Attack (int meleedamage = 20, string missiletype1 = "Sorcerer2FX1New", string missiletype2 = "Sorcerer2FX2New")
	{
		string attacktype1 = missiletype1;
		string attacktype2 = missiletype2;

		int attackhealth;
		if (User_MaxHP <= 0) attackhealth = SpawnHealth(); else attackhealth = User_MaxHP;
		if (!target)
		{
			return;
		}
		A_StartSound(AttackSound, CHAN_BODY, 1, false, ATTN_NONE);
		if (CheckMeleeRange())
		{
			int damage = meleedamage;
			int newdam = target.DamageMobj (self, self, damage, 'Melee');
			target.TraceBleed (newdam > 0 ? newdam : damage, self);
			return;
		}
		int chance = health < attackhealth/2 ? 96 : 48;
		if (random[Srcr2Atk]() < chance)
		{
			// Wizard spawners
			SpawnMissileAngle(attacktype2, Angle - 45, 0.5);
			SpawnMissileAngle(attacktype2, Angle + 45, 0.5);
		}
		else
		{
			// Blue bolt
			SpawnMissile (target, attacktype1);
		}
	}

	void A_Sor2DthInit ()
	{
		special1 = 7; // Animation loop counter
		Thing_Destroy(0); // Kill monsters early
	}

	void A_Sor2DthLoop ()
	{
		if (--special1)
		{
			// Need to loop
			SetStateLabel("DeathLoop");
		}
	}
}
class DSparilMountedNew : DSparilBase replaces Sorcerer1
{
	default
	{
		Tag "\c[gold]D'Sparil (on Serpent)";
		Health 6000; //24000;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Painchance 56;
		Painchance "Fist", 84; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 140; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 63;
		meleerange 82;
		Monster;
		+BOSS;
		+DONTMORPH;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+DONTGIB;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparilserpent/sight";
		AttackSound "dsparilserpent/attack";
		PainSound "dsparilserpent/pain";
		DeathSound "dsparilserpent/death";
		ActiveSound "dsparilserpent/active";
		Obituary "$OB_DSPARIL1";
		HitObituary "$OB_DSPARIL1HIT";
	}
	
	States
	{
		Spawn:
			SRCR A 0 NoDelay;
			SRCR AB 10 A_Look();
			goto Spawn+1;
		See:
			SRCR A 0;
			SRCR ABCD 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				A_Sor1Chase();
			}
			Loop;
		Missile:
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8 * random(1,8), "SorcererFX1New");
			}
			Goto See;
		Missile2:
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			SRCR Q 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			SRCR R 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRCR S 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_Srcr1Attack(8*random(1,8), "SorcererFX1New");
			}
			Goto See;
		Pain:
			SRCR Q 6 A_Sor1Pain();
			Goto See;
		Pain.Fist:
			SRCR Q 6 A_Sor1Pain();
			SRCR Q 6;
			Goto See;
		Pain.Kick:
			SRCR Q 6 A_Sor1Pain();
			SRCR QQ 6;
			Goto See;
		Death:
			SRCR E 7;
			SRCR F 7 A_Scream();
			SRCR G 7;
			SRCR HIJK 6;
			SRCR L 25 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 20 A_StartSound("dsparil/zap", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SRCR MN 5;
			SRCR O 4;
			SRCR L 12;
			SRCR P -1 A_SorcererRise();
			Stop;
		Ice:
			goto Death;
	}
}
class SorcererFX1New : KCProjectile replaces SorcererFX1 
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (10 * random(1,8));
		DamageType "Fire";
		Radius 10;
		Height 10;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX14 AAABBBCCC 2 Bright;
			Loop;
		Death:
			FX14 DEFGH 5 Bright;
			Stop;
	}
}
class DSparilUnmountedNew : DSparilBase replaces Sorcerer2
{
	int user_chaseteleportchance;
	int user_chaseteleportchance2;
	int lulwat;
	int lultimer1, lultimer1max;
	default
	{
		Tag "\c[gold]D'Sparil";
		Health 14000; // 56000;
		Radius 16;
		Height 70;
		Mass 300;
		Speed 14;
		Painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 128;
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 8;
		MeleeRange 92;
		Monster;
		+DROPOFF;
		+BOSS;
		+DONTMORPH;
		+FULLVOLACTIVE;
		+NORADIUSDMG;
		+NOTARGET;
		+NOICEDEATH;
		+FLOORCLIP;
		+BOSSDEATH;
		+AVOIDMELEE;
		+NOFEAR;
		SeeSound "dsparil/sight";
		AttackSound "dsparil/attack";
		PainSound "dsparil/pain";
		ActiveSound "dsparil/active";
		Obituary "$OB_DSPARIL2";
		HitObituary "$OB_DSPARIL2HIT";
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	States
	{
		Spawn:
			SOR2 A 0 NoDelay;
			SOR2 MN 10 A_Look();
			goto Spawn+1;
		See:
			SOR2 A 0;
			SOR2 MNOP 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }

				user_chaseteleportchance = 512;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 240) { user_chaseteleportchance = 256; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 210) { user_chaseteleportchance = 288; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { user_chaseteleportchance = 320; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 150) { user_chaseteleportchance = 352; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_chaseteleportchance = 384; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { user_chaseteleportchance = 416; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { user_chaseteleportchance = 448; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { user_chaseteleportchance = 480; }
				
				user_chaseteleportchance2 = 1;
				if (health <= user_HPCritRange) { user_chaseteleportchance2 = 8; }
				else if (health <= user_HPLowRange) { user_chaseteleportchance2 = 4; }
				else if (health <= (user_MaxHP/2)) { user_chaseteleportchance2 = 2; }
				else { user_chaseteleportchance2 = 1; }
				if (random(1,user_chaseteleportchance) <= user_chaseteleportchance2)
				{
					DSparilTeleport();
				}
				else
				{
					A_Sor2Chase(); 
				}
			}
			Loop;
		Rise:
			SOR2 A 0;
			SOR2 A 0;
			SOR2 AB 4;
			SOR2 C 4 A_StartSound("dsparil/rise", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SOR2 DEF 4;
			SOR2 G 12 A_StartSound("dsparil/sight", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			Goto See;
		Pain:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			Goto See;
		Pain.Fist:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 Q 3;
			Goto See;
		Pain.Kick:
			SOR2 Q 3;
			SOR2 Q 6 A_Sor2Pain();
			SOR2 QQ 3;
			Goto See;
		Missile:
			SOR2 R 0 A_DynamicMusic();
			SOR2 R 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_Srcr2Decide();
			}
			SOR2 S 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(8); }
				A_FaceTarget();
			}
			SOR2 T 20 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); }
				A_Srcr2Attack(20*random(1,8),"Sorcerer2FX1New","Sorcerer2FX2New");
			}
			Goto See;
		Teleport:
			TNT1 A 0; // makes sure D'Sparil is as stealth as possible when proceeding to teleport if flagged as stealth
			SOR2 LKJIHG 6;
			Goto See;
		Death:
			SDTH A 8 A_Sor2DthInit();
			SDTH B 8;
			SDTH C 8 A_StartSound("dsparil/scream", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
		DeathLoop:
			SDTH DE 7;
			SDTH F 7 A_Sor2DthLoop();
			SDTH G 6 A_StartSound("dsparil/explode", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH H 6;
			SDTH I 18;
			SDTH J 6 A_NoBlocking();
			SDTH K 6 A_StartSound("dsparil/bones", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_NONE);
			SDTH LMN 6;
			SDTH O -1 A_BossDeath();
			Stop;
		Ice:
			goto Death;
	}
}
class Sorcerer2FX1New : KCProjectile replaces Sorcerer2FX1 
{
	default
	{
		Tag "Staff ElectroBlast";
		DamageFunction (10 * random(1,8));
		DamageType "Thunder";
		Radius 10;
		Height 6;
		Speed 20;
		FastSpeed 28;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX16 ABC 3 Bright 
			{
				A_BlueSpark();
			}
			Loop;
		Death:
			FX16 G 5 Bright A_Explode(random(80,111),random(80,111),0);
			FX16 HIJKL 5 Bright;
			Stop;
	}
}
class Sorcerer2FX2New : KCProjectile replaces Sorcerer2FX2 
{ 
	default
	{
		Tag "Staff Wizard Shot";
		DamageFunction (10 * random(1,8));
		DamageType "Magic";
		Height 6;
		Speed 6;
		Damage 10;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FX11 AAAAAAA 5 Bright;
			FX11 A 5 Bright
			{
				A_GenWizard();
			}
			FX11 B 5 Bright;
			Goto Spawn+1;
		Death:
			FX11 CDEFG 5 Bright;
			Stop;
	}
}
// Hexen
class PigNew : KCCreature { } // Filler for later implementation
class FireDemonNew : KCCreature { } // Filler for later implementation
class FireDemonLeader : KCCreature { } // Filler for later implementation
class FireDemonCommander : KCCreature { } // Filler for later implementation
class FireDemonQueen : KCCreature { } // Filler for later implementation
class FireDemonQueenClone : KCCreature { } // Filler for later implementation
class EttinNew : KCCreature { } // Filler for later implementation
class EttinGhostNew : KCCreature { } // Filler for later implementation
class EttinCommander : KCCreature { } // Filler for later implementation
class Bormereth : KCCreature { } // Filler for later implementation
class CentaurNew : KCCreature { } // Filler for later implementation
class CentaurGhostNew : KCCreature { } // Filler for later implementation
class SlaughtaurNew : KCCreature { } // Filler for later implementation
class GreenChaosSerpentNew : KCCreature // replaces Demon1
{
	const ChunkFlags = SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY;
	default
	{
		Tag "Chaos Serpent [Green]";
		Health 250;
		meleerange 82;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
		Speed 13;
		Radius 32;
		Height 64;
		ProjectilePassHeight 104;
		Mass 220;
		Monster;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		+TELESTOMP;
		+FLOORCLIP;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "$OB_DEMON1";
	}
	
	States
	{
		Spawn:
			DEMN A 0 NoDelay;
			DEMN AA 10 A_Look();
			goto Spawn+1;
		See:
			DEMN ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			DEMN E 4;
			DEMN E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			DEMN E 4;
			DEMN E 4 A_KCPain();
			DEMN EE 4;
			Goto See;
		Pain.Kick:
			DEMN E 4;
			DEMN E 4 A_KCPain();
			DEMN EEEE 4;
			Goto See;
		Melee:
			DEMN E 0 A_DynamicMusic();
			DEMN E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN F 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEMN G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEMN E 0 A_DynamicMusic();
			DEMN E 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMN F 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEMN G 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_SpawnProjectile("Demon1FX1New", 62, 0);
			}
			Goto See;
		Death:
			DEMN HI 6;
			DEMN J 6 A_Scream();
			DEMN K 6 A_NoBlocking();
			DEMN L 6 A_QueueCorpse();
			DEMN MNO 6;
			DEMN P -1;
			Stop;
		XDeath:
			DEMN H 6;
			DEMN I 6 
			{
				A_SpawnItemEx("Demon1Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon1Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEMN O 6;
			DEMN NMLKJIH 6;
			Goto See;
	}
}
class Demon1FX1New : KCProjectile // replaces Demon1FX1
{
	default
	{
		Tag "Serpentfire";
		DamageFunction (5 * random(1,8));
		DamageType "Fire";
		Speed 15;
		Radius 10;
		Height 6;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			DMFX AABBCC 2 Bright;
			Loop;
		Death:
			DMFX DE 4 Bright;
			DMFX FGH 3 Bright;
			Stop;
	}
}
class GreenChaosSerpentGhostNew : GreenChaosSerpentNew // replaces Demon1Mash
{
	default
	{
		Tag "Chaos Serpent [Green] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.875;
		Painchance "Fire", 44;
		DamageFactor "Ice", 0.875;
		Painchance "Ice", 44;
	}
}
class BrownChaosSerpentNew : GreenChaosSerpentNew // replaces Demon2
{
	default
	{
		Tag "Chaos Serpent [Brown]";
		Painchance "Poison", 33;
		DamageFactor "Poison", 0.67;
		Painchance "PoisonElemental", 10;
		DamageFactor "PoisonElemental", 0.2;
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 56;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
	}
	
	States
	{
		Spawn:
			DEM2 A 0 NoDelay;
			DEM2 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM2 ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			DEM2 EE 4;
			Goto See;
		Pain.Kick:
			DEM2 E 4;
			DEM2 E 4 A_KCPain();
			DEM2 EEEE 4;
			Goto See;
		Melee:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 F 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM2 G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(2,3) * random(1,8));
			}
			Goto See;
		Missile:
			DEM2 E 0 A_DynamicMusic();
			DEM2 E 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM2 F 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM2 G 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_SpawnProjectile("Demon2FX1New", 62, 0);
			}
			Goto See;
		Death:
			DEM2 HI 6;
			DEM2 J 6 A_Scream();
			DEM2 K 6 A_NoBlocking();
			DEM2 L 6 A_QueueCorpse();
			DEM2 MNO 6;
			DEM2 P -1;
			Stop;
		XDeath:
			DEM2 H 6;
			DEM2 I 6 
			{
				A_SpawnItemEx("Demon2Chunk1", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle+90), frandom[DemonChunks](1, 4.984375)*sin(angle+90), 8, 90, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk2", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk3", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk4", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
				A_SpawnItemEx("Demon2Chunk5", 0, 0, 45, frandom[DemonChunks](1, 4.984375)*cos(angle-90), frandom[DemonChunks](1, 4.984375)*sin(angle-90), 8, 270, ChunkFlags);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
		Raise:
			DEM2 O 6;
			DEM2 NMLKJIH 6;
			Goto See;
	}
}
class Demon2FX1New : KCEffectProjectile // replaces Demon2FX1
{
	default
	{
		Tag "Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		Speed 15;
		Radius 10;
		Height 6;
		DamageType "Poison";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D2FX AABBCCDDEEFF 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//ACS_NamedExecuteAlways("BuffTimer",0,8,16,random(140,210)); // Poison for 4-6 seconds [tics] (do not ignore God/Invuln/Mercy-Invuln)
					}
				}
			}
		Death2:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
}
class BrownChaosSerpentGhostNew : BrownChaosSerpentNew // replaces Demon2Mash
{
	default
	{
		Tag "Chaos Serpent [Brown] (Ghost)";
		+NOBLOOD;
		+BLASTED;
		-TELESTOMP;
		+NOICEDEATH;
		RenderStyle "Translucent";
		Alpha 0.4;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 1.125;
		Painchance "Fire", 63;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor "CherryBomb", 1.0625;
		Painchance "CherryBomb", 59;
		DamageFactor "Bonk", 0.5;
		Painchance "Bonk", 25;
		DamageFactor "Cricket", 0.75;
		Painchance "Cricket", 37;
		DamageFactor "Lead", 2.0;
		Painchance "Lead", 100;
		DamageFactor "Chop", 0.75;
		Painchance "Chop", 37;
		DamageFactor "Breakfast", 1.5;
		Painchance "Breakfast", 75;
		DamageFactor "Suck", 2.67;
		Painchance "Suck", 134;
		DamageFactor "Dust", 2.5;
		Painchance "Dust", 125;
		DamageFactor "BRocket", 2.0;
		Painchance "BRocket", 100;
		DamageFactor "Popper", 3.0;
		Painchance "Popper", 150;
		DamageFactor "Spinner", 1.5;
		Painchance "Spinner", 75;
		DamageFactor "Beats", 3.0;
		Painchance "Beats", 150;
	}
}
class Demon3Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			RDMA A 4;
			RDMA A 10 A_QueueCorpse();
			RDMA A 20;
			Wait;
		Death:
			RDMA A -1;
			Stop;
	}
}
class Demon3Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			RDMB A 4;
			RDMB A 10 A_QueueCorpse();
			RDMB A 20;
			Wait;
		Death:
			RDMB A -1;
			Stop;
	}
}
class Demon3Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			RDMC A 4;
			RDMC A 10 A_QueueCorpse();
			RDMC A 20;
			Wait;
		Death:
			RDMC A -1;
			Stop;
	}
}
class Demon3Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			RDMD A 4;
			RDMD A 10 A_QueueCorpse();
			RDMD A 20;
			Wait;
		Death:
			RDMD A -1;
			Stop;
	}
}
class Demon3Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			RDME A 4;
			RDME A 10 A_QueueCorpse();
			RDME A 20;
			Wait;
		Death:
			RDME A -1;
			Stop;
	}
}
class MagmaChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Magma]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 25;
		DamageFactor "Fire", 0.5;
		Painchance "Ice", 100;
		DamageFactor "Ice", 2.0;
		Mass 330; // 220
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "Orange";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Obituary "%o was blasted by a Magma Serpent.";
		HitObituary "%o was swallowed by a Magma Serpent.";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
	}
	
	States
	{
		Spawn:
			RDMN A 0 NoDelay;
			RDMN AA 10 A_Look();
			goto Spawn+1;
		See:
			RDMN ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			RDMN E 0 A_DynamicMusic();
			RDMN E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN F 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			RDMN G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			RDMN E 0 A_DynamicMusic();
			RDMN E 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			RDMN F 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			RDMN G 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_SpawnProjectile("Demon3FX",62,0,0,0);
			}
			Goto See;

		Pain:
			RDMN E 4;
			RDMN E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			RDMN E 4;
			RDMN E 4 A_KCPain();
			RDMN EE 4;
			Goto See;
		Pain.Kick:
			RDMN E 4;
			RDMN E 4 A_KCPain();
			RDMN EEEE 4;
			Goto See;

		Death:
			RDMN HI 6;
			RDMN J 6 A_Scream();
			RDMN K 6 A_NoBlocking();
			RDMN L 6  A_QueueCorpse();
			RDMN MN 6;
			RDMN O 6;
			RDMN P -1;
			Stop;
		XDeath:
			RDMN H 6;
			RDMN I 6 
			{
				A_SpawnItemEx("Demon3Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon3Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon3Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625),1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon3FX : KCProjectile
{
	default
	{
		Tag "Magmatized Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			RDFX AABBCC 2 Bright 
			{
				A_SpawnItemEx("Demon3FX1Trail");
			}
			Loop;
		Death:
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 A 4 BRIGHT A_SpawnProjectile("HrVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			XPL1 B 4 BRIGHT A_Explode(32,52,0);
			XPL1 CDEF 4 BRIGHT;
			Stop;
	}
}
class Demon3FX1Trail : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Gravity 0;
		Speed 1;
		Scale 1.1;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+CLIENTSIDEONLY;
		+FORCEXYBILLBOARD;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			FBL1 CDEFG 4;
			Stop;
	}
}
class HrVolcanoTBlast : KCProjectile
{
	default
	{
		Tag "Magmatized VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		+NODAMAGETHRUST;
		Gravity 0.825;
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		Damagetype "Fire";
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			VTFB AABB 2 BRIGHT;
			Loop;
		Death:
			SFFI CBABCDE 4 BRIGHT;
			Stop;
	}
}
// Black Serpent [Demon4]
class Demon4Chunk1 : DemonChunk
{
	States
	{
		Spawn:
			BDMA A 4;
			BDMA A 10 A_QueueCorpse();
			BDMA A 20;
			Wait;
		Death:
			BDMA A -1;
			Stop;
	}
}
class Demon4Chunk2 : DemonChunk
{
	States
	{
		Spawn:
			BDMB A 4;
			BDMB A 10 A_QueueCorpse();
			BDMB A 20;
			Wait;
		Death:
			BDMB A -1;
			Stop;
	}
}
class Demon4Chunk3 : DemonChunk
{
	States
	{
		Spawn:
			BDMC A 4;
			BDMC A 10 A_QueueCorpse();
			BDMC A 20;
			Wait;
		Death:
			BDMC A -1;
			Stop;
	}
}
class Demon4Chunk4 : DemonChunk
{
	States
	{
		Spawn:
			BDMD A 4;
			BDMD A 10 A_QueueCorpse();
			BDMD A 20;
			Wait;
		Death:
			BDMD A -1;
			Stop;
	}
}
class Demon4Chunk5 : DemonChunk
{
	States
	{
		Spawn:
			BDME A 4;
			BDME A 10 A_QueueCorpse();
			BDME A 20;
			Wait;
		Death:
			BDME A -1;
			Stop;
	}
}
class BlackChaosSerpentNew : BrownChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Black]";
		Health 375; // 250
		Speed 16; // 13
		Radius 32;
		Height 64;
		Mass 330; // 220
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Fire", 37 ;
		DamageFactor "Fire", 0.75;
		Painchance "Ice", 75;
		DamageFactor "Ice", 1.5;
		Painchance "Poison", 16;
		DamageFactor "Poison", 0.33;
		Painchance "PoisonElemental", 5;
		DamageFactor "PoisonElemental", 0.1;
		Monster;
		+TELESTOMP;
		+FLOORCLIP;
		meleerange 82;
		BloodColor "00 80 00";
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was envenomed by a Black Serpent.";
		HitObituary "%o was devoured by a Black Serpent.";
	}

	States
	{
		Spawn:
			DEM4 A 0 NoDelay;
			DEM4 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM4 ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 F 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM4 G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(3,4) * random(1,8));
			}
			Goto See;
		Missile:
			DEM4 E 0 A_DynamicMusic();
			DEM4 E 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM4 F 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM4 G 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_SpawnProjectile("Demon4FX",62,0,0,0);
			}
			Goto See;

		Pain:
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			DEM4 EE 4;
			Goto See;
		Pain.Kick:
			DEM4 E 4;
			DEM4 E 4 A_KCPain();
			DEM4 EEEE 4;
			Goto See;
		Death:
			DEM4 HI 6;
			DEM4 J 6 A_Scream();
			DEM4 K 6 A_NoBlocking();
			DEM4 L 6 A_QueueCorpse();
			DEM4 MNO 6;
			DEM4 P -1;
			Stop;
		XDeath:
			DEM4 H 6;
			DEM4 I 6 
			{
				A_SpawnItemEx("Demon4Chunk1", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 90);
				A_SpawnItemEx("Demon4Chunk2", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk3", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk4", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
				A_SpawnItemEx("Demon4Chunk5", 0,0,45, 1+(random[DemonChunks](0,255)*0.015625), 1+(random[DemonChunks](0,255)*0.015625), ChunkFlags, 270);
			}
			Goto Death+3;
		Ice:
			DEMN Q 5 A_FreezeDeath();
			DEMN Q 1 A_FreezeDeathChunks();
			Wait;
	}
}
class Demon4FX : KCEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned Serpentfire";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		PoisonDamage 32;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		DamageType "Fire";
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		Alpha 0.99;
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D4FX AABB 2 Bright 
			{
				A_SpawnItemEx("BlackDemonTrail", 0, 0, 0, 0, 0, 0, 0, 0);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			TNT1 AA 0 A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX C 4 BRIGHT A_SpawnProjectile("PoisonVolcanoTBlast",0,0,frandom(0,360),CMF_TRACKOWNER,frandom(0,-60));
			D4FX D 4 BRIGHT A_Explode(32,52,0);
			D4FX EFGH 4 BRIGHT;
			Stop;
	}
}
class BlackDemonTrail : KCEffectProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 10;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+DONTSPLASH;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			D4TR DEFGH 4;
			Stop;
	}
}
class PoisonVolcanoTBlast : KCEffectProjectile
{
	default
	{
		Tag "Magmatized Poisoned VolcanoBlast";
		DamageFunction (random(1,8));
		Radius 8;
		Height 6;
		Speed 20;
		PoisonDamage 5;
		+ADDITIVEPOISONDURATION
		+ADDITIVEPOISONDAMAGE
		+NODAMAGETHRUST;
		Gravity 0.825;
		DamageType "Poison";
		DamageType "Fire";
		Obituary "%o was envenomed by a Serpent.";
		+NOBLOCKMAP;
		+MISSILE;
		+DROPOFF;
		+NOTELEPORT;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			BPBL AABB 2 BRIGHT;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(24);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//
					}
				}
			}
		Death2:
			BPBL EDCDEFG 4 BRIGHT;
			Stop;
	}
}
class EtherealChaosSerpentNew : GreenChaosSerpentNew
{
	default
	{
		Tag "Chaos Serpent [Ethereal]";
		Health 1750; // 1400
		Speed 19; // 13
		Radius 32;
		Height 64;
		Mass 550; // 220
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 15; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.15;
		Monster;
		+BOSS;
		+TELESTOMP;
		+FLOORCLIP;
		+NODAMAGETHRUST;
		+NOBLOOD;
		+NOICEDEATH;
		+GHOST;
		+DONTMORPH;
		RenderStyle "Add";
		meleerange 82;
		SeeSound "DemonSight";
		AttackSound "DemonAttack";
		PainSound "DemonPain";
		DeathSound "DemonDeath";
		ActiveSound "DemonActive";
		Species "ChaosSerpent";
		+DONTHARMSPECIES;
		Obituary "%o was blasted by a Spectral Chaos Serpent.";
	}
	
	States
	{
		Spawn:
			DEM5 A 0 NoDelay;
			DEM5 AA 10 A_Look();
			goto Spawn+1;
		See:
			DEM5 ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 F 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			DEM5 G 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomMeleeAttack(random(4,5) * random(2,9));
			}
			Goto See;
		Missile:
			DEM5 E 0 A_DynamicMusic();
			DEM5 E 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEM5 F 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
			}
			DEM5 G 0 
			{
				if (A_JumpIfCloser(512,"Missile2") && random(1,256) <= 208) 
				{
					user_shotsfired = 0;
					user_shotsfiredmax = 10 + (random(1,256) & 2) + (CountInv("MonsterLevel") / 15) + (CountInv("MonsterLevel") / 30) + (CountInv("MonsterLevel") / 60);		
					return resolvestate("Missile2"); 
				}
				return resolvestate(null);
			}
			DEM5 G 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }

				A_SpawnProjectile("Demon5FX1", 62, 0, -10);
				A_SpawnProjectile("Demon5FX1", 62, 0, 0);
				A_SpawnProjectile("Demon5FX1", 62, 0, 10);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					A_SpawnProjectile("Demon5FX1", 62, 0, -20);
					A_SpawnProjectile("Demon5FX1", 62, 0, 20);
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
					{
						A_SpawnProjectile("Demon5FX1", 62, 0, -30);
						A_SpawnProjectile("Demon5FX1", 62, 0, 30);
					}
				}
			}
			Goto See;
		Missile2:
			DEM5 E 0 A_DynamicMusic();
			DEM5 G 2 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }

				A_SpawnProjectile("Demon5Jet", 62, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					A_SpawnProjectile("Demon5Jet", 62, 0, -4);
					A_SpawnProjectile("Demon5Jet", 62, 0, 4);
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
					{
						A_SpawnProjectile("Demon5Jet", 62, 0, -8);
						A_SpawnProjectile("Demon5Jet", 62, 0, 8);
					}
				}

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("See"); }
				return resolvestate(null);
			}
			Loop;

		Pain:
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			Goto See;
		Pain.Fist:
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			DEM5 EE 4;
			Goto See;
		Pain.Kick:
			DEM5 E 4;
			DEM5 E 4 A_KCPain();
			DEM5 EEEE 4;
			Goto See;
		Death:
			---- H 0 A_NoBlocking();
			---- H 2 A_FadeOut();
			Wait;
		XDeath:
			Goto Death;
		Ice:
			Goto Death;
	}
}
class Demon5FX1 : KCEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (5 * random(1,8));
		Speed 15;
		FastSpeed 20;
		Radius 10;
		Height 6;
		+NODAMAGETHRUST;
		Projectile;
		+SPAWNSOUNDSOURCE;
		RenderStyle "Add";
		SeeSound "DemonMissileFire";
		DeathSound "DemonMissileExplode";
	}
	
	States
	{
		Spawn:
			D5FX AABBCCDDEEFF 2 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(30);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5FX G 4 Bright A_Explode(32,52,0);
			D5FX HIJ 4 Bright;
			D5FX KL 3 Bright;
			Stop;
	}
}
class Demon5Jet : KCEffectProjectile
{
	default
	{
		Tag "Spirit Breath";
		DamageFunction (random(1,4));
		Radius 14;
		Height 12;
		Speed 16;
		PROJECTILE;
		ProjectileKickback 0;
		//+RIPPER;
		+BLOODLESSIMPACT;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 0.5;
		SeeSound "DemonMissileFire";
		DeathSound "FireBall";
		//DamageType "ManaDrain";
	}
	States
	{
		Spawn:
			D5JT AABBCC 2 BRIGHT
			{
				A_Weave(1, 2, 0.25, 0.5);
				A_FadeOut(0.034);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(90);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						//if (player.CountInv("PikeAmmo") > 0) player.A_TakeInventory("PikeAmmo",1);
					}
				}
			}
		Death2:
			D5JT DEFG 2 BRIGHT;
			Stop;
	}
}
class IceGuyNew : KCCreature // replaces IceGuy
{
	default
	{
		Tag "Wendigo";
		Health 120;
		Painchance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 4.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 0.01;
		Painchance "Ice", 1;
		Speed 14;
		Radius 22;
		Height 75;
		Mass 150;
		DamageType "Ice";
		Monster;
		+NOBLOOD;
		+TELESTOMP;
		+NOICEDEATH;
		SeeSound "IceGuySight";
		AttackSound "IceGuyAttack";
		ActiveSound "IceGuyActive";
		Obituary "$OB_ICEGUY"; // "%o was frozen solid by a Wendigo.";
	}
	
	States
	{
		Spawn:
			ICEY A 0 NoDelay;
			ICEY A 10 A_IceGuyLook();
			goto Spawn+1;
		See:
			ICEY A 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY B 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_IceGuyChase("Melee","Missile",0,1,3,1,1);
			}
			ICEY CD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			ICEY A 1 A_KCPain();
			Goto See;
		Missile:
			ICEY E 0 A_DynamicMusic(); 
			ICEY EF 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(1); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			ICEY G 8 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				A_IceGuyAttack("IceGuyFXNew");
			}
			ICEY F 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		Death:
			ICEY A 1;
			ICEY A 1 A_IceGuyDie();
			Stop;
		Inactive:
			ICEY A -1;
			Goto See;
	}
}
class IceGuyFXNew : KCEffectProjectile // replaces IceGuyFX
{
	default
	{
		Tag "Spiked Ice Ball";
		DamageFunction (1 * random(1,8));
		Speed 14;
		Radius 8;
		Height 10;
		DamageType "Ice";
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "IceGuyMissileExplode";
	}
	
	States
	{
		Spawn:
			ICPR ABC 3 Bright 
			{
				A_SpawnItemEx("IceFXPuff", 0, 0, 2);
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(16);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(70,105),401);
					}
				}
			}
		Death2:
			ICPR D 4 Bright;
			ICPR E 4 Bright A_IceGuyMissileExplode();
			ICPR FG 4 Bright;
			ICPR H 3 Bright;
			Stop;
	}
}
class IceGuyFX2New : KCEffectProjectile // replaces IceGuyFX2
{
	default
	{
		Tag "Spiked Ice Shard";
		DamageFunction (1 * random(1,8));
		Speed 10;
		Radius 4;
		Height 4;
		DamageType "Ice";
		Gravity 0.125;
		+NOBLOCKMAP;
		+DROPOFF;
		+MISSILE;
		+NOTELEPORT;
		+STRIFEDAMAGE;
	}
	
	States
	{
		Spawn:
			ICPR NOP 3 Bright
			{
			}
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(32);
					if (random(1,user_ailmentmaxchance) <= 3 && user_canafflict)
					{
						A_InflictSlow(random(35,52),401);
					}
				}
			}
		Death2:
			TNT1 A 0 Bright;
			Stop;
	}
}
class StalkerNew : KCCreature { } // Filler for later implementation
class StalkerLeaderNew : KCCreature { } // Filler for later implementation
class IceStalker : KCCreature { } // Filler for later implementation
class IceStalkerLeader : KCCreature { } // Filler for later implementation
class BishopNew : KCCreature { } // Filler for later implementation
class DarkDisciple : KCCreature { } // Filler for later implementation
class VampireKC : KCCreature { } // Filler for later implementation
class DarkPatriarch : KCCreature { } // Filler for later implementation
class WraithNew : KCCreature { } // Filler for later implementation
class DragonNew : KCCreature { } // Filler for later implementation
class SorcBallBase : KCProjectile
{
	Default
	{
		Tag "Heresiarch Mana Cube";
		Speed 10;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererBigBallExplode";
	}

	double OldAngle, AngleOffset;

	//============================================================================
	//
	// SorcBall::DoFireSpell
	//
	//============================================================================

	virtual void DoFireSpell ()
	{
		CastSorcererSpell ();
		target.args[3] = HeresiarchNew.SORC_STOPPED;
	}

	
	virtual void SorcUpdateBallAngle ()
	{
	}
	
	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// don't blast sorcerer balls
		return false;
	}
	
	//============================================================================
	//
	// ASorcBall::CastSorcererSpell
	//
	// Make noise and change the parent sorcerer's animation
	//
	//============================================================================

	virtual void CastSorcererSpell ()
	{
		target.A_StartSound("SorcererSpellCast", CHAN_VOICE);

		// Put sorcerer into throw spell animation
		if (target.health > 0)
			target.SetStateLabel ("Missile2");
	}

	//============================================================================
	//
	// A_SorcBallOrbit
	//
	// - actor is ball
	//============================================================================

	void A_SorcBallOrbit()
	{
		// [RH] If no parent, then die instead of crashing
		if (target == null || target.health <= 0)
		{
			SetStateLabel ("Pain");
			return;
		}

		int mode = target.args[3];
		HeresiarchNew parent = HeresiarchNew(target);
		double dist = parent.radius - (radius*2);

		double prevangle = OldAngle;
		double baseangle = parent.BallAngle;
		double curangle = baseangle + AngleOffset;

		angle = curangle;

		switch (mode)
		{
		case HeresiarchNew.SORC_NORMAL:			// Balls rotating normally
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_DECELERATE:		// Balls decelerating
			A_DecelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_ACCELERATE:		// Balls accelerating
			A_AccelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_STOPPING:			// Balls stopping
			if ((parent.StopBall == GetClass()) &&
				(parent.args[1] > HeresiarchNew.SORCBALL_SPEED_ROTATIONS) &&
				absangle(curangle, parent.angle) < 42.1875)
			{
				// Can stop now
				target.args[3] = HeresiarchNew.SORC_FIRESPELL;
				target.args[4] = 0;
				// Set angle so self angle == sorcerer angle
				parent.BallAngle = parent.angle - AngleOffset;
			}
			else
			{
				SorcUpdateBallAngle ();
			}
			break;

		case HeresiarchNew.SORC_FIRESPELL:			// Casting spell
			if (parent.StopBall == GetClass())
			{
				// Put sorcerer into special throw spell anim
				if (parent.health > 0)
					parent.SetStateLabel("Missile1");

				DoFireSpell ();
			}
			break;

		case HeresiarchNew.SORC_FIRING_SPELL:
			if (parent.StopBall == GetClass())
			{
				if (special2-- <= 0)
				{
					// Done rapid firing 
					parent.args[3] = HeresiarchNew.SORC_STOPPED;
					// Back to orbit balls
					if (parent.health > 0)
						parent.SetStateLabel("Missile2");
				}
				else
				{
					// Do rapid fire spell
					A_SorcOffense2();
				}
			}
			break;

		default:
			break;
		}

		// The comparison here depends on binary angle semantics and cannot be done in floating point.
		// It also requires very exact conversion that must be done natively.
		if (BAM(curangle) < BAM(prevangle) && (parent.args[4] == HeresiarchNew.SORCBALL_TERMINAL_SPEED))
		{
			parent.args[1]++;			// Bump rotation counter
			// Completed full rotation - make woosh sound
			A_StartSound("SorcererBallWoosh", CHAN_BODY);
		}
		OldAngle = curangle;		// Set previous angle

		Vector3 pos = parent.Vec3Angle(dist, curangle, -parent.Floorclip + parent.Height);
		SetOrigin (pos, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}

	//============================================================================
	//
	// A_SorcOffense2
	//
	// Actor is ball
	//
	//============================================================================

	void A_SorcOffense2()
	{
		Actor parent = target;
		Actor dest = parent.target;

		// [RH] If no enemy, then don't try to shoot.
		if (dest == null)
		{
			return;
		}

		// Heresiarch's Purple Fireballs
		string basemissile4 = "SorcFX4New";

		let parentHeresiarch = HeresiarchNew(parent);

		int index = args[4];
		args[4] = (args[4] + 15) & 255;
		double delta = sin(index * (360 / 256.f)) * HeresiarchNew.SORCFX4_SPREAD_ANGLE;

		double ang1 = Angle + delta;
		Actor mo = parent.SpawnMissileAngle(basemissile4, ang1, 0);
		if (mo)
		{
			mo.special2 = 35*5/2;		// 5 seconds
			double dist = mo.DistanceBySpeed(dest, mo.Speed);
			mo.Vel.Z = (dest.pos.z - mo.pos.z) / dist;
		}
	}

	//============================================================================
	//
	// A_AccelBalls
	//
	// Increase ball orbit speed - actor is ball
	//
	//============================================================================

	void A_AccelBalls()
	{
		HeresiarchNew sorc = HeresiarchNew(target);

		if (sorc.args[4] < sorc.args[2])
		{
			sorc.args[4]++;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
			if (sorc.args[4] >= HeresiarchNew.SORCBALL_TERMINAL_SPEED)
			{
				// Reached terminal velocity - stop balls
				sorc.A_StopBalls();
			}
		}
	}

	//============================================================================
	//
	// A_DecelBalls
	//
	// Decrease ball orbit speed - actor is ball
	//
	//============================================================================

	void A_DecelBalls()
	{
		Actor sorc = target;

		if (sorc.args[4] > sorc.args[2])
		{
			sorc.args[4]--;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
		}
	}


	void A_SorcBallExplode()
	{
		bNoBounceSound = true;
		A_Explode(255, 255);
	}
	
	//============================================================================
	//
	// A_SorcBallPop
	//
	// Ball death - bounce away in a random direction
	//
	//============================================================================

	void A_SorcBallPop()
	{
		A_StartSound("SorcererBallPop", CHAN_BODY, 1, false, ATTN_NONE);
		bNoGravity = false;
		Gravity = 1. / 8;

		Vel.X = ((random[Heresiarch]()%10)-5);
		Vel.Y = ((random[Heresiarch]()%10)-5);
		Vel.Z = (2+(random[Heresiarch]()%3));
		args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;	// Bounce time unit
		args[3] = 5;					// Bounce time in seconds
	}
	
	//============================================================================
	//
	// A_BounceCheck
	//
	//============================================================================

	void A_BounceCheck ()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererBigBallExplode", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
	}
}
// First ball (purple) - fires projectiles ----------------------------------
class SorcBall1Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMP A 5 A_SorcBallPop;
			SBMP B 2 A_BounceCheck;
			Wait;
		Death:
			SBS4 D 5 A_SorcBallExplode;
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL1_ANGLEOFFSET;
	}

	//============================================================================
	//
	// SorcBall1::CastSorcererSpell
	//
	// Offensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{

		Super.CastSorcererSpell ();

		Actor parent = target;

		// Heresiarch's Bouncing Lavaballs
		string basemissile1 = "SorcFX1New";

		let parentHeresiarch = HeresiarchNew(parent);

		double ang1 = Angle + 70;
		double ang2 = Angle - 70;
		Class<Actor> cls = basemissile1;
		Actor mo = parent.SpawnMissileAngle (cls, ang1, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
		mo = parent.SpawnMissileAngle (cls, ang2, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
	}

	
	//============================================================================
	//
	// ASorcBall1::SorcUpdateBallAngle
	//
	// Update angle if first ball
	//============================================================================

	override void SorcUpdateBallAngle ()
	{
		(HeresiarchNew(target)).BallAngle += target.args[4];
	}

	//============================================================================
	//
	// SorcBall1::DoFireSpell
	//
	//============================================================================

	override void DoFireSpell ()
	{
		if (random[Heresiarch]() < 200)
		{
			target.A_StartSound("SorcererSpellCast", CHAN_VOICE, 1, false, ATTN_NONE);
			special2 = HeresiarchNew.SORCFX4_RAPIDFIRE_TIME;
			args[4] = 128;
			target.args[3] = HeresiarchNew.SORC_FIRING_SPELL;
		}
		else
		{
			Super.DoFireSpell ();
		}
	}
}
// Second ball (blue) - generates the shield --------------------------------
class SorcBall2Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMB A 5 A_SorcBallPop;
			SBMB B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL2_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall2::CastSorcererSpell
	//
	// Defensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Super.CastSorcererSpell ();

		Actor parent = target;
		Actor mo = Spawn("SorcFX2", Pos + (0, 0, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT), ALLOW_REPLACE);
		parent.bReflective = true;
		//parent.bInvulnerable = true;
		parent.bNoPain = true;
		parent.bNoBlood = true;
		parent.bBuddha = true;
		A_GiveInventory("HeresiarchShieldDefense",1,AAPTR_TARGET);
		parent.args[0] = HeresiarchNew.SORC_DEFENSE_TIME;
		if (mo) mo.target = parent;
	}
}
// Third ball (green) - summons Bishops -------------------------------------
class SorcBall3Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMG A 5 A_SorcBallPop;
			SBMG B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL3_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall3::CastSorcererSpell
	//
	// Reinforcements
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Actor mo;
		Super.CastSorcererSpell ();
		Actor parent = target;

		double ang1 = Angle - 45;
		double ang2 = Angle + 45;
		Class<Actor> cls = "SorcFX3";

		if (parent.health < ((parent.SpawnHealth() + parent.Stamina) / 4))
		{
			// Spawn 2 at a time
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
			mo = parent.SpawnMissileAngle(cls, ang2, 4.);
			if (mo) mo.target = parent;
		}			
		else
		{
			if (random[Heresiarch]() < 128)	ang1 = ang2;
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
		}
	}
}
// Sorcerer spell 1 (The burning, bouncing head thing) ----------------------
class SorcFX1Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Bouncing Fireface";
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		-NOGRAVITY
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceFactor 1.0;
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}

	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek;
			Loop;
		Death:
			FHFX S 2 Bright A_Explode(30, 128);
			FHFX SS 6 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX1Seek
	//
	// Yellow spell - offense
	//
	//============================================================================

	void A_SorcFX1Seek()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererHeadScream", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
		A_SeekerMissile(2, 6);
	}
	
}
// Sorcerer spell 2 (The visible part of the shield) ------------------------
class SorcFX2Base : KCProjectile
{
	Default
	{
		Speed 15;
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
	}

	states
	{
		Spawn:
			SBS2 A 3 Bright A_SorcFX2Split;
			Loop;
		Orbit:
			SBS2 A 2 Bright;
			SBS2 BCDEFGHIJKLMNOPA 2 Bright A_SorcFX2Orbit;
			Goto Orbit+1;
		Death:
			SBS2 A 10;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX2Split
	//
	// Blue spell - defense
	//
	//============================================================================
	//
	// FX2 Variables
	//		specialf1		current angle
	//		special2
	//		args[0]		0 = CW,  1 = CCW
	//		args[1]		
	//============================================================================

	// Split ball in two
	void A_SorcFX2Split()
	{
		Actor mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 0;									// CW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 1;									// CCW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		Destroy ();
	}

	//============================================================================
	//
	// A_SorcFX2Orbit
	//
	// Orbit FX2 about sorcerer
	//
	//============================================================================

	void A_SorcFX2Orbit ()
	{
		Actor parent = target;

		// [RH] If no parent, then disappear
		if (parent == null)
		{
			Destroy();
			return;
		}

		double dist = parent.radius;

		if ((parent.health <= 0) ||		// Sorcerer is dead
			(!parent.args[0]))				// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bInvulnerable = false;
			parent.bNoPain = false; 
			parent.bNoBlood = false;
			parent.bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_TARGET);
		}

		if (args[0] && (parent.args[0]-- <= 0))		// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bNoPain = false;
			parent.bNoBlood = false;
			parent.bBuddha = false;
		}

		Vector3 posi;
		// Move to new position based on angle
		if (args[0])		// Counter clock-wise
		{
			specialf1 += 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 15 * cos(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}
		else							// Clock wise
		{
			specialf1 -= 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 20 * sin(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}

		SetOrigin (posi, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}
}
// Sorcerer spell 3 (The Bishop spawner) ------------------------------------
class SorcFX3Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Spawn Sphere";
		Speed 15;
		Radius 22;
		Height 65;
		+NOBLOCKMAP
		+MISSILE
		+NOTELEPORT
		SeeSound "SorcererBishopSpawn";
	}

	States
	{
		Spawn:
			SBS3 ABC 2 Bright;
			Loop;
		Death:
			SBS3 A 4 Bright;
			BISH P 4 A_SorcererBishopEntry;
			BISH ON 4;
			BISH MLKJIH 3;
			BISH G 3 A_SpawnBishop;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcererBishopEntry
	//
	//============================================================================

	void A_SorcererBishopEntry()
	{
		Spawn("SorcFX3Explosion", Pos, ALLOW_REPLACE);
		A_StartSound(SeeSound, CHAN_VOICE);
	}

	//============================================================================
	//
	// A_SpawnBishop
	//
	// Green spell - spawn bishops
	//
	//============================================================================

	void A_SpawnBishop()
	{
		Actor mo = Spawn("Bishop", Pos, ALLOW_REPLACE);
		if (mo)
		{
			if (!mo.TestMobjLocation())
			{
				mo.ClearCounters();
				mo.Destroy ();
			}
			else if (target != null)
			{
				// [RH] Make the new bishops inherit the Heriarch's target
				mo.CopyFriendliness (target, true);
				mo.master = target;
			}
		}
		Destroy ();
	}
}
// Sorcerer spell 4 (The purple projectile) ---------------------------------
class SorcFX4Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Magic Missile";
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		DeathSound "SorcererBallExplode";
	}

	States
	{
		Spawn:
			SBS4 ABC 2 Bright A_SorcFX4Check;
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright A_Explode(20, 128);
			SBS4 FGH 2 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX4Check
	//
	// FX4 - rapid fire balls
	//
	//============================================================================

	void A_SorcFX4Check()
	{
		if (special2-- <= 0)
		{
			SetStateLabel ("Death");
		}
	}
}
// Heresiarch
class SorcBall1New : SorcBall1Base // replaces SorcBall1
{
	States
	{
		Death:
			SBS4 D 0 { bNOBOUNCESOUND = true; }
			SBS4 D 5 A_Explode(255, 255);
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}
}
class SorcBall2New : SorcBall2Base // replaces SorcBall2
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcBall3New : SorcBall3Base // replaces SorcBall3
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcFX1New : SorcFX1Base // replaces SorcFX1
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		+HEXENBOUNCE;
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek();
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}
class SorcFX4New : SorcFX4Base // replaces SorcFX4
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}
class HeresiarchNew : KCUniqueBoss // replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBallBase> StopBall;
	int HPLowRange;
	int HPCritRange;
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 12500; // 50000
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3 NoDelay;
			SORC A 0
			{
				HPLowRange = user_HPLowRange;
				HPCritRange = user_HPCritRange;
			}
			SORC A 2 
			{
				A_ShieldCheck();
				A_SorcSpinBalls();
			}
		Idle:
			SORC A 10 
			{
				A_ShieldCheck();
				A_Look();
			}
			Wait;
		See:
			SORC A 0 
			{
				A_ShieldCheck();
			}
			SORC ABCD 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = 1; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_ShieldCheck();
				A_Chase();
			}
			Loop;
		Pain:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			Goto See;
		Pain.Fist:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC G 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Pain.Kick:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC GG 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			SORC F 6 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_SpeedBalls();
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Wait;
		Missile1:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC E 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_ShieldCheck();
			}
			SORC E 6 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_SpawnFizzle();
				A_ShieldCheck();
			}
			SORC E 5 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(4); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Goto Missile1+1;
		Missile2:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 2 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_ShieldCheck();
			}
			SORC E 2 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_SorcBossAttack();
				A_ShieldCheck();
			}
			Goto See;
		Death:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC H 5 Bright
			{
				A_ShieldCheck();
			}
			SORC I 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC J 5 Bright 
			{
				A_ShieldCheck();
				A_Scream();
			}
			SORC KLMNOPQRST 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC U 5 Bright 
			{
				A_ShieldCheck();
				A_NoBlocking();
			}
			SORC VWXY 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_ShieldCheck()
	{
		if (args[0] <= 0)
		{
			bReflective = false; 
			bInvulnerable = false; 
			bNoPain = false; 
			bNoBlood = false; 
			bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_DEFAULT);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2Base";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) / 2)) && (chance < 200))
		{
			StopBall = "SorcBall3Base";	// Green
		}
		else
		{
			StopBall = "SorcBall1Base";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1Base", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}
class ClericBossNew : KCCreature replaces ClericBoss
{
	default
	{
		Tag "\c[gold]Traductus, Grand Patriarch of the Church";
		Health 3200; // 12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 5;
		DamageFactor "Ice", 1.8;
		Painchance "Ice", 90;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		Reactiontime 8;
		MaxTargetRange 2048;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerClericPain";
		DeathSound "PlayerClericCrazyDeath";
		Obituary "$OBCBOSS";
	}
	
	States
	{
		Spawn:
			CLER A 0 NoDelay;
			CLER A 2;
			CLER A 3; //A_ClassBossHealth();
			CLER A 5 A_Look();
			goto Spawn+1;
		See:
			CLER ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			CLER H 4;
			CLER H 4 A_KCPain();
			Goto See;
		Pain.Fist:
			CLER H 4;
			CLER H 4 A_KCPain();
			CLER HH 4;
			Goto See;
		Pain.Kick:
			CLER H 4;
			CLER H 4 A_KCPain();
			CLER HHHH 4;
			Goto See;
		Melee:
		Missile:
			CLER E 0 A_DynamicMusic(); 
			CLER EF 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			CLER G 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_ClericAttack("HolyMissile");
			}
			Goto See;

		Death:
			CLER I 6;
			CLER K 6 A_Scream();
			CLER LL 6;
			CLER M 6 A_NoBlocking();
			CLER NOP 6;
			CLER Q -1;
			Stop;

		XDeath:
			CLER R 5 A_Scream();
			CLER S 5;
			CLER T 5 A_NoBlocking();
			CLER UVWXYZ 5;
			CLER [ -1;
			Stop;
		Ice:
			CLER \ 5 A_FreezeDeath();
			CLER \ 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			CLER C 5 Bright A_StartSound("PlayerClericBurnDeath");
			FDTH D 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class HolyMissileNew : KCProjectile replaces HolyMissile
{
	default
	{
		Tag "WraithVerge Shot";
		DamageFunction (4 * random(1,8));
		Speed 30;
		Radius 15;
		Height 8;
		Projectile;
		DamageType "Spiritual";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+EXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			SPIR PPPP 3 Bright 
			{
				A_SpawnItemEx("HolyMissilePuff");
			}
		Death:
			SPIR P 1 Bright 
			{
				A_CHolyAttack2("HolySpiritNew",4,105,85);
			}
			Stop;
	}
}
class HolySpiritNew : KCProjectile // replaces HolySpirit
{
	default
	{
		Tag "WraithVerge Spirit";
		DamageFunction (3 * random(1,8));
		Health 105;
		Speed 12;
		Radius 10;
		Height 6;
		Projectile;
		+RIPPER;
		+SEEKERMISSILE;
		+FOILINVUL;
		+SKYEXPLODE;
		+NOEXPLODEFLOOR;
		+CANBLAST;
		+EXTREMEDEATH;
		DamageType "Spiritual";
		RenderStyle "Translucent";
		Alpha 0.4;
		DeathSound "SpiritDie";
		Obituary "$OB_MPCWEAPWRAITHVERGE";
	}
	
	States
	{
		Spawn:
			SPIR AAB 2 A_CHolySeek;
			SPIR B 2 A_CHolyCheckScream;
			Loop;
		Death:
			SPIR D 4;
			SPIR E 4 A_Scream;
			SPIR FGHI 4;
			Stop;
	}
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int DoSpecialDamage (Actor target, int damage, Name damagetype)
	{
		int RandCall;

		string nm, nn, no, np;

		DSparilBase s2; 
		s2 = DSparilBase(target);
		
		string s2name;

		if (s2 != null)
		{
			s2name = s2.GetClassName();
			nm = "DSparilUnmountedNew";

			if (s2name == nm)
			{
				// D'Sparil teleports away
				if (random(1,1024) <= RandCall)
				{
					s2.DSparilTeleport();
					return -1;
				}
				return damage;
			}
			return damage;
		}
		return damage;
	}
	
	override bool Slam(Actor thing)
	{
		if (thing.bShootable && thing != target)
		{
			if (multiplayer && !deathmatch && thing.player && target.player)
			{
				// don't attack other co-op players
				return true;
			}
			if (thing.bReflective && (thing.player || thing.bBoss))
			{
				tracer = target;
				target = thing;
				return true;
			}
			if (thing.bIsMonster || thing.player)
			{
				tracer = thing;
			}
			if (random[SpiritSlam]() < 96)
			{
				int dam = 12;
				if (thing.player || thing.bBoss)
				{
					dam = 3;
					// ghost burns out faster when attacking players/bosses
					health -= 6;
				}
				
				thing.DamageMobj(self, target, dam, 'Melee');
				if (random[SpiritSlam]() < 128)
				{
					Spawn("HolyPuff", Pos, ALLOW_REPLACE);
					A_StartSound("SpiritAttack", CHAN_WEAPON);
					if (thing.bIsMonster && random[SpiritSlam]() < 128)
					{
						thing.Howl();
					}
				}
			}
			if (thing.health <= 0)
			{
				tracer = null;
			}
		}
		return true;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		if (tracer == source)
		{
			tracer = target;
			target = source;
		}
		return true;
	}

	//============================================================================
	//
	// CHolyFindTarget
	//
	//============================================================================

	private void CHolyFindTarget ()
	{
		Actor target;

		if ( (target = RoughMonsterSearch (6, true)) )
		{
			tracer = target;
			bNoClip = true;
			bSkullFly = true;
			bMissile = false;
		}
	}

	//============================================================================
	//
	// CHolySeekerMissile
	//
	// Similar to P_SeekerMissile, but seeks to a random Z on the target
	//============================================================================

	private void CHolySeekerMissile (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == NULL)
		{
			return;
		}
		if (!target.bShootable || (!target.bIsMonster && !target.player))
		{
			// Target died/target isn't a player or creature
			tracer = null;
			bNoClip = false;
			bSkullFly = false;
			bMissile = true;
			CHolyFindTarget();
			return;
		}
		double ang = deltaangle(angle, AngleTo(target));
		double delta = abs(ang);
		
		if (delta > thresh)
		{
			delta /= 2;
			if (delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if (ang > 0)
		{
			// Turn clockwise
			angle += delta;
		}
		else
		{
			// Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(level.time&15) 
			|| pos.z > target.pos.z + target.height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + ((random[HolySeeker]()*target.Height) / 256.);
			double deltaZ = newZ - pos.z;
			if (abs(deltaZ) > 15)
			{
				if (deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ / DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_CHolySeek
	//
	//============================================================================

	void A_CHolySeek()
	{
		health--;
		if (health <= 0)
		{
			Vel.X /= 4;
			Vel.Y /= 4;
			Vel.Z = 0;
			SetStateLabel ("Death");
			tics -= random[HolySeeker]()&3;
			return;
		}
		if (tracer)
		{
			CHolySeekerMissile (args[0], args[0]*2.);
			if (!((level.time+7)&15))
			{
				args[0] = 5+(random[HolySeeker]()/20);
			}
		}

		int xyspeed = (random[HolySeeker]() % 5);
		int zspeed = (random[HolySeeker]() % 5);
		A_Weave(xyspeed, zspeed, 4., 2.);
	}

	//============================================================================
	//
	// A_CHolyCheckScream
	//
	//============================================================================

	void A_CHolyCheckScream()
	{
		A_CHolySeek();
		if (random[HolyScream]() < 20)
		{
			A_StartSound("SpiritActive", CHAN_VOICE);
		}
		if (!tracer)
		{
			CHolyFindTarget();
		}
	}
}
class FighterBossNew : KCCreature replaces FighterBoss
{
	default
	{
		Tag "\c[gold]Zedek, Grand Marshal of the Legion";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.4;
		Painchance "Fire", 20;
		DamageFactor "Ice", 1.125;
		Painchance "Ice", 56;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Reactiontime 8;
		Meleerange 72;
		MaxTargetRange 2048;
		Speed 25;
		Radius 16;
		Height 64;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerFighterPain";
		DeathSound "PlayerFighterCrazyDeath";
		Obituary "$OB_FBOSS";
	}
	
	States
	{
		Spawn:
			PLAY A 0 NoDelay;
			PLAY A 2;
			PLAY A 3; //A_ClassBossHealth();
			PLAY A 5 A_Look();
			goto Spawn+1;
		See:
			PLAY ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1)
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1);
				}
			}
			Loop;
		Pain:
			PLAY G 4;
			PLAY G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			PLAY G 4;
			PLAY G 4 A_KCPain();
			PLAY GG 4;
			Goto See;
		Pain.Kick:
			PLAY G 4;
			PLAY G 4 A_KCPain();
			PLAY GGGG 4;
			Goto See;
		Melee:
		Missile:
			PLAY E 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			PLAY F 8 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FighterAttack("FSwordMissile");
			}
			Goto See;

		Death:
			PLAY H 6;
			PLAY I 6 A_Scream();
			PLAY JK 6;
			PLAY L 6 A_NoBlocking();
			PLAY M 6;
			PLAY N -1;
			Stop;

		XDeath:
			PLAY O 5 A_Scream();
			PLAY P 5 A_SkullPop();
			PLAY R 5 A_NoBlocking();
			PLAY STUV 5;
			PLAY W -1;
			Stop;
		Ice:
			PLAY X 5 A_FreezeDeath();
			PLAY X 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			FDTH A 5 Bright A_StartSound("PlayerFighterBurnDeath");
			FDTH B 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class FSwordMissileNew : KCProjectile replaces FSwordMissile
{
	default
	{
		Tag "Quietus Dart";
		DamageFunction (8 * random(1,8));
		Speed 30;
		Radius 16;
		Height 8;
		Projectile;
		+EXTREMEDEATH;
		DamageType "Magic";
		RenderStyle "Add";
		DeathSound "FighterSwordExplode";
		Obituary "$OB_MPFWEAPQUIETUS";
	}

	States
	{
		Spawn:
			FSFX ABC 3 Bright;
			Loop;
		Death:
			FSFX D 4 Bright;
			FSFX E 3 Bright A_FSwordFlames();
			FSFX F 4 Bright A_Explode(64, 128, 0);
			FSFX G 3 Bright;
			FSFX H 4 Bright;
			FSFX I 3 Bright;
			FSFX J 4 Bright;
			FSFX KLM 3 Bright;
			Stop;
	}
}
class MageBossNew : KCCreature replaces MageBoss
{
	default
	{
		Tag "\c[gold]Menelkir, Arch Mage of the Arcanum";
		Health 3200; //12800;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.25;
		Painchance "Fire", 13;
		DamageFactor "Ice", 0.625;
		Painchance "Ice", 31;
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		Speed 25;
		Radius 16;
		Height 64;
		Reactiontime 8;
		MaxTargetRange 2048;
		Monster;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+AVOIDMELEE;
		PainSound "PlayerMagePain";
		DeathSound "PlayerMageCrazyDeath";
		Obituary "$OB_MBOSS"; // "%o couldn't absorb Menelkir's Mana.";
	}
	
	States
	{
		Spawn:
			MAGE A 0 NoDelay;
			MAGE A 2;
			MAGE A 3; //A_ClassBossHealth();
			MAGE A 5 A_Look();
			goto Spawn+1;
		See:
			MAGE ABCD 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; A_SetTics(3); }
				
				if (random(1,3) <= 1) 
				{
					A_KCChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			Loop;
		Pain:
			MAGE G 4;
			MAGE G 4 A_KCPain();
			Goto See;
		Pain.Fist:
			MAGE G 4;
			MAGE G 4 A_KCPain();
			MAGE GG 4;
			Goto See;
		Pain.Kick:
			MAGE G 4;
			MAGE G 4 A_KCPain();
			MAGE GGGG 4;
			Goto See;
		Melee:
		Missile:
			MAGE E 0 A_DynamicMusic();
			MAGE E 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			MAGE F 8 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_MageAttack("MageStaffFX2New");
			}
			Goto See;

		Death:
			MAGE H 6;
			MAGE I 6 A_Scream();
			MAGE JK 6;
			MAGE L 6 A_NoBlocking();
			MAGE M 6;
			MAGE N -1;
			Stop;

		XDeath:
			MAGE O 5 A_Scream();
			MAGE P 5;
			MAGE R 5 A_NoBlocking();
			MAGE S 5;
			MAGE T 5;
			MAGE U 5;
			MAGE V 5;
			MAGE W 5;
			MAGE X -1;
			Stop;
		Ice:
			MAGE Y 5 A_FreezeDeath();
			MAGE Y 1 A_FreezeDeathChunks();
			Wait;
		Burn:
			FDTH E 5 Bright A_StartSound("PlayerMageBurnDeath");
			FDTH F 4 Bright;
			FDTH G 5 Bright;
			FDTH H 4 Bright A_Scream();
			FDTH I 5 Bright;
			FDTH J 4 Bright;
			FDTH K 5 Bright;
			FDTH L 4 Bright;
			FDTH M 5 Bright;
			FDTH N 4 Bright;
			FDTH O 5 Bright;
			FDTH P 4 Bright;
			FDTH Q 5 Bright;
			FDTH R 4 Bright;
			FDTH S 5 Bright A_NoBlocking();
			FDTH T 4 Bright;
			FDTH U 5 Bright;
			FDTH V 4 Bright;
			Stop;
	}
}
class MageStaffFX2New : KCProjectile replaces MageStaffFX2
{
	default
	{
		Tag "Bloodscourge Star";
		Speed 17;
		Height 8;
		DamageFunction (4 * random(1,8));
		DamageType "Fire";
		Projectile;
		+SEEKERMISSILE
		+SCREENSEEKER
		+EXTREMEDEATH
		DeathSound "MageStaffExplode";
		Obituary "$OB_MPMWEAPBLOODSCOURGE";
	}
	
	States
	{
		Spawn:
			MSP2 ABCD 2 Bright A_MStaffTrack();
			Loop;
		Death:
			MSP2 E 4 Bright A_SetTranslucent(1, 1);
			MSP2 F 5 Bright A_Explode(80, 192, 0);
			MSP2 GH 5 Bright;
			MSP2 I 4 Bright;
			Stop;
	}
	
	
	//============================================================================
	//
	//
	//
	//============================================================================

	override int SpecialMissileHit (Actor victim) // MageStaffFX2Base
	{
		if (victim != target && !victim.player && !victim.bBoss)
		{
			int dam = 10;

			victim.DamageMobj (self, target, dam, 'Fire');
			return 1;	// Keep going
		}
		return -1;
	}

	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// Reflect to originator
		tracer = target;	
		target = source;
		return true;
	}

	//============================================================================
	//
	// A_MStaffTrack
	//
	//============================================================================

	void A_MStaffTrack()
	{
		if (tracer == null && random[MStaffTrack]() < 50)
		{
			tracer = RoughMonsterSearch (10, true);
		}
		A_SeekerMissile(2, 10);
	}
}
class KoraxSpiritNew : KCBaseZSC // replaces KoraxSpirit
{
	Default
	{
		Speed 8;
		Projectile;
		+NOCLIP
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Translucent";
		Alpha 0.4;
	}
	
	States
	{
		Spawn:
			SPIR AB 5 A_KSpiritRoam;
			Loop;
		Death:
			SPIR DEFGHI 5;
			Stop;
	}
	
	//============================================================================
	//
	// A_KSpiritSeeker
	//
	//============================================================================

	private void KSpiritSeeker (double thresh, double turnMax)
	{
		Actor target = tracer;
		if (target == null)
		{
			return;
		}
		double dir = deltaangle(angle, AngleTo(target));
		double delta = abs(dir);
		if (delta > thresh)
		{
			delta /= 2;
			if(delta > turnMax)
			{
				delta = turnMax;
			}
		}
		if(dir > 0)
		{ // Turn clockwise
			angle += delta;
		}
		else
		{ // Turn counter clockwise
			angle -= delta;
		}
		VelFromAngle();

		if (!(Level.maptime&15) 
			|| pos.z > target.pos.z + target.Default.Height
			|| pos.z + height < target.pos.z)
		{
			double newZ = target.pos.z + random[KoraxRoam]() * target.Default.Height / 256;
			double deltaZ = newZ - pos.z;

			if (abs(deltaZ) > 15)
			{
				if(deltaZ > 0)
				{
					deltaZ = 15;
				}
				else
				{
					deltaZ = -15;
				}
			}
			Vel.Z = deltaZ + DistanceBySpeed(target, Speed);
		}
	}

	//============================================================================
	//
	// A_KSpiritRoam
	//
	//============================================================================

	void A_KSpiritRoam()
	{
		if (health-- <= 0)
		{
			A_StartSound("SpiritDie", CHAN_VOICE);
			SetStateLabel ("Death");
		}
		else
		{
			if (tracer)
			{
				KSpiritSeeker(args[0], args[0] * 2.);
			}
			int xyspeed = random[KoraxRoam](0, 4);
			int zspeed = random[KoraxRoam](0, 4);
			A_Weave(xyspeed, zspeed, 4., 2.);

			if (random[KoraxRoam]() < 50)
			{
				A_StartSound("SpiritActive", CHAN_VOICE, CHANF_DEFAULT, 1., ATTN_NONE);
			}
		}
	}
}
class KoraxBoltNew : KCBaseZSC // replaces KoraxBolt
{
	const KORAX_BOLT_HEIGHT		= 48.;
	const KORAX_BOLT_LIFETIME		= 3;
	
	Default
	{
		Radius 15;
		Height 35;
		Projectile;
		-ACTIVATEPCROSS
		-ACTIVATEIMPACT
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltNew");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
	
	//============================================================================
	//
	// A_KBolt
	//
	//============================================================================

	void A_KBolt()
	{
		// Countdown lifetime
		if (special1-- <= 0)
		{
			Destroy ();
		}
	}

	//============================================================================
	//
	// A_KBoltRaise
	//
	//============================================================================

	void A_KBoltRaise(string actorname = "KoraxBoltNew")
	{
		// Spawn a child upward
		double z = pos.z + KORAX_BOLT_HEIGHT;

		if ((z + KORAX_BOLT_HEIGHT) < ceilingz)
		{
			Actor mo = Spawn(actorname, (pos.xy, z), ALLOW_REPLACE);
			if (mo)
			{
				mo.special1 = KORAX_BOLT_LIFETIME;
			}
		}
	}
}
class KoraxBoltHealing : KoraxBoltNew
{
	default
	{
		Translation "217:223=211:216", "32:32=216:216";
	}
	
	States
	{
		Spawn:
			MLFX I 2 Bright;
			MLFX J 2 Bright A_KBoltRaise("KoraxBoltHealing");
			MLFX IJKLM 2 Bright A_KBolt;
			Stop;
	}
}
class KoraxNew : KCUniqueBoss { } // replaces Korax
/*
class KoraxNew : KCUniqueBoss // replaces Korax
{
	int lulwat;
	int lultimer1, lultimer1max;
	
	// Korax
	const KORAX_ARM_EXTENSION_SHORT = 40;
	const KORAX_ARM_EXTENSION_LONG = 55;
	const KORAX_ARM1_HEIGHT = 108;
	const KORAX_ARM2_HEIGHT = 82;
	const KORAX_ARM3_HEIGHT = 54;
	const KORAX_ARM4_HEIGHT = 104;
	const KORAX_ARM5_HEIGHT = 86;
	const KORAX_ARM6_HEIGHT = 53;
	const KORAX_FIRST_TELEPORT_TID = 248;
	const KORAX_TELEPORT_TID = 249;
	const KORAX_DELTAANGLE = 85;
	const KORAX_COMMAND_HEIGHT = 120;
	const KORAX_COMMAND_OFFSET = 27;
	const KORAX_SPIRIT_LIFETIME = 5*TICRATE/5;	// 5 seconds
	
	int maxhealchance;
	int timeshealed;
	int maxhealsallowed;
	int user_koraxrepeatchance;
	
	default
	{
		Tag "\c[gold]Korax";
		Health 20000; // 80000;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.05;
		Painchance "Fire", 0; // Korax NEVER flinches from Fire
		DamageFactor "Ice", 0.25;
		Painchance "Ice", 5;
		DamageFactor 0.667;
		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Speed 20;
		Radius 65;
		Height 115;
		Mass 2000;
		Damage 15;
		Monster;
		+BOSS;
		+FLOORCLIP;
		+TELESTOMP;
		+DONTMORPH;
		+NOTARGET;
		+NOICEDEATH;
		+NOFEAR;
		SeeSound "KoraxSight";
		AttackSound "KoraxAttack";
		PainSound "KoraxPain";
		DeathSound "KoraxDeath";
		ActiveSound "KoraxActive";
		Obituary "$OB_KORAX"; // "%o was swept from the board by Korax."
	}
	
	override void PostBeginPlay()
	{
		maxhealchance = 32 + random(-4,4);
		maxhealsallowed = random(4,6);
		Super.PostBeginPlay();
	}
	
	override void Tick() // >_>;
	{
		super.Tick();
		if (health < ((SpawnHealth() + Stamina) >> 1))
		{
			if (health < ((SpawnHealth() + Stamina) >> 2))
			{
				if (health < ((SpawnHealth() + Stamina) >> 3))
				{
					if (health < ((SpawnHealth() + Stamina) >> 5))
					{
						lulwat = 5;
					}
					else
					{
						lulwat = 3;
					}
				}
				else
				{
					lulwat = 2;
				}
			}
			else
			{
				lulwat = 1;
			}
		}
		else
		{
			lulwat = 0;
		}
		
		int regenamount = 1 * (lulwat * (1.0 + (Skill * 0.2)));
		lultimer1max = 38 - (lulwat * (0.8 + (Skill * 0.1) + (lulwat * 0.2)));
		if (lulwat)
		{
			lultimer1--;
			if (lultimer1 <= 0) 
			{
				lultimer1 += (lultimer1max * frandompick(0.75,0.875,1.0,1.0,1.0,1.0,1.125,1.25));
				health += regenamount;
				if (health > ((SpawnHealth() + Stamina) >> 1)) health = ((SpawnHealth() + Stamina) >> 1); // Cannot regenerate above half of his HP
			}
		}
	}
	
	//*******
	//*Korax*
	//*******
	//===========================================================================
	// Korax Variables
	//	tracer		last teleport destination
	//	special2	set if "below half" script not yet run
	//
	// Korax Scripts (reserved)
	//	249		Tell scripts that we are below half health
	//	250-254	Control scripts (254 is only used when less than half health)
	//	255		Death script
	//
	// Korax TIDs (reserved)
	//	245		Reserved for Korax himself
	//  248		Initial teleport destination
	//	249		Teleport destination
	//	250-254	For use in respective control scripts
	//	255		For use in death script (spawn spots)
	//===========================================================================
	void A_KoraxStep(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0, int type = 0, int value1 = 0, int value2 = 0, int value3 = 0, int value4 = 0, int value5 = 0)
	{
		A_StartSound("KoraxStep"); 
		A_KCChase(melee,missile,flags,type,value1,value2,value3,value4,value5); 
	}

	void A_KoraxChase()
	{
		int teleporthealth;
		if (User_MaxHP <= 0) teleporthealth = (SpawnHealth() / 2); 
										else teleporthealth = (User_MaxHP / 2);
		if ((!special2) && (health <= (teleporthealth)))
		{
			ActorIterator it = level.CreateActorIterator(KORAX_FIRST_TELEPORT_TID);
			Actor spot = it.Next ();
			if (spot != null)
			{
				Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
			}
			ACS_Execute(249, 0);
			special2 = 1;	// Don't run again
			return;
		}

		if (target == null)
		{
			return;
		}
		if (random[KoraxChase]() < 30)
		{
			SetState(MissileState);
		}
		else if (random[KoraxChase]() < 30)
		{
			A_StartSound("KoraxActive", CHAN_VOICE, 1, false, ATTN_NONE);
		}

		// Teleport away
		int teleporthealth2;
		if (User_MaxHP <= 0) teleporthealth2 = SpawnHealth() >> 1; else teleporthealth2 = User_MaxHP >> 1;
		if (health < (teleporthealth2))
		{
			if (random[KoraxChase]() < 10)
			{
				ActorIterator it = level.CreateActorIterator(KORAX_TELEPORT_TID);
				Actor spot;

				if (tracer != null)
				{
					// Find the previous teleport destination
					do
					{
						spot = it.Next ();
					} while (spot != null && spot != tracer);
				}

				// Go to the next teleport destination
				spot = it.Next ();
				tracer = spot;
				if (spot)
				{
					Teleport ((spot.pos.xy, ONFLOORZ), spot.angle, TELF_SOURCEFOG | TELF_DESTFOG);
				}
			}
		}
	}

	void A_KoraxDecide()
	{
		if (random[KoraxDecide]() < 220)
		{
			SetStateLabel ("Attack");
		}
		else
		{
			SetStateLabel ("Command");
		}
	}

	void A_KoraxBonePop(int numspirits = 6)
	{
		// Spawn (usually 6?) spirits equalangularly
		double spiritangle = 360.0 / numspirits;
		for (int i = 0; i < numspirits; ++i)
		{
			Actor mo = SpawnMissileAngle ("KoraxSpiritNew", spiritangle*i, 5.);
			if (mo)
			{
				KSpiritInit (mo);
			}
		}
		ACS_Execute(255, 0);
	}

	private void KSpiritInit (Actor spirit)
	{
		spirit.health = KORAX_SPIRIT_LIFETIME;

		spirit.tracer = self;						// Swarm around korax
		spirit.WeaveIndexZ = 32 + (random[Kspiritnit]() & 7);	// Float bob index
		spirit.args[0] = 10; 						// initial turn value
		spirit.args[1] = 0; 						// initial look angle

		// Spawn a tail for spirit
		HolyTail.SpawnSpiritTail (spirit);
	}

	void A_KoraxMissile()
	{
		static const class<Actor> choices[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace"
		};
		static const class<Actor> choices2[] =
		{
			"WraithFX1", 

			"IceGuyFX", 

			"Demon1FX1", 
			"Demon2FX1", 
			"Demon3FX",
			"Demon4FX",
			"Demon5FX1",

			"FireDemonMissile", 
			"FireDemonLeaderMissile", 
			"FireDemonCommanderMissile", 
			"FireDemonQueenMissile", 

			"CentaurFX", 

			"SerpentFX", 

			"ThrownMace",
			
			"HolyMissileNew",
			"HolyMissileNew",
			"FSwordMissileNew",
			"FSwordMissileNew",
			"MageStaffFX2New",
			"MageStaffFX2New"
		};
		static const sound sounds[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss"
		};
		static const sound sounds2[] = 
		{
			"WraithMissileFire", 

			"IceGuyAttack", 

			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 
			"DemonMissileFire", 

			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 
			"FireDemonAttack", 

			"CentaurLeaderAttack", 

			"SerpentLeaderAttack", 

			"FighterHammerMiss",
			
			"HolyMissilePuff",
			"HolyMissilePuff",
			"FighterSwordFire",
			"FighterSwordFire",
			"MageStaffFire",
			"MageStaffFire"
		};
		int type = random[KoraxMissile]() % 14;
		int type2 = random[KoraxMissile]() % 20;

		A_StartSound("KoraxAttack", CHAN_VOICE);

		// Fire all 6 missiles at once
		A_StartSound(sounds[type], CHAN_WEAPON, 1, false, ATTN_NONE);

		class<Actor> info = choices[type];

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		// Throws out the fireballs form Korax's arms
		//Console.Printf("Korax Volley 1");
		for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(0.0,0.2));
		if (health <= commandhealth)
		{
			if (random(1,256) <= 192)
			{
				//Console.Printf("Korax Volley 2 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 128)
			{
				//Console.Printf("Korax Volley 3 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 64)
			{
				//Console.Printf("Korax Volley 4 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
			if (random(1,256) <= 32)
			{
				//Console.Printf("Korax Volley 5 [low health]");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(5.6,5.8));
			}
		}
		else
		{
			if (random(1,256) <= 96)
			{
				//Console.Printf("Korax Volley 2");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(2.0,2.2));
			}
			if (random(1,256) <= 48)
			{
				//Console.Printf("Korax Volley 3");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(3.2,3.4));
			}
			if (random(1,256) <= 24)
			{
				//Console.Printf("Korax Volley 4");
				for (int i = 0; i < 6; ++i) KoraxFire(info, i, frandom(4.4,4.6));
			}
		}
	}

	void KoraxFire (Class<Actor> type, int arm, double angleerror = 0.0)
	{
		static const int extension[] =
		{
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_SHORT,
			KORAX_ARM_EXTENSION_LONG,
			KORAX_ARM_EXTENSION_LONG
		};
		static const int armheight[] =
		{
			KORAX_ARM1_HEIGHT,
			KORAX_ARM2_HEIGHT,
			KORAX_ARM3_HEIGHT,
			KORAX_ARM4_HEIGHT,
			KORAX_ARM5_HEIGHT,
			KORAX_ARM6_HEIGHT
		};

		double angerr2 = frandom(-angleerror,angleerror);
		double ang = angle + (arm < 3 ? -KORAX_DELTAANGLE : KORAX_DELTAANGLE) + angerr2;
		Vector3 pos = Vec3Angle(extension[arm], ang, armheight[arm] - Floorclip);
		SpawnKoraxMissile (pos, target, type, angerr2);
	}

	private void SpawnKoraxMissile (Vector3 pos, Actor dest, Class<Actor> type, double angleerror = 0.0)
	{
		Actor th = Spawn (type, pos, ALLOW_REPLACE);
		if (th != null)
		{
			th.target = self; // Originator
			double an = th.AngleTo(dest);
			if (dest.bShadow)
			{
				// Invisible target
				an += Random2[KoraxMissile]() * (45/256.);
			}
			an += frandom(-angleerror,angleerror);
			//Console.Printf("angle: %8f, angleerror: %8f", an, angleerror);

			th.angle = an;
			th.VelFromAngle();
			double dist = dest.DistanceBySpeed(th, th.Speed);
			th.Vel.Z = (dest.pos.z - pos.Z + 30) / dist;
			th.CheckMissileSpawn(radius);
		}
	}

	void A_KoraxCommand(int firstscriptnum = 250, int lastscriptnum = 254)
	{
		int numcommands;

		A_StartSound("KoraxCommand", CHAN_VOICE);

		// Shoot stream of lightning to ceiling
		double ang = angle - 90;
		Vector3 pos = Vec3Angle(KORAX_COMMAND_OFFSET, ang, KORAX_COMMAND_HEIGHT);

		int commandhealth;
		if (User_MaxHP <= 0) commandhealth = SpawnHealth() >> 1; else commandhealth = User_MaxHP >> 1;

		int maxhealchance2 = maxhealchance;
		if (health >= (User_MaxHP * 2)) maxhealchance2 *= 256;
		if (health >= (User_MaxHP * 1.5)) maxhealchance2 *= 1.75;
		if (health >= (User_MaxHP * 1.0)) maxhealchance2 *= 1.5;
		if (health <= (User_MaxHP * 0.75)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.5)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.25)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.0625)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.03125)) maxhealchance2 *= 0.5;
		if (health <= (User_MaxHP * 0.015625)) maxhealchance2 *= 0.5;
		if (maxhealchance2 < 1) maxhealchance2 = 1;

		//Console.Printf("\cycommandhealth: %d", commandhealth);
		int maxheals = (maxhealsallowed + (skill * 0.625));
		if (timeshealed <= maxheals)
		{
			int healroll = random(1,maxhealchance2);
			//Console.Printf("\cxhealroll: %d / maxhealchance: %d", healroll, maxhealchance2);
			if (healroll <= 1)
			{
				Spawn("KoraxBoltHealing", pos, ALLOW_REPLACE);
				int healamount;
				healamount = user_MaxHP * (frandompick(frandom(0.0375,0.075), frandom(0.10,0.15), frandom(0.20,0.30)) * (1.00 + ((skill * 0.125))));
				int temphealth = health + healamount;
				if (temphealth > (user_MaxHP * 2)) temphealth = (user_MaxHP * 2);
				health = temphealth;
				A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_StartSound("healing_dq",84,CHANF_DEFAULT,1.0,ATTN_NONE);
				//A_PrintHealingMessage(self, healamount);
				int healscale = frandom(1.25,1.75);
				maxhealchance *= (frandompick(1.125,1.25,1.375,1.5,1.625,1.75,1.875) * (1.00 - (skill * 0.0625)));
				//A_UCIIHealSpark(self,"CustomHealSpark",healscale,healscale,"Heal3Glitter",random(12,20),(healscale*5),(healscale*5),(healscale*5));
				timeshealed++;
				//Console.Printf("\czKorax Healed Himself %d Times So Far!", timeshealed);
			}
			else
			{
				Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
				ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
			}
		}
		else
		{
			Spawn("KoraxBoltNew", pos, ALLOW_REPLACE);
			ACS_Execute(random(firstscriptnum,lastscriptnum), 0);
		}
	}
	
	States
	{
		Spawn:
			KORX A 0 NoDelay;
			KORX A 5 A_Look();
			goto Spawn+1;
		See:
			KORX A 0;
			KORX AAA 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX B 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX BBB 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX C 0 A_StartSound("KoraxStep");
			KORX C 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX CCC 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX D 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			KORX DDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KoraxChase();
			}
			KORX A 0 A_StartSound("KoraxStep");
			KORX A 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Pain:
			KORX H 5 A_KCPain();
			KORX H 5;
			Goto See;
		Pain.Fist:
			KORX H 5 A_KCPain();
			KORX HH 5;
			Goto See;
		Pain.Kick:
			KORX H 5 A_KCPain();
			KORX HHH 5;
			Goto See;
		Missile:
			KORX E 0 A_DynamicMusic(); 
			KORX E 2 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_FaceTarget();
			}
			KORX E 5 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_KoraxDecide();
				A_FaceTarget();
			}
			Wait;
		Attack:
			KORX E 4 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }
				A_FaceTarget();
			}
		AttackLoop:
			KORX F 8 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_KoraxMissile();
				A_FaceTarget();
			}
			KORX E 8 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				A_FaceTarget();
			}
			KORX E 0 Bright
			{
				user_koraxrepeatchance = 32 + (CountInv("MonsterLevel") / 2.5);
				if (user_koraxrepeatchance >= 160) { user_koraxrepeatchance = 160; }

				if (random(1,256) <= user_koraxrepeatchance) { return resolvestate("AttackLoop"); }
				return resolvestate(null);
			}
			Goto See;
		Command:
			KORX E 5 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			KORX W 10 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX G 15 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(62,63)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(11); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(12); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 25) { A_SetTics(13); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(12,13)) { A_SetTics(14); }
				A_FaceTarget();
				A_KoraxCommand();
			}
			KORX W 10 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			KORX E 5 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Death:
			KORX I 5;
			KORX J 5 A_FaceTarget();
			KORX K 5 A_Scream;
			KORX LMNOP 5;
			KORX Q 10;
			KORX R 5 A_KoraxBonePop(randompick(6,6,6,12,12,18));
			KORX S 5 A_NoBlocking();
			KORX TU 5;
			KORX V -1;
			Stop;
	}
}
*/
class MaulotaurFriendBase : MaulotaurBase
{
	int StartTime;

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		StartTime = -1;
	}

	override void Die (Actor source, Actor inflictor, int dmgflags)
	{
		Super.Die (source, inflictor, dmgflags);

		if (tracer && tracer.health > 0 && tracer.player)
		{
			// Search thinker list for minotaur
			ThinkerIterator it = ThinkerIterator.Create("MaulotaurFriendBase");
			MinotaurFriend mo;

			while ((mo = MinotaurFriend(it.Next())) != null)
			{
				if (mo.health <= 0) continue;
				// [RH] Minotaurs can't be morphed, so this isn't needed
				//if (!(mo.flags&MF_COUNTKILL)) continue;		// for morphed minotaurs
				if (mo.bCorpse) continue;
				if (mo.StartTime >= 0 && (level.maptime - StartTime) >= MAULATORTICS) continue;
				if (mo.tracer != null && mo.tracer.player == tracer.player) break;
			}

			if (mo == null)
			{
				Inventory power = tracer.FindInventory("PowerMinotaur");
				if (power != null)
				{
					power.Destroy ();
				}
			}
		}
	}
}
class MaulotaurFriendNew : MaulotaurFriendBase // replaces MinotaurFriend
{
	default
	{
		Tag "Maulotaur";
		Health 2500;
		Radius 28;
		Height 100;
		Mass 800;
		Speed 16;
		Damage 7;
		PainChance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 50;
		DamageFactor "Ice", 1.25;
		Painchance "Ice", 33;
		MeleeRange 96;
		Monster;
		+FLOORCLIP;
		+NORADIUSDMG;
		+NOTARGET;
		+BOSSDEATH;
		-DROPOFF;
		-BOSS;
		-DONTMORPH;
		+FRIENDLY;
		+NOTARGETSWITCH;
		+STAYMORPHED;
		+TELESTOMP;
		+SUMMONEDMONSTER;
		+AVOIDMELEE;
		RenderStyle "Translucent";
		Alpha 0.3333;
		SeeSound "minotaur/sight";
		AttackSound "minotaur/attack1";
		PainSound "minotaur/pain";
		DeathSound "minotaur/death";
		ActiveSound "minotaur/active";
		DropItem "None";
	}
	
	States
	{
		Spawn:
			MNTR A 0 NoDelay;
//		MNTR A 15;
//		MNTR A 15 A_SetTranslucent(0.66, 0);
//		MNTR A 3 A_SetTranslucent(1, 0);
//		MNTR AB 10 A_MinotaurLook();
			goto Spawn+1;
		Roam:
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurRoam();
			}
			Loop;
		See:
			MNTR A 0;
			MNTR ABCD 5
			{
				A_SetInventory("MaulotaurChargeDefense",0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_MinotaurChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk1(4*random(1,8), -16);
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				if (random(1,256) <= 170) { A_MinotaurDecide(); }
			}
			MNTR Y 4
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(3); }
				A_FaceTarget();
			}
			MNTR Z 9 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(8); }
				A_MinotaurAtk2("MinotaurFX1",5*random(1,8),3*random(1,8));
			}
			Goto See;
		Hammer:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR V 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				A_FaceTarget();
			}
			MNTR W 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				A_FaceTarget();
			}
			MNTR X 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
				A_MinotaurAtk3(4*random(1,8), -16, "MinotaurFX2New");
			}
			Goto See;
		HammerLoop:
			TNT1 A 0 
			{
				A_SetInventory("MaulotaurChargeDefense",0);
			}
			MNTR X 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(33,34,34,34)) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > randompick(11,11,11,12)) { A_SetTics(11); }
			}
			Goto Hammer;
		Charge:
			TNT1 A 0 
			{
				SetDamage(7 + (CountInv("MonsterLevel") / 22.5));
			}
			TNT1 A 0 A_DynamicMusic();
			MNTR U 2 A_MinotaurCharge();
			Loop;
		Pain:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			Goto See;
		Pain.Fist:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EE 3;
			Goto See;
		Pain.Kick:
			MNTR E 3;
			MNTR E 6 A_KCPain();
			MNTR EEEE 3;
			Goto See;
		Death:
			Goto FadeOut;
		FadeOut:
			MNTR E 6;
			MNTR E 2 A_Scream();
			MNTR E 5 A_SpawnItemEx("MinotaurSmokeExit");
			MNTR E 5;
			MNTR E 5 A_NoBlocking();
			MNTR E 5;
			MNTR E 5 A_SetTranslucent(0.66, 0);
			MNTR E 5 A_SetTranslucent(0.33, 0);
			MNTR E 0;
			MNTR E 10 A_BossDeath();
			Stop;
		Ice:
			Goto FadeOut;
	}
}
// Strife
//
// Custom
class HellCleric : KCCreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}
// Hell Cleric Shot 1
class HellClericBall : KCProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}
// Hell Cleric Shot 2
class HellClericDarkBall : KCProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}
class HellClericDVDS : KCCreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			Loop;
		See:
			HELC AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_KCChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			HELC E 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				int baserand = random(6,12);
				int dmg = 7;
				dmg += (12 * baserand);
				dmg *= 0.5;
				if (kc_monsterlevelenabledflags)
				{
					dmg = (7 + (CountInv("MonsterLevel") * 0.035));
					dmg += ((12 * baserand) + (CountInv("MonsterLevel") * (0.06 * baserand)));
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
					{
						dmg += (2.334 + (CountInv("MonsterLevel") * 0.001167));
						dmg += ((4 * baserand) + (CountInv("MonsterLevel") * (0.02 * baserand)));
					}
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						dmg += (1.167 + (CountInv("MonsterLevel") * 0.000584));
						dmg += ((2 * baserand) + (CountInv("MonsterLevel") * (0.01 * baserand)));
					}
					dmg *= (1.0 + (CountInv("MonsterLevel") * 0.005));
				}
				dmg *= 0.5;
				
				A_CustomComboAttack(atktype, user_tempvar1, (dmg), "imp/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
				A_DynamicMusic();
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}
class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMastermindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SSWV AABBCCDD 3
			{
				user_walksound++;
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}