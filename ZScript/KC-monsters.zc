// Heretic
class PodNew : KCCreature { } // Filler for later implementation
class ChickenNew : KCCreature { } // Filler for later implementation
class HereticImpNew : KCCreature { } // Filler for later implementation
class HereticImpLeaderNew : KCCreature { } // Filler for later implementation
class PlagueImp : KCCreature { } // Filler for later implementation
class WatcherImp : KCCreature { } // Filler for later implementation
class MummyNew : KCCreature { } // Filler for later implementation
class MummyGhostNew : KCCreature { } // Filler for later implementation
class MummyLeaderNew : KCCreature { } // Filler for later implementation
class MummyLeaderGhostNew : KCCreature { } // Filler for later implementation
class IceGolem : KCCreature { } // Filler for later implementation
class IceGolemGhost : KCCreature { } // Filler for later implementation
class FrostGolem : KCCreature { } // Filler for later implementation
class FrostGolemGhost : KCCreature { } // Filler for later implementation
class KnightNew : KCCreature { } // Filler for later implementation
class KnightGhostNew : KCCreature { } // Filler for later implementation
class DeathKnight : KCCreature { } // Filler for later implementation
class DeathKnightGhost : KCCreature { } // Filler for later implementation
class WizardNew : KCCreature { } // Filler for later implementation
class GreaterDisciple : KCCreature { } // Filler for later implementation
class HereticApprenticeNew : KCCreature { } // Filler for later implementation
class Banshee : KCCreature { } // Filler for later implementation
class IronlichNew : KCCreature { } // Filler for later implementation
class IceLich : KCCreature { } // Filler for later implementation
class GoldLich : KCCreature { } // Filler for later implementation
class FakeGoldLich : KCCreature { } // Filler for later implementation
class BloodLich : KCCreature { } // Filler for later implementation
class ClinkNew : KCCreature { } // Filler for later implementation
class DarkClink : KCCreature { } // Filler for later implementation
class BeastNew : KCCreature { } // Filler for later implementation
class ShadowBeast : KCCreature { } // Filler for later implementation
class MaulotaurNew : KCCreature { } // Filler for later implementation
class SnakeNew : KCCreature { } // Filler for later implementation
class HellGuard : KCCreature { } // Filler for later implementation
class Serpathor : KCCreature { } // Filler for later implementation
class DSparilMountedNew : KCCreature { } // Filler for later implementation
class DSparilUnmountedNew : KCCreature { } // Filler for later implementation
// Hexen
class MaulotaurFriendNew : KCCreature { } // Filler for later implementation
class PigNew : KCCreature { } // Filler for later implementation
class FireDemonNew : KCCreature { } // Filler for later implementation
class FireDemonLeader : KCCreature { } // Filler for later implementation
class FireDemonCommander : KCCreature { } // Filler for later implementation
class FireDemonQueen : KCCreature { } // Filler for later implementation
class FireDemonQueenClone : KCCreature { } // Filler for later implementation
class EttinNew : KCCreature { } // Filler for later implementation
class EttinGhostNew : KCCreature { } // Filler for later implementation
class EttinCommander : KCCreature { } // Filler for later implementation
class Bormereth : KCCreature { } // Filler for later implementation
class CentaurNew : KCCreature { } // Filler for later implementation
class CentaurGhostNew : KCCreature { } // Filler for later implementation
class SlaughtaurNew : KCCreature { } // Filler for later implementation
class GreenChaosSerpentNew : KCCreature { } // Filler for later implementation
class GreenChaosSerpentGhostNew : KCCreature { } // Filler for later implementation
class BrownChaosSerpentNew : KCCreature { } // Filler for later implementation
class BrownChaosSerpentGhostNew : KCCreature { } // Filler for later implementation
class MagmaChaosSerpentNew : KCCreature { } // Filler for later implementation
class BlackChaosSerpentNew : KCCreature { } // Filler for later implementation
class EtherealChaosSerpentNew : KCCreature { } // Filler for later implementation
class IceGuyNew : KCCreature { } // Filler for later implementation
class StalkerNew : KCCreature { } // Filler for later implementation
class StalkerLeaderNew : KCCreature { } // Filler for later implementation
class IceStalker : KCCreature { } // Filler for later implementation
class IceStalkerLeader : KCCreature { } // Filler for later implementation
class BishopNew : KCCreature { } // Filler for later implementation
class DarkDisciple : KCCreature { } // Filler for later implementation
class VampireKC : KCCreature { } // Filler for later implementation
class DarkPatriarch : KCCreature { } // Filler for later implementation
class WraithNew : KCCreature { } // Filler for later implementation
class DragonNew : KCCreature { } // Filler for later implementation
class SorcBallBase : KCProjectile
{
	Default
	{
		Tag "Heresiarch Mana Cube";
		Speed 10;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererBigBallExplode";
	}

	double OldAngle, AngleOffset;

	//============================================================================
	//
	// SorcBall::DoFireSpell
	//
	//============================================================================

	virtual void DoFireSpell ()
	{
		CastSorcererSpell ();
		target.args[3] = HeresiarchNew.SORC_STOPPED;
	}

	
	virtual void SorcUpdateBallAngle ()
	{
	}
	
	override bool SpecialBlastHandling (Actor source, double strength)
	{
		// don't blast sorcerer balls
		return false;
	}
	
	//============================================================================
	//
	// ASorcBall::CastSorcererSpell
	//
	// Make noise and change the parent sorcerer's animation
	//
	//============================================================================

	virtual void CastSorcererSpell ()
	{
		target.A_StartSound("SorcererSpellCast", CHAN_VOICE);

		// Put sorcerer into throw spell animation
		if (target.health > 0)
			target.SetStateLabel ("Missile2");
	}

	//============================================================================
	//
	// A_SorcBallOrbit
	//
	// - actor is ball
	//============================================================================

	void A_SorcBallOrbit()
	{
		// [RH] If no parent, then die instead of crashing
		if (target == null || target.health <= 0)
		{
			SetStateLabel ("Pain");
			return;
		}

		int mode = target.args[3];
		HeresiarchNew parent = HeresiarchNew(target);
		double dist = parent.radius - (radius*2);

		double prevangle = OldAngle;
		double baseangle = parent.BallAngle;
		double curangle = baseangle + AngleOffset;

		angle = curangle;

		switch (mode)
		{
		case HeresiarchNew.SORC_NORMAL:			// Balls rotating normally
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_DECELERATE:		// Balls decelerating
			A_DecelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_ACCELERATE:		// Balls accelerating
			A_AccelBalls();
			SorcUpdateBallAngle ();
			break;

		case HeresiarchNew.SORC_STOPPING:			// Balls stopping
			if ((parent.StopBall == GetClass()) &&
				(parent.args[1] > HeresiarchNew.SORCBALL_SPEED_ROTATIONS) &&
				absangle(curangle, parent.angle) < 42.1875)
			{
				// Can stop now
				target.args[3] = HeresiarchNew.SORC_FIRESPELL;
				target.args[4] = 0;
				// Set angle so self angle == sorcerer angle
				parent.BallAngle = parent.angle - AngleOffset;
			}
			else
			{
				SorcUpdateBallAngle ();
			}
			break;

		case HeresiarchNew.SORC_FIRESPELL:			// Casting spell
			if (parent.StopBall == GetClass())
			{
				// Put sorcerer into special throw spell anim
				if (parent.health > 0)
					parent.SetStateLabel("Missile1");

				DoFireSpell ();
			}
			break;

		case HeresiarchNew.SORC_FIRING_SPELL:
			if (parent.StopBall == GetClass())
			{
				if (special2-- <= 0)
				{
					// Done rapid firing 
					parent.args[3] = HeresiarchNew.SORC_STOPPED;
					// Back to orbit balls
					if (parent.health > 0)
						parent.SetStateLabel("Missile2");
				}
				else
				{
					// Do rapid fire spell
					A_SorcOffense2();
				}
			}
			break;

		default:
			break;
		}

		// The comparison here depends on binary angle semantics and cannot be done in floating point.
		// It also requires very exact conversion that must be done natively.
		if (BAM(curangle) < BAM(prevangle) && (parent.args[4] == HeresiarchNew.SORCBALL_TERMINAL_SPEED))
		{
			parent.args[1]++;			// Bump rotation counter
			// Completed full rotation - make woosh sound
			A_StartSound("SorcererBallWoosh", CHAN_BODY);
		}
		OldAngle = curangle;		// Set previous angle

		Vector3 pos = parent.Vec3Angle(dist, curangle, -parent.Floorclip + parent.Height);
		SetOrigin (pos, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}

	//============================================================================
	//
	// A_SorcOffense2
	//
	// Actor is ball
	//
	//============================================================================

	void A_SorcOffense2()
	{
		Actor parent = target;
		Actor dest = parent.target;

		// [RH] If no enemy, then don't try to shoot.
		if (dest == null)
		{
			return;
		}

		// Heresiarch's Purple Fireballs
		string basemissile4 = "SorcFX4New";

		let parentHeresiarch = HeresiarchNew(parent);

		int index = args[4];
		args[4] = (args[4] + 15) & 255;
		double delta = sin(index * (360 / 256.f)) * HeresiarchNew.SORCFX4_SPREAD_ANGLE;

		double ang1 = Angle + delta;
		Actor mo = parent.SpawnMissileAngle(basemissile4, ang1, 0);
		if (mo)
		{
			mo.special2 = 35*5/2;		// 5 seconds
			double dist = mo.DistanceBySpeed(dest, mo.Speed);
			mo.Vel.Z = (dest.pos.z - mo.pos.z) / dist;
		}
	}

	//============================================================================
	//
	// A_AccelBalls
	//
	// Increase ball orbit speed - actor is ball
	//
	//============================================================================

	void A_AccelBalls()
	{
		HeresiarchNew sorc = HeresiarchNew(target);

		if (sorc.args[4] < sorc.args[2])
		{
			sorc.args[4]++;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
			if (sorc.args[4] >= HeresiarchNew.SORCBALL_TERMINAL_SPEED)
			{
				// Reached terminal velocity - stop balls
				sorc.A_StopBalls();
			}
		}
	}

	//============================================================================
	//
	// A_DecelBalls
	//
	// Decrease ball orbit speed - actor is ball
	//
	//============================================================================

	void A_DecelBalls()
	{
		Actor sorc = target;

		if (sorc.args[4] > sorc.args[2])
		{
			sorc.args[4]--;
		}
		else
		{
			sorc.args[3] = HeresiarchNew.SORC_NORMAL;
		}
	}


	void A_SorcBallExplode()
	{
		bNoBounceSound = true;
		A_Explode(255, 255);
	}
	
	//============================================================================
	//
	// A_SorcBallPop
	//
	// Ball death - bounce away in a random direction
	//
	//============================================================================

	void A_SorcBallPop()
	{
		A_StartSound("SorcererBallPop", CHAN_BODY, 1, false, ATTN_NONE);
		bNoGravity = false;
		Gravity = 1. / 8;

		Vel.X = ((random[Heresiarch]()%10)-5);
		Vel.Y = ((random[Heresiarch]()%10)-5);
		Vel.Z = (2+(random[Heresiarch]()%3));
		args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;	// Bounce time unit
		args[3] = 5;					// Bounce time in seconds
	}
	
	//============================================================================
	//
	// A_BounceCheck
	//
	//============================================================================

	void A_BounceCheck ()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererBigBallExplode", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
	}
}
// First ball (purple) - fires projectiles ----------------------------------
class SorcBall1Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMP A 5 A_SorcBallPop;
			SBMP B 2 A_BounceCheck;
			Wait;
		Death:
			SBS4 D 5 A_SorcBallExplode;
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}

	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL1_ANGLEOFFSET;
	}

	//============================================================================
	//
	// SorcBall1::CastSorcererSpell
	//
	// Offensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{

		Super.CastSorcererSpell ();

		Actor parent = target;

		// Heresiarch's Bouncing Lavaballs
		string basemissile1 = "SorcFX1New";

		let parentHeresiarch = HeresiarchNew(parent);

		double ang1 = Angle + 70;
		double ang2 = Angle - 70;
		Class<Actor> cls = basemissile1;
		Actor mo = parent.SpawnMissileAngle (cls, ang1, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
		mo = parent.SpawnMissileAngle (cls, ang2, 0);
		if (mo)
		{
			mo.target = parent;
			mo.tracer = parent.target;
			mo.args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			mo.args[3] = 15;				// Bounce time in seconds
		}
	}

	
	//============================================================================
	//
	// ASorcBall1::SorcUpdateBallAngle
	//
	// Update angle if first ball
	//============================================================================

	override void SorcUpdateBallAngle ()
	{
		(HeresiarchNew(target)).BallAngle += target.args[4];
	}

	//============================================================================
	//
	// SorcBall1::DoFireSpell
	//
	//============================================================================

	override void DoFireSpell ()
	{
		if (random[Heresiarch]() < 200)
		{
			target.A_StartSound("SorcererSpellCast", CHAN_VOICE, 1, false, ATTN_NONE);
			special2 = HeresiarchNew.SORCFX4_RAPIDFIRE_TIME;
			args[4] = 128;
			target.args[3] = HeresiarchNew.SORC_FIRING_SPELL;
		}
		else
		{
			Super.DoFireSpell ();
		}
	}
}
// Second ball (blue) - generates the shield --------------------------------
class SorcBall2Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMB A 5 A_SorcBallPop;
			SBMB B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL2_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall2::CastSorcererSpell
	//
	// Defensive
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Super.CastSorcererSpell ();

		Actor parent = target;
		Actor mo = Spawn("SorcFX2", Pos + (0, 0, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT), ALLOW_REPLACE);
		parent.bReflective = true;
		//parent.bInvulnerable = true;
		parent.bNoPain = true;
		parent.bNoBlood = true;
		parent.bBuddha = true;
		A_GiveInventory("HeresiarchShieldDefense",1,AAPTR_TARGET);
		parent.args[0] = HeresiarchNew.SORC_DEFENSE_TIME;
		if (mo) mo.target = parent;
	}
}
// Third ball (green) - summons Bishops -------------------------------------
class SorcBall3Base : SorcBallBase
{
	States
	{
		Spawn:
			SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit;
			Loop;
		Pain:
			SBMG A 5 A_SorcBallPop;
			SBMG B 2 A_BounceCheck;
			Wait;
		Death:
			SBS3 D 5 A_SorcBallExplode;
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
	
	override void BeginPlay ()
	{
		Super.BeginPlay ();
		AngleOffset = HeresiarchNew.BALL3_ANGLEOFFSET;
	}

	//============================================================================
	//
	// ASorcBall3::CastSorcererSpell
	//
	// Reinforcements
	//
	//============================================================================

	override void CastSorcererSpell ()
	{
		Actor mo;
		Super.CastSorcererSpell ();
		Actor parent = target;

		double ang1 = Angle - 45;
		double ang2 = Angle + 45;
		Class<Actor> cls = "SorcFX3";

		if (parent.health < ((parent.SpawnHealth() + parent.Stamina) / 4))
		{
			// Spawn 2 at a time
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
			mo = parent.SpawnMissileAngle(cls, ang2, 4.);
			if (mo) mo.target = parent;
		}			
		else
		{
			if (random[Heresiarch]() < 128)	ang1 = ang2;
			mo = parent.SpawnMissileAngle(cls, ang1, 4.);
			if (mo) mo.target = parent;
		}
	}
}
// Sorcerer spell 1 (The burning, bouncing head thing) ----------------------
class SorcFX1Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Bouncing Fireface";
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		-NOGRAVITY
		+FULLVOLDEATH
		+CANBOUNCEWATER
		+NOWALLBOUNCESND
		BounceFactor 1.0;
		BounceType "HexenCompat";
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}

	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek;
			Loop;
		Death:
			FHFX S 2 Bright A_Explode(30, 128);
			FHFX SS 6 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX1Seek
	//
	// Yellow spell - offense
	//
	//============================================================================

	void A_SorcFX1Seek()
	{
		if (args[4]-- <= 0)
		{
			if (args[3]-- <= 0)
			{
				SetStateLabel("Death");
				A_StartSound("SorcererHeadScream", CHAN_BODY, 1, false, ATTN_NONE);
			}
			else
			{
				args[4] = HeresiarchNew.BOUNCE_TIME_UNIT;
			}
		}
		A_SeekerMissile(2, 6);
	}
	
}
// Sorcerer spell 2 (The visible part of the shield) ------------------------
class SorcFX2Base : KCProjectile
{
	Default
	{
		Speed 15;
		Radius 5;
		Height 5;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
	}

	states
	{
		Spawn:
			SBS2 A 3 Bright A_SorcFX2Split;
			Loop;
		Orbit:
			SBS2 A 2 Bright;
			SBS2 BCDEFGHIJKLMNOPA 2 Bright A_SorcFX2Orbit;
			Goto Orbit+1;
		Death:
			SBS2 A 10;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX2Split
	//
	// Blue spell - defense
	//
	//============================================================================
	//
	// FX2 Variables
	//		specialf1		current angle
	//		special2
	//		args[0]		0 = CW,  1 = CCW
	//		args[1]		
	//============================================================================

	// Split ball in two
	void A_SorcFX2Split()
	{
		Actor mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 0;									// CW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		mo = Spawn(GetClass(), Pos, NO_REPLACE);
		if (mo)
		{
			mo.target = target;
			mo.args[0] = 1;									// CCW
			mo.specialf1 = Angle;							// Set angle
			mo.SetStateLabel("Orbit");
		}
		Destroy ();
	}

	//============================================================================
	//
	// A_SorcFX2Orbit
	//
	// Orbit FX2 about sorcerer
	//
	//============================================================================

	void A_SorcFX2Orbit ()
	{
		Actor parent = target;

		// [RH] If no parent, then disappear
		if (parent == null)
		{
			Destroy();
			return;
		}

		double dist = parent.radius;

		if ((parent.health <= 0) ||		// Sorcerer is dead
			(!parent.args[0]))				// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bInvulnerable = false;
			parent.bNoPain = false; 
			parent.bNoBlood = false;
			parent.bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_TARGET);
		}

		if (args[0] && (parent.args[0]-- <= 0))		// Time expired
		{
			SetStateLabel("Death");
			parent.args[0] = 0;
			parent.bReflective = false;
			parent.bNoPain = false;
			parent.bNoBlood = false;
			parent.bBuddha = false;
		}

		Vector3 posi;
		// Move to new position based on angle
		if (args[0])		// Counter clock-wise
		{
			specialf1 += 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 15 * cos(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}
		else							// Clock wise
		{
			specialf1 -= 10;
			angle = specialf1;
			posi = parent.Vec3Angle(dist, angle, parent.Floorclip + HeresiarchNew.SORC_DEFENSE_HEIGHT);
			posi.Z += 20 * sin(angle);
			// Spawn trailer
			Spawn("SorcFX2T1", pos, ALLOW_REPLACE);
		}

		SetOrigin (posi, true);
		floorz = parent.floorz;
		ceilingz = parent.ceilingz;
	}
}
// Sorcerer spell 3 (The Bishop spawner) ------------------------------------
class SorcFX3Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Spawn Sphere";
		Speed 15;
		Radius 22;
		Height 65;
		+NOBLOCKMAP
		+MISSILE
		+NOTELEPORT
		SeeSound "SorcererBishopSpawn";
	}

	States
	{
		Spawn:
			SBS3 ABC 2 Bright;
			Loop;
		Death:
			SBS3 A 4 Bright;
			BISH P 4 A_SorcererBishopEntry;
			BISH ON 4;
			BISH MLKJIH 3;
			BISH G 3 A_SpawnBishop;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcererBishopEntry
	//
	//============================================================================

	void A_SorcererBishopEntry()
	{
		Spawn("SorcFX3Explosion", Pos, ALLOW_REPLACE);
		A_StartSound(SeeSound, CHAN_VOICE);
	}

	//============================================================================
	//
	// A_SpawnBishop
	//
	// Green spell - spawn bishops
	//
	//============================================================================

	void A_SpawnBishop()
	{
		Actor mo = Spawn("Bishop", Pos, ALLOW_REPLACE);
		if (mo)
		{
			if (!mo.TestMobjLocation())
			{
				mo.ClearCounters();
				mo.Destroy ();
			}
			else if (target != null)
			{
				// [RH] Make the new bishops inherit the Heriarch's target
				mo.CopyFriendliness (target, true);
				mo.master = target;
			}
		}
		Destroy ();
	}
}
// Sorcerer spell 4 (The purple projectile) ---------------------------------
class SorcFX4Base : KCProjectile
{
	Default
	{
		Tag "Heresiarch Magic Missile";
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		DeathSound "SorcererBallExplode";
	}

	States
	{
		Spawn:
			SBS4 ABC 2 Bright A_SorcFX4Check;
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright A_Explode(20, 128);
			SBS4 FGH 2 Bright;
			Stop;
	}
	
	//============================================================================
	//
	// A_SorcFX4Check
	//
	// FX4 - rapid fire balls
	//
	//============================================================================

	void A_SorcFX4Check()
	{
		if (special2-- <= 0)
		{
			SetStateLabel ("Death");
		}
	}
}
// Heresiarch
class SorcBall1New : SorcBall1Base replaces SorcBall1
{
	States
	{
		Death:
			SBS4 D 0 { bNOBOUNCESOUND = true; }
			SBS4 D 5 A_Explode(255, 255);
			SBS4 E 5;
			SBS4 FGH 6;
			Stop;
	}
}
class SorcBall2New : SorcBall2Base replaces SorcBall2
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcBall3New : SorcBall3Base replaces SorcBall3
{
	States
	{
		Death:
			SBS3 D 0 { bNOBOUNCESOUND = true; }
			SBS3 D 5 A_Explode(255, 255);
			SBS3 E 5;
			SBS3 FGH 6;
			Stop;
	}
}
class SorcFX1New : SorcFX1Base replaces SorcFX1
{
	default
	{
		Speed 7;
		Radius 5;
		Height 5;
		Projectile;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		-NOGRAVITY;
		+FULLVOLDEATH;
		+CANBOUNCEWATER;
		+NOWALLBOUNCESND;
		BounceFactor 1.0;
		DamageType "Magic";
		+HEXENBOUNCE;
		SeeSound "SorcererBallBounce";
		DeathSound "SorcererHeadScream";
	}
	
	States
	{
		Spawn:
			SBS1 A 2 Bright;
			SBS1 BCD 3 Bright A_SorcFX1Seek();
			Loop;
		Death:
			FHFX S 2 Bright 
			{
				A_Explode(30, 128, 0);
			}
			FHFX SS 6 Bright;
			Stop;
	}
}
class SorcFX4New : SorcFX4Base replaces SorcFX4
{
	default
	{
		Speed 12;
		Radius 10;
		Height 10;
		Projectile;
		DamageType "Magic";
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		DeathSound "SorcererBallExplode";
	}
	
	States
	{
		Spawn:
			SBS4 ABC 2 Bright 
			{
				A_SorcFX4Check();
			}
			Loop;
		Death:
			SBS4 D 2 Bright;
			SBS4 E 2 Bright
			{
				A_Explode(20, 128, 0);
			}
			SBS4 FGH 2 Bright;
			Stop;
	}
}
class HeresiarchNew : KCUniqueBoss replaces Heresiarch
{
	int hitsoundtimer;
	int hitweaksoundtimer;

	const SORCBALL_INITIAL_SPEED 		= 7;
	const SORCBALL_TERMINAL_SPEED		= 25;
	const SORCBALL_SPEED_ROTATIONS 		= 5;
	const SORC_DEFENSE_TIME				= 255;
	const SORC_DEFENSE_HEIGHT			= 45;
	const BOUNCE_TIME_UNIT				= (35/2);
	const SORCFX4_RAPIDFIRE_TIME		= (6*3);		// 3 seconds
	const SORCFX4_SPREAD_ANGLE			= 20;

	enum ESorc
	{
		SORC_DECELERATE,	
		SORC_ACCELERATE, 
		SORC_STOPPING,	
		SORC_FIRESPELL,	
		SORC_STOPPED,	
		SORC_NORMAL,		
		SORC_FIRING_SPELL
	}

	const BALL1_ANGLEOFFSET	= 0.;
	const BALL2_ANGLEOFFSET	= 120.;
	const BALL3_ANGLEOFFSET	= 240.;

	double BallAngle;
	class<SorcBallBase> StopBall;
	int HPLowRange;
	int HPCritRange;
	Actor ptrheresiarch;

	default
	{
		Tag "Heresiarch";
		Health 12500; // 50000
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor 0.833;
		RadiusDamageFactor 0.833;
		DamageFactor "Explosive", 0.833;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 8;
		DamageFactor "Ice", 1.334;
		Painchance "Ice", 13;
		Speed 16;
		Radius 40;
		Height 110;
		Mass 5000;
		Damage 9;
		Monster;
		+FLOORCLIP
		+BOSS
		+DONTMORPH
		+NOTARGET
		+NOICEDEATH
		+DEFLECT
		+NOBLOOD
		+AVOIDMELEE
		SeeSound "SorcererSight";
		PainSound "SorcererPain";
		DeathSound "SorcererDeathScream";
		ActiveSound "SorcererActive";
		Obituary "$OB_HERESIARCH"; // "%o had %p bones rolled by the Heresiarch."
	}
	
	States
	{
		Spawn:
			SORC A 3 NoDelay;
			SORC A 0
			{
				HPLowRange = user_HPLowRange;
				HPCritRange = user_HPCritRange;
			}
			SORC A 2 
			{
				A_ShieldCheck();
				A_SorcSpinBalls();
			}
		Idle:
			SORC A 10 
			{
				A_ShieldCheck();
				A_Look();
			}
			Wait;
		See:
			SORC A 0 
			{
				A_ShieldCheck();
			}
			SORC ABCD 5
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = 1; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(4); }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_ShieldCheck();
				A_Chase();
			}
			Loop;
		Pain:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			Goto See;
		Pain.Fist:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC G 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Pain.Kick:
			SORC G 8
			{
				A_ShieldCheck();
			}
			SORC G 8 
			{
				A_KCPain();
				A_ShieldCheck();
			}
			SORC GG 8
			{
				A_ShieldCheck();
			}
			Goto See;
		Missile:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			SORC F 6 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_SpeedBalls();
				A_ShieldCheck();
			}
			SORC F 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Wait;
		Missile1:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			TNT1 A 0 A_DynamicMusic();
			SORC E 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_ShieldCheck();
			}
			SORC E 6 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_SpawnFizzle();
				A_ShieldCheck();
			}
			SORC E 5 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > random(37,38)) { A_SetTics(4); }
				A_FaceTarget();
				A_ShieldCheck();
			}
			Goto Missile1+1;
		Missile2:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC E 2 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_ShieldCheck();
			}
			SORC E 2 Bright 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				A_SorcBossAttack();
				A_ShieldCheck();
			}
			Goto See;
		Death:
			TNT1 A 0 
			{
				A_ShieldCheck();
			}
			SORC H 5 Bright
			{
				A_ShieldCheck();
			}
			SORC I 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC J 5 Bright 
			{
				A_ShieldCheck();
				A_Scream();
			}
			SORC KLMNOPQRST 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC U 5 Bright 
			{
				A_ShieldCheck();
				A_NoBlocking();
			}
			SORC VWXY 5 Bright
			{
				A_ShieldCheck();
				A_FaceTarget();
			}
			SORC Z -1 Bright;
			Stop;
	}
	
	override void Die (Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// The heresiarch just executes a script instead of a special upon death
		int script = special;
		special = 0;

		Super.Die (source, inflictor, dmgflags, MeansOfDeath);

		if (script != 0)
		{
			ACS_Execute(script, 0);
		}
	}
	
	void A_ShieldCheck()
	{
		if (args[0] <= 0)
		{
			bReflective = false; 
			bInvulnerable = false; 
			bNoPain = false; 
			bNoBlood = false; 
			bBuddha = false; 
			A_TakeInventory("HeresiarchShieldDefense",1,0,AAPTR_DEFAULT);
		}
	}
	
	void A_StopBalls()
	{
		int chance = random[Heresiarch]();
		args[3] = SORC_STOPPING;				// stopping mode
		args[1] = 0;							// Reset rotation counter

		if ((args[0] <= 0) && (chance < 200))
		{
			StopBall = "SorcBall2Base";	// Blue
		}
		else if((health < ((SpawnHealth() + Stamina) / 2)) && (chance < 200))
		{
			StopBall = "SorcBall3Base";	// Green
		}
		else
		{
			StopBall = "SorcBall1Base";	// Yellow
		}
	}
	
	//============================================================================
	//
	// A_SorcSpinBalls
	//
	// Spawn spinning balls above head - actor is sorcerer
	//============================================================================

	void A_SorcSpinBalls()
	{
		A_SlowBalls();
		args[0] = 0;								// Currently no defense
		args[3] = SORC_NORMAL;
		args[4] = SORCBALL_INITIAL_SPEED;		// Initial orbit speed
		BallAngle = 1.;

		Vector3 ballpos = (pos.xy, -Floorclip + Height);
		
		Actor mo = Spawn("SorcBall1Base", pos, NO_REPLACE);
		if (mo)
		{
			mo.target = self;
			mo.special2 = SORCFX4_RAPIDFIRE_TIME;
		}
		mo = Spawn("SorcBall2Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
		mo = Spawn("SorcBall3Base", pos, NO_REPLACE);
		if (mo) mo.target = self;
	}


	//============================================================================
	//
	// A_SpeedBalls
	//
	// Set balls to speed mode - self is sorcerer
	//
	//============================================================================

	void A_SpeedBalls()
	{
		args[3] = SORC_ACCELERATE;				// speed mode
		args[2] = SORCBALL_TERMINAL_SPEED;		// target speed
	}


	//============================================================================
	//
	// A_SlowBalls
	//
	// Set balls to slow mode - actor is sorcerer
	//
	//============================================================================

	void A_SlowBalls()
	{
		args[3] = SORC_DECELERATE;				// slow mode
		args[2] = SORCBALL_INITIAL_SPEED;		// target speed
	}

	//============================================================================
	//
	// A_SorcBossAttack
	//
	// Resume ball spinning
	//
	//============================================================================

	void A_SorcBossAttack()
	{
		args[3] = SORC_ACCELERATE;
		args[2] = SORCBALL_INITIAL_SPEED;
	}

	//============================================================================
	//
	// A_SpawnFizzle
	//
	// spell cast magic fizzle
	//
	//============================================================================

	void A_SpawnFizzle()
	{
		Vector3 pos = Vec3Angle(5., Angle, -Floorclip + Height / 2. );
		for (int ix=0; ix<5; ix++)
		{
			Actor mo = Spawn("SorcSpark1", pos, ALLOW_REPLACE);
			if (mo)
			{
				double rangle = Angle + random[Heresiarch](0, 4) * (4096 / 360.);
				mo.Vel.X = random[Heresiarch](0, int(speed) - 1) * cos(rangle);
				mo.Vel.Y = random[Heresiarch](0, int(speed) - 1) * sin(rangle);
				mo.Vel.Z = 2;
			}
		}
	}
}
class ClericBossNew : KCCreature { } // Filler for later implementation
class FighterBossNew : KCCreature { } // Filler for later implementation
class MageBossNew : KCCreature { } // Filler for later implementation
class KoraxNew : KCCreature { } // Filler for later implementation
// Strife
//
// Custom
class HellCleric : KCCreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}
// Hell Cleric Shot 1
class HellClericBall : KCProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}
// Hell Cleric Shot 2
class HellClericDarkBall : KCProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}
class HellClericDVDS : KCCreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			Loop;
		See:
			HELC AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_KCChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			HELC E 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				int baserand = random(6,12);
				int dmg = 7;
				dmg += (12 * baserand);
				dmg *= 0.5;
				if (kc_monsterlevelenabledflags)
				{
					dmg = (7 + (CountInv("MonsterLevel") * 0.035));
					dmg += ((12 * baserand) + (CountInv("MonsterLevel") * (0.06 * baserand)));
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 30)
					{
						dmg += (2.334 + (CountInv("MonsterLevel") * 0.001167));
						dmg += ((4 * baserand) + (CountInv("MonsterLevel") * (0.02 * baserand)));
					}
					if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 60)
					{
						dmg += (1.167 + (CountInv("MonsterLevel") * 0.000584));
						dmg += ((2 * baserand) + (CountInv("MonsterLevel") * (0.01 * baserand)));
					}
					dmg *= (1.0 + (CountInv("MonsterLevel") * 0.005));
				}
				dmg *= 0.5;
				
				A_CustomComboAttack(atktype, user_tempvar1, (dmg), "imp/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= random(112,113))
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (CountInv("MonsterLevel") >= 225)
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
				A_DynamicMusic();
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}
class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMastermindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SSWV AABBCCDD 3
			{
				user_walksound++;
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}