class KCScriptedMarine : KCCreature // replaces ScriptedMarine
{
	const MARINE_PAIN_CHANCE = 160;

	enum EMarineWeapon
	{
		WEAPON_Dummy,
		WEAPON_Fist,
		WEAPON_BerserkFist,
		WEAPON_Chainsaw,
		WEAPON_Pistol,
		WEAPON_Shotgun,
		WEAPON_SuperShotgun,
		WEAPON_Chaingun,
		WEAPON_RocketLauncher,
		WEAPON_PlasmaRifle,
		WEAPON_Railgun,
		WEAPON_BFG
	};
	
	struct WeaponStates
	{
		state melee;
		state missile;
	}

	int CurrentWeapon;
	SpriteID SpriteOverride;
	
	Default
	{
		Tag "UAC Marine Buddy";
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance MARINE_PAIN_CHANCE;
		MONSTER;
		-COUNTKILL
		Translation 0;
		Damage 100;
		DeathSound "*death";
		PainSound "*pain50";
	}
	
	States
	{
		Spawn:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			Loop;
		Idle:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			PLAY A 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			PLAY B 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			Loop;
		See:
			PLAY ABCD 4 A_MarineChase;
			Loop;

		Melee.Fist:		
			PLAY E 4 A_FaceTarget;
			PLAY E 4 A_M_Punch(1);
			PLAY A 9;
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		FistEnd:
			PLAY A 5 A_FaceTarget;
			Goto See;
		Melee.Berserk:
			PLAY E 2 A_FaceTarget;
			PLAY E 2 A_M_Punch(10);
			PLAY A 4
			{
				A_SetTics(random(4,5));
			}
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		Melee.Chainsaw:
			PLAY E 4 A_MarineNoise;
			PLAY E 4 A_M_Saw;
			PLAY E 0 A_M_SawRefire;
			goto Melee.Chainsaw+1;

		Missile:
			PLAY E 0 A_DynamicMusic();
		Missile.None:
			PLAY E 12 A_FaceTarget;
			Goto Idle;
			PLAY F 6 BRIGHT;
			Loop;
		Missile.Pistol:
			PLAY E 4 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FirePistol(1);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		ShootEnd:
			PLAY A 5;
			Goto See;
		Fireloop.Pistol:
			PLAY F 0 A_DynamicMusic();
			PLAY F 6 BRIGHT A_M_FirePistol(0);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		Missile.Shotgun:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun;
			Goto See;
		Missile.SSG:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun2;
			Goto See;
		Missile.Chaingun:
			PLAY E 4 A_FaceTarget;
			PLAY FF 4 BRIGHT 
			{
				A_DynamicMusic();
				A_M_FireCGun(1);
			}
			PLAY FF 4 BRIGHT 
			{
				A_DynamicMusic();
				A_M_FireCGun(0);
			}
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Chaingun+3;
		Missile.Rocket:
			PLAY E 8;
			PLAY F 6 BRIGHT A_M_FireMissile;
			PLAY E 6;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;
		Missile.Plasma:
			PLAY E 2 A_FaceTarget;
			PLAY E 0 
			{
				A_DynamicMusic();
				A_FaceTarget();
			}
			PLAY F 3 BRIGHT A_M_FirePlasma;
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Plasma+1;
		Missile.Railgun:
			PLAY E 4 A_M_CheckAttack;
			PLAY F 6 BRIGHT A_M_FireRailgun;
			Goto See;
		Missile.BFG:
			PLAY E 5 A_M_BFGSound;
			PLAY EEEEE 5 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FireBFG;
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;

		SkipAttack:
			PLAY A 1;
			Goto See;
		Pain:
			PLAY G 4;
			PLAY G 4 A_KCPain;
			Goto Idle;
		Death:
			PLAY H 10;
			PLAY I 10 A_Scream;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			PLAY O 5;
			PLAY P 5 A_XScream;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		Raise:
			PLAY MLKJIH 5;
			Goto See;
	}
	
	//============================================================================
	//
	// 
	//
	//============================================================================

	private bool GetWeaponStates(int weap, out WeaponStates wstates)
	{
		static const statelabel MeleeNames[] = 
		{
			"Melee.None", "Melee.Fist", "Melee.Berserk", "Melee.Chainsaw", "Melee.Pistol", "Melee.Shotgun", 
			"Melee.SSG", "Melee.Chaingun", "Melee.Rocket", "Melee.Plasma", "Melee.Railgun", "Melee.BFG"
		};

		static const statelabel MissileNames[] = 
		{
			"Missile.None", "Missile.Fist", "Missile.Berserk", "Missile.Chainsaw", "Missile.Pistol", "Missile.Shotgun", 
			"Missile.SSG", "Missile.Chaingun", "Missile.Rocket", "Missile.Plasma", "Missile.Railgun", "Missile.BFG"
		};
		
		if (weap < WEAPON_Dummy || weap > WEAPON_BFG) weap = WEAPON_Dummy;

		wstates.melee = FindState(MeleeNames[weap], true);
		wstates.missile = FindState(MissileNames[weap], true);

		return wstates.melee != null || wstates.missile != null;
	}

	//============================================================================
	//
	// 
	//
	//============================================================================

	override void BeginPlay ()
	{
		Super.BeginPlay ();

		// Set the current weapon
		for(int i = WEAPON_Dummy; i <= WEAPON_BFG; i++)
		{
			WeaponStates wstates;
			if (GetWeaponStates(i, wstates))
			{
				if (wstates.melee == MeleeState && wstates.missile == MissileState)
				{
					CurrentWeapon = i;
				}
			}
		}
	}

	//============================================================================
	//
	// 
	//
	//============================================================================
	
	override void Tick ()
	{
		Super.Tick ();

		// Override the standard sprite, if desired
		if (SpriteOverride != 0 && sprite == SpawnState.sprite)
		{
			sprite = SpriteOverride;
		}

		if (special1 != 0)
		{
			if (CurrentWeapon == WEAPON_SuperShotgun)
			{ // Play SSG reload sounds
				int ticks = level.maptime - special1;
				if (ticks < 47)
				{
					switch (ticks)
					{
					case 14:
						A_StartSound ("weapons/sshoto", CHAN_WEAPON);
						break; 
					case 28:   
						A_StartSound ("weapons/sshotl", CHAN_WEAPON);
						break;
					case 41:  
						A_StartSound ("weapons/sshotc", CHAN_WEAPON);
						break;
					}
				}
				else
				{
					special1 = 0;
				}
			}
			else
			{ // Wait for a long refire time
				if (level.maptime >= special1)
				{
					special1 = 0;
				}
				else
				{
					bJustAttacked = true;
				}
			}
		}
	}

	//============================================================================
	//
	// A_M_Refire
	//
	//============================================================================

	void A_M_Refire (bool ignoremissile = false, statelabel jumpto = null)
	{
		if (target == null || target.health <= 0)
		{
			if (MissileState && random[SMarineRefire]() < 160)
			{ // Look for a new target most of the time
				if (LookForPlayers (true) && CheckMissileRange ())
				{ // Found somebody new and in range, so don't stop shooting
					return;
				}
			}
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
			return;
		}
		if (((ignoremissile || MissileState == null) && !CheckMeleeRange ()) ||
			!CheckSight (target) ||	random[SMarineRefire]() < 4)	// Small chance of stopping even when target not dead
		{
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
		}
	}

	//============================================================================
	//
	// A_M_SawRefire
	//
	//============================================================================

	void A_M_SawRefire ()
	{
		if (target == null || target.health <= 0 || !CheckMeleeRange ())
		{
			SetStateLabel ("See");
		}
	}

	//============================================================================
	//
	// A_MarineNoise
	//
	//============================================================================

	void A_MarineNoise ()
	{
		if (CurrentWeapon == WEAPON_Chainsaw)
		{
			A_StartSound ("weapons/sawidle", CHAN_WEAPON);
		}
	}

	//============================================================================
	//
	// A_MarineChase
	//
	//============================================================================

	void A_MarineChase ()
	{
		A_MarineNoise();
		A_KCChase();
	}

	//============================================================================
	//
	// A_MarineLook
	//
	//============================================================================

	void A_MarineLook ()
	{
		A_MarineNoise();
		A_Look();
	}

	//============================================================================
	//
	// A_M_Punch (also used in the rocket attack.)
	//
	//============================================================================

	void A_M_Punch(int damagemul)
	{
		FTranslatedLineTarget t;

		if (target == null)
			return;

		int damage = (random[SMarinePunch](1, 10) << 1) * damagemul;

		A_FaceTarget ();
		double ang = angle + random2[SMarinePunch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, DEFMELEERANGE);
		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "BulletPuff", true, t);

		// turn to face target
		if (t.linetarget)
		{
			A_StartSound ("*fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
	}

	//============================================================================
	//
	// P_GunShot2
	//
	//============================================================================

	private void GunShot2 (bool accurate, double pitch, class<Actor> pufftype)
	{
		int damage = 5 * random[SMarineGunshot](1,3);
		double ang = angle;

		if (!accurate)
		{
			ang += Random2[SMarineGunshot]() * (5.625 / 256);
		}

		LineAttack (ang, MISSILERANGE, pitch, damage, 'Hitscan', pufftype);
	}

	//============================================================================
	//
	// A_M_FirePistol
	//
	//============================================================================

	void A_M_FirePistol (bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/pistol", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireShotgun
	//
	//============================================================================

	void A_M_FireShotgun ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/shotgf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 7; ++i)
		{
			GunShot2 (false, pitch, "BulletPuff");
		}
		special1 = level.maptime + 27;
	}

	//============================================================================
	//
	// A_M_CheckAttack
	//
	//============================================================================

	void A_M_CheckAttack ()
	{
		if (special1 != 0 || target == null)
		{
			SetStateLabel ("SkipAttack");
		}
		else
		{
			A_FaceTarget ();
		}
	}

	//============================================================================
	//
	// A_M_FireShotgun2
	//
	//============================================================================

	void A_M_FireShotgun2 ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/sshotf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 20; ++i)
		{
			int damage = 5*(random[SMarineFireSSG](1, 3));
			double ang = angle + Random2[SMarineFireSSG]() * (11.25 / 256);

			LineAttack (ang, MISSILERANGE, pitch + Random2[SMarineFireSSG]() * (7.097 / 256), damage, 'Hitscan', "BulletPuff");
		}
		special1 = level.maptime;
	}

	//============================================================================
	//
	// A_M_FireCGun
	//
	//============================================================================

	void A_M_FireCGun(bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/chngun", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireMissile
	//
	// Giving a marine a rocket launcher is probably a bad idea unless you pump
	// up his health, because he's just as likely to kill himself as he is to
	// kill anything else with it.
	//
	//============================================================================

	void A_M_FireMissile ()
	{
		if (target == null)
			return;

		if (CheckMeleeRange ())
		{ // If too close, punch it
			A_M_Punch(1);
		}
		else
		{
			A_FaceTarget ();
			SpawnMissile (target, "Rocket");
		}
	}

	//============================================================================
	//
	// A_M_FireRailgun
	//
	//============================================================================

	void A_M_FireRailgun ()
	{
		if (target == null)
			return;

		A_MonsterRail();
		special1 = level.maptime + 50;
	}

	//============================================================================
	//
	// A_M_FirePlasma
	//
	//============================================================================

	void A_M_FirePlasma ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "PlasmaBall");
		special1 = level.maptime + 20;
	}

	//============================================================================
	//
	// A_M_BFGsound
	//
	//============================================================================

	void A_M_BFGsound ()
	{
		if (target == null)
			return;

		if (special1 != 0)
		{
			SetState (SeeState);
		}
		else
		{
			A_FaceTarget ();
			A_StartSound ("weapons/bfgf", CHAN_WEAPON);
			// Don't interrupt the firing sequence
			PainChance = 0;
		}
	}

	//============================================================================
	//
	// A_M_FireBFG
	//
	//============================================================================

	void A_M_FireBFG ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "BFGBall");
		special1 = level.maptime + 30;
		PainChance = MARINE_PAIN_CHANCE;
	}
		
	//---------------------------------------------------------------------------

	final void SetWeapon (int type)
	{
		WeaponStates wstates;
		if (GetWeaponStates(type, wstates))
		{
			static const class<Actor> classes[] = {
				"KCScriptedMarine",
				"KCMarineFist",
				"KCMarineBerserk",
				"KCMarineChainsaw",
				"KCMarinePistol",
				"KCMarineShotgun",
				"KCMarineSSG",
				"KCMarineChaingun",
				"KCMarineRocket",
				"KCMarinePlasma",
				"KCMarineRailgun",
				"KCMarineBFG"
			};
			
			MeleeState = wstates.melee;
			MissileState = wstates.missile;
			DecalGenerator = GetDefaultByType(classes[type]).DecalGenerator;
		}
	}

	final void SetSprite (class<Actor> source)
	{
		if (source == null)
		{ // A valid actor class wasn't passed, so use the standard sprite
			SpriteOverride = sprite = SpawnState.sprite;
			// Copy the standard scaling
			Scale = Default.Scale;
		}
		else
		{ // Use the same sprite and scaling the passed class spawns with
			readonly<Actor> def = GetDefaultByType (source);
			SpriteOverride = sprite = def.SpawnState.sprite;
			Scale = def.Scale;
		}
	}
}
class KCMarineFist : KCScriptedMarine // replaces MarineFist
{
	default
	{
		Tag "Marine [Fist]";
	}
	
	States
	{
		Melee:		
			Goto Super::Melee.Fist;
		Missile:
			Stop;
	}
}
class KCMarineBerserk : KCMarineFist // replaces MarineBerserk
{
	default
	{
		Tag "Marine [Berserk]";
	}
	
	States
	{
		Melee:		
			Goto Super::Melee.Berserk;
		Missile:
			Stop;
	}
}
class KCMarineChainsaw : KCScriptedMarine // replaces MarineChainsaw
{
	default
	{
		Tag "Marine [Chainsaw]";
	}
	
	States
	{
		Melee:
			Goto Super::Melee.Chainsaw;
		Missile:
			Stop;
	}
}
class KCMarinePistol : KCScriptedMarine // replaces MarinePistol
{
	default
	{
		Tag "Marine [Pistol]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Pistol;
	}
}
class KCMarineShotgun : KCScriptedMarine // replaces MarineShotgun
{
	default
	{
		Tag "Marine [Shotgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Shotgun;
	}
}
class KCMarineSSG : KCScriptedMarine // replaces MarineSSG
{
	default
	{
		Tag "Marine [Super Shotgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.SSG;
	}
}
class KCMarineChaingun : KCScriptedMarine // replaces MarineChaingun
{
	default
	{
		Tag "Marine [Chaingun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Chaingun;
	}
}
class KCMarineRocket : KCMarineFist // replaces MarineRocket
{
	default
	{
		Tag "Marine [Rocket Launcher]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Rocket;
	}
}
class KCMarinePlasma : KCScriptedMarine // replaces MarinePlasma
{
	default
	{
		Tag "Marine [Plasma Rifle]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Plasma;
	}
}
class KCMarineRailgun : KCScriptedMarine // replaces MarineRailgun
{
	default
	{
		Tag "Marine [Railgun]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.Railgun;
	}
}
class KCMarineBFG : KCScriptedMarine // replaces MarineBFG
{
	default
	{
		Tag "Marine [BFG9000]";
	}
	
	States
	{
		Missile:
			Goto Super::Missile.BFG;
	}
}
class BulletPuffNew : BulletPuff // replaces BulletPuff
{
	default
	{
		Tag "Shot";
		+PUFFGETSOWNER
	}
}

// Strife
class StrifeGenBulletTracer : KCBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,5) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeGenBulletTracer2 : StrifeGenBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,15) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeGenBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeGenBulletTracerTrail : KCBulletTracerTrail
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}
class StrifeReaverBulletTracer : KCBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(1,8) * 3));
		Damagetype "Bullet";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.75;
		//decal "BulletChip";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeReaverBulletTracer2 : StrifeReaverBulletTracer
{
	default
	{
		Tag "shot";
		DamageFunction ((Random(3,24) * 3));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeReaverBulletTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1; //A_SpawnItem("StrifePuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("StrifePuff");
			Stop;
	}
}
class StrifeReaverBulletTracerTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.75;
		RenderStyle "Add";
	}
	States
	{
		Spawn:
			CTAC A 2 bright;
			Stop;
	}
}
class StrifeMaulerTracer : KCBulletTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,4) * 2));
		Damagetype "Disintegrate";
		Radius 1;
		Height 1;
		Mass 5;
		Speed 160; // 80
		PROJECTILE;
		+DONTREFLECT;
		+BLOODSPLATTER;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.5;
		//decal "BulletChip";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}
class StrifeMaulerTracer2 : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,12) * 2));
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay bright;
		Idle:
			TNT1 A 1 bright A_SpawnTracerTrail("StrifeMaulerTracerTrail",6,-2.5);
			Loop;
		XDeath:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
		Death:
		Crash:
			TNT1 A 1 A_SpawnItem("MaulerPuff");
			Stop;
	}
}
class StrifeMaulerTracerRetail : StrifeMaulerTracer
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(1,5) * 3));
	}
}
class StrifeMaulerTracerRetail2 : StrifeMaulerTracerRetail
{
	default
	{
		Tag "Mauler shot";
		DamageFunction ((Random(3,15) * 3));
	}
}
class StrifeMaulerTracerTrail : KCBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		DamageFunction (0);
		Projectile;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOCLIP;
		+DONTSPLASH;
		Scale 0.5;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			GTAC A 2 bright;
			Stop;
	}
}

//

class DeadHellWarrior : DeadMarine
{
	default
	{
		//$Category Decoration
	}
	States 
	{
		Spawn:  
			HWAR T -1;
			Stop;
	}
}

// Custom
class HellCleric : KCCreature
{
	default
	{
		Health 200;
		Speed 12;
		Radius 20;
		Height 64;
		ReactionTime 5;
		PainChance 5;
		Mass 200;
		Monster;
		+FLOORCLIP;
		SeeSound "wolfss/sight";
		AttackSound "brain/cube";
		PainSound "grunt/pain";
		DeathSound "wolfss/death";
		HitObituary "%o was battered by a Hell Cleric.";
		Obituary "%o was burned by a Hell Cleric.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			goto Spawn;
		See:
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Pain:
			SSWV H 3;
			SSWV H 3 A_Pain();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Melee:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Missile:
			SSWV E 4 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV G 3 A_FaceTarget();
			SSWV F 4 Bright A_TroopAttack();
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
		Death:
			SSWV I 5;
			SSWV J 10 A_Scream();
			SSWV K 10 A_Fall();
			SSWV L 10;
			SSWV M -1;
			stop;
		XDeath:
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_Fall();
			SSWV QRSTU 5;
			SSWV V -1;
			stop;
		Raise:
			SSWV MLKJI 5;
			SSWV AABBCCDD 3 A_KCChase("Melee","Missile",0,1,3,1,1);
			goto See;
	}
}
// Hell Cleric Shot 1
class HellClericBall : KCProjectile
{
	default
	{
		Tag "Cleric Fireball";
		Radius 6;
		Height 8;
		Scale 1.25;
		Speed 12;
		FastSpeed 24;
		DamageFunction ((32+(random(3,6)*random(9,16)))/4); // 15-32 per shot
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 1.0;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Fire";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((32+(random(3,6)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FRB1 A 4 Bright;
			FRB1 B 4 Bright;
			FRB1 C 4 Bright;
			loop;
		Death:
			FRB1 DEFGH 4 Bright;
			stop;
	}
}
// Hell Cleric Shot 2
class HellClericDarkBall : KCProjectile // DarkSeeker
{
	default
	{
		Tag "Cleric Seekerball";
		Radius 8;
		Height 6;
		Scale 1.25;
		Speed 24;
		Fastspeed 48;
		DamageFunction ((24+(random(4,7)*random(9,16)))/4); // 15-34 per shot
		DamageType "Fire";
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		decal "DoomImpScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(((24+(random(4,7)*random(9,16)))*0.25),1,0.005,0.3334,0.1667,0.005);
	}
	
	states
	{
		Spawn:
			FX15 A 0;
			"####" A 2 Bright;
			"####" A 2 Bright;
			"####" B 2 Bright;
			"####" B 2 Bright A_SeekerMissile(10,20);
			"####" C 2 Bright;
			"####" C 2 Bright;
			"####" A 2 Bright;
			"####" A 2 Bright A_SeekerMissile(10,20);
			"####" B 2 Bright;
			"####" B 2 Bright;
			"####" C 2 Bright;
			"####" C 2 Bright A_SeekerMissile(10,20);
			loop;
		Death:
			FX15 DEFG 4 Bright;
			stop;
	}
}
class HellClericDVDS : KCCreature
{
	default
	{
		Tag "Hell Cleric";
		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		Painchance 24;
		Painchance "Melee", 3;
		Painchance "Fist", 3;
		Painchance "Kick", 16;
		DamageFactor "Fire", 0.75;
		DamageFactor "Ice", 1.334;
		DamageFactor "Melee", 0.4;
		DamageFactor "Fist", 0.4;
		DamageFactor "Kick", 0.4;
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMCLASS;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active" ;
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}
	
	states
	{
		Spawn:
			HELC A 4 A_Look;
			HELC A 4 A_Look;
			Loop;
		See:
			HELC AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,2,true,self)) { bAVOIDMELEE = true; } else { bAVOIDMELEE = false; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(120,2,true,self)) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_KCChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST); 
				}
				else
				{
					A_KCChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
			}
			HELC E 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(90,2,true,self)) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(45,2,true,self)) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				string atktype = "HellClericBall";
				if (user_attacktype == 1) atktype = "HellClericDarkBall";
				
				int baserand = random(6,12);
				int dmg = 7;
				dmg += (12 * baserand);
				dmg *= 0.5;
				if (kc_monsterlevelenabledflags)
				{
					dmg = (7 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.035,true,self)));
					dmg += ((12 * baserand) + (CountInv("MonsterLevel") * (A_CheckMonsterLevelMult(0.06,true,self) * baserand)));
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(30,1,true,self))
					{
						dmg += (2.334 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.001167,true,self)));
						dmg += ((4 * baserand) + (CountInv("MonsterLevel") * (A_CheckMonsterLevelMult(0.02,true,self) * baserand)));
					}
					if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,1,true,self))
					{
						dmg += (1.167 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.000584,true,self)));
						dmg += ((2 * baserand) + (CountInv("MonsterLevel") * (A_CheckMonsterLevelMult(0.01,true,self) * baserand)));
					}
					dmg *= (1.0 + (CountInv("MonsterLevel") * A_CheckMonsterLevelMult(0.005,true,self)));
				}
				dmg *= 0.5;
				
				A_CustomComboAttack(atktype, user_tempvar1, (dmg), "imp/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(random(112,113),1,true,self))
				{
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*1));
					A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-1));
					if (A_CheckMonsterLevel(225,1,true,self))
					{
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*2));
						A_SpawnProjectile(atktype,user_tempvar1,0,(user_tempvar2*-2));
					}
				}
				user_attacks += 1;
				A_DynamicMusic();
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (kc_monsterlevelenabledflags && A_CheckMonsterLevel(60,2,true,self)) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_KCPain(1,random(18,22),8,0,0,25);
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_Scream();
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;

		Ice:
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}
class HellClericSpectral : HellClericDVDS
{
	default
	{
		Tag "Spectral Hell Cleric";
		+SHADOW
		RenderStyle "OptFuzzy";
		Obituary "%o was burned and flamed by a Spectral Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Spectral Hell Cleric.";
	}
}
// Going Down's Ultra Mastermind [MAP29]
class UltraMastermind : SpiderMastermindNew
{
	default
	{
		Tag "Ultra Mastermind";
		Health 12000;
		Speed 16;
		Radius 64;
		Height 100;
		PainChance 40;
		Mass 1000;
		+FLOORCLIP;
		Monster;
		SeeSound "spider/sight";
		AttackSound "weapons/shotgf";
		PainSound "brain/pain";
		DeathSound "brain/death";
		ActiveSound "demon/active";
		Obituary "%o failed to destroy the Ultra Mastermind.";
	}
	States
	{
		Spawn:
			SSWV AB 10 A_Look();
			Loop;
		See:
			SPID A 0 { user_walksound = 0; }
			SSWV AABBCCDD 3
			{
				user_walksound++;
				if (user_walksound == 1)
				{ 
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			goto See;
		Pain:
			SSWV E 3;
			SSWV H 3 A_BrainPain();
			SSWV E 10 A_FaceTarget();
			SSWV G 4 A_FatAttack1();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_FatAttack2();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			SSWV F 4 A_FaceTarget();
			SSWV G 4 A_SkelMissile();
			goto See;
		Missile:
			SSWV EE 10 A_FaceTarget();
			SSWV GE 4 Bright A_CPosAttack();
			SSWV G 1 A_SpidRefire();
			goto Missile+2;
		Death:
			SSWV I 5;
			SSWV N 10 A_BrainScream();
			SSWV O 10 A_Fall();
			SSWV PQRSTU 10;
			SSWV V -1 A_BrainDie();
			stop;
	}
}

class ZombiemanClassic : Zombieman {}
class StealthZombiemanClassic : StealthZombieman {}
class ShotgunGuyClassic : ShotgunGuy {}
class StealthShotgunGuyClassic : StealthShotgunGuy {}
class ChaingunGuyClassic : ChaingunGuy {}
class StealthChaingunGuyClassic : StealthChaingunGuy {}
class WolfensteinSSClassic : WolfensteinSS {}
class DoomImpClassic : DoomImp {}
class StealthDoomImpClassic : StealthDoomImp {}
class DemonClassic : Demon {}
class SpectreClassic : Spectre {}
class StealthDemonClassic : StealthDemon {}
class RevenantClassic : Revenant {}
class StealthRevenantClassic : StealthRevenant {}
class CacodemonClassic : Cacodemon {}
class StealthCacodemonClassic : StealthCacodemon {}
class PainElementalClassic : PainElemental {}
class LostSoulClassic : LostSoul {}
class ArachnotronClassic : Arachnotron {}
class StealthArachnotronClassic : StealthArachnotron {}
class HellKnightClassic : HellKnight {}
class StealthHellKnightClassic : StealthHellKnight  {}
class FatsoClassic : Fatso {}
class StealthFatsoClassic : StealthFatso {}
class ArchvileClassic : Archvile {}
class StealthArchvileClassic : StealthArchvile {}
class BaronOfHellClassic : BaronOfHell {}
class StealthBaronClassic : StealthBaron {}
class SpiderMastermindClassic : SpiderMastermind {}
class CyberdemonClassic : Cyberdemon {}
