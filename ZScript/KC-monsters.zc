// Corpses
class KCDeadMarine : DeadMarine replaces DeadMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY N 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY N 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY N 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY N 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY N 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY N 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY N 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY N 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY N 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY N 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY N 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY N 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY N 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY N 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY N 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY N 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY N 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY N 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY N 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop2:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop3:
			PLAY N 0 A_SpawnItemEx("BlueArmor");
			goto Idle;
		ItemDrop4:
			PLAY N 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Idle;
		ItemDrop5:
			PLAY N 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Idle;
		ItemDrop6:
			PLAY N 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY N 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY N 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY N 0;
			goto Idle;
		Spawn:
			PLAY N 0;
			PLAY N 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,65536) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY N 0 A_Jump(32, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY N -1;
			Stop;
	}
}

class KCGibbedMarine : GibbedMarine replaces GibbedMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY W 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY W 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY W 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY W 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY W 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY W 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY W 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY W 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY W 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY W 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY W 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY W 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY W 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY W 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY W 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY W 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY W 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY W 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY W 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop2:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop3:
			PLAY W 0 A_SpawnItemEx("BlueArmor");
			goto Spawn+3;
		ItemDrop4:
			PLAY W 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Spawn+3;
		ItemDrop5:
			PLAY W 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Spawn+3;
		ItemDrop6:
			PLAY W 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY W 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY W 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY W 0;
			goto Spawn+3;
		Spawn:
			PLAY W 0;
			PLAY W 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,262144) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY W 0 A_Jump(8, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY W -1;
			Stop;
	}
}

// Doom
class ZombiemanNew : KCCreature { } // Filler for later implementation
class PlasmaGuy : KCCreature { } // Filler for later implementation
class RepeaterZombie : KCCreature { } // Filler for later implementation
class KarasawaGuy : KCCreature { } // Filler for later implementation
class RocketLauncherGuy : KCCreature { } // Filler for later implementation
class ShotgunGuyNew : KCCreature { } // Filler for later implementation
class SuperShotgunGuy : KCCreature { } // Filler for later implementation
class FemaleRailZombie : KCCreature { } // Filler for later implementation
class ChaingunGuyNew : KCCreature { } // Filler for later implementation
class Minigunner : KCCreature { } // Filler for later implementation
class BFGGuy : KCCreature { } // Filler for later implementation
class WolfensteinSSNew : KCCreature { } // Filler for later implementation
class DoomImpNew : KCCreature { } // Filler for later implementation
class DarkImp : KCCreature { } // Filler for later implementation
class STDarkImp : KCCreature { } // Filler for later implementation
class VoidDarkImp : KCCreature { } // Filler for later implementation
class NetherDarkImp : KCCreature { } // Filler for later implementation
class DemonNew : KCCreature { } // Filler for later implementation
class SpectreNew : KCCreature { } // Filler for later implementation
class CacodemonNew : KCCreature { } // Filler for later implementation
class Cacolantern : KCCreature { } // Filler for later implementation
class Abaddon : KCCreature { } // Filler for later implementation
class PainElementalNew : KCCreature { } // Filler for later implementation
class LostSoulNew : KCCreature { } // Filler for later implementation
class LostSoulAnnoying : KCCreature { } // Filler for later implementation
class BetaLostSoul : KCCreature { } // Filler for later implementation
class RevenantNew : KCCreature { } // Filler for later implementation
class DeathIncarnate : KCCreature { } // Filler for later implementation

class HellWarrior : KCCreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 175;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 38;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		//DropItem "PikeAmmo", 8;
		//DropItem "PikeAmmoBig", 1;
	}

	States 
	{ 
		Spawn: 
			HWAR AB 10 A_Look();
			Loop;
		See: 
			HWAR AABBCCDD 3
			{
				A_HellWarShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();

				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 16
			{
				A_HellWarShieldOn();
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR H 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Melee: 
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			HWAR J 6 A_KCPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }	
			Goto PainShield;
		PainShield:
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death: 
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60); // HellWarriorShield
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Raise: 
			HWAR QPONMLK 5;
			Goto See;
	} 
}
class HellWarriorBall : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 14;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.7;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HWFB AB 5 Bright;
			Loop;
		Death:
			HWFB CDE 5 Bright;
			Stop;
	}
}

class HellWarriorBall2 : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		ALPHA 0.8;
		SCALE 0.4;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Zap";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override bool CanCollideWith(Actor other, bool passive) // HellWarriorBall2
	{
		if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright;
			Loop;
		Death:
			GRBA AIJKLMN 3 Bright;
			Stop;
	}
}

class HellWarriorShield : KCBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Speed 6;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	States
	{
		Spawn:
			HWSH ABCDEFGH 3;
			Loop;
		Death:
			HWSH I -1;
			Loop;
	}
}

class FlyingBalrog : KCCreature { } // Filler for later implementation
class FlyingBalrogDVDS : KCCreature { } // Filler for later implementation
class HellKnightNew : KCCreature { } // Filler for later implementation

class BaronBallNew : KCProjectile // replaces BaronBall
{
	Default
	{
		Tag "Baron Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}

class BaronOfHellNew : KCCreature { } // Filler for later implementation
class Belphegor : KCCreature { } // Filler for later implementation
class Cybruiser : KCCreature { } // Filler for later implementation
class ArachnotronNew : KCCreature { } // Filler for later implementation
class RailArachnotron : KCCreature { } // Filler for later implementation
class FusionArachnotron : KCCreature { } // Filler for later implementation
class ArachnotronMK2 : KCCreature { } // Filler for later implementation
class MancubusNew : KCCreature { } // Filler for later implementation
class Hectebus : KCCreature { } // Filler for later implementation
class Daedabus : KCCreature { } // Filler for later implementation
class ArchvileNew : KCCreature { } // Filler for later implementation
class Diabloist : KCCreature { } // Filler for later implementation
class ArchonOfHell : KCCreature { } // Filler for later implementation
class BruiserDemon : KCCreature { } // Filler for later implementation
class PyroDemon : KCCreature { } // Filler for later implementation
class CyberDemonNew : KCCreature { } // Filler for later implementation
// Cyberdemon Stomps
class CyberStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "Add";
		Alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+DONTREFLECT;
		Health 5;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp",CHAN_7);
			}
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(85,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,128,0,0,32);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
	}
}

class ExplosionSmoke : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+THRUACTORS;
		Health 99999;
		BounceFactor 0.5;
		Radius 0;
		Height 0;
		Alpha 0.1;
		RenderStyle "Translucent";
		Scale 1.1;
		Speed 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(waterlevel > 1, "Stap");
			SMK3 BBB 2 A_FadeIn(0.1);
			SMK3 B 20;
			TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
			SMK3 CDEFGHIJKLM 3;
			Goto Death;
		Death:
			TNT1 A 0;
			Stop;
		Stap:		
			TNT1 A 0;
			Stop;
	}
}

class BigSmokes : ExplosionSmoke
{
	default
	{
		Speed 1;
		Alpha 0.1;
		Scale 1.5;
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			Goto Death;
		Death:
			SMK3 B 100;
			SMK3 CDEFGHIJKLM 1;
			Stop;
	}
}

class FootStep : KCProjectile
{
	default
	{
		Radius 10;
		Height 10;
		Speed 7;
		Projectile;
		-NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+NOEXTREMEDEATH;
		DamageType "Trample";
		Damage 0;
		+NODAMAGETHRUST;
		+BLOODLESSIMPACT; 
		+THRUACTORS;
		+DONTREFLECT;
		Gravity 40;
		Mass 1000;
		Obituary "%o was trampled by %k.";
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
		Death:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
	}
}

class Footstep5 : FootStep
{
	default
	{
		Damage 0;
		-CLIENTSIDEONLY;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
}

class Footstep6 : FootStep
{
	default
	{
		DamageFunction (random(2,3));
		-CLIENTSIDEONLY;
		-DONTSPLASH;
		-EXPLODEONWATER;
		Mass 500;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 3;
			Goto Death;
		Death:
			TNT1 A 1;
			//NULL A 0 A_StartSound("floor/tile2")
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			stop;
	}
}

class WallChunk : KCBaseZSC
{
	int user_random1;
	default
	{
		Scale 0.16;
		+NOTELEPORT;
		+MISSILE;
		+BOUNCEONACTORS;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		Speed 6;
		Gravity 0.7;
		Bouncefactor 0.2;
		BounceType "Doom";
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		See:
			TNT1 A 0
			{
				user_random1 = random(1,4);
				if (user_random1 == 1) { return resolvestate("See1"); }
				if (user_random1 == 2) { return resolvestate("See2"); }
				if (user_random1 == 3) { return resolvestate("See3"); }
				if (user_random1 == 4) { return resolvestate("See4"); }
				return resolvestate(null);
			}
		See1:
			DUST A 1;
			loop;
		See2:
			DUST B 1;
			loop;
		See3:
			DUST C 1;
			loop;
		See4:
			DUST D 1;
			loop;
		Death:
			TNT1 A 0 
			{
				bMISSILE = false;
				bBOUNCEONACTORS = false;
			}
			TNT1 A 0
			{
				if (user_random1 == 1) { return resolvestate("Death1"); }
				if (user_random1 == 2) { return resolvestate("Death2"); }
				if (user_random1 == 3) { return resolvestate("Death3"); }
				if (user_random1 == 4) { return resolvestate("Death4"); }
				return resolvestate(null);
			}
		Death1:
			DUST A 100;
			Stop;
		Death2:
			DUST B 100;
			Stop;
		Death3:
			DUST C 100;
			Stop;
		Death4:
			DUST D 100;
			Stop;
	}
}

class TinyWallChunk : WallChunk
{
	default
	{
		Scale 0.12;
	}
}

class BigWallChunk : WallChunk
{
	default
	{
		Scale 0.3;
	}
}

class HugeWallChunk : WallChunk
{
	default
	{
		Scale 0.4;
	}
}

class DirtChunk1 : WallChunk
{
	default
	{
		Scale 0.6;
		Speed 16;
		BounceFactor 0.5;
		Translation "128:151=74:79", "96:111=71:79";
	}
}

class DirtChunk2 : WallChunk
{
	default
	{
		Scale 0.4;
		Speed 12;
		BounceFactor 0.3;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
class Annihilator : KCCreature { } // Filler for later implementation
class SpiderMastermindNew : KCCreature { } // Filler for later implementation
class Demolisher : KCCreature { } // Filler for later implementation
class HadesSphere : KCCreature { } // Filler for later implementation
class HSOverlord : KCCreature { } // Filler for later implementation
class HadesElemental : KCCreature { } // Filler for later implementation
class HadesOverlord : KCCreature { } // Filler for later implementation
// Heretic
class IceLich : KCCreature { } // Filler for later implementation
class DSparilMountedNew : KCCreature { } // Filler for later implementation
class DSparilUnmountedNew : KCCreature { } // Filler for later implementation
// Hexen
class KoraxNew : KCCreature { } // Filler for later implementation
// Strife
// Custom
class HellCleric : KCCreature { } // Filler for later implementation
class HellClericDVDS : KCCreature { } // Filler for later implementation
class HellClericSpectral : KCCreature { } // Filler for later implementation
class UltraMastermind : KCCreature { } // Filler for later implementation