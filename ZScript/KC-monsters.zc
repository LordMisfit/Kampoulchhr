// Corpses
class KCDeadMarine : DeadMarine replaces DeadMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY N 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY N 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY N 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY N 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY N 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY N 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY N 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY N 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY N 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY N 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY N 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY N 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY N 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY N 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY N 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY N 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY N 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY N 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY N 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop2:
			PLAY N 0 A_SpawnItemEx("GreenArmor");
			goto Idle;
		ItemDrop3:
			PLAY N 0 A_SpawnItemEx("BlueArmor");
			goto Idle;
		ItemDrop4:
			PLAY N 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Idle;
		ItemDrop5:
			PLAY N 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Idle;
		ItemDrop6:
			PLAY N 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY N 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY N 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY N 0;
			goto Idle;
		Spawn:
			PLAY N 0;
			PLAY N 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,65536) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY N 0 A_Jump(32, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY N -1;
			Stop;
	}
}

class KCGibbedMarine : GibbedMarine replaces GibbedMarine
{
	mixin TSASpawnCheck;
	default
	{
	}
	
	States
	{
		DropChainsaw:
			PLAY W 0 A_SpawnItemEx("Chainsaw");
			goto ItemDrop6+3;
		DropPistol:
			PLAY W 0 A_SpawnItemEx("Pistol");
			goto ItemDrop6+3;
		DropGlock:
			PLAY W 0 A_SpawnItemEx("Glock21");
			goto ItemDrop6+3;
		DropShotgun:
			PLAY W 0 A_SpawnItemEx("Shotgun");
			goto ItemDrop6+3;
		DropSShotgun:
			PLAY W 0 A_SpawnItemEx("SuperShotgun");
			goto ItemDrop6+3;
		DropChaingun:
			PLAY W 0 A_SpawnItemEx("Chaingun");
			goto ItemDrop6+3;
		DropTommyGun:
			PLAY W 0 A_SpawnItemEx("TommyGun");
			goto ItemDrop6+3;
		DropRocket:
			PLAY W 0 A_SpawnItemEx("RocketLauncher");
			goto ItemDrop6+3;
		DropPlasma:
			PLAY W 0 A_SpawnItemEx("PlasmaRifle");
			goto ItemDrop6+3;
		DropDevastator:
			PLAY W 0 A_SpawnItemEx("DevastatorGenerator");
			goto ItemDrop6+3;
		DropDeviation:
			PLAY W 0 A_SpawnItemEx("Deviation");
			goto ItemDrop6+3;
		DropImpalerBow:
			PLAY W 0 A_SpawnItemEx("ImpalerXBow");
			goto ItemDrop6+3;
		DropSawThrower:
			PLAY W 0 A_SpawnItemEx("SawThrower");
			goto ItemDrop6+3;
		DropBFG:
			PLAY W 0 A_SpawnItemEx("BFG9000");
			goto ItemDrop6+3;
		DropTesla:
			PLAY W 0 A_SpawnItemEx("TeslaCannon");
			goto ItemDrop6+3;
		DropBHGen:
			PLAY W 0 A_SpawnItemEx("BHGen");
			goto ItemDrop6+3;
		DropRiotGun:
			PLAY W 0 A_SpawnItemEx("RiotGun");
			goto ItemDrop6+3;
		DropBlasterPistol:
			PLAY W 0 A_SpawnItemEx("BlasterPickup");
			goto ItemDrop6+3;
		DropBlasterRifle:
			PLAY W 0 A_SpawnItemEx("BlasterRifle");
			goto ItemDrop6+3;
		ItemDrop1:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop2:
			PLAY W 0 A_SpawnItemEx("GreenArmor");
			goto Spawn+3;
		ItemDrop3:
			PLAY W 0 A_SpawnItemEx("BlueArmor");
			goto Spawn+3;
		ItemDrop4:
			PLAY W 0 A_SpawnItemEx((random(1,4) <= 1) ? "BlueArmor" : "GreenArmor");
			goto Spawn+3;
		ItemDrop5:
			PLAY W 0 
			{
				if (random(1,64) <= 1) A_SpawnItemEx("CombatPack");
													else A_SpawnItemEx("BackPack");
			}
			goto Spawn+3;
		ItemDrop6:
			PLAY W 0 A_Jump(64, "DropBHGen", "DropBFG", "DropRocket", "DropDevastator", "DropDeviation", "DropSawThrower");
			PLAY W 0 A_Jump(128, "DropPlasma", "DropBlasterRifle", "DropTesla", "DropRocket", "DropChaingun", "DropSShotgun", "DropSawThrower", "DropImpalerBow");
			PLAY W 0 A_Jump(256, "DropPistol", "DropGlock", "DropBlasterPistol", "DropShotgun", "DropSShotgun", "DropChainGun", "DropTommyGun");
			PLAY W 0;
			goto Spawn+3;
		Spawn:
			PLAY W 0;
			PLAY W 0
			{
				actor playera = players[0].mo;
				let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
				if (MiscItem && MiscItem.TSArtifactSpawnCooldown <= 0)
				{
					if (random(1,262144) <= 1)
					{
						A_TSASpawnMessage();
						return resolvestate("Idle");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PLAY W 0 A_Jump(8, "ItemDrop1", "ItemDrop2", "ItemDrop3", "ItemDrop4", "ItemDrop5", "ItemDrop6");
		Idle:
			PLAY W -1;
			Stop;
	}
}

class KCHelperDog : KCCreature // replaces MBFHelperDog
{
	default
	{
		Tag "Attack Dog";
		Health 375; // 500
		Speed 15; // 10
		Radius 12;
		Height 28;
		Mass 100; // 100
		PainChance 120; // 180
		Painchance "Fist", 180; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+JUMPDOWN;
		ActiveSound "dog/active";
		AttackSound "dog/attack";
		DeathSound "dog/death";
		PainSound "dog/pain";
		SeeSound "dog/sight";
		Obituary "$OB_DOG"; // "%o was mauled by a dog."
	}

	States
	{
		Spawn:
			DOGS A 0 NoDelay;
			DOGS AABB 5 A_Look();
			goto Spawn+1;
		See:
			DOGS A 0;
			DOGS AABBCCDD 2
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(1); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DOGS A 0;
			DOGS EF 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(7); }
				A_FaceTarget();
			}
			DOGS G 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CustomMeleeAttack((random(1,10)*randompick(4,4,4,4,6,6,8)),"none","none","Melee",true); // A_SargAttack
			}
			Goto See;

		Pain:
			DOGS H 2;
			DOGS H 2 A_KCPain();
			Goto See;
		Pain.Fist:
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HH 2;
			Goto See;
		Pain.Kick: 
			DOGS H 2;
			DOGS H 2 A_KCPain();
			DOGS HHHH 2; 
			Goto See; 

		Death:
			DOGS I 8;
			DOGS J 8 A_Scream();
			DOGS K 4;
			DOGS L 4 A_Fall();
			DOGS M 4;
			DOGS N -1;
			stop;
		Ice:
			DOGS H 5 A_GenericFreezeDeath();
			DOGS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DOGS N 5;
			DOGS MLKJI 5;
			Goto See;
	}
}

// Doom
class ZombiemanNew : KCCreature
{
	default
	{
		Tag "Zombieman";
		Health 20;
		Radius 20;
		Height 56;
		Speed 8;
		Painchance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "$OB_ZOMBIE";
		DropItem "Clip";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}
	
	void A_PosAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			ang += Random2[PosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			A_StartSound(AttackSound, CHAN_WEAPON);
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States
	{
		Spawn:
			POSS AB 10 A_Look();
			Loop;
		See:
			POSS A 0
			{
				user_shotsfired = 0;
			}
			POSS AABBCCDD 4 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					bAVOIDMELEE = true;
					A_SetTics(3); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			POSS E 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }

				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}

				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		Missile1:
			POSS F 8 bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
				
				A_PosAttack();
			}
			goto Missile1Post;
		Missile1Post:
			POSS E 8
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }

				user_shotsfired += 1;
				A_FaceTarget();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2; 
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/10); }
				}
				else 
				{
					user_shotsfiredmax = 1;
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += (CountInv("MonsterLevel")/20); }
				}
	
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			POSS G 3;
			POSS G 3 A_KCPain();
			Goto See;
		Death:
			POSS H 5;
			POSS I 5 A_Scream();
			POSS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS K 5;
			POSS L -1;
			Stop;
		XDeath:
			POSS M 5;
			POSS N 5 A_XScream();
			POSS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			POSS PQRST 5;
			POSS U -1;
			Stop;
		Raise:
			POSS K 5;
			POSS JIH 5;
			Goto See;
	}
}
class PlasmaGuy : KCCreature { } // Filler for later implementation
class RepeaterZombie : KCCreature { } // Filler for later implementation
class KarasawaGuy : KCCreature { } // Filler for later implementation
class RocketLauncherGuy : KCCreature { } // Filler for later implementation
class ShotgunGuyNew : KCCreature
{
	default
	{
		Tag "Shotgun Guy";
		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "shotguy/sight";
		AttackSound "shotguy/attack";
		PainSound "shotguy/pain";
		DeathSound "shotguy/death";
		ActiveSound "shotguy/active";
		Obituary "$OB_SHOTGUY";
	}

	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);

				int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}
	
	States
	{
		Spawn:
			SPOS AB 10 A_Look();
			Loop;
		See:
			SPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			#### # 0 A_DynamicMusic();
			SPOS E 10 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_FaceTarget();
			}
			SPOS F 10 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_SposAttackUseAtkSound();
			}
			SPOS E 10
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
			}
			Goto See;
		Pain:
			SPOS G 3;
			SPOS G 3 A_KCPain();
			Goto See;
		Death:
			SPOS H 5;
			SPOS I 5 A_Scream();
			SPOS J 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS K 5;
			SPOS L -1;
			Stop;
		XDeath:
			SPOS M 5;
			SPOS N 5 A_XScream();
			SPOS O 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			SPOS PQRST 5;
			SPOS U -1;
			Stop;
		Raise:
			SPOS L 5;
			SPOS KJIH 5;
			Goto See;
	}
}
class SuperShotgunGuy : KCCreature { } // Filler for later implementation
class FemaleRailZombie : KCCreature { } // Filler for later implementation
class ChaingunGuyNew : KCCreature
{
	default
	{
		Tag "Chaingun Guy";
		Health 70;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 170;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 228;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "chainguy/attack";
		Obituary "$OB_CHAINGUY";
		//Dropitem "Chaingun";
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
	}

	void A_CPosAttack()
	{
		if (target)
		{
			if (bStealth) visdir = 1;
			A_FaceTarget();
			A_StartSound(AttackSound, CHAN_WEAPON);
			double slope = AimLineAttack(angle, MISSILERANGE);
			double ang = angle + Random2[CPosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (kc_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					KCBulletTracer TraceShotKC;
					TraceShotKC = KCBulletTracer(TraceShot);
					if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
				}
			}
		}
	}
	
	void A_CPosRefire()
	{
		// keep firing unless target got out of sight
		A_FaceTarget();
		if (Random[CPosRefire](0, 255) >= 40)
		{
			if (!target
				|| HitFriend()
				|| target.health <= 0
				|| !CheckSight(target, SF_SEEPASTBLOCKEVERYTHING|SF_SEEPASTSHOOTABLELINES))
			{
				SetState(SeeState);
			}
		}
	}
	
	States
	{
		Spawn:
			CPOS AB 10 A_Look();
			Loop;
		See:
			CPOS A 0
			{
				user_shotsfired = 0;
			}
			CPOS AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((25 + (CountInv("MonsterLevel") / 8)),(50 + (CountInv("MonsterLevel") / 4))); }
					else { user_shotsfiredmax = random(25,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			#### # 0 A_DynamicMusic();
			CPOS E 10 
			{
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			CPOS FE 4 BRIGHT 
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(3); }

				A_CPosAttack();
				A_DynamicMusic();
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 1 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(0); }
			}
			CPOS F 0 A_MonsterRefire(40,"See"); // A_CPosRefire();
			loop;
			
		MissileEnd:
			TNT1 A 0 
			{
				user_shotsfired = 0;
			}
			CPOS F 0 A_FaceTarget();
			Goto See;

		Pain:
			CPOS G 3;
			CPOS G 3 A_KCPain();
			Goto See;
		Death:
			CPOS H 5;
			CPOS I 5 A_Scream();
			CPOS J 5
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS KLM 5;
			CPOS N -1;
			Stop;
		XDeath:
			CPOS O 5;
			CPOS P 5 A_XScream();
			CPOS Q 5 
			{
				A_NoBlocking();
				A_Drop();
			}
			CPOS RS 5;
			CPOS T -1;
			Stop;
		Raise:
			CPOS N 5;
			CPOS MLKJIH 5;
			Goto See;
	}
}
// Mingunner Corporal
class Minigunner : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/ChaingunGuy Type";
		Tag "Minigun Zombie";
		
		Health 105; // 70
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Ice", 1.113;
		Painchance "Ice", 189;
		DamageFactor "CherryBomb", 1.1667;
		Painchance "CherryBomb", 198;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 213;

		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		AttackSound "weapons/minigunfire";
		Obituary "%o was shredded by a minigun zombie.";
		
		DropItem "Clip";
		DropItem "Clip", 64;
		DropItem "Clip", 16;
		DropItem "Clip", 4;
		DropItem "Clip", 1;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
	}
	
	void A_Drop()
	{
		if (user_dontdropnormaldrops) return;
		
		actor player = players[0].mo;
		bool check1 = true;
		
		if (check1)
		{
		}
	}
	
	States
	{
		Spawn:
			MINZ A 0 NoDelay;
			MINZ AB 10 A_Look();
			goto Spawn+1;
		See:
			MINZ A 0
			{
				user_shotsfired = 0;
			}
			MINZ AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					bAVOIDMELEE = true; 
				}
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_DynamicMusic();
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("MinigunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((20 + (CountInv("MonsterLevel") / 10)),(50 + (CountInv("MonsterLevel") / 4))); }
					else { user_shotsfiredmax = random(20,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			MINZ E 10
			{
				user_shotaccuracy = 35.5; // 30.0;
				user_shotzaccuracy = 14.2; // 2.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			MINZ FE 2
			{
				A_CheckIfTargetDead("See");

				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(1); }
				A_FaceTarget();
				A_DynamicMusic();
				
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(2,4)*random(6,7), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_SpawnProjectile("ZombieBulletTracer", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0 A_MonsterRefire(40,"See"); // A_CPosRefire
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			MINZ F 0 A_FaceTarget();
			Goto See;

		Pain:
			MINZ G 3;
			MINZ G 3 A_KCPain();
			Goto See;

		Death:
			MINZ H 6;
			MINZ I 6 A_Scream();
			MINZ J 6 
			{
				A_Fall();
				A_Drop();
			}
			MINZ KLM 6;
			MINZ N -1;
			Stop;
		XDeath:
			MINZ O 4;
			MINZ P 4 A_XScream();
			MINZ Q 4
			{
				A_Fall();
				A_Drop();
			}
			MINZ RSTUV 4;
			MINZ W -1;
			Stop;
		Raise:
			MINZ N 5;
			MINZ MLKJIH 5;
			Goto See;
	}
}
class BFGGuy : KCCreature { } // Filler for later implementation
class WolfensteinSSNew : KCCreature { } // Filler for later implementation
class DoomImpNew : KCCreature { } // Filler for later implementation
// Dark Imp Fireballs [also Hell Cleric seekers]
class DarkSeeker : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Seeker";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (5 * random(1,8));
		+SEEKERMISSILE;
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		decal "DoomImpScorch";
	}

	States
	{
		Spawn:
			DKB1 A 0;
			"####" A 2 Bright A_SeekerMissile (5,10);
			"####" ABB 2 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player)
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
			}
		Death2:
			DKB1 A 0;
			"####" CDE 4 Bright;
			Stop;
	}
}

class DarkFast : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Fastshot";
		Radius 8;
		Height 6;
		Speed 36;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		RenderStyle "Add";
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		MISSILEHEIGHT 0;
		Decal "DoomImpScorch";
		DamageType "Dark";
	}
	
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(8);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}

class DarkNormal : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (3 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	States
	{
		Spawn:
			DKB1 A 0 Bright;
			#### AB 4 Bright;
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(4);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB1 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}

// Strong Dark Imp Ball Trail
class DarkStrong_Tail : KCBaseZSC
{
	default
	{
		PROJECTILE;
		RenderStyle "Add";
		+NOCLIP;
		ALPHA 0.5;
	}
	
	States
	{
		Spawn:
			DKBT ABCDEF 2 Bright;
			Stop;
	}
}

class DarkStrong : KCEffectProjectile
{
	default
	{
		Tag "Dark Imp Darkball";
		Radius 8;
		Height 6;
		Speed 18;
		DamageFunction (6 * random(1,8));
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Dark";
		Decal "DoomImpScorch";
	}
	
	States
	{
		Spawn:
			DKB2 A 0 Bright;
			#### AB 4 Bright A_SpawnItemEx("DarkStrong_Tail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			TNT1 A 0 Bright
			{
				actor player = players[0].mo;
				if (master == player) 
				{
					A_StatusEffectChecker(2);
					if (random(1,user_ailmentmaxchance) <= 1 && user_canafflict)
					{
						user_random = random(1,12);
						if (user_random >= 1 && user_random <= 4)
						{
							A_InflictWeaken(random(105,175),401);
						}
						if (user_random >= 5 && user_random <= 8)
						{
							A_InflictHalve(random(105,175),401);
						}
						if (user_random >= 9 && user_random <= 12)
						{
							A_InflictSlow(random(105,175),401);
						}
					}
				}
				return resolvestate(null);
			}
		Death2:
			DKB2 A 0 Bright;
			#### CDE 4 Bright;
			Stop;
	}
}

class DarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		MissileType "DarkSeeker";
		MeleeDamage 3;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.8; // 6.4

		Species "Imp";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "darkimp/sight";
		PainSound "darkimp/pain";
		DeathSound "darkimp/death";
		ActiveSound "darkimp/active";
		MeleeSound "darkimp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}
	
	States
	{
		Spawn:
			DRKI AB 10 A_Look();
			loop;
		See:
			DRKI AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			DRKI E 0 A_DynamicMusic();
			DRKI EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKI G 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();

				A_CustomComboAttack("DarkSeeker", 32, (3*random(1,8)), "imp/melee");
			}
			goto See;

		Pain:
			DRKI H 2;
			DRKI H 2 A_KCPain();
			Goto See;

		Death:
			DRKI I 8;
			DRKI J 8 A_Scream();
			DRKI K 6;
			DRKI L 6 A_NoBlocking();
			DRKI M -1;
			Stop;
		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_NoBlocking();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKI M 8;
			DRKI L 8;
			DRKI KJI 6;
			Goto See;
	}
}

class STDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Weak]";
		
		Health 110;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		MissileType "DarkFast";
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		DamageFactor "Explosive", 1;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;
		
		MeleeDamage 3;
		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp2/sight";
		PainSound "darkimp2/pain";
		DeathSound "darkimp2/death";
		ActiveSound "darkimp2/active";
		MeleeSound "darkimp2/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKS AB 10 A_Look();
			loop;
		See:
			DRKS AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			DRKS E 0 A_DynamicMusic();
			DRKS EF 8
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKS G 6
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CustomComboAttack("DarkFast", 32, (3*random(1,8)), "imp/melee");
			}
			Goto See;

		Pain:
			DRKS H 2;
			DRKS H 2 A_KCPain();
			Goto See;

		Death:
			DRKS I 8;
			DRKS J 8 A_Scream();
			DRKS K 6;
			DRKS L 6 A_Fall();
			DRKS M -1;
			Stop;

		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKS M 8;
			DRKS L 8;
			DRKS KJI 6;
			Goto See;
	}
}

class VoidDarkImp : KCCreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/DoomImp Type"
		Tag "Dark Imp [Strong]";

		Health 130;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 7;
		MissileType "DarkNormal";
		MeleeDamage 3;

		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy

		DamageFactor 0.825;
		RadiusDamageFactor 0.825;
		DamageFactor "Explosive", 0.825;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 100;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 0.75;
		Painchance "CherryBomb", 120;
		DamageFactor "BRocket", 1.125;
		Painchance "BRocket", 225;
		DamageFactor "Spinner", 0.8;
		Painchance "Spinner", 160;
		DamageFactor "Popper", 2.5;
		Painchance "Popper", 256;
		DamageFactor "Chop", 1.5;
		Painchance "Chop", 256;

		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp3/sight";
		PainSound "darkimp3/pain";
		DeathSound "darkimp3/death";
		ActiveSound "darkimp3/active";
		MeleeSound "darkimp3/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
	}

	States
	{
		Spawn:
			DRKV AB 10 A_Look();
			loop;
		See:
			DRKV AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0  
			{
				user_shotsfired = 0;
				A_DynamicMusic();
			}
		MissileStart:
			TNT1 A 0 A_Jump(256,"MissileNormal","MissileStrong");
		MissileNormal:
			DRKV EF 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKV G 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkNormal", 32, (3*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;
		MissileStrong:
			DRKV IJ 8 Bright
			{
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(7); }
			}
			DRKV K 6 Bright
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }
				A_FaceTarget();
				A_DynamicMusic();

				A_CustomComboAttack("DarkStrong", 32, (random(4,5)*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;

		Pain:
			DRKV H 2;
			DRKV H 2 A_KCPain();
			Goto See;

		Death:
			DRKV L 8;
			DRKV M 8 A_Scream();
			DRKV N 5;
			DRKV O 5 A_Fall();
			DRKV P -1;
			Stop;

		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKV P 8;
			DRKV O 8;
			DRKV NML 6;
			Goto See;
	}
}
class NetherDarkImp : KCCreature
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "Monsters/DoomImp Type";
		Tag "Nether Dark Imp";

		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		Mass 250;
		Scale 1.2;
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
		PainChance 100;
		DamageFactor "Crush", 0.8;
		DamageFactor "Fire", 0.2;
		Painchance "Fire", 20;
		DamageFactor "Ice", 2.5;
		Painchance "Ice", 250;
		DamageFactor "CherryBomb", 0.4;
		Painchance "CherryBomb", 40;
		DamageFactor "BRocket", 0.75;
		Painchance "BRocket", 75;
		DamageFactor "Spinner", 0.6;
		Painchance "Spinner", 60;
		DamageFactor "Popper", 1.75;
		Painchance "Popper", 175;
		DamageFactor "Chop", 2.5;
		Painchance "Chop", 250;
		DamageFactor "Lead", 1.125;
		Painchance "Lead", 113;

		MONSTER;
		Species "Imp";
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp4/sight";
		PainSound "darkimp4/pain";
		DeathSound "darkimp4/death";
		ActiveSound "darkimp4/active";
		MeleeSound "darkimp4/melee";
		Obituary "%o was cursed by a nether dark imp.";
		HitObituary "%o was touched by a nether dark imp.";
	}
	States
	{
		Spawn:
			DRKF A 0 NoDelay;
			DRKF AB 10 A_Look();
			goto Spawn+1;
		See:
			DRKF AABBCCDD 3
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0 A_DynamicMusic();
			DRKF E 0 A_Jump (256, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8
			{
				A_FaceTarget();
			}
			DRKF G 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("NetherLightning", 32, (mldmg), "imp/melee");
			}
			Goto See;
		Missile2:
			DRKF IJ 8
			{
				A_FaceTarget();
			}
			DRKF K 6 
			{
				A_FaceTarget();

				int mldmg = A_CalcDamageFormula(6,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("InfernoBall", 32, (mldmg), "imp/melee");
			}
			Goto See;

		Pain:
			DRKF H 2;
			DRKF H 2 A_KCPain();
			Goto See;

		Death:
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;

		XDeath:
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Ice:
			DRKF H 5 A_GenericFreezeDeath();
			DRKF H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKF P 8;
			DRKF O 8;
			DRKF NML 6;
			Goto See;
	}
}

// Dark Imp InfernoBall Trail
class InfernoBallTrail : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			ITRL ABCDEFGHIJKLMN 1 Bright A_FadeOut(0.08);
			stop;
	}
}

// Dark Imp Nether Lightning
class NetherLightningTrail : KCProjectile
{
	default
	{
		Radius 8;
		Height 6;
		Speed 1;
		Damage 0;
		PROJECTILE;
		+RIPPER;
		RENDERSTYLE "ADD";
		ALPHA 0.75;
		Scale 0.75;
	}

	States
	{
		Spawn:
			NLIT A 1 A_FadeOut (0.025);
			NLIT A 0 A_Jump (32, "Spark");
			loop;
		Spark:
			NLIT A 0 A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			goto Spawn;
	}
}

class NetherLightningSpark : KCProjectile
{
	default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Damage 0;
		+NOGRAVITY;
		Scale 0.3;
	}
	
	States
	{
		Spawn:
			NLIT BCDEFG 1 Bright;
			stop;
	}
}

class InfernoBall : KCProjectile
{
	default
	{
		Tag "Inferno Ball";
		Radius 8;
		Height 6;
		Speed 40;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Fire";
	}

	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(12,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			IBAL AAAABBBB 1 Bright A_SpawnItemEx ("InfernoBallTrail", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			Loop;
		Death:
			IBAL CDE 4 Bright;
			Stop;
	}
}

class NetherLightning : KCProjectile
{
	default
	{
		Tag "Nether Lightning";
		Radius 8;
		Height 6;
		Speed 48;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		+RIPPER;
		Scale 0.75;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		Decal "DoomImpScorch";
		DamageType "Thunder";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(4,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			NLIT A 0 Bright;
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			NLIT AA 1 Bright A_SpawnItemEx ("NetherLightningTrail", 0, 0, 0, 0, 0, 0, 0, 0, 0);
			NLIT A 0 Bright A_SpawnItemEx ("NetherLightningSpark", 0, 0, 0, random(0, -4), random(-2, 2), random(-2, 2), 0, 0, 0);
			loop;
		Death:
			NLIT ABCDEFG 1 Bright;
			Stop;
	}
}
class DemonNew : KCCreature { } // Filler for later implementation
class SpectreNew : KCCreature { } // Filler for later implementation
class CacodemonNew : KCCreature { } // Filler for later implementation
class Cacolantern : KCCreature { } // Filler for later implementation
class Abaddon : KCCreature { } // Filler for later implementation
class PainElementalNew : KCCreature { } // Filler for later implementation
class LostSoulNew : KCCreature { } // Filler for later implementation
class LostSoulAnnoying : KCCreature { } // Filler for later implementation
class BetaLostSoul : KCCreature { } // Filler for later implementation
class RevenantNew : KCCreature { } // Filler for later implementation
class DeathIncarnate : KCCreature { } // Filler for later implementation

class HellWarrior : KCCreature 
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		DamageFactor "Fire", 0.5;
		Painchance "Fire", 25;
		DamageFactor "Ice", 2.0;
		Painchance "Ice", 100;
		DamageFactor "CherryBomb", 3.75;
		Painchance "CherryBomb", 175;
		DamageFactor "BRocket", 2.5;
		Painchance "BRocket", 125;
		DamageFactor "Spinner", 2.5;
		Painchance "Spinner", 125;
		DamageFactor "Suck", 0.75;
		Painchance "Suck", 38;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		//DropItem "PikeAmmo", 8;
		//DropItem "PikeAmmoBig", 1;
	}

	States 
	{ 
		Spawn: 
			HWAR AB 10 A_Look();
			Loop;
		See: 
			HWAR AABBCCDD 3
			{
				A_HellWarShieldOff();
				A_KCChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();

				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT 
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
				A_DynamicMusic();
			}
			HWAR H 16
			{
				A_HellWarShieldOn();
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();
				A_FaceTarget();
				
				user_tempvar1 = 25;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				A_SpawnProjectile("HellWarriorBall2", user_tempvar1, 0, 0);
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") >= 90)
				{
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-1));
					A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*1));
					if (CountInv("MonsterLevel") >= 180)
					{
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*-2));
						A_SpawnProjectile("HellWarriorBall2",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();
				A_FaceTarget();
			}
			HWAR H 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Melee: 
			HWAR E 0
			{
				A_DynamicMusic();
			}
			HWAR EF 8
			{
				A_FaceTarget();
			}
			HWAR G 8 
			{
				A_FaceTarget();
				user_tempvar1 = 32;
				user_tempvar2 = frandompick(7.5,10.25,10.25,10.25,15,15,15,15,15,15,15,18.75,18.75,18.75,22.5);
				int dmg = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
				A_CustomComboAttack("HellWarriorBall", user_tempvar1, (dmg), "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			HWAR J 6 A_KCPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }	
			Goto PainShield;
		PainShield:
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death: 
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60); // HellWarriorShield
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Raise: 
			HWAR QPONMLK 5;
			Goto See;
	} 
}
class HellWarriorBall : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 14;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RENDERSTYLE "Add";
		ALPHA 0.7;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			HWFB AB 5 Bright;
			Loop;
		Death:
			HWFB CDE 5 Bright;
			Stop;
	}
}

class HellWarriorBall2 : KCProjectile
{
	default
	{
		Radius 6;
		Height 8;
		Speed 8;
		DamageFunction (finaldamagedealt);
		PROJECTILE;
		RenderStyle "Add";
		+RANDOMIZE;
		+RIPPER;
		ALPHA 0.8;
		SCALE 0.4;
		SeeSound "imp/attack";
		DeathSound "imp/shotx";
		DamageType "Zap";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(2,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override bool CanCollideWith(Actor other, bool passive) // HellWarriorBall2
	{
		if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- passive: %s", gametic, GetClassName());
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			If (ShieldPartBase(other)) return false;
			if (kcdebug_shieldcollision & 256) Console.Printf("\cyHellWarriorBall2 (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
	
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright;
			Loop;
		Death:
			GRBA AIJKLMN 3 Bright;
			Stop;
	}
}

class HellWarriorShield : KCBaseZSC
{
	default
	{
		Radius 8;
		Height 8;
		Speed 6;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}
	
	States
	{
		Spawn:
			HWSH ABCDEFGH 3;
			Loop;
		Death:
			HWSH I -1;
			Loop;
	}
}

class FlyingBalrog : KCCreature { } // Filler for later implementation
class FlyingBalrogDVDS : KCCreature { } // Filler for later implementation
class HellKnightNew : KCCreature { } // Filler for later implementation

class BaronBallNew : KCProjectile // replaces BaronBall
{
	Default
	{
		Tag "Baron Plasma";
		Radius 6;
		Height 16;
		Speed 15;
		FastSpeed 20;
		DamageFunction (finaldamagedealt);
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 1;
		SeeSound "baron/attack";
		DeathSound "baron/shotx";
		Decal "BaronScorch";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(8,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			BAL7 AB 4 BRIGHT;
			Loop;
		Death:
			BAL7 CDE 6 BRIGHT;
			Stop;
	}
}

class BaronOfHellNew : KCCreature { } // Filler for later implementation
class Belphegor : KCCreature { } // Filler for later implementation
class Cybruiser : KCCreature { } // Filler for later implementation
class ArachnotronNew : KCCreature { } // Filler for later implementation
class RailArachnotron : KCCreature { } // Filler for later implementation
class FusionArachnotron : KCCreature { } // Filler for later implementation
class ArachnotronMK2 : KCCreature { } // Filler for later implementation
class MancubusNew : KCCreature { } // Filler for later implementation
class Hectebus : KCCreature { } // Filler for later implementation
class Daedabus : KCCreature { } // Filler for later implementation
class ArchvileNew : KCCreature { } // Filler for later implementation
class Diabloist : KCCreature { } // Filler for later implementation
class ArchonOfHell : KCCreature { } // Filler for later implementation
class BruiserDemon : KCCreature { } // Filler for later implementation
class PyroDemon : KCCreature { } // Filler for later implementation
// Rockets (Monsters)
class RocketMonster : RocketBase
{
	default
	{
		Tag "Rocket";
		DamageFunction (finaldamagedealt);
		DamageType "Explosive";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(20,random(1,8),0.005,0.3334,0.1667,0.005);
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright 
			{
				int dmg = A_CalcDamageFormulaEx(128,1,0.005,0.3334,0.1667,0.005);
				A_Explode(dmg,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			MISL C 6 Bright;
			MISL D 4 Bright;
			Stop;
	}
}

class CyberdemonNew : KCCreature
{
	default
	{
		Tag "Cyberdemon";
		Health 4000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		//MeleeRange 120;
		PainChance 20;
		DamageFactor "BRocket", 10;
		Painchance "BRocket", 200;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 2;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 75;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		MinMissileChance 160;
		+BOSS 
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E2M8BOSS
		+E4M6BOSS
		SeeSound "cyber/sight";
		PainSound "cyberdemon/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "$OB_CYBORG";
		Species "Cyberdemon";
	}
	
	state A_CybCheckStompDist(int basedist = 24, int minc = 1, int maxc = 5, bool domissile = false)
	{
		if (A_CheckCCInvertGrav() == false)
		{
			float basechance;
			if (A_JumpIfCloser((basedist*random(1,5)), "Stomp"))
			{
				basechance = 0 + (CountInv("MonsterLevel") * 3.3334);
				if (frandom(0.1,100.0) <= basechance) return resolvestate("Stomp");
				else 
				{
					if (domissile)
					{
						basechance = 0 + (CountInv("MonsterLevel") * 6.6667);
						if (frandom(0.1,100.0) <= basechance) return resolvestate("Missile");
						else return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			return resolvestate(null);
		}
		return resolvestate(null);
	}
	
	States
	{
		Spawn:
			CYBR AB 10 A_Look();
			Loop;
		See:
			CYBR A 0
			{
				user_shotsfired = 0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CYBR A 0 { user_walksound = 0; }
			CYBR AABBCCDD 3 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				user_walksound++;
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("cyber/hoof",CHAN_BODY); 
				}
				if (user_walksound == 7) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}

				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_CybCheckStompDist(24,1,3,true);
			}
			Loop;

		Stomp:
			TNT1 A 0 
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR Z 5 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(4); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA A 7 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_FaceTarget();
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_FaceTarget();
				A_SpawnProjectile("CyberStomp",10,0,0,0);
				A_Quake(2, 21, 0, 512, "nosound/silent");
				A_DynamicMusic();
			}
			CYMA B 7
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(5); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(6); }
				
				A_DynamicMusic();
			}
			CYMA B 0 A_Jump(64,2);
			CYMA B 0 A_CybCheckStompDist(24,3,5,true);
			CYMA B 0;
			Goto See;
		
		Missile:
			#### # 0 A_DynamicMusic();
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR E 6 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(3); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(4); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(5); }

				A_FaceTarget();
				A_DynamicMusic();
			}
		MissileB:
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
				A_DynamicMusic();
			}
			CYBR E 0 A_CybCheckStompDist(24,3,5,false);
			CYBR F 12
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }

				A_FaceTarget();
				A_SpawnProjectile("RocketMonster",40,0,0);
				A_DynamicMusic();
			}
			CYBR E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,4) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			CYBR E 0 A_JumpIfCloser(180, "Stomp");
			CYBR E 12 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(6); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 75) { A_SetTics(7); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(8); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(9); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(10); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 15) { A_SetTics(11); }

				A_FaceTarget();
				A_DynamicMusic();
			}
			loop;
			
		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 10 A_KCPain();
			Goto See;
		Death:
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P -1 A_BossDeath();
			Stop;
		Ice:
			CYBR G 5 A_GenericFreezeDeath();
			CYBR G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CYBR O 10;
			CYBR NMLKJHI 10;
			goto See;
	}
}
// Cyberdemon Stomps
class CyberStomp : KCProjectile
{
	default
	{
		Tag "Stomp";
		Radius 12;
		Height 8;
		+MISSILE;
		Speed 15;
		DamageFunction (finaldamagedealt);
		renderstyle "Add";
		Alpha 0.75;
		DamageType "Stomp";
		MeleeDamage 0;
		Gravity 2.0;
		Decal "Cracks";
		-NOGRAVITY;
		+EXTREMEDEATH;
		+FORCERADIUSDMG;
		+DONTREFLECT;
		Health 5;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	override void PostBeginPlay()
	{
		KCProjectile.PostBeginPlay();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	override void Tick()
	{
		KCProjectile.Tick();
		finaldamagedealt = A_CalcDamageFormula(67,random(1,3),0.005,0.3334,0.1667,0.0125);
	}
	
	States
	{
		Spawn:
			TNT1 A 10;
			Stop;
		Death:
			TNT1 A 0
			{
				A_SpawnProjectile("FootStep6", 0, 0, 150);
				A_SpawnProjectile("FootStep6", 0, 0, -150);
				A_SpawnProjectile("FootStep6", 0, 0, -30);
				A_SpawnProjectile("FootStep6", 0, 0, 30);
				A_SpawnProjectile("FootStep6", 0, 0, -60);
				A_SpawnProjectile("FootStep6", 0, 0, 60);
				A_SpawnProjectile("FootStep6", 0, 0, -90);
				A_SpawnProjectile("FootStep6", 0, 0, 90);
				A_SpawnProjectile("FootStep6", 0, 0, -120);
				A_SpawnProjectile("FootStep6", 0, 0, 120);
				A_SpawnItemEx("FootStep5", 0, 0, 40, 0, 0);
				A_StartSound("cyber/stomp",CHAN_7);
			}
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("HugeWallChunk",0,0,random(0,360),2,random(-40,40));
			TNT1 AAAAAAAAAAAA 0 A_SpawnProjectile("BigWallChunk",0,0,random(0,360),2,random(-40,40));
			EXPL AAA 0 A_SpawnProjectile("BigSmokes", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAA 0 A_SpawnProjectile("ExplosionSmoke", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL A 0 
			{
				int raddmg = A_CalcDamageFormulaEx(85,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,128,0,0,32);
			}
			MNSM ABCDEFGHIJKLMNOPQ 1 bright A_Fadeout(frandom(0.08,0.12),FTF_REMOVE);
			Stop;
	}
}

class ExplosionSmoke : KCBaseZSC
{
	default
	{
		+NOBLOCKMAP;
		+NOTELEPORT;
		+DONTSPLASH;
		+MISSILE;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		+NOINTERACTION;
		+NOGRAVITY;
		+DOOMBOUNCE;
		+THRUACTORS;
		Health 99999;
		BounceFactor 0.5;
		Radius 0;
		Height 0;
		Alpha 0.1;
		RenderStyle "Translucent";
		Scale 1.1;
		Speed 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_JumpIf(waterlevel > 1, "Stap");
			SMK3 BBB 2 A_FadeIn(0.1);
			SMK3 B 20;
			TNT1 A 0 A_JumpIf(waterlevel > 1, "Stap");
			SMK3 CDEFGHIJKLM 3;
			Goto Death;
		Death:
			TNT1 A 0;
			Stop;
		Stap:		
			TNT1 A 0;
			Stop;
	}
}

class BigSmokes : ExplosionSmoke
{
	default
	{
		Speed 1;
		Alpha 0.1;
		Scale 1.5;
	}
	
	States
	{
		Spawn:
			SMOK A 0;
			Goto Death;
		Death:
			SMK3 B 100;
			SMK3 CDEFGHIJKLM 1;
			Stop;
	}
}

class FootStep : KCProjectile
{
	default
	{
		Radius 10;
		Height 10;
		Speed 7;
		Projectile;
		-NOGRAVITY;
		+MISSILE;
		+NOTELEPORT;
		+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+NOEXTREMEDEATH;
		DamageType "Trample";
		Damage 0;
		+NODAMAGETHRUST;
		+BLOODLESSIMPACT; 
		+THRUACTORS;
		+DONTREFLECT;
		Gravity 40;
		Mass 1000;
		Obituary "%o was trampled by %k.";
	}
	
	States
	{
		Spawn:
			TNT1 A 2;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
		Death:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			stop;
	}
}

class Footstep5 : FootStep
{
	default
	{
		Damage 0;
		-CLIENTSIDEONLY;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
}

class Footstep6 : FootStep
{
	default
	{
		DamageFunction (random(2,3));
		-CLIENTSIDEONLY;
		-DONTSPLASH;
		-EXPLODEONWATER;
		Mass 500;
		Obituary "%o was stomped on by the Cyberdemon.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 3;
			Goto Death;
		Death:
			TNT1 A 1;
			//NULL A 0 A_StartSound("floor/tile2")
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			Stop;
		Crash:
			TNT1 A 1;
			TNT1 A 1
			{
				int raddmg = A_CalcDamageFormulaEx(10,1,0.005,0.3334,0.1667,0.005);
				A_Explode(raddmg,4,0);
			}
			TNT1 A 6;
			stop;
	}
}

class WallChunk : KCBaseZSC
{
	int user_random1;
	default
	{
		Scale 0.16;
		+NOTELEPORT;
		+MISSILE;
		+BOUNCEONACTORS;
		+FORCEXYBILLBOARD;
		+CLIENTSIDEONLY;
		Speed 6;
		Gravity 0.7;
		Bouncefactor 0.2;
		BounceType "Doom";
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
		See:
			TNT1 A 0
			{
				user_random1 = random(1,4);
				if (user_random1 == 1) { return resolvestate("See1"); }
				if (user_random1 == 2) { return resolvestate("See2"); }
				if (user_random1 == 3) { return resolvestate("See3"); }
				if (user_random1 == 4) { return resolvestate("See4"); }
				return resolvestate(null);
			}
		See1:
			DUST A 1;
			loop;
		See2:
			DUST B 1;
			loop;
		See3:
			DUST C 1;
			loop;
		See4:
			DUST D 1;
			loop;
		Death:
			TNT1 A 0 
			{
				bMISSILE = false;
				bBOUNCEONACTORS = false;
			}
			TNT1 A 0
			{
				if (user_random1 == 1) { return resolvestate("Death1"); }
				if (user_random1 == 2) { return resolvestate("Death2"); }
				if (user_random1 == 3) { return resolvestate("Death3"); }
				if (user_random1 == 4) { return resolvestate("Death4"); }
				return resolvestate(null);
			}
		Death1:
			DUST A 100;
			Stop;
		Death2:
			DUST B 100;
			Stop;
		Death3:
			DUST C 100;
			Stop;
		Death4:
			DUST D 100;
			Stop;
	}
}

class TinyWallChunk : WallChunk
{
	default
	{
		Scale 0.12;
	}
}

class BigWallChunk : WallChunk
{
	default
	{
		Scale 0.3;
	}
}

class HugeWallChunk : WallChunk
{
	default
	{
		Scale 0.4;
	}
}

class DirtChunk1 : WallChunk
{
	default
	{
		Scale 0.6;
		Speed 16;
		BounceFactor 0.5;
		Translation "128:151=74:79", "96:111=71:79";
	}
}

class DirtChunk2 : WallChunk
{
	default
	{
		Scale 0.4;
		Speed 12;
		BounceFactor 0.3;
		Translation "128:151=74:79", "96:111=71:79";
	}
}
class Annihilator : KCCreature { } // Filler for later implementation
class SpiderMastermindNew : KCCreature
{
	default
	{
		Tag "Spider Mastermind";
		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		PainChance 40;
		DamageFactor "Fire", 0.1;
		Painchance "Fire", 4;
		DamageFactor "Ice", 3.75;
		Painchance "Ice", 130;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Monster;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+E3M8BOSS
		+E4M8BOSS
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "mastermind/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
	}
	
	private void A_SPosAttackInternal()
	{
		if (target)
		{
			A_FaceTarget();
			double bangle = angle;
			double slope = AimLineAttack(bangle, MISSILERANGE);
		
			for (int i = 0; i < 3; i++)
			{
				double ang = bangle + Random2[SPosAttack]() * (22.5/256);
				//Console.Printf("i: %d, angle: %.8f, slope: %.8f", i, ang, slope);

				int damage = A_CalcDamageFormula(3,random(1,5),0.015,0.3334,0.1667,0.01);
				if (kc_bulletstracers == 0)
				{
					LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
				}
				else
				{
					actor TraceShot;
					TraceShot = A_SpawnProjectile("ZombieBulletTracer", 56, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
					if (TraceShot) 
					{
						KCBulletTracer TraceShotKC;
						TraceShotKC = KCBulletTracer(TraceShot);
						if (TraceShotKC) TraceShotKC.finaldamagedealt = damage;
					}
				}
			}
		}
	}
	
	void A_SPosAttackUseAtkSound()
	{
		if (target)
		{
			A_StartSound(AttackSound, CHAN_WEAPON);
			A_SPosAttackInternal();
		}
	}
	
	States
	{
		Spawn:
			SPID AB 10 A_Look();
			Loop;
		See:
			SPID A 0
			{
				user_shotsfired = 0;
				user_walksound = 0;
			}
			SPID AABBCCDDEEFF 3
			{
				user_walksound++;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { bAVOIDMELEE = true; }
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					if (A_CheckWalkSnd()) A_StartSound("spider/walk",CHAN_BODY); 
				}
				A_KCChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			Loop;
		Missile:
			#### # 0 A_DynamicMusic();
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("SpidMastChaingunCooldown")))
				{
					if (kc_monsterlevelenabledflags) { user_shotsfiredmax += random((50 + (CountInv("MonsterLevel") / 3)),(75 + (CountInv("MonsterLevel") / 1.5))); }
					else { user_shotsfiredmax = random(50,75); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			SPID A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 5.625; // 22.5;
				user_shotzaccuracy = 0.0;
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 70) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 50) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 30) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 10) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			SPID A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID G 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID G 0 A_MonsterRefire(10,"See");
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID H 4 BRIGHT 
			{
				if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				else if (kc_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(3); }

				if (kc_bulletstracers == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_SpawnProjectile("ZombieBulletTracer", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				A_DynamicMusic();
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID H 1 A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain:
			SPID I 3;
			SPID I 3 A_KCPain();
			Goto See;
		Death:
			SPID J 20 A_Scream();
			SPID K 10 A_NoBlocking();
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S -1 A_BossDeath();
			Stop;
		Ice:
			SPID I 5 A_GenericFreezeDeath();
			SPID I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SPID S 30;
			SPID QRPONMLK 10;
			SPID J 20;
			goto See;
	}
}
class Demolisher : KCCreature { } // Filler for later implementation
class HadesSphere : KCCreature { } // Filler for later implementation
class HSOverlord : KCCreature { } // Filler for later implementation
class HadesElemental : KCCreature { } // Filler for later implementation
class HadesOverlord : KCCreature { } // Filler for later implementation


class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	mixin MonsterCollider;
	default
	{
		+PUSHABLE
		Tag "Explosive Barrel";
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
		ProjectilePassHeight 32;
		//$Sprite "BAR1A0"
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 BRIGHT;
			BEXP B 5 Bright
			{
				A_Scream();
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
				A_AlertMonsters();
			}
			BEXP C 5 BRIGHT;
			BEXP D 10 BRIGHT 
			{
				A_Explode(128,128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive");
			}
			BEXP E 10 BRIGHT;
			TNT1 A 1050 BRIGHT A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}

// Heretic
class IceLich : KCCreature { } // Filler for later implementation
class DSparilMountedNew : KCCreature { } // Filler for later implementation
class DSparilUnmountedNew : KCCreature { } // Filler for later implementation
// Hexen
class KoraxNew : KCCreature { } // Filler for later implementation
// Strife
// Custom
class HellCleric : KCCreature { } // Filler for later implementation
class HellClericDVDS : KCCreature { } // Filler for later implementation
class HellClericSpectral : KCCreature { } // Filler for later implementation
class UltraMastermind : KCCreature { } // Filler for later implementation