version "4.12"

class UIKeybinds
{
	static string getKeyboard(string keybind) 
	{
		Array<int> keyInts;
		Bindings.GetAllKeysForCommand(keyInts, keybind);
		return Bindings.NameAllKeys(keyInts);
	}
}

enum ECheckSolidFootingFlags
{
	CSF_SOLIDGROUND = 1,
	CSF_SOLIDACTORS = 2,
	
	CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

enum DMObj
{
	DMG_NO_DODGE = 8192,
	DMG_CANTKILL = 16384,
	DMG_NODASHAVOID = 32768,
	DMG_IGNOREDEF = 65536,
	DMG_NO_SARMOR = 131072,
	DMG_FIXEDDMG = 262144,
}

// Services? V:
class KC_Service : Service
{
}

// An global variables thinker [attempting to get around ACS use for certain things >.>]
class KCGlobalVariables : Thinker
{
	bool heiwavhardmodifier;
	int GameMode;
	int MapsFinished;
	int ClassCheck;
	int PlayerLevel;
	int TruePlayerLevel;
	int PlayerATK, TruePlayerATK;
	int PlayerDEF, TruePlayerDEF;
	int PlayerSPD, TruePlayerSPD;
	int PlayerVIT, TruePlayerVIT;
	int PlayerIQ, TruePlayerIQ;
	int PlayerGUTS, TruePlayerGUTS;
	int PlayerLUCK, TruePlayerLUCK, TempLUCK;
	int Experience;
	int MaxHealthTrue;
	int HealthLevelAdd;
	int HealthNoRPGAdd;
	int HealthNoRPGAdd2;
	int HealthBonusAdd;
	int MaxPsychicPoints;
	int MaxPsychicPointsRF;
	int PPLevelAdd;
	int PPNoRPGAdd;
	double PPNoRPGAdd2;
	int PPBonusAdd;
	int MaxPPLimit;
	int MaxMagicPoints;
	int MPLevelAdd;
	int MPNoRPGAdd;
	double MPNoRPGAdd2;
	int MPBonusAdd;
	int MaxMPLimit;

	double VitalityPieces;
	int VitalityCurrHPBoosts;
	int VitalityCurrHPBoosts2;
	double IQPieces;
	int IQCurrPPBoosts;
	int IQCurrPPBoosts2;
	double SensesPieces;
	int SensesCurrMPBoosts;
	int SensesCurrMPBoosts2;
	int MassLevelAdd;
	int MassNoRPGAdd;
	double MassNoRPGAdd2;
	int MassBonusAdd;
	int AirLevelAdd;
	int AirNoRPGAdd;
	int AirNoRPGAdd2;
	int AirBonusAdd;
	int BaseStartMaxHealth;
	int BaseStartMaxPP;
	int BaseStartMaxMP;
	int DashCharge;
	int BaseDashChargeMax;
	int TotalMonstersKilled;
	int TotalItemsGrabbed;
	int TotalSecretsFound;
	double atkfct, deffct, spdfct, jmpfct, suvfct, mssfct, evdfct;
	array<bool> AllKills, AllItems, AllSecrets, AllCompletion;
	array<int> NumKills, NumItems, NumSecrets;
	array<int> MaxKills, MaxItems, MaxSecrets;
	array<int> MapNum;
	array<int> AllKillsTimer, AllItemsTimer, AllSecretsTimer, AllCompletionTimer;
	array<bool> AllKillsSound, AllItemsSound, AllSecretsSound, AllCompletionSound;

	double timefreeze1duration;
	double timefreeze1cooldown;
	double timefreeze2duration;
	double timefreeze2cooldown;
	double timefreeze3duration;
	double timefreeze3cooldown;
	bool PlayingCCards;
	array<int> MiscellaneousVars;
	
	KCGlobalVariables Init()
	{
		ChangeStatNum(STAT_STATIC); // Change this to STAT_STATIC if persisting between maps is desired.
		return self;
	}
	
	static KCGlobalVariables Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("KCGlobalVariables",STAT_STATIC); // Change this to STAT_STATIC if persisting between maps is desired.
		let p = KCGlobalVariables(it.Next());
		if (p == null)
		{
			p = new("KCGlobalVariables").Init();
		}
		return p;
	}
}

#include "zscript/KC-actors.zc"
#include "zscript/KC-compatibility.zc"
#include "zscript/KC-effects.zc"
#include "zscript/KC-events.zc"
#include "zscript/KC-intermission.zc"
#include "zscript/KC-items.zc"
#include "zscript/KC-ldl.zc"
#include "zscript/KC-misc.zc"
#include "zscript/KC-mixins.zc"
#include "zscript/KC-monsters.zc"
#include "zscript/KC-monsters-doom.zc"
#include "zscript/KC-monsters-heretic.zc"
#include "zscript/KC-monsters-hexen.zc"
#include "zscript/KC-monsterspawners.zc"
#include "zscript/KC-players.zc"
#include "zscript/KC-projectiles.zc"
#include "zscript/KC-specvuln.zc"
#include "zscript/KC-statfunc.zc"
#include "zscript/KC-statusbars.zc"
#include "zscript/KC-weapons.zc"
#include "zscript/KC-weaponsextra.zc"
#include "zscript/KC-tilt.zc"
#include "zscript/KC-tips.zc"
// Extra
#include "zscript/KC-ccardscompat.zc"
#include "zscript/KC-dmghudind.zc"


// Aetherius to KC steps
//~dvds_expgains~ -> ~kc_expgains~
// EE to KC steps
//~exex_expenabled~ -> ~kc_expgains~